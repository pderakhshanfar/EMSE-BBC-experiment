/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:24:47 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)28;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String string0 = " IgnoreHeaderCase:ignored";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Appendable appendable0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) " IgnoreHeaderCase:ignored", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      CSVFormat.newFormat('W');
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.valueOf("Excel");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Excel");
      Locale locale0 = new Locale("InformixUnloadCsv", "a", "a");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Excel";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      mockPrintStream0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        Charset.forName("9u6)E0JG");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9u6)E0JG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char char0 = 'b';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7daq|7P";
      stringArray0[1] = "N";
      stringArray0[2] = "D[z.yGv2Ytv$y";
      stringArray0[3] = "\r\n";
      stringArray0[4] = "p!fmhocVvr1:3";
      stringArray0[5] = "HV[|>,:`6";
      stringArray0[6] = "org.apache.commons.csv.Assertions";
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeader(stringArray0);
      cSVFormat3.MYSQL.format(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = "bC=\\LR>9_Oyw {B;";
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("bC=LR>9_Oyw {B;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.bC=LR>9_Oyw {B;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat.Predefined.values();
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          String string0 = "TDF";
          CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
          CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(false);
          MockFile mockFile0 = new MockFile((File) null, "TDF");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.POSTGRESQL_CSV.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"TDF\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)11;
      byte[] byteArray1 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)28;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)11;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat.newFormat('R');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("f=24Y0T f'~A'`(<");
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat5.hashCode();
      cSVFormat5.POSTGRESQL_CSV.hashCode();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("f=24Y0T f'~A'`(<", "f=24Y0T f'~A'`(<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // f=24Y0T f'~A'`(<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-104);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Character character0 = new Character('$');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.withHeader((String[]) null);
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('E');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("QuoteChar=<");
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("QuoteChar=<");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat6;
      PrintStream printStream0 = mockPrintStream0.printf("Mapping for %s not found, expected one of %s", objectArray0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(printStream0, "M!$B");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("RFC4180");
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('J');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("(XC'#Siui0c$");
      cSVFormat5.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(';');
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.withDelimiter('X');
      try { 
        MockURI.URI(">m:Ult7 dKCD -'/0H", "R", "w", 1440, "The escape character and the delimiter cannot be the same ('", "reader", "@'DtW].}n<UG=%");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: >m:Ult7 dKCD -'/0H://R@w:1440The%20escape%20character%20and%20the%20delimiter%20cannot%20be%20the%20same%20('?reader#@'DtW].%7Dn%3CUG=%25
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Y');
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(stringArray0);
      Character character0 = new Character(':');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat5.getHeaderComments();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("yrt/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.yrt/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('0');
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("EOF whilst processing escape sequence");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)14;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      byteArray0[2] = (byte)11;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat0.print((Object) "EOF whilst processing escape sequence", (Appendable) mockFileWriter0, false);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[6];
      cSVFormat0.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("rGqSL~~'{xt", objectArray0);
      cSVFormat1.print((Object) cSVFormat_Predefined0, (Appendable) printWriter0, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat5.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[3];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('q');
      cSVFormat1.MYSQL.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.POSTGRESQL_TEXT.withCommentMarker('q');
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('B');
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat4.TDF.withTrailingDelimiter(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat7 = cSVFormat5.withTrim();
      cSVFormat7.TDF.toString();
      cSVFormat7.equals(cSVFormat3);
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat4.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RecordSeparator=<";
      stringArray0[1] = "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat2.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      objectArray1[0] = object0;
      cSVFormat0.MYSQL.withIgnoreHeaderCase(true);
      cSVFormat0.format(objectArray1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.Object@0000000004");
      // Undeclared exception!
      try { 
        cSVFormat0.println(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withEscape('\"');
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat2.MYSQL.withCommentMarker('a');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat3.MYSQL.toString();
      CSVFormat cSVFormat6 = cSVFormat3.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('^');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character0);
      cSVFormat7.EXCEL.withRecordSeparator("EIqRBxJh=&A<#$~CS;");
      CSVFormat cSVFormat8 = cSVFormat2.withHeader((String[]) null);
      Byte byte0 = new Byte((byte)20);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CommentStart=<");
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      cSVFormat8.MYSQL.print((Object) byte0, (Appendable) printWriter0, true);
      cSVFormat6.getCommentMarker();
      cSVFormat6.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('^');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('q');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      cSVFormat5.withTrailingDelimiter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2028");
      cSVFormat4.print((Appendable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withHeader((Class<? extends Enum<?>>) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "-.nt";
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.format(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) cSVFormat0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.print((Object) "\"org.apache.commons.csv.CSVFormat@0000000002\",\"org.apache.commons.csv.CSVFormat@0000000002\",", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Character character0 = new Character('=');
      cSVFormat1.EXCEL.withEscape('=');
      Character character1 = Character.valueOf('X');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withSkipHeaderRecord();
      cSVFormat5.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat6.withAutoFlush(true);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat6;
      cSVFormat7.MYSQL.format(objectArray0);
      String[] stringArray0 = new String[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "";
      stringArray0[1] = "M>N";
      stringArray0[2] = "m!8MM'WRVx-";
      stringArray0[3] = "C'mwbf,)O1";
      cSVFormat3.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("m!8MM'WRVx-", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      cSVFormat3.print((Appendable) printWriter0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) ", mapping=", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N\tN\tN\tN");
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      cSVFormat1.withEscape('6');
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.withQuote('9');
      String string0 = "R";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("R", "F,p}wr|m+UWakB");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // F,p}wr|m+UWakB
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('V');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.POSTGRESQL_CSV.withHeader((ResultSetMetaData) null);
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('V');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('V')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withAutoFlush(true);
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      cSVFormat1.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat0.POSTGRESQL_TEXT.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      char char0 = 'w';
      cSVFormat2.withEscape('w');
      // Undeclared exception!
      try { 
        Charset.forName("R");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // R
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('@');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.DEFAULT.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ") invalid parse sequence";
      stringArray0[1] = "InformixUnloadCsv";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "XllX";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [) invalid parse sequence, InformixUnloadCsv, , , XllX]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #i##9m}Y");
      Character.valueOf('m');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Appendable appendable0 = null;
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.print((Object) charBuffer1, (Appendable) charBuffer1, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "==|T\u0001ih1| pAE2O";
      stringArray0[1] = "url";
      stringArray0[2] = "9F5s \"$F01,|";
      stringArray0[3] = "aQ";
      stringArray0[4] = "@sxnp";
      stringArray0[5] = "iW=xXfV>*_(";
      stringArray0[6] = "{yl/6t_u*|U0";
      stringArray0[7] = "<;Af#";
      stringArray0[8] = "]vuoq(XuAO]B!]";
      cSVFormat3.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat2.POSTGRESQL_TEXT.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("No quotes mode set but no escape character is set");
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.TDF.withTrim(false);
      cSVFormat5.DEFAULT.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(true);
      cSVFormat6.MYSQL.withEscape(',');
      cSVFormat4.getEscapeCharacter();
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator(' ');
      cSVFormat7.RFC4180.withNullString("");
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-4075));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "qB8cP<";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("qB8cP<");
      cSVFormat0.TDF.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withAllowMissingColumnNames(true);
      String string1 = "@Sap4S66x";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("@Sap4S66x");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.POSTGRESQL_CSV.print((File) mockFile0, charset0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      CSVFormat.newFormat('x');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat6.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('\u001F');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharBuffer charBuffer0 = CharBuffer.allocate(278);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Character.valueOf('T');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('p');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = new Character('v');
      cSVFormat1.TDF.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('o');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('o');
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat5.TDF.withEscape('v');
      cSVFormat5.toString();
      String[] stringArray0 = new String[5];
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
      stringArray0[0] = "Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[2] = "Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[3] = "Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[4] = "Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false' in [Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<,> Escape=<o> QuoteChar=<o> RecordSeparator=<
         // > EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.EXCEL.withIgnoreEmptyLines();
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.DEFAULT.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "3Jp}( %CP";
      // Undeclared exception!
      try { 
        cSVFormat6.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , , , 3Jp}( %CP]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((-2080.9412));
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) 'h';
      objectArray0[3] = (Object) 'h';
      objectArray0[4] = (Object) 'h';
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) double0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CharBuffer charBuffer0 = CharBuffer.allocate(121);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('F');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("j?:kIzx");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("EjS*C\">Kp");
      Character character0 = new Character('K');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "{a4l #i##9m}Y";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "j?:kIzx";
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      objectArray0[8] = (Object) "";
      cSVFormat1.format(objectArray0);
      cSVFormat5.withNullString("qby;IK|hfGz;}6V(Vt'");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote('u');
      Character character0 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withEscape(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withTrailingDelimiter(true);
      cSVFormat3.getEscapeCharacter();
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('.');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Character character0 = new Character('`');
      cSVFormat4.withQuote(character0);
      String string0 = "EORECORD";
      URI uRI0 = MockURI.create("EORECORD");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((-2080.9412));
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      cSVFormat1.POSTGRESQL_TEXT.withCommentMarker('h');
      charArray0[1] = 'h';
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) 'h';
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) 'h';
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withTrim(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The escape character and the delimiter cannot be the same ('");
      cSVFormat2.format(objectArray0);
      CSVFormat.Predefined.values();
      cSVFormat1.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) rowSetMetaDataImpl0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((-2080.9412));
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      charArray0[7] = 'h';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) double0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.RFC4180.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.equals(cSVFormat0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('Y');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.MYSQL.withQuote('1');
      objectArray0[0] = (Object) cSVFormat0;
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat1.withQuoteMode(quoteMode0);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      cSVFormat1.printRecord(stringWriter1, objectArray0);
      cSVFormat0.MYSQL.format(objectArray0);
      cSVFormat0.getTrailingDelimiter();
      cSVFormat0.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000004";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Index for header '%s' is %d but CSVRecord only has %d values!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Index for header '%s' is %d but CSVRecord only has %d values!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) cSVFormat_Predefined0, (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "();Syi";
      objectArray0[1] = (Object) "();Syi";
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) cSVFormat2, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("InformixUnload");
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      cSVFormat0.TDF.withQuote('s');
      MockFile mockFile0 = new MockFile("`u@hXc''ANvzfjRE&(");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print((File) mockFile0, charset0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat1.withQuote('G');
      cSVFormat0.getTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat_Predefined0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Ad`J-M");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('V');
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      cSVFormat6.withRecordSeparator('R');
      Character character0 = new Character('5');
      cSVFormat4.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('N');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('q');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.RFC4180.withQuote('q');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat2.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat2.getRecordSeparator();
      StringWriter stringWriter0 = new StringWriter(29);
      cSVFormat5.println(stringWriter0);
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.equals(cSVFormat1);
      cSVFormat3.withRecordSeparator('[');
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('M');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat0.hashCode();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat.valueOf("MySQL");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) "$?2zH}=v#57?uer", (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.toString();
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('o');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat3.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      char char0 = 'u';
      cSVFormat2.withRecordSeparator('u');
      cSVFormat1.getQuoteCharacter();
      cSVFormat3.withIgnoreEmptyLines(false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat0.print(object0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('h');
      cSVFormat2.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "N,M>8rw<9K";
      stringArray0[1] = "^-5ct3VQx xX";
      stringArray0[2] = "CommentStart=<";
      stringArray0[3] = "zY4Mqe4sQqT&";
      stringArray0[4] = "K)fKVeM{+WTF}l%5#";
      stringArray0[5] = "";
      stringArray0[6] = "Q}bbAA]s,lWu UvWs8.";
      stringArray0[7] = "Y `.X~WW5Q";
      stringArray0[8] = "Parameter '";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('5');
      MockFile mockFile0 = new MockFile("Parameter '", "RecordSeparator=<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      Object[] objectArray0 = new Object[0];
      cSVFormat3.INFORMIX_UNLOAD_CSV.printRecord(outputStreamWriter0, objectArray0);
      cSVFormat3.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withTrim();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '[';
      charArray0[8] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, (-1211), (-1211));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.withTrim();
      cSVFormat4.withEscape('b');
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('8');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[0];
      cSVFormat5.format(objectArray0);
      cSVFormat2.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("R");
      cSVFormat6.printer();
      Object object0 = new Object();
      Object[] objectArray1 = new Object[0];
      cSVFormat0.MYSQL.withIgnoreHeaderCase();
      cSVFormat4.format(objectArray1);
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat2.withNullString("Excel");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withTrim();
      cSVFormat1.equals(cSVFormat0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "E";
      stringArray0[1] = "\n";
      stringArray0[2] = "Unexpected Token type: ";
      stringArray0[3] = "";
      stringArray0[4] = ".X\"c,]jo{7";
      stringArray0[5] = "\u2029";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('2');
      cSVFormat4.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat4.printer();
      Object object1 = new Object();
      cSVFormat3.format(objectArray0);
      Object object2 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = CSVFormat.valueOf("PostgreSQLCsv");
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) "PostgreSQLCsv";
      objectArray0[3] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[5] = (Object) cSVFormat_Predefined0;
      objectArray0[6] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = ")`\\*@";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(")`*@");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      char char0 = 'i';
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('i');
      cSVFormat4.withIgnoreHeaderCase();
      StringReader stringReader0 = new StringReader("R");
      cSVFormat2.TDF.parse(stringReader0);
      File file0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('D');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat2.withEscape('g');
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.withQuote((Character) null);
      StringWriter stringWriter0 = new StringWriter(1816);
      StringWriter stringWriter1 = stringWriter0.append('i');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, (-1933), (-320));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('B');
      cSVFormat5.withNullString("lv2jy];PPE");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      Character character0 = Character.valueOf('n');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('n')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(2550);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000003";
      objectArray1[6] = object0;
      cSVFormat1.printer();
      objectArray1[7] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000003";
      Object object1 = new Object();
      objectArray1[8] = object1;
      cSVFormat1.format(objectArray1);
      Object object2 = new Object();
      cSVFormat0.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) null;
      objectArray0[6] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.withQuote('T');
      cSVFormat1.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[^!}cS");
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      char char0 = 'k';
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withCommentMarker('k');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("[^!}cS");
      cSVFormat3.getNullString();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      // Undeclared exception!
      try { 
        cSVFormat2.MYSQL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('H');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat3.equals(cSVFormat1);
      CSVFormat.Predefined.values();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("The header contains a duplicate entry: '");
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat1.TDF.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('y');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Short short0 = new Short((short) (-472));
      cSVFormat3.equals(short0);
      CSVFormat.Predefined.values();
      cSVFormat0.getEscapeCharacter();
      cSVFormat5.withCommentMarker((Character) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat3.POSTGRESQL_TEXT.withRecordSeparator('U');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withNullString("~)_.P{j!Qu5t");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('*');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m{t'jJx[AjEQpG!";
      cSVFormat2.POSTGRESQL_TEXT.withHeader(stringArray0);
      Character character0 = Character.valueOf('.');
      cSVFormat2.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('h');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('|');
      cSVFormat2.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k}t'[ B~LgE(Et\"9)");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote('~');
      cSVFormat0.RFC4180.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat2.hashCode();
      Character character0 = new Character('~');
      cSVFormat1.withEscape(character0);
      cSVFormat3.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      Character character1 = new Character('~');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('~')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) null;
      cSVFormat2.format(objectArray0);
      cSVFormat1.withTrim();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('H');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('2');
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat3.equals(cSVFormat1);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('[');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.equals(cSVFormat1);
      cSVFormat3.withRecordSeparator('[');
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim(true);
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat0.TDF.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('-');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      cSVFormat2.format(objectArray0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      Character character0 = new Character('-');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat2.withAutoFlush(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat4.format(objectArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('x');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      String string0 = null;
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      cSVFormat2.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.MYSQL.withRecordSeparator('x');
      cSVFormat3.MYSQL.withRecordSeparator("wD");
      String string1 = "path";
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('k');
      Character character0 = new Character('Z');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.withCommentMarker('=');
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.MYSQL.parse(pipedReader0);
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat2.getIgnoreSurroundingSpaces();
      Character character0 = new Character('');
      cSVFormat1.withEscape(character0);
      cSVFormat2.withRecordSeparator("The escape character cannot be a line break");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat4.withNullString("{a4l #ti##9m>}Y");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf(':');
      Character character0 = new Character('r');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "{a4l #ti##9m>}Y";
      cSVFormat4.format(objectArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("6A#LpA oB%w@m-c/7");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('j');
      cSVFormat3.withQuote('<');
      Character character0 = new Character('j');
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) "6A#LpA oB%w@m-c/7", (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('w');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat5.getIgnoreSurroundingSpaces();
      Character character0 = new Character('0');
      cSVFormat1.withEscape(character0);
      cSVFormat2.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The escape character cannot be a line break");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('k');
      Character character0 = new Character('C');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVFormat3.getRecordSeparator();
      cSVFormat1.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Class<Token.Type> class0 = Token.Type.class;
      PipedReader pipedReader0 = new PipedReader(21);
      cSVFormat2.TDF.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) class0;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray1[5] = object0;
      objectArray1[6] = (Object) cSVFormat0;
      objectArray1[7] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray1);
      cSVFormat1.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) pipedWriter0;
      try { 
        cSVFormat0.INFORMIX_UNLOAD.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      cSVFormat0.RFC4180.withNullString("");
      cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.equals(cSVFormat1);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, cSVFormat_PredefinedArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.MYSQL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat2.withRecordSeparator('#');
      cSVFormat7.getTrailingDelimiter();
      StringWriter stringWriter0 = new StringWriter(238);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)97;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 13, (int) (byte)33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      cSVFormat0.getNullString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('W');
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat5.getIgnoreSurroundingSpaces();
      Character character0 = new Character('');
      cSVFormat4.withEscape(character0);
      cSVFormat4.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('[');
      cSVFormat2.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Character character0 = new Character('e');
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withRecordSeparator((String) null);
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = object0;
      cSVFormat1.format(objectArray0);
      Object object2 = new Object();
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreHeaderCase();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('-');
      cSVFormat1.withQuote('-');
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.format(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreSurroundingSpaces();
      Character character0 = new Character('');
      cSVFormat1.withEscape(character0);
      cSVFormat3.withRecordSeparator("");
      // Undeclared exception!
      try { 
        cSVFormat2.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('B');
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('/');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.getQuoteCharacter();
      cSVFormat1.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('?');
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[3] = (Object) null;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVFormat1.withRecordSeparator('9');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat3.equals(objectArray0[1]);
      CSVFormat.Predefined.values();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('B');
      cSVFormat0.toString();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      cSVFormat4.format(objectArray0);
      cSVFormat4.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('K');
      cSVFormat6.withEscape('B');
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('-');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('-');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) rowSetMetaDataImpl0;
      cSVFormat3.format(objectArray0);
      Object object0 = new Object();
      cSVFormat3.withRecordSeparator('%');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat5.equals(objectArray0[5]);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreHeaderCase();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('\\');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat4.equals(cSVFormat0);
      CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('R');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Delimiter=<d> Escape=<u> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat3.format(objectArray0);
      cSVFormat3.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat2.withDelimiter('B');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('$');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      Integer integer0 = new Integer(28);
      cSVFormat2.equals(integer0);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("N\torg.apache.commons.csv.CSVFormat@0000000002\tN\tjava.lang.Object@0000000003");
      cSVFormat4.getDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat4.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      Character character0 = new Character('-');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('-');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('-')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('1');
      cSVFormat2.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('<');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) "{a4l #ti##9m>}Y";
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat6.withHeader(class1);
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat1.withAutoFlush(false);
      cSVFormat4.format(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat6.withAutoFlush(false);
      cSVFormat7.getIgnoreHeaderCase();
      cSVFormat1.getIgnoreSurroundingSpaces();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ",\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "N\tN\tN\tN";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[XV!y''[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat1.withCommentMarker('8');
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('Z');
      cSVFormat0.withEscape('s');
      cSVFormat4.isCommentMarkerSet();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withDelimiter('g');
      cSVFormat3.getAutoFlush();
      Object object1 = new Object();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat2.withTrim(true);
      cSVFormat6.getAutoFlush();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat7.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat8.withIgnoreSurroundingSpaces();
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat1.toString();
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.isEscapeCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator(';');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat0.equals(objectArray0[2]);
      cSVFormat0.getDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat0.withHeader(resultSet0);
      cSVFormat5.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat7.withHeader(class0);
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      cSVFormat6.withFirstRecordAsHeader();
      cSVFormat8.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = new Character('-');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Y#JtELoCy1AQyffgy");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class1);
      cSVFormat5.INFORMIX_UNLOAD.withRecordSeparator('m');
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator("\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000004\"");
      cSVFormat6.format(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      cSVFormat4.INFORMIX_UNLOAD.withDelimiter('g');
      cSVFormat3.getAutoFlush();
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat2.toString();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat5.isEscapeCharacterSet();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('K');
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat8 = cSVFormat6.withHeader(class0);
      CSVFormat cSVFormat9 = cSVFormat8.withAutoFlush(false);
      cSVFormat9.format(objectArray0);
      cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat10 = cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat11 = cSVFormat10.withAllowMissingColumnNames();
      cSVFormat11.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreSurroundingSpaces();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = object0;
      cSVFormat6.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[XV!y''[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat6 = cSVFormat3.withQuote('Z');
      cSVFormat3.toString();
      CSVFormat cSVFormat7 = cSVFormat6.RFC4180.withIgnoreHeaderCase();
      cSVFormat4.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) "[XV!y''[";
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat6.format(objectArray0);
      cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreHeaderCase();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat5.format(objectArray0);
      cSVFormat3.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[XV!y''[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zfo:8fO@TN");
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('j');
      Character character0 = new Character('j');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withQuote('y');
      cSVFormat1.toString();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      cSVFormat5.format(objectArray0);
      cSVFormat3.format(objectArray0);
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat4.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('K');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("#uvvAypF@BYo");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "#uvvAypF@BYo";
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat8 = cSVFormat7.withHeaderComments(objectArray0);
      CSVFormat cSVFormat9 = cSVFormat8.withAutoFlush(false);
      cSVFormat6.format(objectArray0);
      cSVFormat9.withIgnoreSurroundingSpaces();
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat6.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('f');
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator((String) null);
      cSVFormat4.TDF.withQuote('i');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 116);
      cSVFormat6.println(bufferedWriter0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      cSVFormat0.hashCode();
      int int0 = 35;
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = '<';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      try { 
        pipedWriter0.write(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('3');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter("k65u3?\"k2vX^");
      cSVFormat0.print((Object) "k65u3?\"k2vX^", (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('-');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat2.withAutoFlush(true);
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat6.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.MYSQL.withTrim();
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat2.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('s');
      cSVFormat5.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("cOjFktQVW+/4zmrKYW");
      cSVFormat1.withEscape('d');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withRecordSeparator('d');
      cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('B');
      cSVFormat0.toString();
      cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      cSVFormat4.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('[');
      cSVFormat1.INFORMIX_UNLOAD.withRecordSeparator('[');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      try { 
        cSVFormat0.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[0] = (Object) cSVFormat1;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      cSVFormat0.withDelimiter('g');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(false);
      cSVFormat6.isEscapeCharacterSet();
      cSVFormat6.withRecordSeparator('7');
      cSVFormat2.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Delimiter=<,> QuoteChar=<w> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<w> RecordSeparator=<\r
         // > SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('K');
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat5.equals(cSVFormat1);
      cSVFormat3.getDelimiter();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat4.withHeader(resultSet1);
      cSVFormat0.withIgnoreEmptyLines();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat4.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreHeaderCase();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat2.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"org.apache.commons.csv.CSVFormat@0000000007\"\t\"org.apache.commons.csv.CSVFormat@0000000005\"\t\"java.lang.Object@0000000008\"", false);
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('K');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.equals(cSVFormat1);
      cSVFormat3.getDelimiter();
      try { 
        MockURI.URI("DiMohNh", "\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"", "org.apache.commons.csv.Token", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DiMohNh://\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"org.apache.commons.csv.Token#Delimiter=%3C%09%3E%20Escape=%3C%22%3E%20QuoteChar=%3C%22%3E%20NullString=%3CN%3E%20RecordSeparator=%3C%0A%3E%20SurroundingSpaces:ignored%20IgnoreHeaderCase:ignored%20SkipHeaderRecord:false
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('W');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('W')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.getTrailingDelimiter();
      cSVFormat2.hashCode();
      cSVFormat0.withNullString("8Y0 LV0AtpaJ5j^");
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVFormat0.TDF.withIgnoreSurroundingSpaces(false);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getRecordSeparator();
      cSVFormat0.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TI7j_n]OR.+YP-&_i");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[0];
      cSVFormat2.MYSQL.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.equals(character0);
      cSVFormat0.withAllowMissingColumnNames(false);
      Character character1 = new Character('M');
      cSVFormat1.withQuote(character1);
      cSVFormat3.getRecordSeparator();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character.valueOf('-');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat2.withAutoFlush(false);
      cSVFormat5.format(objectArray0);
      MockFile mockFile0 = new MockFile("Default,Excel,InformixUnload,InformixUnloadCsv,MySQL,PostgreSQLCsv,PostgreSQLText,RFC4180,TDF\r\norg.apache.commons.csv.CSVFormat@0000000001");
      mockFile0.toPath();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat3.withHeader(resultSet1);
      cSVFormat6.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat2.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat4.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('K');
      cSVFormat4.withIgnoreEmptyLines(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      try { 
        MockURI.URI("DiMohNh", "\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"", "org.apache.commons.csv.Token", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DiMohNh://\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"org.apache.commons.csv.Token#Delimiter=%3C%09%3E%20Escape=%3C%22%3E%20QuoteChar=%3C%22%3E%20NullString=%3CN%3E%20RecordSeparator=%3C%0A%3E%20IgnoreHeaderCase:ignored%20SkipHeaderRecord:false
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('-');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('9');
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.equals(cSVFormat3);
      cSVFormat2.getDelimiter();
      try { 
        MockURI.URI("", "", "org.apache.commons.csv.Token", "org.apache.commons.csv.CSVPrinter");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://org.apache.commons.csv.Token#org.apache.commons.csv.CSVPrinter
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Mapping for %s not found, expected one of %s");
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.getAutoFlush();
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat5.withAutoFlush(true);
      cSVFormat5.format(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('B');
      cSVFormat0.toString();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      cSVFormat4.format(objectArray0);
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat6.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      String string1 = "<.JUo`Q:c<GEi <_k";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<.JUo`Q:c<GEi <_k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character.valueOf('8');
      Character character0 = new Character('8');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('8');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.withQuote('2');
      cSVFormat1.toString();
      cSVFormat1.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withEscape('x');
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(true);
      cSVFormat2.POSTGRESQL_TEXT.withRecordSeparator('x');
      cSVFormat0.getQuoteCharacter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) null, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat5.withDelimiter('t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('t')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('>');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat4.withDelimiter('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('>')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "file";
      objectArray0[1] = (Object) quoteMode0;
      mockPrintWriter0.printf(locale0, "file", objectArray0);
      Double double0 = new Double(87);
      cSVFormat2.print((Object) double0, (Appendable) mockPrintWriter0, true);
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('\"');
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet1);
      CSVFormat cSVFormat7 = cSVFormat6.withTrim();
      cSVFormat7.withTrim();
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('g');
      cSVFormat3.format(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreSurroundingSpaces();
      Character character0 = new Character('r');
      Character character1 = new Character('r');
      cSVFormat3.withEscape(character1);
      cSVFormat0.withRecordSeparator("N\tjava.lang.Object@0000000002\t\n\tN\t\n\tjava.lang.Object@0000000002\tjava.lang.Object@0000000002");
      Integer integer0 = new Integer(110);
      cSVFormat2.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.getAutoFlush();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat2.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      cSVFormat3.withTrim();
      cSVFormat1.getTrim();
      cSVFormat4.isQuoteCharacterSet();
      cSVFormat1.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "file";
      objectArray0[1] = (Object) quoteMode0;
      mockPrintWriter0.printf(locale0, "file", objectArray0);
      Double double0 = new Double(87);
      cSVFormat2.print((Object) double0, (Appendable) mockPrintWriter0, true);
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat6.withHeader(class1);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat7.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
      cSVFormat3.withRecordSeparator('~');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat0.withEscape('&');
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrim(false);
      cSVFormat2.getAutoFlush();
      cSVFormat5.withIgnoreEmptyLines();
      cSVFormat1.toString();
      cSVFormat0.isEscapeCharacterSet();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat8 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat6.withHeader((ResultSet) null);
      CSVFormat cSVFormat9 = cSVFormat8.withRecordSeparator('O');
      cSVFormat9.RFC4180.withEscape((Character) null);
      cSVFormat3.equals(cSVFormat4);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat5.getDelimiter();
      CSVFormat cSVFormat10 = CSVFormat.TDF;
      cSVFormat10.withCommentMarker('O');
      cSVFormat7.withIgnoreEmptyLines();
      cSVFormat8.withRecordSeparator("Oroa^?G9jj:T+");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      cSVFormat2.withTrim();
      cSVFormat5.getTrim();
      cSVFormat4.isQuoteCharacterSet();
      cSVFormat1.withRecordSeparator("ExV");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('B');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat3.withTrim(true);
      cSVFormat1.getAutoFlush();
      CSVFormat.Predefined.values();
      MockFile mockFile0 = new MockFile((File) null, "|org.apache.commons.csv.CSVFormat@0000000003|org.apache.commons.csv.CSVFormat@0000000002");
      cSVFormat1.withCommentMarker('M');
      cSVFormat6.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat1.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat5.toString();
      cSVFormat4.isEscapeCharacterSet();
      ResultSet resultSet0 = null;
      cSVFormat1.withHeader((ResultSet) null);
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.equals(cSVFormat1);
      cSVFormat3.getDelimiter();
      try { 
        MockURI.URI("xmMDSsZSG", (String) null, "org.apache.commons.csv.Token", "DiMohNh");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: xmMDSsZSG:org.apache.commons.csv.Token#DiMohNh
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('<');
      cSVFormat5.withTrim();
      cSVFormat3.getTrim();
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('K');
      cSVFormat4.withIgnoreEmptyLines(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.getDelimiter();
      try { 
        MockURI.URI("DiMohNh", "\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"", "org.apache.commons.csv.Token", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DiMohNh://\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"org.apache.commons.csv.Token#Delimiter=%3C%09%3E%20Escape=%3C%22%3E%20QuoteChar=%3C%22%3E%20NullString=%3CN%3E%20RecordSeparator=%3C%0A%3E%20IgnoreHeaderCase:ignored%20SkipHeaderRecord:false
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat5.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader(resultSet0);
      cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat6.toString();
      cSVFormat2.withTrim();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat7.getTrim();
      cSVFormat3.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("`");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "`";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "`";
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat2.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat6.toString();
      cSVFormat5.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      cSVFormat2.withTrim();
      cSVFormat4.getTrim();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(124);
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.getNullString();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[7] = object1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreHeaderCase();
      Object object2 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RFC4180");
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('K');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.equals(cSVFormat1);
      cSVFormat3.getDelimiter();
      try { 
        MockURI.URI("DiMohNh", "\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"", "org.apache.commons.csv.Token", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DiMohNh://\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"org.apache.commons.csv.Token#Delimiter=%3C%09%3E%20Escape=%3C%22%3E%20QuoteChar=%3C%22%3E%20NullString=%3CN%3E%20RecordSeparator=%3C%0A%3E%20SurroundingSpaces:ignored%20IgnoreHeaderCase:ignored%20SkipHeaderRecord:false
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.equals(cSVFormat0);
      cSVFormat1.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
      cSVFormat3.withTrim();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.TDF.withEscape('W');
      cSVFormat1.withQuote('=');
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreHeaderCase();
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B@< 2x3Fr>Q%3S[JZ";
      stringArray0[1] = "9,,lK,T`7-";
      stringArray0[2] = "{wxsGky@s~U+Fo";
      stringArray0[3] = "";
      stringArray0[4] = "Q,;idWM4@h";
      stringArray0[5] = "The comment start and the escape character cannot be the same ('";
      cSVFormat2.TDF.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      Character character0 = new Character('$');
      cSVFormat1.TDF.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("E'F-3+p'rCU[j6KO");
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.RFC4180.withHeader(class0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{a4l #ti##9m>}Y");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('-');
      cSVFormat1.withRecordSeparator("{a4l #ti##9m>}Y");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('&');
      cSVFormat3.withTrim(false);
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.toString();
      cSVFormat0.isEscapeCharacterSet();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat4.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreHeaderCase();
      Object object0 = new Object();
      Object[] objectArray0 = null;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat3.withCommentMarker('|');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('J');
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat5.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withAllowMissingColumnNames();
      objectArray0[1] = (Object) null;
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat2.getDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      cSVFormat1.withRecordSeparator(':');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withTrim(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat2.equals(cSVFormat0);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      cSVFormat3.getAutoFlush();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat0.isEscapeCharacterSet();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('K');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.equals(cSVFormat1);
      cSVFormat3.getDelimiter();
      try { 
        MockURI.URI("DiMohNh", "\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"", "org.apache.commons.csv.Token", "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DiMohNh://\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN\t\"java.lang.Object@0000000005\"org.apache.commons.csv.Token#Delimiter=%3C%09%3E%20Escape=%3C%22%3E%20QuoteChar=%3C%22%3E%20NullString=%3CN%3E%20RecordSeparator=%3C%0A%3E%20SurroundingSpaces:ignored%20IgnoreHeaderCase:ignored%20SkipHeaderRecord:false
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat1.withQuote('=');
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat4.MYSQL.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('f');
      cSVFormat0.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat2.toString();
      cSVFormat6.getHeader();
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat5.withQuoteMode(quoteMode1);
      cSVFormat4.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      mockPrintStream0.format("", objectArray0);
      cSVFormat4.println(mockPrintStream0);
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat6.withAutoFlush(true);
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      cSVFormat4.getAutoFlush();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.toString();
      Character character0 = new Character('R');
      Character character1 = new Character('>');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker(character1);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat8 = cSVFormat1.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat8.withHeader(class0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter(true);
      cSVFormat9.getIgnoreHeaderCase();
      cSVFormat5.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class0;
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat4.toString();
      cSVFormat5.getHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withEscape('[');
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1661);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Double double0 = new Double(1427.8477103705989);
      cSVFormat0.print((Object) "", (Appendable) printWriter0, false);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat2.withHeader(class1);
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat4.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
      cSVFormat6.withDelimiter('<');
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[12];
      objectArray0[8] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.getTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('5');
      cSVFormat0.hashCode();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat6.toString();
      cSVFormat5.getHeader();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.getHeaderComments();
      cSVFormat4.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      char char0 = 'B';
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.TDF.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('@');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = CSVFormat.newFormat('@');
      cSVFormat1.MYSQL.withNullString("");
      cSVFormat1.RFC4180.hashCode();
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat3.EXCEL.withDelimiter('L');
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      cSVFormat4.POSTGRESQL_TEXT.withDelimiter('2');
      Character character0 = new Character('[');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      cSVFormat2.getHeaderComments();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat3.getHeader();
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker(character0);
      cSVFormat1.withNullString("");
      cSVFormat5.printer();
      cSVFormat6.withTrim(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      cSVFormat1.withTrim();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withDelimiter('!');
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("vSGf>>");
      cSVFormat0.print((Object) "\r\n", (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat3.DEFAULT.format(objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.getAutoFlush();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.toString();
      Character character0 = new Character('G');
      cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      cSVFormat0.format(objectArray0);
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat5.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      cSVFormat0.withRecordSeparator('{');
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.format("", (Object[]) null);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker((Character) null);
      cSVFormat5.getQuoteMode();
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat3.DEFAULT.format(objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat1.isEscapeCharacterSet();
      Character character0 = Character.valueOf('h');
      cSVFormat2.DEFAULT.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      cSVFormat4.equals("org.apache.commons.csv.CSVFormat@0000000009,");
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat4.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat0.printer();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('{');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat0.withHeader(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat3.isNullStringSet();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat1.isEscapeCharacterSet();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("", cSVFormat1.getNullString());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("PJ");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Character character0 = new Character(';');
      cSVFormat3.POSTGRESQL_CSV.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getAllowMissingColumnNames();
      Character character1 = Character.valueOf('E');
      cSVFormat0.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Object) cSVFormat2, (Appendable) stringBuffer0, false);
      cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.RFC4180.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat2.withDelimiter('w');
      cSVFormat6.getQuoteCharacter();
      Character character2 = new Character('E');
      cSVFormat4.withEscape(character2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "j=y$IGm";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) "j=y$IGm";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) character0;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      cSVFormat1.getAutoFlush();
      CSVFormat.Predefined.values();
      MockFile mockFile0 = new MockFile((File) null, "\"org.apache.commons.csv.CSVFormat@0000000005\"\t\"j=y$IGm\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\tj=y$IGm\t\"javax.sql.rowset.RowSetMetaDataImpl@0000000006\"\t\"j=y$IGm\"\t\"org.apache.commons.csv.CSVFormat@0000000005\"\t\"java.lang.Character@0000000007\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat4.printRecord(mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "2!{?AVyBUV";
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "j=y$IGm";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "j=y$IGm";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) character0;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("\"org.apache.commons.csv.CSVFormat@0000000005\"\t\"j=y$IGm\"\t\"org.apache.commons.csv.CSVFormat@0000000002\"\tj=y$IGm\tj=y$IGm\t\"j=y$IGm\"\t\"org.apache.commons.csv.CSVFormat@0000000005\"\t\"java.lang.Character@0000000006\"");
      cSVFormat3.toString();
      cSVFormat4.isEscapeCharacterSet();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat5.POSTGRESQL_CSV.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('E');
      cSVFormat2.equals(cSVFormat5);
      cSVFormat3.getDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j=y$IGm";
      stringArray0[1] = "Delimiter=<\t> Escape=<E> QuoteChar=<\"> NullString=<j=y$IGm> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker((Character) null);
      cSVFormat7.getQuoteMode();
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.format("", (Object[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator('u');
      cSVFormat4.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.withHeaderComments((Object[]) null);
      cSVFormat4.isNullStringSet();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments((Object[]) null);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat1.withDelimiter('R');
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) "j=y$IGm";
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat4.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        rowSetMetaDataImpl0.setColumnName(24, "fJT}`A&f");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :24
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('6');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#|G(${3zy]}T");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat0.DEFAULT.print((Object) cSVFormat4, (Appendable) printWriter0, false);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat5 = cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) character0;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withFirstRecordAsHeader();
      objectArray1[6] = (Object) cSVFormat2;
      cSVFormat3.println(printWriter0);
      cSVFormat6.withAutoFlush(false);
      cSVFormat5.getTrim();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = CSVFormat.newFormat('3');
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat0.printer();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withDelimiter(']');
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      cSVFormat1.println(printStream0);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      cSVFormat2.getTrim();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\" in ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) "\" in ";
      objectArray0[3] = (Object) null;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat1.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('@');
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Integer integer0 = new Integer(43);
      cSVFormat3.print((Object) integer0, (Appendable) stringBuffer0, true);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat2.withRecordSeparator('@');
      cSVFormat5.isCommentMarkerSet();
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat7.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat6;
      cSVFormat7.withHeaderComments(objectArray0);
      cSVFormat4.isNullStringSet();
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat8.getIgnoreSurroundingSpaces();
      cSVFormat4.isEscapeCharacterSet();
      cSVFormat7.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('o');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Character.valueOf('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character.valueOf('-');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat3.DEFAULT.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat3.withIgnoreHeaderCase();
      try { 
        MockFile.createTempFile("path", "U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("PJ");
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat0.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("Unexpected Quote value: ", (Object[]) null);
      cSVFormat4.println(printStream0);
      cSVFormat1.withAutoFlush(false);
      cSVFormat4.getTrim();
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat4.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.isNullStringSet();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat3.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.POSTGRESQL_CSV.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = new Character(';');
      Character character1 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat3.INFORMIX_UNLOAD.withRecordSeparator(';');
      cSVFormat3.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class1);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Character.valueOf('4');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      cSVFormat0.withTrim(false);
      Character character1 = new Character('T');
      Character character2 = new Character('{');
      cSVFormat2.withEscape(character2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.csv.Lexer";
      stringArray0[1] = "<~y3E#";
      stringArray0[2] = "Y8Q1B7Tj}";
      stringArray0[3] = "";
      stringArray0[4] = "7p-h7MV[85+X]U";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [org.apache.commons.csv.Lexer, <~y3E#, Y8Q1B7Tj}, , 7p-h7MV[85+X]U, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withCommentMarker('e');
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withDelimiter('O');
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "j=y$IGm";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) "j=y$IGm";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) character0;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      cSVFormat2.getAutoFlush();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat3.toString();
      cSVFormat4.isEscapeCharacterSet();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.POSTGRESQL_CSV.withHeader(resultSet0);
      cSVFormat1.withRecordSeparator('E');
      cSVFormat2.equals(cSVFormat5);
      cSVFormat3.getDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j=y$IGm";
      stringArray0[1] = "Delimiter=<\t> Escape=<E> QuoteChar=<\"> NullString=<j=y$IGm> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker((Character) null);
      cSVFormat7.getQuoteMode();
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.hashCode();
      cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat4.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Character.valueOf('-');
          File file0 = MockFile.createTempFile("path", "path");
          Charset charset0 = Charset.defaultCharset();
          PipedWriter pipedWriter0 = new PipedWriter();
          PipedReader pipedReader0 = new PipedReader(pipedWriter0);
          CSVFormat cSVFormat0 = CSVFormat.TDF;
          Path path0 = file0.toPath();
          // Undeclared exception!
          try { 
            cSVFormat0.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/path0path\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('-');
      Character.valueOf('n');
      Character character0 = Character.valueOf('n');
      cSVFormat3.withCommentMarker(character0);
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat1.withIgnoreHeaderCase();
      File file0 = MockFile.createTempFile("path", "o_Na");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(file0, charset0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat5.parse(pipedReader0);
      cSVFormat4.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat3.DEFAULT.format(objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.getAutoFlush();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat1.isEscapeCharacterSet();
      Character character0 = Character.valueOf('h');
      cSVFormat2.DEFAULT.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('W');
      cSVFormat4.equals("org.apache.commons.csv.CSVFormat@0000000009,");
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat4.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, cSVFormat_PredefinedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Appendable appendable0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('J');
      Character character0 = new Character('J');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('J')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withHeader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat1.POSTGRESQL_TEXT.withHeader(resultSet1);
      CSVFormat.newFormat('?');
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat3.toString();
      CSVFormat.Predefined.values();
      cSVFormat2.getNullString();
      Character character0 = Character.valueOf('\"');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("K5[w{Y[9b_9i[nM)4J");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      cSVFormat2.printer();
      cSVFormat1.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('-');
      Character character0 = Character.valueOf('-');
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_CSV.withCommentMarker(character0);
      cSVFormat5.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase();
      File file0 = MockFile.createTempFile("path", "path");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat6.print(file0, charset0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat1.parse(pipedReader0);
      cSVFormat1.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.EXCEL.hashCode();
      cSVFormat2.POSTGRESQL_CSV.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.MYSQL.withQuoteMode(quoteMode0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat3.MYSQL.withCommentMarker('a');
      // Undeclared exception!
      try { 
        cSVFormat3.RFC4180.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('l', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('l');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('l')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat$1");
      char char0 = 'J';
      Character character0 = Character.valueOf('J');
      cSVFormat1.TDF.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ALL";
      stringArray0[1] = "l";
      stringArray0[2] = "The escape character cannot be a line break";
      stringArray0[3] = "";
      Character character0 = new Character('r');
      cSVFormat0.DEFAULT.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withTrim(false);
      cSVFormat2.POSTGRESQL_CSV.toString();
      stringArray0[4] = "org.apache.commons.csv.Token";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      cSVFormat3.EXCEL.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1513);
      cSVFormat2.parse(pipedReader0);
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat2.getNullString();
      cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      cSVFormat_Predefined0.getFormat();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.toString();
      cSVFormat1.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.DEFAULT.withIgnoreHeaderCase(true);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat1.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.withRecordSeparator("");
      try { 
        MockURI.URI("", "yJs}3Ktd9}q_", "yJs}3Ktd9}q_", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://yJs}3Ktd9}q_%7FyJs%7D3Ktd9%7Dq_
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter(34);
      boolean boolean0 = true;
      cSVFormat2.INFORMIX_UNLOAD.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      Character character0 = Character.valueOf('M');
      cSVFormat2.POSTGRESQL_TEXT.withCommentMarker(character0);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.format((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('6');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#|G(${3zy]}T");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat0.DEFAULT.print((Object) cSVFormat4, (Appendable) printWriter0, false);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat5 = cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) character0;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) cSVFormat1;
      cSVFormat5.DEFAULT.withFirstRecordAsHeader();
      objectArray1[6] = (Object) cSVFormat2;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.MYSQL.withHeader(class0);
      objectArray1[7] = (Object) quoteMode0;
      cSVFormat5.DEFAULT.format(objectArray1);
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      MockFile mockFile0 = new MockFile("b%r=oC");
      MockFile.createTempFile("b%r=oC", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(false);
      String[] stringArray0 = new String[0];
      cSVFormat3.POSTGRESQL_CSV.withHeader(stringArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      Character character0 = Character.valueOf('g');
      cSVFormat1.INFORMIX_UNLOAD.withQuote(character0);
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat0.getQuoteMode();
      cSVFormat3.getHeaderComments();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat4.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) cSVFormat_Predefined0, (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.withHeader((String[]) null);
      String string0 = "Escape=<";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      cSVFormat1.println(printStream0);
      cSVFormat2.withAutoFlush(false);
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char char0 = 'Z';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      String string0 = "]xMx':k'o4@eip}X";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("]xMx':k'o4@eip}X", "]xMx':k'o4@eip}X");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]xMx':k'o4@eip}X
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.DEFAULT.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      String string0 = "MINIMAL";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("MINIMAL");
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withQuoteMode(quoteMode0);
      cSVFormat5.DEFAULT.withEscape('>');
      CSVFormat cSVFormat6 = cSVFormat4.POSTGRESQL_TEXT.withTrim();
      cSVFormat6.TDF.withTrim(true);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat4.withQuoteMode(quoteMode1);
      cSVFormat8.DEFAULT.withEscape((Character) null);
      cSVFormat8.getSkipHeaderRecord();
      CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(false);
      cSVFormat9.RFC4180.withAutoFlush(true);
      cSVFormat7.getIgnoreEmptyLines();
      CSVFormat.Predefined.values();
      cSVFormat9.withTrim(true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("MINIMAL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.MINIMAL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("PJ");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Character character0 = new Character(';');
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withCommentMarker(character0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.withRecordSeparator('5');
      cSVFormat5.hashCode();
      cSVFormat3.toString();
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('j');
      cSVFormat3.hashCode();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat1.toString();
      cSVFormat4.getHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat4.MYSQL.withTrailingDelimiter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      cSVFormat7.POSTGRESQL_TEXT.printer();
      cSVFormat7.hashCode();
      CSVFormat.newFormat('\\');
      cSVFormat0.getIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(false);
      cSVFormat0.MYSQL.withNullString("?.:tUu$H'");
      CSVFormat cSVFormat9 = cSVFormat8.TDF.withTrailingDelimiter(false);
      cSVFormat9.POSTGRESQL_TEXT.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat10 = cSVFormat_Predefined0.getFormat();
      cSVFormat10.INFORMIX_UNLOAD.withNullString("");
      Character character0 = Character.valueOf('\\');
      CSVFormat cSVFormat11 = cSVFormat6.withEscape(character0);
      CSVFormat cSVFormat12 = cSVFormat2.withTrailingDelimiter();
      cSVFormat12.EXCEL.toString();
      cSVFormat11.withRecordSeparator('\\');
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Parater ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('F');
      cSVFormat1.DEFAULT.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat5.format(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat4.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      cSVFormat4.withHeaderComments(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{$gR(MAY=}=QB^drm");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(']');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.getQuoteCharacter();
      cSVFormat4.withIgnoreEmptyLines(true);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) "$?2zH}=v#57?uer", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withAllowMissingColumnNames();
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.withHeader(class0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.withAutoFlush(true);
      cSVFormat4.getIgnoreHeaderCase();
      CSVFormat.Predefined.values();
      cSVFormat5.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.getTrailingDelimiter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(87);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      cSVFormat1.println(printStream0);
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_TEXT.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat2.withAutoFlush(false);
      cSVFormat3.getTrim();
      cSVFormat4.withRecordSeparator(' ');
      cSVFormat1.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) charArrayWriter0, (Appendable) charArrayWriter0, false);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.equals("`d_gxMf1$");
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat1.getRecordSeparator();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat.newFormat('|');
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withNullString((String) null);
      String string0 = "G2a?ZkXJI7.";
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withRecordSeparator("G2a?ZkXJI7.");
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withIgnoreHeaderCase();
      cSVFormat3.DEFAULT.withTrailingDelimiter();
      cSVFormat1.INFORMIX_UNLOAD.withCommentMarker('M');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.MYSQL.withHeader(resultSet0);
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter(true);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withCommentMarker('e');
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.EXCEL.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('5');
      cSVFormat0.POSTGRESQL_TEXT.hashCode();
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      cSVFormat3.toString();
      cSVFormat1.getHeader();
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withEscape('d');
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('D');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('d');
      cSVFormat3.toString();
      cSVFormat4.withIgnoreHeaderCase(false);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('e');
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Z";
      stringArray0[2] = "vyR4<vRx='re";
      cSVFormat0.POSTGRESQL_CSV.toString();
      stringArray0[3] = "%w^E]`gxg4zSX%I L^J";
      cSVFormat1.TDF.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withHeader(stringArray0);
      char char0 = 'y';
      Character character0 = new Character('y');
      cSVFormat2.withDelimiter('.');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character0);
      cSVFormat4.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withIgnoreEmptyLines();
      cSVFormat1.withAllowMissingColumnNames();
      Character character1 = Character.valueOf('y');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.TDF.withHeader(class0);
      cSVFormat2.withEscape(character1);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      cSVFormat6.RFC4180.withHeaderComments(stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.printer();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      Object object0 = new Object();
      cSVFormat1.getNullString();
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\n";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [
         // , null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      cSVFormat2.getNullString();
      String string0 = "7x.49T!Q!c9W";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7x.49T!Q!c9W";
      stringArray0[1] = null;
      stringArray0[2] = "~)oVH:T8";
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        cSVFormat3.POSTGRESQL_TEXT.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [7x.49T!Q!c9W, null, ~)oVH:T8, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("2!A{?AVyBUV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.2!A{?AVyBUV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("~r- H0+rt.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.~r- H0+rt.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('h');
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withDelimiter(']');
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.DEFAULT.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withAllowMissingColumnNames();
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.RFC4180.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      cSVFormat0.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('t');
      cSVFormat0.print((Object) ",,,,,,", (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'r';
      charArray0[2] = 'v';
      charArray0[3] = '~';
      charArray0[4] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.POSTGRESQL_TEXT.print((Appendable) charBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat0.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(124);
      cSVFormat0.INFORMIX_UNLOAD.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('W');
      cSVFormat0.isCommentMarkerSet();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat3.DEFAULT.format(objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.getAutoFlush();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.toString();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('W');
      cSVFormat4.equals("org.apache.commons.csv.CSVFormat@0000000009,org.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat0.getDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<\t> Escape=<^> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true";
      stringArray0[1] = "Delimiter=<\t> Escape=<^> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<\t> Escape=<^> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:true' in [Delimiter=<\t> Escape=<^> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:true, Delimiter=<\t> Escape=<^> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:true]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = new Character(';');
      Character character1 = Character.valueOf('E');
      cSVFormat0.TDF.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.INFORMIX_UNLOAD.withRecordSeparator(';');
      cSVFormat2.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character1;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("PJ");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.EXCEL.withFirstRecordAsHeader();
      Character character0 = new Character(';');
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getAllowMissingColumnNames();
      Character character1 = Character.valueOf('E');
      cSVFormat0.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Object) cSVFormat2, (Appendable) stringBuffer0, false);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat7.INFORMIX_UNLOAD.withRecordSeparator(';');
      cSVFormat7.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      cSVFormat8.TDF.withHeader(class0);
      objectArray0[0] = (Object) character1;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat6.isNullStringSet();
      cSVFormat7.getIgnoreSurroundingSpaces();
      cSVFormat8.isEscapeCharacterSet();
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAutoFlush();
      cSVFormat0.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withRecordSeparator('\\');
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[7];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.EXCEL.withNullString("XKe<KHbq");
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("PJ");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withFirstRecordAsHeader();
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      
      Character character0 = new Character(';');
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getAllowMissingColumnNames();
      Character character1 = Character.valueOf('E');
      cSVFormat0.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.print((Object) cSVFormat2, (Appendable) stringBuffer0, false);
      assertEquals(46, stringBuffer0.length());
      
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat9 = cSVFormat8.INFORMIX_UNLOAD.withRecordSeparator(';');
      cSVFormat6.isCommentMarkerSet();
      CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) cSVFormat7;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat7;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat9;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat10.withHeaderComments(objectArray0);
      cSVFormat10.isNullStringSet();
      cSVFormat8.getIgnoreSurroundingSpaces();
      boolean boolean0 = cSVFormat6.isEscapeCharacterSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('l');
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('l', (char)character0);
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNotNull(character0);
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withEscape('d');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('d');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('d')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withNullString("j=y$IGm");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.getDelimiter();
      cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(true);
      cSVFormat4.withSkipHeaderRecord();
      Character character0 = new Character(',');
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((String[]) null);
      // Undeclared exception!
      try { 
        cSVFormat5.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('{')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = cSVFormat0.getHeaderComments();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('l');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('l', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.TDF.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      Character character0 = Character.valueOf('X');
      cSVFormat0.RFC4180.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      Character character1 = Character.valueOf('i');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character1);
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withTrim(true);
      assertTrue(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getAutoFlush());
      
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat8 = cSVFormat7.withAutoFlush(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertTrue(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
  }
}
