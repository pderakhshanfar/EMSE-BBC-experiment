/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:25:27 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat.valueOf("MySQL");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator(", mapping=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.INFORMIX_UNLOAD.parse(pipedReader0);
      cSVFormat4.withEscape('a');
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.DEFAULT.withTrim(false);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat.newFormat('h');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat.valueOf("Excel");
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      StringWriter stringWriter0 = new StringWriter(98);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.MYSQL.toString();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) stringBuffer0;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) stringBuffer0;
      objectArray1[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[4] = (Object) cSVFormat0;
      objectArray1[5] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray1[6] = (Object) cSVFormat2;
      objectArray1[7] = (Object) stringBuffer0;
      objectArray1[8] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P`'KESt*fDtw\"");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat0.MYSQL.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O2HPE(/U";
      stringArray0[1] = "ELf";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+Tp`2_O*J";
      stringArray0[1] = "Delimiter=<";
      stringArray0[2] = "R";
      stringArray0[3] = "$";
      stringArray0[4] = "";
      stringArray0[5] = "]";
      stringArray0[6] = "R4|+JAgNXj";
      stringArray0[7] = "R3yR$F{";
      stringArray0[8] = "pi";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withDelimiter('?');
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Character character0 = new Character('l');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("NON_NUMERIC");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "NON_NUMERIC");
      // Undeclared exception!
      try { 
        cSVFormat5.println(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withCommentMarker(character0);
      cSVFormat0.hashCode();
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      MockFile mockFile0 = new MockFile("PD6LQKTY+FI%u8V");
      MockFile mockFile1 = new MockFile(mockFile0, "B'g");
      File file0 = MockFile.createTempFile("COMMENT", "PD6LQKTY+FI%u8V", (File) mockFile1);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.MYSQL.print(file0, charset0);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape('l');
      cSVFormat3.TDF.hashCode();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat4.DEFAULT.withHeader(class1);
      CSVFormat cSVFormat6 = cSVFormat5.withNullString("3Rv>Os,-3C>*ob)i");
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withNullString("3Rv>Os,-3C>*ob)i");
      cSVFormat6.hashCode();
      cSVFormat7.DEFAULT.withSkipHeaderRecord();
      cSVFormat7.withCommentMarker('K');
      Character character0 = new Character('l');
      cSVFormat5.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('@');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      cSVFormat3.withDelimiter('\'');
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      String string0 = ">Am";
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(">Am");
      cSVFormat0.TDF.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat5.withTrailingDelimiter(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat8 = cSVFormat3.TDF.withHeader(class0);
      cSVFormat8.POSTGRESQL_CSV.withAutoFlush(false);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("-^UK%O#K_b;?]+");
      cSVFormat6.parse(stringReader0);
      cSVFormat2.withQuote('-');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat7.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "#%6mU", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((-3455.121917650951));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) double0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) double0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char char0 = 'Y';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getRecordSeparator();
      cSVFormat0.DEFAULT.withRecordSeparator("\n");
      String string0 = "";
      cSVFormat1.MYSQL.printer();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat2.withAllowMissingColumnNames(true);
      StringReader stringReader0 = new StringReader("?<Jc`d?.");
      cSVFormat2.POSTGRESQL_TEXT.parse(stringReader0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("jr%q)7X", "jr%q)7X");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jr%q)7X
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[10];
      objectArray0[6] = (Object) stringBuffer0;
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.printRecord(stringBuffer0, objectArray0);
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      StringWriter stringWriter0 = new StringWriter(116);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuffer0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      objectArray0[2] = (Object) stringWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat4.printRecord(stringWriter1, objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("X");
      cSVFormat5.INFORMIX_UNLOAD.withRecordSeparator('k');
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat4.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      StringWriter stringWriter0 = new StringWriter(116);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) stringBuffer0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      objectArray0[2] = (Object) stringWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat4.printRecord(stringWriter1, objectArray0);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = stringWriter0.append('k');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      objectArray0[2] = (Object) stringWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat4.printRecord(stringWriter2, objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("X");
      cSVFormat5.INFORMIX_UNLOAD.withRecordSeparator('k');
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat4.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat1.POSTGRESQL_TEXT.withTrailingDelimiter(true);
      cSVFormat0.withSkipHeaderRecord();
      StringWriter stringWriter0 = new StringWriter(116);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) stringBuffer0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.DEFAULT.println(stringBuffer0);
      cSVFormat3.TDF.withQuoteMode(quoteMode0);
      objectArray0[2] = (Object) stringWriter0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x?~znx;\"p");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.printRecord(stringBuffer0, objectArray0);
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.withTrailingDelimiter(true);
      StringWriter stringWriter0 = new StringWriter(98);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.MYSQL.toString();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) stringBuffer0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[10];
      objectArray0[6] = (Object) stringBuffer0;
      cSVFormat0.printRecord(stringBuffer0, objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Double double0 = new Double((-3455.121917650951));
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) double0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "TDF";
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      char char0 = '>';
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('>');
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('>')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[1] = "\r\n";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.POSTGRESQL_CSV.withSkipHeaderRecord();
      cSVFormat1.format(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('~');
      cSVFormat2.format(stringArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byte byte0 = (byte) (-2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("f](u~|/b6-cLJt+j<");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[32];
      objectArray0[0] = (Object) "+";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat3.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat1.RFC4180.withSkipHeaderRecord(true);
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withCommentMarker(':');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.toString();
      cSVFormat5.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.TDF.hashCode();
      Object[] objectArray0 = new Object[32];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.RFC4180.withCommentMarker(' ');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      cSVFormat0.getCommentMarker();
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('y');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat5.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PostgreSQLCsv");
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat.valueOf("PostgreSQLCsv");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(114);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) cSVFormat_Predefined0, (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[17];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat.valueOf("Default");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.getEscapeCharacter();
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[17];
      objectArray0[5] = (Object) " o&LGc^kRHWH'7imHtP";
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) ",,,,,\" o&LGc^kRHWH'7imHtP\",,,,,,,,,,,", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[25];
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) ",,,,,,,,,,,,,,,,,,,,,,,,", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withQuote('2');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ALL_NON_NULL");
      cSVFormat1.POSTGRESQL_CSV.withNullString("\n");
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Character character0 = new Character('G');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) "\r\n", (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat0.withAutoFlush(true);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 9, 9);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      stringWriter2.append('*');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.print((Object) stringBuffer0, (Appendable) stringWriter1, true);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withDelimiter('<');
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.equals(cSVFormat0);
      CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z]//";
      stringArray0[1] = "O";
      stringArray0[2] = "J/0mn";
      stringArray0[3] = "VgKU$1eoW wC)|";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Escape=<");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      String[] stringArray0 = new String[0];
      cSVFormat5.TDF.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.POSTGRESQL_TEXT.withAutoFlush(false);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withIgnoreEmptyLines();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.withCommentMarker('P');
      cSVFormat1.hashCode();
      QuoteMode quoteMode1 = QuoteMode.NONE;
      cSVFormat1.withQuoteMode(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
          CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withRecordSeparator("xn6Gzbi~Qu50ZKOO");
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          cSVFormat2.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
          cSVFormat1.toString();
          String string0 = "";
          CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
          CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
          MockFile mockFile0 = new MockFile("", "$+4+-BpEh");
          MockFile mockFile1 = new MockFile(mockFile0, "Delimiter=<y> SkipHeaderRecord:false");
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat4.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/$+4+-BpEh/Delimiter=<y> SkipHeaderRecord:false\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      Character character1 = Character.valueOf('h');
      cSVFormat4.MYSQL.withEscape(character1);
      cSVFormat4.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)35;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.println((Appendable) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) " o&LGc^kRHWH'7imHtP";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      Character character0 = new Character('<');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.DEFAULT.withDelimiter('<');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      Object object0 = new Object();
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat4.format(objectArray0);
      try { 
        MockURI.URI("^MXR@", "nullNnull", "+", "^MXR@");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^MXR@://nullNnull+#%5EMXR@
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " EmptyLines:ignored");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) null;
      objectArray0[4] = (Object) quoteMode0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = new Object[17];
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "PostgreSQLText";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat4.withHeaderComments(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('?');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('!');
      cSVFormat2.withQuoteMode(quoteMode0);
      Character character1 = new Character('6');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character1);
      cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVFormat3.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(' ');
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withSkipHeaderRecord(false);
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("|Cd@@z[");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat5 = cSVFormat0.EXCEL.withQuote(' ');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "|Cd@@z[";
      cSVFormat5.MYSQL.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat7 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat0.MYSQL.withTrailingDelimiter();
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 5);
      cSVFormat8.parse(pipedReader0);
      CSVFormat cSVFormat9 = cSVFormat4.withTrim(false);
      cSVFormat4.withQuote('&');
      cSVFormat7.withCommentMarker('&');
      cSVFormat9.toString();
      Character character1 = new Character(' ');
      CSVFormat cSVFormat10 = cSVFormat4.withCommentMarker(character1);
      cSVFormat2.withIgnoreHeaderCase(false);
      Object[] objectArray1 = new Object[0];
      cSVFormat10.format(objectArray1);
      cSVFormat5.withTrim();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      cSVFormat4.withNullString("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat5 = cSVFormat1.EXCEL.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat2.withEscape('W');
      cSVFormat6.withQuote('W');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", true);
      cSVFormat5.print((Object) cSVFormat1, (Appendable) mockFileWriter0, false);
      cSVFormat0.withRecordSeparator("3y|2el");
      cSVFormat3.withRecordSeparator("");
      cSVFormat3.EXCEL.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.printer();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withTrim();
      cSVFormat1.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.getTrim();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('+');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('B');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat1.withTrailingDelimiter(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      Character character0 = new Character('m');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.equals(cSVFormat5);
      cSVFormat2.withTrim();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat7 = cSVFormat6.withNullString("org.apache.commons.csv.CSVPrinter@0000000004\tjava.io.PipedReader@0000000007\torg.apache.commons.csv.CSVFormat@0000000005B");
      cSVFormat7.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl1;
      objectArray0[1] = (Object) rowSetMetaDataImpl1;
      cSVFormat1.format(objectArray0);
      Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('v');
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat4.format(objectArray0);
      cSVFormat2.getTrailingDelimiter();
      cSVFormat4.isCommentMarkerSet();
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^9VR^!");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "^9VR^!", (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~M0");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "~M0";
      objectArray0[4] = (Object) "~M0";
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.withNullString(") invalid char between encapsulated token and delimiter");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.print((Object) null, (Appendable) charArrayWriter0, true);
      cSVFormat1.withCommentMarker(':');
      cSVFormat2.printer();
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat1.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.print((Object) "", (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('r');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      cSVFormat0.getTrailingDelimiter();
      cSVFormat3.isCommentMarkerSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('S');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      cSVFormat1.withEscape(character0);
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat6.format(objectArray0);
      Character character1 = Character.valueOf('f');
      cSVFormat0.withEscape(character1);
      cSVFormat4.printer();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) quoteMode0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.TDF.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat1.printer();
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat5.equals(cSVFormat0);
      cSVFormat3.withTrim();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      Character character0 = new Character('P');
      cSVFormat4.withCommentMarker(character0);
      Long long0 = new Long((-3829L));
      cSVFormat5.print((Object) long0, (Appendable) charArrayWriter0, true);
      cSVFormat0.withCommentMarker(')');
      cSVFormat5.printer();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat6.MYSQL.printRecord(charArrayWriter1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          cSVFormat0.POSTGRESQL_TEXT.withEscape('U');
          CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
          CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
          CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
          cSVFormat1.getQuoteCharacter();
          MockFile mockFile0 = new MockFile("\r\n");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat3.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\r
             // \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withDelimiter('P');
      Character character0 = new Character('n');
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "ppmsIkmopF>'B\";u=";
      cSVFormat2.format(objectArray0);
      cSVFormat4.getTrailingDelimiter();
      cSVFormat5.getAutoFlush();
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('m');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('c');
      Character character1 = new Character('c');
      cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat8 = cSVFormat7.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) "E{!";
      objectArray0[3] = (Object) "E{!";
      objectArray0[4] = (Object) character0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat7;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat5.format(objectArray0);
      cSVFormat8.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      cSVFormat2.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat3.format(objectArray1);
      Character character0 = Character.valueOf('2');
      cSVFormat4.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('X')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Excel");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('e');
      Character character0 = new Character('n');
      Character character1 = Character.valueOf('=');
      cSVFormat3.withQuote(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) character0;
      cSVFormat2.format(objectArray0);
      cSVFormat3.getTrailingDelimiter();
      cSVFormat4.withCommentMarker('/');
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('b');
      cSVFormat3.getNullString();
      cSVFormat0.withIgnoreHeaderCase(false);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[6] = (Object) cSVFormat0;
      objectArray1[7] = (Object) rowSetMetaDataImpl0;
      objectArray1[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray1);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.Predefined.values();
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withRecordSeparator("7eG");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1736);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('#');
      Character character0 = new Character('3');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '3';
      charArray0[2] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat5.print((Object) charBuffer0, (Appendable) charArrayWriter1, false);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat6.withCommentMarker('#');
      cSVFormat6.printer();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat7.withIgnoreEmptyLines(true);
      CharArrayWriter charArrayWriter2 = null;
      try {
        charArrayWriter2 = new CharArrayWriter((-2949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2949
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
      File file0 = MockFile.createTempFile(" SkipHeaderRecord:", " SkipHeaderRecord:", (File) null);
      MockFile mockFile0 = new MockFile(file0, "(line ");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("~RaBQ947/n@.b{v%");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) "ppmsIkmopF>'B\";u=";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "~RaBQ947/n@.b{v%";
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('i');
      Character character1 = Character.valueOf('R');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character1);
      cSVFormat3.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator('&');
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat1.format(objectArray0);
      MockFile mockFile0 = new MockFile("javax.sql.rowset.RowSetMetaDataImpl@0000000004\tppmsIkmopF>'B\";u=\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000002\t~RaBQ947/n@.b{v%\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004");
      MockFile mockFile1 = new MockFile("s_Sn2", "\\!Xddf?_");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "\\!Xddf?_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \\!Xddf?_
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat4.printer();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.format(objectArray0);
      cSVFormat2.equals(cSVFormat1);
      cSVFormat5.withTrim();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('R');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('U');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Character character1 = new Character('U');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withQuote(character1);
      cSVFormat1.POSTGRESQL_TEXT.withEscape(character1);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.TDF.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      cSVFormat6.toString();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.RFC4180.parse(pipedReader0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('d');
      cSVFormat5.withTrim();
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat_Predefined0;
      cSVFormat0.withIgnoreEmptyLines();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002");
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withHeaderComments(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('j');
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withCommentMarker('j');
      cSVFormat4.EXCEL.withEscape('j');
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat4.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat3.withIgnoreEmptyLines(true);
      URI uRI0 = MockURI.URI((String) null, "Ol(e@9C\"5c)/Gb", (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) "\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BA|['XdXZPn|o^?&");
      CSVFormat.Predefined.values();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "inputStream");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withSkipHeaderRecord();
      cSVFormat3.POSTGRESQL_TEXT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      char char0 = 'h';
      cSVFormat2.EXCEL.withCommentMarker('h');
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator(".Yj1ANB");
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines();
      cSVFormat7.POSTGRESQL_CSV.withTrailingDelimiter(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat5.hashCode();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf(".Yj1ANB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined..Yj1ANB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
      Object object0 = new Object();
      cSVFormat1.getNullString();
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat2.printer();
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(true);
      CSVFormat cSVFormat9 = cSVFormat5.withAutoFlush(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) "N";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat9;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat9.format(objectArray0);
      CSVFormat cSVFormat10 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[19];
      cSVFormat0.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", true);
      cSVFormat0.print((Object) "N\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN", (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("E{!");
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      Double double0 = new Double(2410.32340229778);
      cSVFormat2.equals(cSVFormat3);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
      Character.valueOf('m');
      Character character1 = new Character('m');
      cSVFormat0.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      Character character0 = new Character('9');
      Character character1 = new Character('q');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      cSVFormat5.hashCode();
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat2.getTrailingDelimiter();
      cSVFormat4.withTrailingDelimiter();
      cSVFormat3.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat7 = cSVFormat6.withNullString("bkM(J`@q00J#_c[|D");
      cSVFormat5.withCommentMarker(character0);
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.Predefined.values();
      cSVFormat7.getRecordSeparator();
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      Character character0 = new Character('u');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) charArrayWriter1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.EXCEL.withSkipHeaderRecord();
      Character character0 = new Character('+');
      cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.DEFAULT.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('I');
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      Character character0 = new Character('A');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("X{_9r>`0`Io$!W'YH:");
      Character character1 = new Character('A');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) "X{_9r>`0`Io$!W'YH:";
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('`');
      Character character0 = Character.valueOf('`');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withDelimiter('=');
      Character character0 = new Character('=');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('=')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      cSVFormat2.withRecordSeparator('.');
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat_Predefined0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('U');
      Character character1 = new Character('6');
      cSVFormat2.withQuote(character1);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Character character2 = new Character('U');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character2);
      cSVFormat1.POSTGRESQL_TEXT.withEscape(character2);
      CSVFormat cSVFormat6 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat6.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withDelimiter('=');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat3.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat4 = cSVFormat_Predefined0.getFormat();
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      cSVFormat3.withAllowMissingColumnNames(true);
      boolean boolean0 = true;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "6J*G5=p:Ta]b/:='";
      stringArray0[1] = "";
      stringArray0[2] = "F0vOwB|vs!'$Q-";
      stringArray0[3] = ">*Uln}@";
      stringArray0[4] = "FI:1C)";
      stringArray0[5] = "org.apache.commons.csv.ExtendedBufferedReader";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      charArrayWriter1.append('$');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      charArrayWriter1.append('5');
      Long long0 = new Long((-3514L));
      cSVFormat2.print((Object) long0, (Appendable) charArrayWriter1, false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('z');
      cSVFormat1.printer();
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      int int0 = 3563;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P58m%D");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withAllowMissingColumnNames();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      String string0 = cSVFormat3.getNullString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat6 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat5.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = string0;
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        cSVFormat7.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character0;
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      cSVFormat2.withTrim();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Character character0 = new Character('+');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat4.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.getTrailingDelimiter();
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('I');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      char char0 = 'k';
      cSVFormat2.RFC4180.withCommentMarker('J');
      cSVFormat3.withCommentMarker('k');
      String string0 = "";
      MockFile mockFile0 = new MockFile("", ":M");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "FF$=7S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // FF$=7S
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      cSVFormat0.EXCEL.withSkipHeaderRecord();
      Character character0 = new Character('+');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat3.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "g(3@ZL(5:b,@\n<-<6";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat3;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      Character character0 = Character.valueOf('6');
      CSVFormat cSVFormat5 = cSVFormat1.withQuote(character0);
      cSVFormat5.withIgnoreEmptyLines(false);
      Double double0 = new Double(1121);
      cSVFormat4.equals(character0);
      cSVFormat4.withTrim();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("E{!");
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withTrailingDelimiter(true);
      Character character0 = new Character(']');
      Character character1 = new Character('%');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat0.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat6 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat7;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      charArrayWriter1.append('$');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Object object0 = new Object();
      cSVFormat1.getNullString();
      cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.POSTGRESQL_TEXT.withHeader(class0);
      Double double0 = new Double(1121);
      cSVFormat6.equals(cSVFormat4);
      Character character0 = new Character('$');
      cSVFormat1.withEscape(character0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("^-SI||Ktf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.^-SI||Ktf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.getHeader();
      cSVFormat4.getHeader();
      cSVFormat0.getAutoFlush();
      cSVFormat1.hashCode();
      cSVFormat4.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Double double0 = new Double(3147.5395752);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat2);
      cSVFormat1.withTrim();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7OrO=2Y- #{";
      stringArray0[1] = "Lp)YJ";
      stringArray0[2] = "org.apache.commons.csv.CSVParser";
      stringArray0[3] = "MINIMAL";
      stringArray0[4] = "75Bc.tP5";
      stringArray0[5] = ":2$wCd1,.F";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Character character0 = new Character('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('S');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withNullString("The delimiter cannot be a line break");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character0 = new Character('9');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("?J1,,+{uPnQuq");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('l');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat5.printer();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1993);
      charArrayWriter0.append('a');
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) charArrayWriter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.withTrailingDelimiter(true);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat1.withAllowMissingColumnNames();
      Object object0 = new Object();
      cSVFormat6.getNullString();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat6.withIgnoreEmptyLines(false);
      Double double0 = new Double((-3853.35));
      CSVFormat cSVFormat8 = cSVFormat3.withQuote('$');
      cSVFormat8.equals(cSVFormat7);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.DEFAULT.withHeader(resultSet0);
      Character character0 = new Character('l');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(" odDggkmR/");
      cSVFormat4.withCommentMarker(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " odDggkmR/";
      objectArray0[1] = (Object) charArrayWriter1;
      cSVFormat2.withIgnoreEmptyLines(true);
      Double double0 = new Double((-3532.7));
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.getNullString();
      cSVFormat0.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat4.withQuote('V');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat6;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) class0;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      Character character0 = new Character('3');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withRecordSeparator("E{!");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = cSVFormat0.withEscape('X');
      cSVFormat7.format(objectArray0);
      cSVFormat6.getNullString();
      CSVFormat cSVFormat8 = cSVFormat1.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl2).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreEmptyLines(false);
      Double double0 = new Double(3147.5395752);
      cSVFormat5.equals(cSVFormat0);
      cSVFormat9.withTrim();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat2.getHeader();
      cSVFormat4.getHeader();
      cSVFormat0.getAutoFlush();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('i');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('i');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("ewJ+fF^/J#");
      cSVFormat5.getTrim();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Character character0 = new Character('x');
      cSVFormat2.withQuote(character0);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat0.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments((Object[]) null);
      cSVFormat6.printer();
      cSVFormat6.withTrim(true);
      cSVFormat4.withHeader((String[]) null);
      Character character1 = new Character('n');
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(false);
      Character character2 = Character.valueOf('+');
      cSVFormat7.withQuote(character2);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Character character0 = new Character('+');
      cSVFormat2.withQuote(character0);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withFirstRecordAsHeader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat1.withIgnoreEmptyLines(true);
      Double double0 = new Double(3147.5395752);
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      cSVFormat1.withTrim();
      cSVFormat3.withQuote('+');
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withRecordSeparator("E{!");
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withEscape('X');
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat5.withTrim();
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('V');
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "E2f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "E2f";
      PrintStream printStream0 = mockPrintStream0.format("E2f", objectArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVFormat4;
      objectArray1[2] = (Object) cSVFormat3;
      cSVFormat0.EXCEL.printRecord(outputStreamWriter0, objectArray1);
      CSVFormat cSVFormat5 = cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator('x');
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat9 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat6.withTrailingDelimiter();
      CSVFormat cSVFormat11 = cSVFormat10.withTrim();
      cSVFormat11.POSTGRESQL_CSV.printer();
      CSVFormat cSVFormat12 = cSVFormat7.withEscape('V');
      cSVFormat12.INFORMIX_UNLOAD_CSV.withHeaderComments(stringArray0);
      CSVFormat cSVFormat13 = cSVFormat8.withIgnoreSurroundingSpaces(false);
      cSVFormat13.RFC4180.hashCode();
      cSVFormat7.POSTGRESQL_TEXT.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat8.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat13.getNullString();
      cSVFormat13.getSkipHeaderRecord();
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat9.getCommentMarker();
      cSVFormat5.hashCode();
      cSVFormat4.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat2.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('>');
      cSVFormat0.equals(cSVFormat1);
      cSVFormat1.withNullString("]");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      charArrayWriter0.append('$');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat2.getNullString();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      Double double0 = new Double(1121);
      cSVFormat3.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withRecordSeparator("E{!");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = cSVFormat0.withEscape('X');
      cSVFormat7.format(objectArray0);
      cSVFormat6.getNullString();
      cSVFormat1.withIgnoreHeaderCase(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat8 = cSVFormat0.withHeader(resultSet0);
      cSVFormat8.withIgnoreEmptyLines(false);
      Double double0 = new Double(3147.5395752);
      cSVFormat4.equals(cSVFormat7);
      cSVFormat7.withTrim();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withEscape('`');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      cSVFormat4.format(stringArray0);
      cSVFormat7.getNullString();
      cSVFormat7.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat8 = cSVFormat3.withTrim();
      Double double0 = new Double(3147.5395752);
      cSVFormat8.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('>');
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(true);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker((Character) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) character0;
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(865);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(']');
      Short short0 = new Short((short)10);
      cSVFormat0.print((Object) short0, (Appendable) charArrayWriter1, true);
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat3.INFORMIX_UNLOAD.println(charArrayWriter0);
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) cSVFormat4;
      objectArray1[4] = object0;
      cSVFormat4.format(objectArray1);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat2.getNullString();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat7.withIgnoreEmptyLines(true);
      Short short1 = new Short((short)10);
      cSVFormat6.print((Object) short1, (Appendable) charArrayWriter1, true);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      Double double0 = new Double(0.0);
      cSVFormat4.equals(objectArray0[3]);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.withAutoFlush(true);
      cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("i\"BP<Q$");
      cSVFormat5.withTrailingDelimiter(true);
      Character character0 = new Character(' ');
      Character character1 = new Character('8');
      cSVFormat4.withCommentMarker(character1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[5];
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("E{!");
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.POSTGRESQL_CSV.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      Double double0 = new Double(3147.5395752);
      cSVFormat2.equals(double0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.printer();
      cSVFormat0.withTrim(true);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      Character character0 = new Character('F');
      cSVFormat3.withQuote(character0);
      cSVFormat3.format(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat1.getNullString();
      CSVFormat cSVFormat5 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(true);
      cSVFormat6.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      cSVFormat2.EXCEL.withIgnoreHeaderCase();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      boolean boolean0 = true;
      cSVFormat1.print((Object) cSVFormat1, (Appendable) charArrayWriter0, true);
      cSVFormat0.equals(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('9');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('9')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat1.INFORMIX_UNLOAD.withRecordSeparator('E');
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "No header mapping was specified, the record values can't be accessed by name", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('`');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(']');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = CSVFormat.RFC4180;
      cSVFormat4.printer();
      CSVFormat cSVFormat9 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat9;
      objectArray0[1] = (Object) cSVFormat8;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat7;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat7;
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat10 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat11 = cSVFormat7.withHeader((ResultSetMetaData) null);
      cSVFormat11.getNullString();
      cSVFormat2.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      cSVFormat2.withEscape('Q');
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('3');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) resultSet0;
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      CharBuffer charBuffer1 = CharBuffer.allocate(98);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer1, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrailingDelimiter();
      char char0 = '1';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.DEFAULT.withRecordSeparator("u");
      Character character0 = Character.valueOf('1');
      cSVFormat0.POSTGRESQL_TEXT.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cSVFormat1.POSTGRESQL_TEXT.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      Character character0 = new Character('F');
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat4.POSTGRESQL_CSV.toString();
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat6;
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.getNullString();
      cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat4.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Q');
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      CSVFormat cSVFormat6 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat6.withAllowMissingColumnNames(true);
      cSVFormat5.withTrailingDelimiter(false);
      Character character0 = Character.valueOf('9');
      cSVFormat2.withCommentMarker(character0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.withDelimiter('R');
      char char0 = 'Q';
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Q');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat6 = cSVFormat4.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat6.DEFAULT.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat5.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [w!<@@Q-;UF}L, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat1.withTrailingDelimiter(false);
      Character character0 = new Character('j');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('^');
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "g(3@ZL(5:b,@\n<-<6";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charArrayWriter1;
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat2.printRecord(charArrayWriter0, objectArray0);
      MockFile mockFile0 = new MockFile("", "The comment start character and the delimiter cannot be the same ('");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      cSVFormat3.println(charArrayWriter2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      boolean boolean0 = true;
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      cSVFormat0.equals((Object) null);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('9');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('9')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      cSVFormat0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(",t]Yq3,&2");
      cSVFormat0.equals(cSVFormat1);
      cSVFormat1.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('$');
      cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat3.printer();
      CSVFormat cSVFormat5 = cSVFormat0.withTrim(false);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(stringArray0);
      Character character0 = new Character(',');
      cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat0.format(stringArray0);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.getNullString();
      cSVFormat6.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("E{!");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.withAutoFlush(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      Character character0 = new Character('*');
      cSVFormat4.withCommentMarker(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      String[] stringArray0 = new String[0];
      cSVFormat4.withHeader(stringArray0);
      Character character0 = new Character('F');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat5.format(stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat6 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      stringArray0[0] = "%";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat7.EXCEL.printer();
      cSVFormat6.withSkipHeaderRecord(true);
      cSVFormat7.format(stringArray0);
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.getNullString();
      cSVFormat7.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("InformixUnload");
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withHeader(class0);
      File file0 = MockFile.createTempFile("InformixUnload", "InformixUnload");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.POSTGRESQL_TEXT.print(file0, charset0);
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_CSV.withIgnoreEmptyLines();
      PipedReader pipedReader0 = new PipedReader(44);
      cSVFormat0.parse(pipedReader0);
      cSVFormat3.RFC4180.withSkipHeaderRecord(true);
      cSVFormat0.withAutoFlush(true);
      cSVFormat3.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('w');
      cSVFormat0.TDF.withEscape(character0);
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(false);
      cSVFormat0.withQuote('}');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('w');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withQuote('v');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]jM`W>Owx%");
      File file0 = null;
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.print((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.MYSQL;
          cSVFormat0.withEscape('6');
          CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
          CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
          cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
          cSVFormat1.withIgnoreHeaderCase();
          CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
          cSVFormat2.getNullString();
          cSVFormat0.withIgnoreHeaderCase(false);
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vX:pf&,~Q9VC");
          MockFile mockFile0 = new MockFile("N");
          MockFile mockFile1 = new MockFile("]");
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"]\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      Character character0 = new Character('F');
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat6;
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.getNullString();
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat7.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withEscape('Z');
      cSVFormat1.hashCode();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat1.getNullString();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('6');
      cSVFormat4.withEscape('');
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat5.getHeader();
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat4.withTrim(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.withAutoFlush(true);
      cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('\u0083');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      cSVFormat0.withIgnoreEmptyLines(false);
      String string0 = "inputStream";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ppmsIkmopF>'B\";u=", "inputStream");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // inputStream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "^9}V\"^!";
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
          Object[] objectArray0 = new Object[5];
          cSVFormat0.isCommentMarkerSet();
          CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
          cSVFormat1.format(objectArray0);
          CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
          cSVFormat0.getNullString();
          CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
          MockFile mockFile0 = new MockFile("]");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat3.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"]\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = '9';
      cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat0.printer();
      cSVFormat1.withTrim(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "%";
      stringArray0[2] = "%";
      stringArray0[3] = "qp@` V[j";
      stringArray0[4] = "%";
      stringArray0[5] = "w!<@@Q-;UF}L";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '%' in [%, %, %, qp@` V[j, %, w!<@@Q-;UF}L]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator('^');
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "g(3@ZL(5:b,@\n<-<6";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat1.withEscape('8');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("g(3@ZL(5:b,@\n<-<6");
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.isQuoteCharacterSet();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(126);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      cSVFormat1.print((Object) cSVFormat0, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
      cSVFormat0.printer();
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat0.println(charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('^');
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "g(3@ZL(5:b,@\n<-<6";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat2.printRecord(charArrayWriter0, objectArray0);
      MockFile mockFile0 = new MockFile("", "The comment start character and the delimiter cannot be the same ('");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      cSVFormat3.println(charArrayWriter2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('R');
      CSVFormat cSVFormat5 = cSVFormat3.withAutoFlush(true);
      cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(true);
      Character character0 = Character.valueOf('T');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat7 = cSVFormat2.withTrim(true);
      cSVFormat7.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat8.getNullString();
      cSVFormat0.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.withTrailingDelimiter(true);
      Character character0 = Character.valueOf('v');
      cSVFormat3.withCommentMarker(character0);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat2.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withTrailingDelimiter();
      CSVFormat cSVFormat8 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat9 = CSVFormat.RFC4180;
      cSVFormat3.printer();
      cSVFormat4.withTrim(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w!<@@Q-;UF}L";
      stringArray0[1] = "%";
      cSVFormat8.withHeader(stringArray0);
      Character character0 = new Character('R');
      cSVFormat7.withIgnoreHeaderCase();
      cSVFormat9.withRecordSeparator('R');
      cSVFormat9.getSkipHeaderRecord();
      CSVFormat.newFormat('`');
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      char char0 = '`';
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat7 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      stringArray0[0] = "%";
      CSVFormat cSVFormat8 = CSVFormat.RFC4180;
      cSVFormat7.printer();
      cSVFormat6.withTrim(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("aP)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.aP)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces(true);
      CSVFormat.newFormat('d');
      cSVFormat1.printer();
      MockFile.createTempFile("g(3@ZL(5:b,@\n<-<6", "Afx@_W :T{HP`*)(");
      // Undeclared exception!
      try { 
        Charset.forName("a570!<|:k,i~S/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // a570!<|:k,i~S/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('i');
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      cSVFormat0.getNullString();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withAutoFlush(false);
      cSVFormat0.hashCode();
      cSVFormat1.EXCEL.withRecordSeparator("N");
      cSVFormat1.printer();
      cSVFormat1.withTrim();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.POSTGRESQL_CSV.withDelimiter('(');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(true);
      cSVFormat1.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      cSVFormat1.withHeader((String[]) null);
      cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.withTrailingDelimiter(true);
      Character character0 = Character.valueOf('v');
      cSVFormat4.withCommentMarker(character0);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat2.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreSurroundingSpaces(false);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withNullString("");
      cSVFormat1.hashCode();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat0.getNullString();
      cSVFormat0.hashCode();
      cSVFormat0.withEscape('u');
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withQuote(':');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("The delimiter cannot be a line break");
      cSVFormat3.INFORMIX_UNLOAD_CSV.printer();
      cSVFormat0.isCommentMarkerSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withRecordSeparator("The header contains a duplicate name: \"");
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      cSVFormat4.printer();
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('#');
      cSVFormat5.getHeader();
      CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker((Character) null);
      Character character0 = Character.valueOf('=');
      cSVFormat6.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      cSVFormat0.equals("");
      cSVFormat0.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('O');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.printer();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      Character character0 = new Character('i');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      cSVFormat4.withSkipHeaderRecord(false);
      Character character1 = Character.valueOf('i');
      CSVFormat cSVFormat7 = cSVFormat3.withQuote(character1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(false);
      cSVFormat0.printer();
      cSVFormat6.withEscape('i');
      cSVFormat7.getHeader();
      cSVFormat8.getTrailingDelimiter();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('6');
      charArrayWriter0.append('6');
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getNullString();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat.Predefined.values();
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) rowSetMetaDataImpl1;
      objectArray0[1] = (Object) rowSetMetaDataImpl1;
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('K');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.TDF.withTrailingDelimiter();
      cSVFormat0.withAllowMissingColumnNames(false);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) "javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004";
      objectArray1[3] = (Object) cSVFormat3;
      objectArray1[4] = (Object) rowSetMetaDataImpl1;
      cSVFormat1.format(objectArray1);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "ppmsIkmopF>'B\";u=");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) rowSetMetaDataImpl1;
      objectArray0[1] = (Object) rowSetMetaDataImpl1;
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('K');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.TDF.withTrailingDelimiter();
      cSVFormat0.withAllowMissingColumnNames(false);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) "javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004\tN";
      objectArray1[3] = (Object) cSVFormat3;
      objectArray1[4] = (Object) rowSetMetaDataImpl1;
      cSVFormat1.format(objectArray1);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000008\torg.apache.commons.csv.CSVFormat@0000000002\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004\t\\N\torg.apache.commons.csv.CSVFormat@0000000005\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004ppmsIkmopF>'B\";u=");
      MockFile mockFile1 = new MockFile(mockFile0, "ppmsIkmopF>'B\";u=");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004\tN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // javax.sql.rowset.RowSetMetaDataImpl@0000000004\tjavax.sql.rowset.RowSetMetaDataImpl@0000000004\tN
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[19];
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "N\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "@\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "$";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "EOF";
      stringArray0[4] = ",/Z~C@;";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.format(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("$\t\r\n\tEOF\t,/Z~C@;\t\n\t$\t\r\n\tEOF\t,/Z~C@;", true);
      cSVFormat2.print((Object) quoteMode0, (Appendable) mockFileWriter0, false);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1121);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      cSVFormat0.print((Object) charArrayWriter1, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator('^');
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "g(3@ZL(5:b,@\n<-<6";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat2.printRecord(charArrayWriter0, objectArray0);
      MockFile mockFile0 = new MockFile("", "The comment start character and the delimiter cannot be the same ('");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('i');
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[4] = (Object) character0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('!');
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.csv.Constants";
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      Character character0 = new Character('!');
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat2.withCommentMarker((Character) null);
      cSVFormat7.isCommentMarkerSet();
      CSVFormat cSVFormat8 = cSVFormat5.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat8.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat1.format(stringArray0);
      cSVFormat4.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat9 = cSVFormat6.withQuoteMode(quoteMode0);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode1);
      cSVFormat9.withNullString("\"org.apache.commons.csv.Constants\"");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      cSVFormat0.TDF.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray1);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat3.withNullString("org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withDelimiter('q');
      cSVFormat1.withHeader((String[]) null);
      cSVFormat2.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = cSVFormat2.printer();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      Character character0 = new Character('i');
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat6.getNullString();
      cSVFormat4.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.println(charArrayWriter1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      cSVFormat2.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      stringArray0[0] = "%";
      String string0 = "\\w!<@@Q-;UF}L";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat8 = CSVFormat.RFC4180;
      cSVFormat8.EXCEL.printer();
      cSVFormat8.DEFAULT.withTrim(false);
      cSVFormat6.withHeader(stringArray0);
      Character character0 = new Character('`');
      cSVFormat7.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat0.withRecordSeparator('k');
      cSVFormat9.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) " o&LGc^kRHWH'7imHtP";
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\" o&LGc^kRHWH'7imHtP\",,,,,,,,,,,,,,,,", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('`');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat4.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat5.EXCEL.printer();
      cSVFormat5.DEFAULT.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(stringArray0);
      Character character0 = new Character('`');
      CSVFormat cSVFormat7 = cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
      cSVFormat6.MYSQL.withCommentMarker(character0);
      cSVFormat6.isCommentMarkerSet();
      cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat2.format(stringArray0);
      cSVFormat6.getNullString();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat7.isQuoteCharacterSet();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('%');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      cSVFormat3.TDF.withSkipHeaderRecord(false);
      cSVFormat1.getCommentMarker();
      cSVFormat2.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.RFC4180.withHeader(class0);
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      Character character0 = new Character('/');
      Character character1 = Character.valueOf('/');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(true);
      cSVFormat6.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord();
      CSVFormat cSVFormat8 = cSVFormat3.withAutoFlush(true);
      cSVFormat8.toString();
      CSVFormat cSVFormat9 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat10 = cSVFormat1.withAllowMissingColumnNames(true);
      QuoteMode quoteMode0 = cSVFormat6.getQuoteMode();
      cSVFormat9.getSkipHeaderRecord();
      cSVFormat10.getTrailingDelimiter();
      cSVFormat7.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      cSVFormat7.printer();
      cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat8.getTrim();
      cSVFormat5.getEscapeCharacter();
      cSVFormat3.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.RFC4180;
      cSVFormat_Predefined1.getFormat();
      cSVFormat0.withCommentMarker('/');
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat2.getIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker('m');
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_CSV.withQuote('h');
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat5.EXCEL.withHeaderComments(cSVFormat_PredefinedArray0);
      CSVFormat.newFormat('m');
      cSVFormat3.withIgnoreEmptyLines(true);
      Character.valueOf('[');
      Character character0 = Character.valueOf('[');
      cSVFormat7.withEscape(character0);
      cSVFormat6.withFirstRecordAsHeader();
      Character.valueOf('m');
      Character character1 = Character.valueOf('[');
      CSVFormat cSVFormat8 = cSVFormat6.withQuote(character1);
      Character character2 = new Character('A');
      // Undeclared exception!
      try { 
        cSVFormat8.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('[')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("sV}QL", "sV}QL");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\"');
      cSVFormat0.INFORMIX_UNLOAD_CSV.print(object0, (Appendable) printWriter0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat0.withEscape('%');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl2);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat0.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(true);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('%');
      cSVFormat5.getHeader();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("sV}QL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.sV}QL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces();
      int int0 = new Character('3');
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("CDaq}:zlR9:$||1P]");
      cSVFormat4.withTrim();
      cSVFormat3.withTrim(true);
      Character character0 = new Character('3');
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.withCommentMarker((Character) null);
      cSVFormat5.isCommentMarkerSet();
      cSVFormat4.getNullString();
      cSVFormat5.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat6 = cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat7 = cSVFormat4.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat7.EXCEL.printer();
      CSVFormat cSVFormat8 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat8.withIgnoreEmptyLines(false);
      cSVFormat6.withIgnoreEmptyLines();
      cSVFormat6.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('(');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(stringArray0);
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat.newFormat('(');
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(true);
      cSVFormat5.toString();
      CSVFormat cSVFormat6 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_TEXT.withAllowMissingColumnNames(true);
      cSVFormat7.POSTGRESQL_CSV.hashCode();
      cSVFormat7.TDF.withQuote('P');
      cSVFormat0.getQuoteMode();
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat4.getTrailingDelimiter();
      Character.valueOf('V');
      CSVFormat cSVFormat8 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat9 = cSVFormat1.withFirstRecordAsHeader();
      Character.valueOf('[');
      Character character1 = new Character('[');
      CSVFormat cSVFormat10 = cSVFormat9.withQuote(character1);
      Character character2 = new Character('[');
      Character character3 = new Character('9');
      cSVFormat10.withCommentMarker(character3);
      cSVFormat8.toString();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreSurroundingSpaces(false);
      cSVFormat0.POSTGRESQL_TEXT.withEscape('Z');
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withEscape('@');
      cSVFormat2.hashCode();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat0.getNullString();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat2.withRecordSeparator("InformixUnload");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat6.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat7 = cSVFormat5.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat7.EXCEL.printer();
      cSVFormat7.DEFAULT.withTrim(false);
      cSVFormat6.withHeader(stringArray0);
      Character character0 = new Character('`');
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat0.withRecordSeparator('k');
      cSVFormat8.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('w');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('w')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat3.withAutoFlush(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(class0);
      cSVFormat4.getTrailingDelimiter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";Y!";
      stringArray0[1] = "y(Y\"BJx^3cYk7_&)S";
      stringArray0[2] = "y(Y\"BJx^3cYk7_&)S";
      stringArray0[3] = "y(Y\"BJx^3cYk7_&)S";
      stringArray0[4] = "y(Y\"BJx^3cYk7_&)S";
      stringArray0[5] = "y(Y\"BJx^3cYk7_&)S";
      // Undeclared exception!
      try { 
        cSVFormat5.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'y(Y\"BJx^3cYk7_&)S' in [;Y!, y(Y\"BJx^3cYk7_&)S, y(Y\"BJx^3cYk7_&)S, y(Y\"BJx^3cYk7_&)S, y(Y\"BJx^3cYk7_&)S, y(Y\"BJx^3cYk7_&)S]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withQuote('m');
      cSVFormat2.getIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker('m');
      cSVFormat6.POSTGRESQL_CSV.withQuote('h');
      cSVFormat1.getAllowMissingColumnNames();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat5.EXCEL.withHeaderComments(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat8 = CSVFormat.newFormat('m');
      cSVFormat0.INFORMIX_UNLOAD.withEscape('O');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat7.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat9 = cSVFormat2.DEFAULT.withHeader(class0);
      cSVFormat9.EXCEL.printer();
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat10 = cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat11 = cSVFormat8.withHeaderComments(cSVFormat_PredefinedArray0);
      cSVFormat11.getHeaderComments();
      cSVFormat10.withFirstRecordAsHeader();
      CSVFormat cSVFormat12 = CSVFormat.newFormat('h');
      cSVFormat12.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('L');
      cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('L');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = "\\w!<@@Q-;UF}L";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat6 = cSVFormat4.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat6.EXCEL.printer();
      cSVFormat6.DEFAULT.withTrim(false);
      cSVFormat5.withHeader(stringArray0);
      Character character0 = new Character('`');
      cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat7 = CSVFormat.newFormat('B');
      Character character1 = new Character('B');
      // Undeclared exception!
      try { 
        cSVFormat7.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('B')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('-');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('-');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('-')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      QuoteMode quoteMode0 = cSVFormat0.getQuoteMode();
      cSVFormat3.getSkipHeaderRecord();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.getTrailingDelimiter();
      QuoteMode quoteMode1 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode1);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.withHeader(class0);
      cSVFormat3.printer();
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.getTrim();
      cSVFormat2.getEscapeCharacter();
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat6.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat7 = cSVFormat_Predefined1.getFormat();
      cSVFormat7.withCommentMarker('F');
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(true);
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat8.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat8.withDelimiter('t');
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat7.withIgnoreHeaderCase(false);
      Character character1 = new Character('J');
      Character character2 = new Character('m');
      cSVFormat5.withCommentMarker(character2);
      cSVFormat1.isNullStringSet();
      CSVFormat.newFormat('/');
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat5.withSkipHeaderRecord();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat6 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(true);
      cSVFormat6.withTrailingDelimiter();
      cSVFormat0.getHeaderComments();
      cSVFormat4.withTrim();
      cSVFormat5.withRecordSeparator("ppmsIkmopF>'B\";u=");
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat2.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      charArrayWriter0.append('9');
      cSVFormat1.print((Object) null, (Appendable) charArrayWriter0, true);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.printer();
      MockFile.createTempFile("-.%~gg=s?=K5t?G21", "%5SLm ByXv})y{");
      // Undeclared exception!
      try { 
        Charset.forName("-.%~gg=s?=K5t?G21");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -.%~gg=s?=K5t?G21
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[11];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.RFC4180.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeader((String[]) null);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withAllowMissingColumnNames(true);
      QuoteMode quoteMode0 = cSVFormat1.getQuoteMode();
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat2.getTrailingDelimiter();
      cSVFormat2.withQuoteMode(quoteMode0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      cSVFormat1.printer();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<
         // > SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.getQuoteMode();
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat1.getTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode((QuoteMode) null);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat5.printer();
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('8');
      cSVFormat6.withQuoteMode((QuoteMode) null);
      cSVFormat1.getTrim();
      cSVFormat4.getEscapeCharacter();
      cSVFormat0.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined1.getFormat();
      cSVFormat4.withCommentMarker('F');
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      cSVFormat3.MYSQL.withQuote('m');
      cSVFormat2.getIgnoreEmptyLines();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker('m');
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(cSVFormat_PredefinedArray0);
      boolean boolean0 = true;
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(true);
      cSVFormat6.printer();
      MockFile.createTempFile("a570!<|:k,i~S/", "a570!<|:k,i~S/");
      // Undeclared exception!
      try { 
        Charset.forName("a570!<|:k,i~S/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // a570!<|:k,i~S/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(true);
      cSVFormat5.toString();
      CSVFormat cSVFormat7 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat7.POSTGRESQL_TEXT.withAllowMissingColumnNames(true);
      cSVFormat0.getQuoteMode();
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat4.getTrailingDelimiter();
      cSVFormat6.withQuoteMode((QuoteMode) null);
      cSVFormat6.withRecordSeparator("Delimiter=<,> Escape=<P> QuoteChar=<\"> CommentStart=<9> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:true Header:[]");
      Character character1 = new Character('O');
      cSVFormat3.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withTrailingDelimiter(false);
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isEscapeCharacterSet();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('I');
      cSVFormat5.printer();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat5.getTrim();
      cSVFormat6.getEscapeCharacter();
      cSVFormat2.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat7 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat_Predefined0;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat6;
      CSVFormat cSVFormat8 = cSVFormat7.withHeaderComments(objectArray0);
      cSVFormat8.withCommentMarker('b');
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.print((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.DEFAULT.parse(pipedReader0);
      cSVFormat2.withSkipHeaderRecord();
      String string0 = "S:6<3pxGuCL OO";
      MockFile mockFile0 = new MockFile("IhH{n20", "pa/&DH");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      // Undeclared exception!
      try { 
        cSVFormat2.POSTGRESQL_CSV.print((File) mockFile1, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("&k\u0001nmdb?");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      Character character0 = new Character('k');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      cSVFormat4.DEFAULT.printer();
      cSVFormat5.TDF.withAllowMissingColumnNames(true);
      cSVFormat5.getTrailingDelimiter();
      CSVFormat.newFormat('');
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      char char0 = 'l';
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('l');
      String string0 = "";
      cSVFormat3.DEFAULT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withRecordSeparator("");
      cSVFormat4.TDF.withEscape((Character) null);
      cSVFormat3.EXCEL.withRecordSeparator("");
      cSVFormat0.DEFAULT.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('E');
      char char1 = '}';
      cSVFormat3.INFORMIX_UNLOAD.withEscape('}');
      cSVFormat5.getTrailingDelimiter();
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      MockFile.createTempFile("uN&T", "uN&T");
      // Undeclared exception!
      try { 
        Charset.forName("uN&T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // uN&T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withTrailingDelimiter(false);
      cSVFormat1.getDelimiter();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat0.withRecordSeparator("");
      Character character0 = new Character('F');
      cSVFormat3.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.RFC4180.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      cSVFormat2.POSTGRESQL_TEXT.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      cSVFormat3.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('{');
      cSVFormat0.TDF.printer();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat.newFormat('v');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('.');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat4.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      String string0 = "]";
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.INFORMIX_UNLOAD.withHeader(class0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = new Character('7');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      cSVFormat6.TDF.withIgnoreHeaderCase(true);
      cSVFormat6.RFC4180.toString();
      cSVFormat6.hashCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat5.getCommentMarker();
      cSVFormat4.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.EXCEL.withHeader(resultSet0);
      cSVFormat2.INFORMIX_UNLOAD.printer();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat4.getQuoteMode();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getQuoteCharacter();
      char char0 = 'N';
      cSVFormat0.withCommentMarker('N');
      boolean boolean0 = true;
      cSVFormat0.RFC4180.withAutoFlush(true);
      String string0 = " SurroundingSpaces:ignored";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(" SurroundingSpaces:ignored");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined. SurroundingSpaces:ignored
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.POSTGRESQL_TEXT.withQuote('>');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('>');
      cSVFormat1.TDF.withTrim(true);
      cSVFormat1.withEscape('>');
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.printer();
      Character character0 = new Character('w');
      cSVFormat0.POSTGRESQL_TEXT.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.EXCEL.withHeader(class0);
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.DEFAULT.withEscape('H');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat5 = cSVFormat3.INFORMIX_UNLOAD.withTrim();
      CSVFormat cSVFormat6 = cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat6.TDF.withAutoFlush(true);
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat4.print((Appendable) pipedWriter0);
      cSVFormat4.getAllowMissingColumnNames();
      CSVFormat.newFormat('H');
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat8.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('H');
      cSVFormat8.MYSQL.withEscape(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class0);
      cSVFormat6.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.print((Appendable) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat0.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002");
      cSVFormat1.TDF.print((Appendable) charArrayWriter1);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.TDF.withTrailingDelimiter(true);
      cSVFormat5.RFC4180.withAutoFlush(true);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat3.withHeader(class1);
      cSVFormat0.getTrailingDelimiter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[1] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[3] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[4] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[5] = "y(Y\"BJx^3cYk7_&)S";
      stringArray0[6] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[7] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      stringArray0[8] = "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002' in [org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, y(Y\"BJx^3cYk7_&)S, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002, org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.RFC4180.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      cSVFormat0.DEFAULT.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('V');
      cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator('x');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      Character character0 = new Character('V');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withEscape(character0);
      cSVFormat6.POSTGRESQL_CSV.printer();
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('V')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('=');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('=')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.INFORMIX_UNLOAD.withHeader((String[]) null);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.POSTGRESQL_CSV.withIgnoreSurroundingSpaces();
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      Character character0 = new Character('<');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.DEFAULT.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withNullString(".QnM0Ob#.");
      Character character1 = Character.valueOf('<');
      CSVFormat cSVFormat4 = cSVFormat0.withQuote(character1);
      cSVFormat4.getHeaderComments();
      CSVFormat.newFormat('3');
      cSVFormat4.withQuote('@');
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat5.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withDelimiter('q');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat1.withRecordSeparator(']');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.csv.Constants";
      cSVFormat1.withHeader(stringArray0);
      Character character0 = new Character('`');
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.withCommentMarker(character0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.format(stringArray0);
      cSVFormat6.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.RFC4180.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeader((String[]) null);
      cSVFormat2.MYSQL.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("ppmsIkmopF>'B\";u=");
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      cSVFormat4.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat5.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('R');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('R');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('`');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "w!<@@Q-;UF}L";
      CSVFormat cSVFormat6 = cSVFormat4.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat6.EXCEL.printer();
      cSVFormat6.DEFAULT.withTrim(false);
      CSVFormat cSVFormat7 = cSVFormat5.withHeader(stringArray0);
      Character character0 = new Character('`');
      cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
      cSVFormat7.MYSQL.withCommentMarker(character0);
      cSVFormat7.isCommentMarkerSet();
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat2.format(stringArray0);
      cSVFormat7.getNullString();
      cSVFormat1.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat4.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withRecordSeparator("U x'kU>B`c=0H!<Tr");
      cSVFormat0.withTrim(true);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.POSTGRESQL_CSV.withTrim(true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('T');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      cSVFormat2.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(true);
      cSVFormat4.toString();
      CSVFormat cSVFormat6 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat6.POSTGRESQL_TEXT.withAllowMissingColumnNames(true);
      cSVFormat0.getQuoteMode();
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat3.getTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat5.withQuoteMode((QuoteMode) null);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat7.RFC4180.withHeader(class0);
      cSVFormat0.printer();
      CSVFormat cSVFormat8 = cSVFormat0.withQuoteMode((QuoteMode) null);
      cSVFormat1.getTrim();
      cSVFormat8.getEscapeCharacter();
      cSVFormat2.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat_Predefined0.getFormat();
      cSVFormat6.withCommentMarker('F');
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat3.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
      cSVFormat1.DEFAULT.withFirstRecordAsHeader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3563);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withTrailingDelimiter(true);
      Character character0 = new Character('u');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(" odDggkmR/");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " odDggkmR/";
      objectArray0[1] = (Object) charArrayWriter1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('0');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(false);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      Character character0 = Character.valueOf('\u0083');
      cSVFormat4.withCommentMarker(character0);
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD_CSV;
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("sV}QL", "sV}QL");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\"');
      cSVFormat0.INFORMIX_UNLOAD_CSV.print(object0, (Appendable) printWriter0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.withFirstRecordAsHeader();
      Character character1 = Character.valueOf('\"');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character1);
      Character character2 = new Character('A');
      cSVFormat0.withCommentMarker(character2);
      cSVFormat4.toString();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('E');
      cSVFormat0.EXCEL.withEscape(character0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreSurroundingSpaces();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      cSVFormat4.getDelimiter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('E');
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat7 = cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord();
      cSVFormat7.TDF.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat_Predefined0.getFormat();
      cSVFormat8.DEFAULT.withTrim(false);
      cSVFormat6.getAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(':');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char char0 = 'z';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&W]a'r+";
      stringArray0[1] = "Unexpected Token type: ";
      stringArray0[2] = "qj4Z&,";
      stringArray0[3] = " A(r ~";
      stringArray0[4] = "";
      cSVFormat0.withFirstRecordAsHeader();
      stringArray0[5] = "W:]xHzgJB";
      stringArray0[6] = "}a7";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [&W]a'r+, Unexpected Token type: , qj4Z&,,  A(r ~, , W:]xHzgJB, }a7, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('X');
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withFirstRecordAsHeader();
      cSVFormat4.POSTGRESQL_CSV.withIgnoreHeaderCase(false);
      Character character0 = new Character('^');
      cSVFormat3.MYSQL.withCommentMarker(character0);
      cSVFormat3.isNullStringSet();
      CSVFormat.newFormat('B');
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      cSVFormat0.format(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.MYSQL.withNullString((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withTrailingDelimiter(true);
      cSVFormat2.withRecordSeparator('r');
      cSVFormat0.EXCEL.printer();
      MockFile mockFile0 = new MockFile("", "The comment start and the escape character cannot be the same ('");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("The comment start and the escape character cannot be the same ('");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The comment start and the escape character cannot be the same ('
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.POSTGRESQL_TEXT.withTrim(true);
      cSVFormat0.POSTGRESQL_TEXT.withSkipHeaderRecord();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 2957);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withEscape('@');
      cSVFormat2.hashCode();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat0.getNullString();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('9');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withDelimiter('x');
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces();
      cSVFormat3.hashCode();
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("CDaq}:zlR9:$||1P]");
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.TDF.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat6.TDF.withIgnoreEmptyLines();
      cSVFormat6.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("`r.9");
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(610);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('6');
      cSVFormat1.MYSQL.print((Object) cSVFormat0, (Appendable) charArrayWriter1, true);
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter(false);
      cSVFormat0.POSTGRESQL_CSV.printer();
      MockFile.createTempFile("a570!<|:k,i~S/", "a570!<|:k,i~S/");
      // Undeclared exception!
      try { 
        Charset.forName("a570!<|:k,i~S/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // a570!<|:k,i~S/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withSkipHeaderRecord();
      try { 
        MockURI.URI("", "", "reader", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://reader#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withRecordSeparator('N');
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      byte[] byteArray0 = new byte[4];
      cSVFormat0.POSTGRESQL_CSV.withDelimiter('J');
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('J');
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withNullString("");
      cSVFormat6.MYSQL.withRecordSeparator((String) null);
      cSVFormat5.getNullString();
      Character character0 = Character.valueOf('J');
      cSVFormat0.RFC4180.withEscape(character0);
      cSVFormat3.withHeader((ResultSet) null);
      cSVFormat5.withRecordSeparator("TDF");
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xG#TXj";
      stringArray0[1] = "a^?Ho";
      stringArray0[2] = "";
      stringArray0[3] = "Eod;`8>X(XiuwJ(@d2G";
      cSVFormat2.RFC4180.withHeader(stringArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withTrim();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('H');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('H');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('H')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat0.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002");
      cSVFormat1.TDF.print((Appendable) charArrayWriter1);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.withDelimiter('X');
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withIgnoreHeaderCase(false);
      Character character0 = new Character('X');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat5.withCommentMarker((Character) null);
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('\t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\t')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withTrim();
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.POSTGRESQL_CSV.withDelimiter('(');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('(');
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("sV}QL", "sV}QL");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('\"');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat1.MYSQL.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      Character character1 = new Character('A');
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withEscape('d');
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuote('N');
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("*pa^=rw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.*pa^=rw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat.newFormat('z');
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withCommentMarker('F');
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat4.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withQuote('m');
      cSVFormat2.getIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker('m');
      cSVFormat6.POSTGRESQL_CSV.withQuote('h');
      cSVFormat1.getAllowMissingColumnNames();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat5.EXCEL.withHeaderComments(cSVFormat_PredefinedArray0);
      CSVFormat.newFormat('m');
      cSVFormat0.INFORMIX_UNLOAD.withEscape('O');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat7.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat8 = cSVFormat2.DEFAULT.withHeader(class0);
      cSVFormat8.EXCEL.printer();
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat5.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat5.withQuoteMode(quoteMode0);
      CSVFormat.newFormat('I');
      cSVFormat4.getHeader();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
