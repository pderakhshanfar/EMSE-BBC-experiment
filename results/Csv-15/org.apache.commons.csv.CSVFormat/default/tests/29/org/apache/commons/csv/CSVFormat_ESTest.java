/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:32:56 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.POSTGRESQL_TEXT.println(charBuffer0);
      cSVFormat0.equals(cSVFormat1);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      Object[] objectArray0 = new Object[11];
      objectArray0[2] = (Object) charBuffer0;
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "#nk*zTOz";
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "#nk*zTOz", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.MYSQL.withHeader(resultSet0);
      cSVFormat0.withDelimiter('b');
      CSVFormat cSVFormat1 = CSVFormat.valueOf("Default");
      cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) resultSet0;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.POSTGRESQL_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Character character0 = Character.valueOf('N');
      cSVFormat2.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "COMMENT";
      stringArray0[1] = "ALL";
      stringArray0[2] = "9ot$Gj/e#aj$<(#o";
      stringArray0[3] = "org.apache.commons.csv.Assertions";
      stringArray0[4] = "(line ";
      stringArray0[5] = "coVydgn;R^";
      stringArray0[6] = "pyH'KPy7$T'eJ0o";
      stringArray0[7] = "(WCLzwWc?R#eh";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.getRecordSeparator();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      File file0 = MockFile.createTempFile("(startline ", "[K)#'C8;@0xkA}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "[K)#'C8;@0xkA}");
      cSVFormat0.print((Object) class0, (Appendable) printWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) file0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "(startline ";
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) "[K)#'C8;@0xkA}";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.INFORMIX_UNLOAD.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Integer integer0 = new Integer(45);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader(2924);
      try { 
        cSVFormat5.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Integer integer0 = new Integer(45);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) integer0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Integer integer0 = new Integer(45);
      Byte byte0 = new Byte((byte)109);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) byte0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('l');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 9, 9);
      // Undeclared exception!
      try { 
        cSVFormat1.INFORMIX_UNLOAD.println(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("The comment start character and the delimiter cJnnot be the same ('");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withNullString("3C");
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator(')');
      CSVFormat cSVFormat7 = cSVFormat6.RFC4180.withTrailingDelimiter();
      cSVFormat4.equals(cSVFormat5);
      cSVFormat2.printer();
      CSVFormat cSVFormat8 = cSVFormat2.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat8;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat8;
      cSVFormat2.DEFAULT.format(objectArray0);
      cSVFormat2.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat8.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat7.withCommentMarker(')');
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          char char0 = '3';
          CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
          CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withSkipHeaderRecord();
          cSVFormat0.RFC4180.printer();
          cSVFormat0.EXCEL.withAutoFlush(true);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          CSVFormat cSVFormat3 = cSVFormat2.TDF.withRecordSeparator('W');
          cSVFormat3.DEFAULT.withDelimiter('W');
          Character character0 = new Character('3');
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withCommentMarker(character0);
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
          cSVFormat4.TDF.withTrim(true);
          cSVFormat1.TDF.withIgnoreEmptyLines();
          CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord();
          cSVFormat5.getAutoFlush();
          CSVFormat cSVFormat7 = cSVFormat4.withEscape('x');
          cSVFormat7.INFORMIX_UNLOAD.withTrim();
          cSVFormat4.withIgnoreSurroundingSpaces();
          cSVFormat5.hashCode();
          cSVFormat5.withRecordSeparator("string");
          cSVFormat4.getRecordSeparator();
          MockFile mockFile0 = new MockFile("The comment start character and the quoteChar cannot be the same ('", ":QOqib|O");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat6.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/The comment start character and the quoteChar cannot be the same ('/:QOqib|O\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.printer();
      CharBuffer.allocate(0);
      Object object0 = new Object();
      cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withRecordSeparator("(K-AmTjJ}p");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) null, (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.DEFAULT.withQuote('K');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat2.INFORMIX_UNLOAD.hashCode();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('l');
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.getNullString();
      cSVFormat3.withQuote('o');
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("&^kph,zB0TsY3#Xsj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.&^kph,zB0TsY3#Xsj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('0');
      Character character1 = Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat3.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('&');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator((String) null);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.RFC4180.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('k');
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.toString();
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      cSVFormat3.RFC4180.withIgnoreHeaderCase(true);
      cSVFormat3.withEscape('Q');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.INFORMIX_UNLOAD.withHeader(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.getCommentMarker();
      cSVFormat1.withRecordSeparator('Q');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat4.POSTGRESQL_CSV.hashCode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      cSVFormat4.RFC4180.withTrim(true);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('Q');
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.newFormat('l');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.TDF.withHeaderComments(objectArray0);
      cSVFormat0.printer();
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L.XeGyabCLL[<\"xoS";
      stringArray0[1] = "Q/VM81c";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "/Kh9OH3%X7";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "go b3cJ<^D{QNy.C!";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.POSTGRESQL_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat4.printer();
      Long long0 = new Long(829L);
      Float float0 = new Float(0.0F);
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withTrailingDelimiter();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat6.withNullString("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      cSVFormat5.equals("");
      cSVFormat6.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(1655);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('&');
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('V');
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.csv.CSVParser";
      stringArray0[1] = "]";
      stringArray0[2] = "ALL";
      stringArray0[3] = "Default";
      stringArray0[4] = "Uk!";
      stringArray0[5] = "`+?eNuQb`F:]Ab";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat3.withAllowMissingColumnNames();
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.printer();
      Long long0 = new Long('8');
      Float float0 = new Float((float) '8');
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat4.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Long long1 = new Long((-189L));
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.equals(cSVFormat8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat0.getRecordSeparator();
      cSVFormat1.getEscapeCharacter();
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      cSVFormat4.getIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('!');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(";mTKN@kD <#lVF%8(R");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";mTKN@kD <#lVF%8(R";
      stringArray0[1] = ";mTKN@kD <#lVF%8(R";
      // Undeclared exception!
      try { 
        cSVFormat4.POSTGRESQL_CSV.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: ';mTKN@kD <#lVF%8(R' in [;mTKN@kD <#lVF%8(R, ;mTKN@kD <#lVF%8(R]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(WCLzwWc?R#eh";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Charset.defaultCharset();
      cSVFormat0.withAllowMissingColumnNames(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(183);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 183, 183);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer1, (Appendable) charBuffer0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xhw");
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVFormat_Predefined0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVFormat1.INFORMIX_UNLOAD_CSV.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character.valueOf('j');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('D');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat.newFormat('W');
      cSVFormat0.printer();
      Long long0 = new Long(0L);
      cSVFormat2.equals(cSVFormat_Predefined0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The escape character and the delimiter cannot be the same ('");
      cSVFormat1.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character.valueOf('a');
      cSVFormat0.printer();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat2.RFC4180.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) charBuffer0;
      cSVFormat3.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote('<');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer0 = CharBuffer.allocate(50);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      cSVFormat0.INFORMIX_UNLOAD.withEscape(' ');
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) resultSet0;
      objectArray0[4] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.withRecordSeparator('0');
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1652);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charBuffer0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      Character character1 = Character.valueOf('.');
      cSVFormat2.withQuote(character1);
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('a');
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      Character character2 = Character.valueOf(',');
      cSVFormat3.INFORMIX_UNLOAD.withCommentMarker(character2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      cSVFormat0.format(objectArray0);
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('O');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('O');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("G$^JF|QQg");
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat6;
      cSVFormat1.format(objectArray0);
      cSVFormat6.withRecordSeparator("t>6[y,_+KXTT");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAutoFlush(true);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(']');
      cSVFormat1.getHeaderComments();
      Character.valueOf('S');
      CSVFormat cSVFormat5 = cSVFormat2.withAutoFlush(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.printer();
      Long long0 = new Long((-324L));
      cSVFormat5.equals(long0);
      cSVFormat3.withTrailingDelimiter();
      cSVFormat4.equals(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat2.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.RFC4180.withRecordSeparator("");
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) charArrayWriter0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = object0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.withHeader((String[]) null);
      cSVFormat1.withEscape('2');
      cSVFormat3.printer();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      Character character0 = new Character('8');
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat5.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode1);
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.withTrailingDelimiter();
      Character character1 = Character.valueOf('D');
      cSVFormat4.withCommentMarker(character0);
      CSVFormat.newFormat('a');
      cSVFormat4.printer();
      Long long0 = new Long((-1L));
      cSVFormat5.equals(character1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("The delimiter cannot be a line break");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat5.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = Character.valueOf('O');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.withDelimiter('j');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      cSVFormat0.POSTGRESQL_TEXT.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The comment start character and the delimiter cannot be the same ('");
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1886);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(575);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('a');
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      cSVFormat0.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.printer();
      Long long0 = new Long('8');
      Float float0 = new Float((float) '8');
      CSVFormat cSVFormat8 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat4.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) cSVFormat5;
      cSVFormat4.withNullString("");
      cSVFormat7.getDelimiter();
      cSVFormat8.toString();
      cSVFormat7.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      Character character0 = new Character('#');
      cSVFormat0.MYSQL.withAutoFlush(true);
      Character character1 = Character.valueOf('A');
      cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.printer();
      CSVFormat.newFormat('a');
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      cSVFormat1.print((Object) null, (Appendable) charBuffer0, true);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker('b');
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Character character0 = new Character('_');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('_')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.printer();
      Long long0 = new Long('8');
      Float float0 = new Float((float) '8');
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat3.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      cSVFormat5.format(objectArray0);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      Character character0 = new Character('8');
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat5.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode1);
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withQuote('8');
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('O');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat2.withHeader(class1);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('O');
      cSVFormat0.withQuote('(');
      cSVFormat2.getHeaderComments();
      CSVFormat.newFormat('#');
      cSVFormat2.printer();
      Long long0 = new Long(1L);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      Byte byte0 = new Byte((byte)31);
      cSVFormat4.equals(byte0);
      cSVFormat3.withTrailingDelimiter();
      Byte byte1 = new Byte((byte)31);
      cSVFormat2.equals(byte1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat5.format(objectArray0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat5.getAllowMissingColumnNames();
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('c');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('c');
      Character character0 = new Character('a');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(152);
      Long long0 = new Long(4654L);
      cSVFormat1.print((Object) long0, (Appendable) charBuffer0, false);
      cSVFormat1.hashCode();
      cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('|');
      cSVFormat5.withDelimiter('f');
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset.defaultCharset();
      cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat.newFormat('w');
      cSVFormat1.withQuote('1');
      cSVFormat0.getHeaderComments();
      CSVFormat.newFormat('=');
      Long long0 = new Long((-1L));
      Short short0 = new Short((short)112);
      CSVFormat cSVFormat2 = CSVFormat.valueOf("Excel");
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat0.printer();
      CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Long long0 = new Long(1L);
      cSVFormat2.equals(cSVPrinter0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('*');
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('#');
      Character character1 = new Character('K');
      Character character2 = Character.valueOf('t');
      cSVFormat1.withEscape(character2);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(83);
      Byte byte0 = new Byte((byte)101);
      cSVFormat1.print((Object) byte0, (Appendable) charBuffer0, false);
      cSVFormat2.hashCode();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = object0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('O');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      Object object1 = new Object();
      cSVFormat2.print(object1, (Appendable) charArrayWriter0, false);
      cSVFormat2.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charBuffer0;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6) kg7");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat.newFormat('=');
      cSVFormat0.printer();
      CSVFormat.newFormat('=');
      cSVFormat0.printer();
      Long long0 = new Long((-922L));
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.withTrailingDelimiter();
      cSVFormat3.withNullString("`v'wh?");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = new Character('A');
      Character character1 = Character.valueOf('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("m L7T|a<0b(=h-/A|");
      PrintStream printStream0 = mockPrintStream0.append('=');
      cSVFormat0.print((Object) cSVFormat3, (Appendable) printStream0, false);
      CSVFormat cSVFormat6 = cSVFormat3.withEscape((Character) null);
      cSVFormat6.getEscapeCharacter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character0);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
      cSVFormat4.print((Object) printStream0, (Appendable) printStream0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat8.withTrim(false);
      cSVFormat2.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat8.withHeader(resultSet0);
      cSVFormat8.getDelimiter();
      cSVFormat8.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat3.printer();
      Long long0 = new Long(1L);
      Float float0 = new Float(236.89702F);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat4.equals(quoteMode1);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(false);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator("\u0085");
      cSVFormat7.withTrailingDelimiter();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat8 = cSVFormat5.withTrailingDelimiter(false);
      cSVFormat8.withNullString("");
      String string0 = "+O,.7>ZG>Ie\\/qs`<[g";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("+O,.7>ZG>Ie/qs`<[g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.+O,.7>ZG>Ie/qs`<[g
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator("");
      cSVFormat7.printer();
      Long long0 = new Long(1L);
      Float float0 = new Float(1.0F);
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat5.equals(cSVFormat8);
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat5.withTrailingDelimiter();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat9 = cSVFormat6.withAllowMissingColumnNames();
      cSVFormat9.withNullString("");
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) "";
      objectArray0[6] = object0;
      cSVFormat9.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      cSVFormat2.withTrim(true);
      Long long0 = new Long(1783L);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('Z');
      cSVFormat4.equals(cSVFormat2);
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('0');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('0');
      cSVFormat5.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("Xe8yf");
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class1);
      cSVFormat0.withHeader(class0);
      CSVFormat.newFormat('6');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('a');
      cSVFormat3.printer();
      Long long0 = new Long((-2270L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      cSVFormat3.equals(object0);
      cSVFormat1.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.withQuote('%');
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("\n");
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withCommentMarker('!');
      Character character0 = new Character('!');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      cSVFormat2.getHeader();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat0.MYSQL.withTrim();
      cSVFormat4.withQuote('\'');
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat7.RFC4180.withTrailingDelimiter(true);
      cSVFormat2.withAutoFlush(true);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat6.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('a');
      cSVFormat0.printer();
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      cSVFormat0.equals(long1);
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withCommentMarker('a');
      cSVFormat3.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('1');
      cSVFormat3.getHeaderComments();
      CSVFormat.newFormat('1');
      Long long0 = new Long(67L);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      cSVFormat1.equals(cSVFormat6);
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("t)");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.equals(objectArray0[3]);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.DEFAULT.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character('#');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.printer();
      Long long0 = new Long((-2428L));
      Float float0 = new Float(1354.6F);
      cSVFormat1.equals(cSVFormat3);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat4.withTrailingDelimiter();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat6.withNullString("");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      cSVFormat5.format(objectArray0);
      cSVFormat5.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('-');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('O');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character('#');
      Character character1 = new Character('A');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      cSVFormat4.MYSQL.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat4.POSTGRESQL_CSV.hashCode();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "The comment start character and the delimiter cannot be the same ('";
      cSVFormat4.format(objectArray0);
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) quoteMode0;
      CSVFormat cSVFormat6 = cSVFormat4.withHeaderComments(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('M');
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat0.withRecordSeparator("m L7T|a<0b(=h-/A|");
      cSVFormat6.equals(cSVFormat7);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("~\"J/sPD@_y7+xU'.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.toString();
      cSVFormat1.withIgnoreEmptyLines();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<~\"J/sPD@_y7+xU'.> SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat2);
      Character character0 = new Character('i');
      cSVFormat0.DEFAULT.withCommentMarker(character0);
      CSVFormat.newFormat('j');
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withQuote('k');
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('%');
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withRecordSeparator("The comment start marker character cannot be a line break");
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      cSVFormat3.equals(charBuffer0);
      cSVFormat0.withNullString("The comment start marker character cannot be a line break");
      cSVFormat4.getNullString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      cSVFormat3.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      cSVFormat3.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator('7');
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat5.withRecordSeparator("A@\"UJFY6h");
      cSVFormat4.equals(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character('#');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.withAutoFlush(true);
      cSVFormat5.withHeader(class0);
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('Q');
      cSVFormat4.printer();
      Long long0 = new Long(2918L);
      Double double0 = new Double((-2278L));
      cSVFormat6.equals(double0);
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrailingDelimiter();
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat.newFormat('Q');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w{%rcC");
      cSVFormat1.hashCode();
      cSVFormat1.printRecord(charArrayWriter0, objectArray0);
      cSVFormat2.format(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat0.printRecord(charArrayWriter0, objectArray0);
      cSVFormat2.withEscape('Q');
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) cSVFormat4;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(class0);
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('1');
      cSVFormat5.getHeaderComments();
      CSVFormat.newFormat('1');
      cSVFormat5.printer();
      Long long0 = new Long((-2270L));
      cSVFormat0.equals(cSVFormat6);
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Character.valueOf('J');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      Long long0 = new Long('J');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("G-O]z,th#\"e\"J9|*");
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat6;
      CSVFormat cSVFormat7 = cSVFormat1.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat7.INFORMIX_UNLOAD_CSV.withRecordSeparator("G-O]z,th#\"e\"J9|*");
      cSVFormat7.withTrailingDelimiter();
      cSVFormat6.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.newFormat('b');
      cSVFormat6.toString();
      cSVFormat6.toString();
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.withNullString((String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G-O]z,th#\"e\"J9|*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat6.MYSQL.withQuoteMode(quoteMode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      cSVFormat6.print((Appendable) mockPrintWriter0);
      cSVFormat3.withCommentMarker('s');
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat3.withTrim();
      cSVFormat7.printer();
      cSVFormat7.equals(cSVFormat2);
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat0.withTrim();
      cSVFormat0.printer();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      Character character0 = new Character('J');
      Character character1 = Character.valueOf('q');
      cSVFormat1.withQuote(character1);
      cSVFormat3.withQuote('L');
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      char char0 = 'T';
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVFormat0.POSTGRESQL_CSV.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat_Predefined0.getFormat();
      cSVFormat0.getIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
      cSVFormat3.getHeaderComments();
      cSVFormat3.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('^');
      cSVFormat0.POSTGRESQL_TEXT.withQuote('E');
      char char0 = '-';
      cSVFormat1.withCommentMarker('-');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      String string0 = "lkA?b]cv\" *nN?*)";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("lkA?b]cv\" *nN?*)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.lkA?b]cv\" *nN?*)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('@');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) rowSetMetaDataImpl0;
      cSVFormat6.format(objectArray0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withRecordSeparator('@');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002";
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat1.withQuote('T');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('T');
      cSVFormat2.withCommentMarker('T');
      cSVFormat1.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.withTrim();
      Character character0 = new Character('#');
      Character character1 = Character.valueOf('m');
      cSVFormat1.withEscape(character1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('x');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat3.format(objectArray0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat4.withSkipHeaderRecord();
      char char0 = new Character('x');
      // Undeclared exception!
      try { 
        cSVFormat3.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat3.withAllowMissingColumnNames();
      QuoteMode quoteMode2 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) quoteMode2;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat7 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat7.withFirstRecordAsHeader();
      cSVFormat5.printer();
      Long long0 = new Long((-787L));
      Float float0 = new Float(0.0F);
      cSVFormat7.equals(objectArray0[2]);
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat2.withTrailingDelimiter();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) float0;
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) fileSystemHandling0;
      objectArray1[3] = (Object) cSVFormat_Predefined0;
      cSVFormat5.format(objectArray1);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[0] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat.newFormat('Q');
      cSVFormat1.hashCode();
      cSVFormat0.getAutoFlush();
      cSVFormat1.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('#');
      Character character1 = Character.valueOf('A');
      Character character2 = Character.valueOf('-');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat4.withRecordSeparator("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character1;
      cSVFormat3.format(objectArray0);
      cSVFormat4.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.withHeader((ResultSetMetaData) null);
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
      cSVFormat3.toString();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getRecordSeparator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat2.withDelimiter('9');
      cSVFormat1.withRecordSeparator('J');
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      cSVFormat0.printer();
      Long long0 = new Long((-988L));
      cSVFormat3.equals(class0);
      cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat5.withTrailingDelimiter();
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "org.evosuite.shaded.org.mockito.codegen.ResultSet$MockitoMock$1094414027@0000000005,java.lang.Object@0000000006,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000007,java.lang.Character@0000000008");
      cSVFormat3.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat5.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('c');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('c')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat4.printer();
      Long long0 = new Long((-988L));
      Object object0 = new Object();
      cSVFormat3.equals(object0);
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat6.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Parameter '");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character.valueOf('a');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      CSVFormat.newFormat('?');
      cSVFormat3.printer();
      Long long0 = new Long(0L);
      cSVFormat3.equals(cSVFormat0);
      cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat4.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.TDF.print((Object) null, (Appendable) charArrayWriter0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1955);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      cSVFormat0.equals((Object) null);
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat4.printer();
      Long long0 = new Long((-988L));
      cSVFormat1.equals(quoteMode0);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter();
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat6.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) character0;
      cSVFormat3.format(objectArray0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat3.withQuoteMode(quoteMode1);
      cSVFormat6.getIgnoreSurroundingSpaces();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat7 = cSVFormat_Predefined0.getFormat();
      cSVFormat7.getIgnoreHeaderCase();
      cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withAllowMissingColumnNames();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
      cSVFormat1.withTrim();
      cSVFormat1.printer();
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.getTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      String[] stringArray0 = new String[0];
      cSVFormat6.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.TDF.print((Object) null, (Appendable) charArrayWriter0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1955);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('P')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('v');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('v')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat4.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('S');
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) quoteMode0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) fileSystemHandling0;
      cSVFormat1.format(objectArray0);
      cSVFormat1.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.TDF.withHeader((ResultSetMetaData) null);
      cSVFormat2.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) null, 1539, 1539);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) character0;
      cSVFormat6.format(objectArray0);
      cSVFormat3.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('a');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('?');
      cSVFormat3.printer();
      Long long0 = new Long(0L);
      cSVFormat4.equals(cSVFormat3);
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat2.printer();
      Long long0 = new Long(0L);
      cSVFormat1.equals(long0);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      cSVFormat5.getHeader();
      cSVFormat4.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      CSVFormat.newFormat('?');
      cSVFormat2.withAutoFlush(true);
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat1.withEscape('u');
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.TDF.print((Object) null, (Appendable) charArrayWriter0, false);
      charArrayWriter0.append('X');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1955);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Character character0 = new Character('P');
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.POSTGRESQL_TEXT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.printer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat1.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.INFORMIX_UNLOAD_CSV.printer();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat5 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat4.MYSQL.withQuote('>');
      cSVFormat6.TDF.withAllowMissingColumnNames();
      cSVFormat4.getSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyLines();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "uY6";
      stringArray0[1] = "U6";
      cSVFormat7.INFORMIX_UNLOAD.withHeader(stringArray0);
      cSVFormat4.withTrailingDelimiter();
      cSVFormat5.getRecordSeparator();
      CSVFormat cSVFormat8 = cSVFormat2.withDelimiter('>');
      cSVFormat8.DEFAULT.hashCode();
      cSVFormat2.withTrim(false);
      cSVFormat5.withRecordSeparator("lp");
      CSVFormat.newFormat('x');
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat3.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q@+y$6>GZAN!t");
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
      char char0 = 'Z';
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Z');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('Z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character.valueOf('a');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('?');
      cSVFormat3.printer();
      Long long0 = new Long(0L);
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.withHeader((String[]) null);
      cSVFormat3.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("PostgreSQLText");
      cSVFormat0.DEFAULT.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withEscape('!');
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.POSTGRESQL_TEXT.withRecordSeparator("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) cSVFormat5;
      Object object1 = new Object();
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      cSVFormat6.isQuoteCharacterSet();
      cSVFormat3.withEscape('1');
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat6.printer();
      Long long0 = new Long((-988L));
      cSVFormat5.equals(cSVFormat6);
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat6.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "m L7T|a<0b(=h-/A|";
      cSVFormat1.format(objectArray0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat5.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "6)0kg7";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat1.withTrim();
      cSVFormat2.printer();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat.newFormat('q');
      cSVFormat2.printer();
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('U');
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">7SF8`]v";
      stringArray0[1] = "m FQsNFN2]Xa3c^Wc";
      cSVFormat6.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('a');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('?');
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      cSVFormat3.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((String[]) null);
      cSVFormat4.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("fR4+ua`<v)d/P~Pz7");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('c');
      cSVFormat3.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) cSVFormat5;
      cSVFormat2.format(objectArray0);
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat7.getIgnoreHeaderCase();
      cSVFormat6.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat2.printer();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('@');
      cSVFormat1.printer();
      Long long0 = new Long(0L);
      Character character0 = new Character('@');
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat5);
      cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      cSVFormat2.printer();
      cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('?');
      cSVFormat4.hashCode();
      cSVFormat4.getAutoFlush();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat2.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat5.MYSQL.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat6.getDelimiter();
      cSVFormat5.getHeader();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character.valueOf('a');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('?');
      cSVFormat3.printer();
      Long long0 = new Long(0L);
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat2.printer();
      Long long0 = new Long((-988L));
      cSVFormat2.equals(cSVFormat3);
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CharBuffer.allocate(10);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withSkipHeaderRecord(false);
      Character character0 = new Character('O');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character0);
      CSVFormat.newFormat('O');
      Long long0 = new Long(10);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat2.equals(cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character.valueOf('a');
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('a');
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat2.printer();
      Long long0 = new Long(0L);
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('.');
      cSVFormat5.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVFormat3.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat4 = CSVFormat.newFormat('y');
      cSVFormat3.withRecordSeparator('t');
      cSVFormat4.hashCode();
      cSVFormat2.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat1.withTrim();
      cSVFormat2.printer();
      cSVFormat0.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('H');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
      cSVFormat0.getAutoFlush();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat6.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('h');
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat4.EXCEL.withHeader(resultSet1);
      cSVFormat3.getDelimiter();
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('s');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      cSVFormat1.getHeaderComments();
      CSVFormat.newFormat('?');
      cSVFormat3.printer();
      Long long0 = new Long(0L);
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      Character character0 = new Character('#');
      Character character1 = new Character('#');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat3.printer();
      CSVFormat cSVFormat4 = CSVFormat.newFormat(' ');
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(' ');
      cSVFormat5.hashCode();
      cSVFormat1.getAutoFlush();
      MockPrintStream mockPrintStream0 = new MockPrintStream("&([s>RZ.zQB=hBO");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) null;
      cSVFormat4.printRecord(mockPrintStream0, objectArray0);
      cSVFormat2.getRecordSeparator();
      cSVFormat4.withRecordSeparator("\n");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("m L7T|a<0b(=h-/A|");
      PrintStream printStream0 = mockPrintStream0.append('=');
      cSVFormat0.print((Object) cSVFormat3, (Appendable) printStream0, false);
      CSVFormat cSVFormat6 = cSVFormat3.withEscape((Character) null);
      cSVFormat6.getEscapeCharacter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character0);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
      cSVFormat4.print((Object) printStream0, (Appendable) printStream0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat8.withTrim(false);
      cSVFormat2.hashCode();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat8.withHeader(resultSet0);
      cSVFormat8.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("feW\"Z/");
      mockPrintStream0.append('/');
      cSVFormat0.print((Object) cSVFormat_Predefined0, (Appendable) mockPrintStream0, true);
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.getEscapeCharacter();
      Character.valueOf('i');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker((Character) null);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.print((Object) "m L7T|a<0b(=h-/A|", (Appendable) mockPrintStream0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat2.withTrim(false);
      cSVFormat2.hashCode();
      cSVFormat3.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ope'k$zj!tGDqOpNpO");
      PrintStream printStream0 = mockPrintStream0.append('_');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat1.print((Object) cSVFormat3, (Appendable) printStream0, false);
      Character character0 = Character.valueOf('_');
      cSVFormat1.withEscape(character0);
      cSVFormat2.getEscapeCharacter();
      Character.valueOf('5');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat4.hashCode();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.print((Object) printStream0, (Appendable) mockPrintStream0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat6.withTrim(true);
      cSVFormat4.hashCode();
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.RFC4180.parse(pipedReader0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("m L7T|a<0b(=h-/A|");
      PrintStream printStream0 = mockPrintStream0.append('=');
      cSVFormat0.print((Object) cSVFormat3, (Appendable) printStream0, false);
      CSVFormat cSVFormat6 = cSVFormat3.withEscape((Character) null);
      cSVFormat6.getEscapeCharacter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat7 = cSVFormat5.withCommentMarker(character0);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
      cSVFormat4.print((Object) printStream0, (Appendable) printStream0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat8.withTrim(false);
      cSVFormat2.hashCode();
      cSVFormat8.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat3.withQuote('1');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.getDelimiter();
      cSVFormat6.withEscape('1');
      cSVFormat5.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.printer();
      cSVFormat2.getTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.withRecordSeparator('1');
      cSVFormat2.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('j');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Header:", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&5C *fqdqX~8I";
      objectArray0[1] = (Object) "PG";
      objectArray0[2] = (Object) "w43uu";
      objectArray0[4] = (Object) "w43uu";
      Object object0 = new Object();
      objectArray0[5] = object0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("&5C *fqdqX~8I");
      cSVFormat2.println(mockPrintWriter1);
      cSVFormat2.withTrim(false);
      Object object1 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat0.withQuote('G');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.DEFAULT.withNullString("");
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) cSVFormat4;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(class0);
      cSVFormat0.withHeader(class0);
      CSVFormat.newFormat('1');
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat6.getHeaderComments();
      CSVFormat.newFormat('1');
      cSVFormat5.printer();
      Long long0 = new Long((-2270L));
      cSVFormat3.equals(cSVFormat6);
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVFormat1.format(objectArray0);
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat1.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.getTrim();
      cSVFormat3.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      Character.valueOf('a');
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k`SRek@I&Y(:Cn7/|");
      cSVFormat0.printer();
      CSVFormat.newFormat('a');
      cSVFormat1.withRecordSeparator('t');
      cSVFormat4.hashCode();
      cSVFormat0.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charArrayWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Ddqa/w]bzdHlB");
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Ddqa/w]bzdHlB";
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "Ddqa/w]bzdHlB";
      try { 
        cSVFormat2.POSTGRESQL_TEXT.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("#bQ%J&b+b");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.printer();
      CSVFormat.newFormat('/');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('/');
      cSVFormat2.hashCode();
      cSVFormat1.getAutoFlush();
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.printer();
      cSVFormat3.getTrailingDelimiter();
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withTrim(false);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Character character0 = new Character('H');
      Character character1 = new Character('H');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      Object object0 = new Object();
      cSVFormat1.printer();
      CSVFormat.newFormat('x');
      cSVFormat3.withRecordSeparator('#');
      cSVFormat2.hashCode();
      cSVFormat2.getAutoFlush();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.TDF.print((Object) null, (Appendable) charArrayWriter0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1955);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        mockPrintWriter0.write((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.equals("N");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Character.valueOf('`');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      Long long0 = new Long('`');
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('j');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Header:", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&5C *fqdqX~8I";
      objectArray0[1] = (Object) "PG";
      objectArray0[2] = (Object) "w43uu";
      objectArray0[4] = (Object) "w43uu";
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "&5C *fqdqX~8I", objectArray0);
      cSVFormat2.println(printWriter0);
      cSVFormat2.withTrim(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class1);
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.toString();
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('1');
      cSVFormat6.printer();
      Long long0 = new Long((-2270L));
      cSVFormat4.equals(long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.equals(cSVFormat1);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('?');
      cSVFormat1.withQuote(character0);
      cSVFormat2.withQuote('?');
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('j');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PG";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "w43uu", objectArray0);
      cSVFormat2.println(printWriter0);
      cSVFormat0.POSTGRESQL_TEXT.withTrim(false);
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat2.withEscape('1');
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      cSVFormat1.hashCode();
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat0.getHeader();
      cSVFormat2.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('U');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat5.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000005\tjavax.sql.rowset.RowSetMetaDataImpl@0000000006\torg.apache.commons.csv.CSVFormat@0000000002");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('l');
      cSVFormat4.println(charArrayWriter2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[7];
      cSVFormat2.printer();
      cSVFormat2.format(objectArray0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat4;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) "";
      Object object0 = new Object();
      objectArray1[5] = object0;
      objectArray1[6] = (Object) "N\tN\tN\tN\tN\tN\tN";
      cSVFormat4.withHeaderComments(objectArray1);
      cSVFormat1.format(objectArray1);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -542
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat1.printer();
      CSVFormat.newFormat('U');
      cSVFormat1.hashCode();
      cSVFormat2.withNullString("@6f0#O!7O");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('j');
      Character.valueOf('a');
      Character character0 = new Character('q');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      cSVFormat0.hashCode();
      cSVFormat1.getAutoFlush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "";
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char char0 = '?';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('3');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat1.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.withTrailingDelimiter();
      Character.valueOf('p');
      Character character0 = Character.valueOf('|');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat0.printer();
      CSVFormat.newFormat('~');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Charset.defaultCharset();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat3.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat5.withQuote((Character) null);
      cSVFormat7.getIgnoreHeaderCase();
      cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat5.toString();
      CSVFormat cSVFormat8 = cSVFormat3.withEscape((Character) null);
      CSVFormat cSVFormat9 = cSVFormat8.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat8.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat5.getQuoteCharacter();
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat6.getTrim();
      cSVFormat9.withIgnoreHeaderCase();
      cSVFormat0.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile((File) null, "DX >5ki`II{I");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.MYSQL.print((File) mockFile0, charset0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat2.printer();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('a');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat3.getQuoteCharacter();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.getTrim();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat6.withFirstRecordAsHeader();
      MockFile mockFile1 = new MockFile("The comment start marker character cannot be a line break");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('(');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PG");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "w43uu";
      objectArray0[3] = (Object) "w43uu";
      Object object1 = new Object();
      objectArray0[4] = object1;
      mockPrintWriter0.printf(locale0, "PG", objectArray0);
      cSVFormat2.println(mockPrintWriter0);
      cSVFormat1.withTrim(false);
      Character character0 = new Character('?');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class1);
      CSVFormat.newFormat('j');
      CSVFormat cSVFormat5 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat4.toString();
      cSVFormat0.getHeaderComments();
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('U');
      cSVFormat3.EXCEL.withQuote('U');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
      cSVFormat3.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('$');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('$')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
          Character character0 = new Character('|');
          cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
          CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
          CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
          MockFile mockFile0 = new MockFile("", ";Buf/,T'VYV;O,");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat3.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/;Buf/,T'VYV;O,\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('c');
      cSVFormat2.printer();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat3.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[7];
      cSVFormat2.printer();
      CSVFormat.newFormat('a');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('I');
      cSVFormat3.hashCode();
      cSVFormat3.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("#bQ%J&b+b");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "#bQ%J&b+b";
      objectArray0[4] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat1.printRecord(printWriter0, objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat1.getTrim();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "#bQ%J&b+b";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "#bQ%J&b+b";
      stringArray0[5] = "";
      stringArray0[6] = "pvqx6oll#";
      cSVFormat0.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('`');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat1.printer();
      cSVFormat2.getTrailingDelimiter();
      cSVFormat3.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat2.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("jHmiJj`y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("jHmiJj`y");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "jHmiJj`y", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) bufferedWriter0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) printWriter0;
      objectArray1[4] = (Object) bufferedWriter0;
      objectArray1[5] = (Object) printWriter0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray1);
      cSVFormat1.isNullStringSet();
      cSVFormat0.getTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrim();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getQuoteCharacter();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat0.getTrim();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.isNullStringSet();
      cSVFormat1.getTrim();
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.getQuoteCharacter();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      Character character0 = Character.valueOf('?');
      Character character1 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      cSVFormat2.getIgnoreSurroundingSpaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat2.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('?');
      cSVFormat1.hashCode();
      cSVFormat1.getAutoFlush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat_Predefined0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('a');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      cSVFormat1.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.CSVFormat@0000000001ajava.lang.Object@0000000003ajava.lang.Object@0000000003a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVFormat@0000000001ajava.lang.Object@0000000003ajava.lang.Object@0000000003a
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('K');
      CSVFormat cSVFormat4 = cSVFormat0.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("vpP1qA;e#5RC(cTHXc");
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat6;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat6.format(objectArray0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreHeaderCase();
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat6.format(objectArray0);
      MockFile mockFile0 = new MockFile("ob=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat1.println(mockPrintStream0);
      cSVFormat0.print((Appendable) mockPrintStream0);
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat1.withQuote('U');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withNullString("");
      cSVFormat0.getDelimiter();
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat5.toString();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat2.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat7.getTrim();
      cSVFormat6.withIgnoreHeaderCase();
      cSVFormat4.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('j');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PG";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "w43uu", objectArray0);
      cSVFormat2.println(printWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withTrim(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withHeader(class0);
      cSVFormat4.POSTGRESQL_CSV.withHeader(class0);
      CSVFormat.newFormat('1');
      CSVFormat cSVFormat5 = CSVFormat.newFormat('1');
      cSVFormat5.hashCode();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat6.getAutoFlush();
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("jHmiJj`y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("jHmiJj`y");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "jHmiJj`y", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) bufferedWriter0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) printWriter0;
      objectArray1[4] = (Object) bufferedWriter0;
      objectArray1[5] = (Object) printWriter0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.withHeaderComments(objectArray1);
      cSVFormat0.format(objectArray0);
      cSVFormat0.println(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("CommentStart=<", "PostgreSQLCsv");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat1.withQuote('>');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      MockFile.createTempFile("CommentStart=<", "PostgreSQLCsv");
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat0.printer();
      CSVFormat.newFormat('S');
      cSVFormat0.withQuote('S');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat3.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('h');
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charBuffer1;
      // Undeclared exception!
      try { 
        cSVFormat1.POSTGRESQL_TEXT.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('7');
      cSVFormat1.withAutoFlush(true);
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.withEscape('7');
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("jHmiJj`y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("jHmiJj`y");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "jHmiJj`y", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) bufferedWriter0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) printWriter0;
      objectArray1[4] = (Object) bufferedWriter0;
      objectArray1[5] = (Object) printWriter0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray1);
      cSVFormat1.isNullStringSet();
      cSVFormat0.getTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getQuoteCharacter();
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat0.getTrim();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat3.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat2.getQuoteCharacter();
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat6.getTrim();
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('O');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('O');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator('O');
      cSVFormat5.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "-Q7#\\WPlX,R+U1^Rl";
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "-Q7#WPlX,R+U1^Rl", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "ixO9<}r}\"iwO?";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat4 = cSVFormat1.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.format(objectArray0);
      cSVFormat4.getIgnoreSurroundingSpaces();
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat0.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) cSVPrinter0;
      objectArray1[2] = (Object) "java.lang.Object@0000000009,org.apache.commons.csv.CSVFormat$Predefined@0000000010,,,,";
      objectArray1[3] = (Object) cSVFormat3;
      objectArray1[4] = (Object) cSVFormat3;
      cSVFormat4.format(objectArray1);
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('=');
      cSVFormat0.println(charArrayWriter0);
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
          CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
          File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
          CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
          Charset charset0 = Charset.defaultCharset();
          cSVFormat1.print(file0, charset0);
          CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
          Object[] objectArray0 = new Object[6];
          Object object0 = new Object();
          objectArray0[0] = object0;
          objectArray0[1] = (Object) cSVFormat_Predefined0;
          CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
          cSVFormat1.format(objectArray0);
          cSVFormat3.getIgnoreSurroundingSpaces();
          cSVFormat1.getIgnoreHeaderCase();
          cSVFormat0.getIgnoreEmptyLines();
          CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
          cSVFormat0.format(objectArray0);
          CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
          CharArrayWriter charArrayWriter0 = new CharArrayWriter();
          CharArrayWriter charArrayWriter1 = new CharArrayWriter();
          cSVFormat1.println(charArrayWriter0);
          cSVFormat0.withFirstRecordAsHeader();
          Path path0 = file0.toPath();
          // Undeclared exception!
          try { 
            cSVFormat5.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/CommentStart=<0CommentStart=<\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withCommentMarker('3');
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character.valueOf('4');
      Character character0 = Character.valueOf('4');
      cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('a');
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('Q');
      CharBuffer.allocate(0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.printer();
      Object[] objectArray0 = null;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments((Object[]) null);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1955);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        mockPrintWriter0.write((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('*');
      cSVFormat2.withAutoFlush(true);
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.withEscape('7');
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      char char0 = '!';
      cSVFormat1.TDF.withDelimiter('!');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.printer();
      char char1 = 'U';
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('U');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat2.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat3.withQuote('w');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      cSVFormat4.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("#bQ%J&b+b");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat1.printRecord(printWriter0, objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat1.getTrim();
      String[] stringArray0 = new String[9];
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(stringArray0);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getQuoteCharacter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "pvqx6oll#";
      stringArray0[1] = "K@pXTaa2hw";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.printer();
      cSVFormat3.getTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat4.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(';');
      File file0 = MockFile.createTempFile("j6+s,Lm w", "j6+s,Lm w");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat2.print(file0, charset0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      Appendable appendable0 = null;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = CSVFormat.newFormat('i');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat0.printer();
      cSVFormat3.POSTGRESQL_CSV.withEscape('i');
      cSVFormat3.getTrailingDelimiter();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat4 = cSVFormat_Predefined1.getFormat();
      cSVFormat2.withNullString("");
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat2.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = new Character('?');
      cSVFormat0.withCommentMarker(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getQuoteCharacter();
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVPrinter0;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat3.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) null;
      cSVFormat3.format(objectArray1);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('=');
      cSVFormat4.println(charArrayWriter1);
      cSVFormat0.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[5];
      cSVFormat1.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "NON_NUMERIC");
      cSVFormat1.print((File) mockFile1, charset0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('1');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat1.printer();
      cSVFormat3.getTrailingDelimiter();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat4 = cSVFormat_Predefined1.getFormat();
      cSVFormat4.withNullString("");
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withRecordSeparator('1');
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character.valueOf('a');
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "#bQ%J&b+b";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) "#bQ%J&b+b";
      objectArray0[7] = (Object) "#bQ%J&b+b";
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.toString();
      cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getQuoteCharacter();
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.EXCEL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.printer();
      Character character0 = new Character('X');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      String string0 = "UB";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UB", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "0S'&qkLpF!", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(mockPrintStream1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "CommentStart=<";
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat0.withEscape('v');
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('E');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('U');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      objectArray0[4] = object3;
      objectArray0[5] = object0;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat0.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat3.getRecordSeparator();
      cSVFormat2.getEscapeCharacter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat4.format(stringArray0);
      cSVFormat4.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "PostgreSQLCsv");
      cSVFormat1.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "PostgreSQLCsv";
      objectArray0[6] = (Object) charset0;
      objectArray0[7] = (Object) "PostgreSQLCsv";
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("#bQ%J&b+b");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "#bQ%J&b+b";
      objectArray0[4] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat1.printRecord(printWriter0, objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat1.getTrim();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "#bQ%J&b+b";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "#bQ%J&b+b";
      stringArray0[5] = "";
      stringArray0[6] = "pvqx6oll#";
      stringArray0[7] = "";
      stringArray0[8] = "#bQ%J&b+b";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, #bQ%J&b+b, , , #bQ%J&b+b, , pvqx6oll#, , #bQ%J&b+b]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(575);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat1.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('\'');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat4.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Character character0 = new Character('`');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.TDF.withTrailingDelimiter();
      String string0 = "ee5/O:|:PNuvpgP";
      String string1 = null;
      try { 
        MockURI.URI("\u2028", "ee5/O:|:PNuvpgP", "\u2028");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: \u2028:ee5/O:%7C:PNuvpgP#%E2%80%A8
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withQuote('z');
      Character character0 = Character.valueOf('\"');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('L');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('L');
      cSVFormat1.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#bQ%J&b+b");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.write("#bQ%J&b+b");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      cSVFormat1.printRecord(printWriter0, objectArray0);
      cSVFormat1.isNullStringSet();
      cSVFormat1.getTrim();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "#bQ%J&b+b";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "#bQ%J&b+b";
      stringArray0[5] = "";
      stringArray0[6] = "pvqx6oll#";
      stringArray0[7] = "";
      stringArray0[8] = "#bQ%J&b+b";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, #bQ%J&b+b, , , #bQ%J&b+b, , pvqx6oll#, , #bQ%J&b+b]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(']');
      // Undeclared exception!
      try { 
        cSVFormat2.withDelimiter(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (']')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      char char0 = 'j';
      Character character0 = new Character('j');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withTrim();
      CSVFormat.newFormat('s');
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat0.DEFAULT.withEscape(character0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("t64mRGmG0z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.t64mRGmG0z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withQuote('[');
      CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat4.withEscape('A');
      cSVFormat7.printer();
      cSVFormat1.DEFAULT.withCommentMarker('[');
      Character character0 = Character.valueOf('{');
      cSVFormat3.EXCEL.withCommentMarker(character0);
      cSVFormat2.withTrim(true);
      cSVFormat2.withRecordSeparator("");
      cSVFormat3.getHeader();
      cSVFormat2.TDF.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat8 = cSVFormat6.withCommentMarker((Character) null);
      cSVFormat8.withEscape((Character) null);
      cSVFormat7.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("PostgreSQLText");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getHeader();
      cSVFormat1.getQuoteMode();
      cSVFormat2.withNullString("PostgreSQLText");
      cSVFormat1.withNullString("@6f0#O!7O");
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.withTrim(true);
      cSVFormat1.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat1.DEFAULT.withHeaderComments(objectArray0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat0.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      Character character0 = new Character('?');
      cSVFormat1.POSTGRESQL_TEXT.withEscape(character0);
      Character character1 = Character.valueOf('(');
      cSVFormat1.TDF.withQuote(character1);
      cSVFormat0.RFC4180.withEscape('!');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.withTrim();
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = false;
      cSVFormat0.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('`');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.EXCEL.withAllowMissingColumnNames();
      char char0 = 'r';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('r');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('r')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.printer();
      CSVFormat.newFormat('U');
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('j');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PG", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PG";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "w43uu", objectArray0);
      cSVFormat2.println(printWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withTrim(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withHeader(class0);
      cSVFormat4.POSTGRESQL_CSV.withHeader(class0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('1');
      cSVFormat5.POSTGRESQL_CSV.withIgnoreSurroundingSpaces(true);
      cSVFormat5.EXCEL.toString();
      cSVFormat0.getHeaderComments();
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3998);
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.printRecord(charArrayWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "CommentStart=<";
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('7');
      cSVFormat1.withAutoFlush(true);
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.withEscape('7');
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.DEFAULT.withAllowMissingColumnNames(false);
      char char0 = '!';
      cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape('!');
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("=F{z*`%c");
      Character character0 = new Character('g');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withNullString("GI1X3GDL($3:mS(hWw");
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.getIgnoreHeaderCase();
      Character character1 = Character.valueOf('C');
      cSVFormat1.withEscape(character1);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("=F{z*`%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.=F{z*`%c
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat4.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.format(objectArray0);
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withCommentMarker((Character) null);
      cSVFormat3.EXCEL.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) resultSet0;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat4.TDF.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.POSTGRESQL_CSV.format(objectArray0);
      cSVFormat6.getIgnoreSurroundingSpaces();
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("`:;\"B9v-L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.`:;\"B9v-L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String string0 = "org.apache.commons.csv.CSVFormat$1";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVFormat$1");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      Character character0 = null;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.CSVFormat$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVFormat$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('&');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.RFC4180.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withQuote('&');
      cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSet) null);
      cSVFormat0.getCommentMarker();
      cSVFormat1.EXCEL.withCommentMarker('b');
      Character character1 = new Character('&');
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('&')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      MockFile mockFile0 = new MockFile("fUCzWn0", "fUCzWn0");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.print((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('F');
      cSVFormat2.withTrim(true);
      char char0 = ':';
      Character character0 = Character.valueOf(':');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter(false);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat4.TDF.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      File file0 = MockFile.createTempFile("CommentStart=<", "CommentStart=<");
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(file0, charset0);
      cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.RFC4180.withDelimiter('+');
      cSVFormat4.getQuoteCharacter();
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('F');
      cSVFormat1.toString();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.EXCEL.withHeaderComments(objectArray0);
      cSVFormat1.toString();
      cSVFormat3.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('{');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withIgnoreHeaderCase(false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "N5dy]ma!5K=s$";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "k)O%Eybg;=>*(K:sH";
      stringArray0[4] = "";
      stringArray0[5] = "`gpdL";
      stringArray0[6] = "-boaaC";
      stringArray0[7] = "V}MqKB~wjw+-k\nAx";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, N5dy]ma!5K=s$, , k)O%Eybg;=>*(K:sH, , `gpdL, -boaaC, V}MqKB~wjw+-k
         // Ax]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getRecordSeparator();
      String[] stringArray0 = new String[4];
      cSVFormat0.format(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('K');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('.');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String string0 = "G#no}U.+";
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("G#no}U.+");
      Character character1 = Character.valueOf('n');
      cSVFormat3.withCommentMarker(character1);
      MockFile.createTempFile("W,B;e", "Y+U{]e6KgF|';1}#", (File) null);
      // Undeclared exception!
      try { 
        Charset.forName("G#no}U.+");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G#no}U.+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(';');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrim();
      cSVFormat1.EXCEL.printer();
      cSVFormat1.getTrailingDelimiter();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("khlitny~Nv");
      cSVFormat4.EXCEL.withTrailingDelimiter(false);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withTrim();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat.valueOf("RFC4180");
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "*o1$";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("*o1$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.*o1$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      cSVFormat0.POSTGRESQL_CSV.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      cSVFormat2.RFC4180.withTrailingDelimiter();
      cSVFormat1.withCommentMarker('h');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withSkipHeaderRecord();
      cSVFormat4.hashCode();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentMarker('X');
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'Y';
      charArray0[2] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\u2028";
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(WCLzwWc?R#eh";
      cSVFormat0.format(objectArray0);
      cSVFormat0.printer();
      Long long0 = new Long((-232L));
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat0.equals(cSVFormat_Predefined0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
      try { 
        cSVFormat0.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.POSTGRESQL_CSV.toString();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withQuote('a');
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[8];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat2.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('w');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('$');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      boolean boolean0 = true;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.withDelimiter('$');
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withRecordSeparator('|');
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.INFORMIX_UNLOAD.withTrim();
      cSVFormat5.withIgnoreHeaderCase();
      assertFalse(cSVFormat5.getAutoFlush());
      
      CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat7.getAutoFlush());
      
      cSVFormat4.getCommentMarker();
      String string0 = cSVFormat4.toString();
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false", string0);
      
      boolean boolean0 = cSVFormat6.getIgnoreEmptyLines();
      assertTrue(boolean0);
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat8 = cSVFormat3.withCommentMarker((Character) null);
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
      boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
      assertTrue(boolean0);
      
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat1.printer();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('U', cSVFormat3.getDelimiter());
      
      cSVFormat1.hashCode();
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertEquals('?', (char)cSVFormat1.getCommentMarker());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.getAutoFlush();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('T', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('Z');
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('Z', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      Character character0 = new Character(']');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.EXCEL.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat7.INFORMIX_UNLOAD_CSV.hashCode();
      assertTrue(cSVFormat7.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat8 = cSVFormat4.withTrailingDelimiter(true);
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertTrue(cSVFormat8.getTrailingDelimiter());
      
      cSVFormat0.isNullStringSet();
      cSVFormat6.getAutoFlush();
      assertTrue(cSVFormat5.equals((Object)cSVFormat7));
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      
      cSVFormat3.RFC4180.withDelimiter(']');
      cSVFormat3.withHeader((String[]) null);
      assertEquals("\\N", cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('&', cSVFormat3.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('a', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(';');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withAutoFlush(false);
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withNullString("");
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(';', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("d|_4`%8%&5{-2!7");
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("d|_4`%8%&5{-2!7", cSVFormat1.getNullString());
  }
}
