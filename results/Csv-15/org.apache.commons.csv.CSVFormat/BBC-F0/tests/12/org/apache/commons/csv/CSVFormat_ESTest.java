/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:24:35 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.toString();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      cSVFormat0.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.getRecordSeparator();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('J');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2583);
      cSVFormat4.INFORMIX_UNLOAD.print((Object) cSVFormat3, (Appendable) charArrayWriter0, true);
      cSVFormat4.equals(cSVFormat2);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'G';
      charArray0[2] = 'J';
      charArray0[3] = 'f';
      charArray0[4] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) charBuffer0, 9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Character.valueOf('c');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<._lQ5Z:Z\"Yh@Iv");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      cSVFormat1.withEscape('J');
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('J');
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('A');
      cSVFormat0.equals(cSVFormat4);
      Object object0 = new Object();
      cSVFormat3.equals(character0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.getEscapeCharacter();
      Short short0 = new Short((short)102);
      cSVFormat5.equals(short0);
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(resultSet0);
      cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat1.getHeader();
      cSVFormat0.withTrailingDelimiter();
      cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!AS@{mX-'bX(jj";
      cSVFormat1.format(objectArray0);
      Object object1 = new Object();
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.INFORMIX_UNLOAD.withDelimiter('A');
      cSVFormat2.TDF.withRecordSeparator('\'');
      cSVFormat2.getEscapeCharacter();
      Short short0 = new Short((short)102);
      cSVFormat1.equals("!AS@{mX-'bX(jj");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
      cSVFormat1.getHeaderComments();
      cSVFormat0.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('A');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('A')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('x');
      Character character1 = new Character('2');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('L');
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat2.withAutoFlush(true);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.csv.ExtendedBufferedReader");
      objectArray0[0] = (Object) character0;
      cSVFormat4.format(objectArray0);
      Object object0 = new Object();
      Short short0 = new Short((short)13);
      cSVFormat6.equals(short0);
      CSVFormat cSVFormat7 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat3.getEscapeCharacter();
      Object object1 = new Object();
      cSVFormat7.equals(object1);
      cSVFormat5.getTrim();
      cSVFormat0.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.withCommentMarker('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3N:1(";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat3.withRecordSeparator('1');
      cSVFormat5.format(stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withEscape('f');
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter();
      cSVFormat6.hashCode();
      cSVFormat3.withRecordSeparator("");
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('V');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "InformixUnload";
      stringArray0[1] = "#";
      stringArray0[2] = "y>XdM";
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(stringArray0);
      cSVFormat4.equals("y>XdM");
      Object object0 = new Object();
      cSVFormat3.equals(cSVFormat1);
      cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat5.getEscapeCharacter();
      Short short0 = new Short((short)102);
      Short short1 = new Short((short) (-545));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Character character1 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('\\');
      cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      Object object1 = new Object();
      cSVFormat5.equals(cSVFormat6);
      CSVFormat cSVFormat7 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat7.withTrailingDelimiter(false);
      cSVFormat7.getEscapeCharacter();
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat5.equals(cSVFormat8);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Character character1 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('\\');
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      Object object1 = new Object();
      cSVFormat1.equals(object0);
      cSVFormat5.withTrailingDelimiter(true);
      cSVFormat4.getEscapeCharacter();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.equals(quoteMode0);
      cSVFormat3.getAutoFlush();
      cSVFormat3.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('o');
      Object[] objectArray0 = new Object[4];
      cSVFormat2.POSTGRESQL_CSV.withEscape('g');
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat0.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      cSVFormat5.POSTGRESQL_TEXT.withAutoFlush(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat6.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat7 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat8 = cSVFormat7.withAllowMissingColumnNames();
      cSVFormat7.getRecordSeparator();
      cSVFormat8.withHeaderComments(objectArray0);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat9 = cSVFormat8.withHeaderComments(objectArray0);
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat7.equals((Object) null);
      cSVFormat9.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('=');
      Character character0 = new Character('=');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('=')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat0.TDF.withTrim();
      cSVFormat2.TDF.withTrim(false);
      cSVFormat3.EXCEL.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.RFC4180.printer();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf('p');
      cSVFormat0.RFC4180.withQuote(character0);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      String string0 = "The escape character cannot be a line break";
      try { 
        MockURI.URI("The escape character cannot be a line break");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: The escape character cannot be a line break
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('/');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "@;t3St9dM={";
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[2] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreEmptyLines();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      Character character0 = new Character('%');
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('<');
      cSVFormat6.hashCode();
      CSVFormat cSVFormat7 = cSVFormat0.withTrim();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat.newFormat('<');
      cSVFormat7.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat3.withAutoFlush(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat7;
      objectArray0[7] = (Object) cSVFormat8;
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVFormat5.format(objectArray0);
      Object object3 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat9 = cSVFormat5.withHeader(class0);
      cSVFormat9.equals(cSVFormat1);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.getEscapeCharacter();
      cSVFormat4.equals(objectArray0[4]);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter(true);
      cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withRecordSeparator('&');
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      Character character1 = new Character('z');
      Character character2 = new Character('2');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character2);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('H');
      CSVFormat cSVFormat7 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat6.withAutoFlush(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat8;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat7;
      objectArray0[8] = object0;
      cSVFormat4.format(objectArray0);
      Object object1 = new Object();
      cSVFormat3.equals(cSVFormat8);
      cSVFormat8.withTrailingDelimiter(false);
      cSVFormat4.getEscapeCharacter();
      cSVFormat5.equals(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
      cSVFormat1.getHeaderComments();
      cSVFormat1.getHeaderComments();
      Character character0 = new Character('W');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("]8QaThfI\"z:cs2(BS]");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('M');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      cSVFormat2.equals(cSVFormat_Predefined0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-50));
      cSVFormat1.equals(integer0);
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat1.getEscapeCharacter();
      Short short0 = new Short((short)102);
      cSVFormat4.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3N:1(";
      cSVFormat0.DEFAULT.withHeader(stringArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.EXCEL.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@;t3St9dM={");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "@;t3St9dM={";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) character0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.INFORMIX_UNLOAD.withAutoFlush(false);
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat3.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('f');
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('J');
      cSVFormat4.equals(cSVFormat2);
      Object object0 = new Object();
      cSVFormat1.equals(rowSetMetaDataImpl0);
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat2.getEscapeCharacter();
      Short short0 = new Short((short)102);
      cSVFormat3.equals(short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character.valueOf('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat.newFormat('\\');
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      cSVFormat3.format(objectArray0);
      Character character1 = Character.valueOf('v');
      cSVFormat5.withCommentMarker(character1);
      cSVFormat5.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('%');
      Character character1 = new Character('%');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<._lQ5Z:Z\"Yh@Iv");
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('l');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "x<._lQ5Z:Z\"Yh@Iv";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) "The comment start and the escape character cannot be the same ('";
      cSVFormat4.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.toString();
      cSVFormat3.equals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray0);
      Character character0 = new Character('T');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat4.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withEscape('f');
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("No quotes mode set but no escape character is set");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.No quotes mode set but no escape character is set
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[2] = (Object) "The comment start and the escape character cannot be the same ('";
      cSVFormat2.RFC4180.withTrailingDelimiter();
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The comment start and the escape character cannot be the same ('";
      stringArray0[1] = "@;t3St9dM={";
      cSVFormat2.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(35);
      Object object0 = new Object();
      cSVFormat0.withTrim();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      cSVFormat0.format(objectArray0);
      Object object2 = new Object();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat.newFormat('O');
      Object object3 = new Object();
      cSVFormat0.equals(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      Character character1 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat.newFormat('\\');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat5.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      cSVFormat7.equals(objectArray0[3]);
      cSVFormat7.withTrailingDelimiter(false);
      cSVFormat3.getEscapeCharacter();
      cSVFormat4.equals(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "@;t3St9dM={";
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.getHeader();
      cSVFormat1.withTrailingDelimiter();
      cSVFormat3.withSkipHeaderRecord();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat3.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      String string0 = "The comment start and the escape character cannot be the same ('";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@;t3St9dM={");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      String[] stringArray0 = new String[0];
      cSVFormat3.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase(true);
      try { 
        MockURI.URI("InformixUnloadCsv", "InformixUnloadCsv", "InformixUnloadCsv", 49, "1`bl/{lDRK9~T&32=iz", "@;t3St9dM={", "InformixUnloadCsv");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: InformixUnloadCsv://InformixUnloadCsv@InformixUnloadCsv:491%60bl/%7BlDRK9~T&32=iz?@;t3St9dM=%7B#InformixUnloadCsv
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withTrailingDelimiter(false);
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withQuote('\'');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
      cSVFormat0.getNullString();
      cSVFormat3.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      char char0 = 'f';
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('m');
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('J');
      cSVFormat3.equals(cSVFormat4);
      // Undeclared exception!
      try { 
        cSVFormat5.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'{]CFW2B+!%`?`GZkk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = object0;
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The comment start and the escape character cannot be the same ('";
      cSVFormat2.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('4');
      Object object0 = new Object();
      Integer integer0 = new Integer(3922);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      Object object1 = new Object();
      cSVFormat1.POSTGRESQL_CSV.withTrim();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      cSVFormat2.format(objectArray0);
      Object object3 = new Object();
      cSVFormat0.equals(cSVFormat1);
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('4');
      Object object4 = new Object();
      cSVFormat3.equals(object4);
      cSVFormat0.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.DEFAULT.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Character character1 = Character.valueOf('\\');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat8 = cSVFormat4.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat8;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat7;
      objectArray0[6] = (Object) cSVFormat5;
      cSVFormat6.format(objectArray0);
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)2);
      cSVFormat1.equals(byte0);
      cSVFormat6.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat0.EXCEL.withAutoFlush(false);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('y');
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Locale.getISOLanguages();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('A');
      cSVFormat1.getIgnoreEmptyLines();
      Character character1 = new Character('\\');
      Character character2 = Character.valueOf('\"');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('h');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('9');
      cSVFormat3.getHeaderComments();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.getIgnoreEmptyLines();
      Long long0 = new Long(1448L);
      cSVFormat0.equals(long0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat5.getIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat4.withQuote(character0);
      cSVFormat6.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      cSVFormat4.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      Character character1 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat.newFormat('\\');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat5.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      cSVFormat7.equals(objectArray0[3]);
      cSVFormat6.withIgnoreEmptyLines(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,java.lang.Object@0000000010,org.apache.commons.csv.CSVFormat@0000000001,java.lang.Object@0000000010", true);
      cSVFormat7.printRecord(mockFileWriter0, objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withEscape('f');
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('J');
      cSVFormat2.TDF.withRecordSeparator('n');
      cSVFormat3.equals(cSVFormat2);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat1.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Q');
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat2.withTrim();
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat5.TDF.withHeaderComments(objectArray0);
      cSVFormat0.withNullString("");
      cSVFormat3.getTrailingDelimiter();
      Character character0 = new Character('Q');
      Character character1 = new Character('b');
      cSVFormat0.withEscape(character1);
      cSVFormat2.withQuote('M');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      CSVFormat cSVFormat7 = cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat3.toString();
      cSVFormat5.toString();
      cSVFormat7.withAllowMissingColumnNames(false);
      cSVFormat0.withDelimiter('#');
      cSVFormat1.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat4.getHeader();
      cSVFormat1.withTrailingDelimiter();
      cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat5.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.hashCode();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat3.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat1.equals(cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat5;
      objectArray0[8] = (Object) "";
      cSVFormat2.format(objectArray0);
      Object object2 = new Object();
      Object object3 = new Object();
      cSVFormat2.equals(object3);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat1.isQuoteCharacterSet();
      cSVFormat1.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('0');
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      cSVFormat2.withQuote('4');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat7 = cSVFormat2.withHeader(class0);
      cSVFormat0.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat8 = cSVFormat7.withTrailingDelimiter(true);
      cSVFormat8.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat9 = cSVFormat7.withQuoteMode(quoteMode0);
      cSVFormat9.withSkipHeaderRecord();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat0.hashCode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      cSVFormat3.getTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('.');
      cSVFormat5.withEscape('D');
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.MYSQL.hashCode();
      Character character1 = Character.valueOf('M');
      cSVFormat0.withCommentMarker(character1);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.format(objectArray0);
      cSVFormat2.getTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('M');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withEscape('P');
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("(hadK`t5Q5/pZ$-s$", "pu7[%UAa");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print((File) mockFile0, charset0);
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('U');
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('4');
      boolean boolean0 = true;
      cSVFormat5.withAllowMissingColumnNames(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("file");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.file
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      Character character1 = Character.valueOf('a');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat.newFormat('\\');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat5.withAutoFlush(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      cSVFormat7.equals(objectArray0[3]);
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat5.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lT[V^d(|lue>Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('q');
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat2.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print((File) mockFile0, charset0);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      Character character0 = new Character('[');
      cSVFormat5.withCommentMarker(character0);
      cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "file";
      objectArray0[1] = (Object) character0;
      String string0 = "MySQL";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("MySQL", "\"@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"@
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lT[V^d(|lue>Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreHeaderCase();
      cSVFormat0.getHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat0.printer();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Character character1 = new Character('/');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat.newFormat('Q');
      cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      Object object0 = new Object();
      Long long0 = new Long(407L);
      cSVFormat4.equals(long0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      Object object2 = new Object();
      cSVFormat3.equals((Object) null);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat1.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withEscape('f');
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('J');
      cSVFormat3.equals(cSVFormat2);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lT[V^d(|lue>Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('(');
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat1.getCommentMarker();
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = CSVFormat.newFormat('g');
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreHeaderCase();
      cSVFormat0.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      cSVFormat4.equals(cSVFormat8);
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat8.isQuoteCharacterSet();
      cSVFormat7.withTrailingDelimiter(false);
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat6.isNullStringSet();
      cSVFormat1.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('J');
      cSVFormat2.TDF.withCommentMarker((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('d');
      cSVFormat4.EXCEL.withIgnoreSurroundingSpaces(false);
      cSVFormat3.getHeaderComments();
      cSVFormat1.getIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('J');
      cSVFormat5.equals(cSVFormat3);
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat7 = cSVFormat1.withTrim();
      cSVFormat7.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat0.getHeader();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat1;
      Long long0 = new Long(0L);
      cSVFormat3.equals(long0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print((File) mockFile0, charset0);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('g');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat5.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat1.withQuote('g');
      MockFile mockFile1 = new MockFile("", "file");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      cSVFormat7.println(printWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat8 = cSVFormat7.withHeaderComments((Object[]) null);
      cSVFormat8.printer();
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat6.getTrailingDelimiter();
      cSVFormat5.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat9 = cSVFormat7.withQuote((Character) null);
      CSVFormat cSVFormat10 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat10.getQuoteCharacter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat9.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Object object0 = new Object();
      cSVFormat0.RFC4180.withFirstRecordAsHeader();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[4] = (Object) "";
      cSVFormat0.equals((Object) null);
      cSVFormat0.format(objectArray0);
      cSVFormat0.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      Character character1 = Character.valueOf('[');
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character1);
      cSVFormat4.getHeaderComments();
      cSVFormat4.withSkipHeaderRecord();
      CSVFormat.newFormat('[');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.withAutoFlush(true);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat5.equals(object1);
      CSVFormat cSVFormat6 = cSVFormat4.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(";S-Q)s", "");
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('Z');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.getDelimiter();
      CSVFormat cSVFormat6 = cSVFormat2.withQuote('4');
      CSVFormat cSVFormat7 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat8.withQuote('D');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat6.equals(cSVPrinter0);
      CSVFormat cSVFormat9 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat9.isQuoteCharacterSet();
      cSVFormat6.withNullString("$VALUES");
      cSVFormat4.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "file";
      cSVFormat5.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat6.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat3.withTrim();
      cSVFormat0.withRecordSeparator('q');
      cSVFormat2.isEscapeCharacterSet();
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat8.withTrailingDelimiter(false);
      CSVFormat cSVFormat9 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat9.withSkipHeaderRecord();
      cSVFormat7.hashCode();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('`');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.withRecordSeparator('q');
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat4.withFirstRecordAsHeader();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat2.getCommentMarker();
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      cSVFormat1.withEscape(character0);
      cSVFormat0.hashCode();
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("')");
      cSVFormat3.getTrailingDelimiter();
      cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat6 = cSVFormat3.POSTGRESQL_CSV.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.TDF.withHeader(resultSet0);
      cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat5.withQuote(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (']')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('Z');
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("`VaUq}2`3");
      cSVFormat5.printer();
      MockFile mockFile0 = new MockFile("", "|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('Z');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(class0);
      cSVFormat6.println(mockPrintWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator("");
      cSVFormat7.withHeaderComments(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat6.withTrailingDelimiter(true);
      cSVFormat8.getTrailingDelimiter();
      CSVFormat cSVFormat9 = cSVFormat8.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat2.getCommentMarker();
      Character character0 = Character.valueOf('K');
      cSVFormat4.withQuote(character0);
      cSVFormat9.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("path");
      cSVFormat4.print((Appendable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('0');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(false);
      Object object0 = new Object();
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat5.equals(quoteMode1);
      cSVFormat0.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      cSVFormat6.equals(object1);
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat7.MYSQL.withAllowMissingColumnNames();
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat cSVFormat8 = cSVFormat7.withTrailingDelimiter(false);
      cSVFormat8.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      String[] stringArray0 = cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('g');
      cSVFormat6.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat0.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      cSVFormat7.format(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      cSVFormat5.equals(object1);
      cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat6.withTrailingDelimiter(false);
      CSVFormat cSVFormat8 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.isNullStringSet();
      cSVFormat8.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat1.withEscape('d');
      cSVFormat3.getHeaderComments();
      cSVFormat1.getIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('J');
      cSVFormat4.equals(cSVFormat3);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('0');
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withQuote('4');
      cSVFormat7.RFC4180.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat8 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat8.INFORMIX_UNLOAD.withQuote('U');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.equals(cSVFormat2);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat0.isQuoteCharacterSet();
      CSVFormat cSVFormat9 = cSVFormat2.withNullString("file");
      cSVFormat9.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('g');
      cSVFormat4.withIgnoreHeaderCase();
      cSVFormat0.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      MockFile mockFile0 = new MockFile("");
      cSVFormat3.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat6.withEscape('j');
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      Character.valueOf('?');
      Character character0 = Character.valueOf('F');
      cSVFormat1.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.withSkipHeaderRecord();
      char char0 = 'q';
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('[');
      Character character1 = Character.valueOf('?');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(',');
      cSVFormat5.getHeaderComments();
      cSVFormat5.getIgnoreEmptyLines();
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      cSVFormat6.equals(cSVFormat4);
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.withDelimiter('l');
      cSVFormat1.hashCode();
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat2.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Character character0 = new Character('@');
      cSVFormat2.MYSQL.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat2.withAutoFlush(true);
      Object object0 = new Object();
      Short short0 = new Short((short) (-1046));
      cSVFormat4.equals(short0);
      cSVFormat5.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object object1 = new Object();
      CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
      cSVFormat1.equals(cSVFormat7);
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat4.isQuoteCharacterSet();
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('g');
      cSVFormat4.withRecordSeparator('j');
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.MYSQL.hashCode();
      cSVFormat2.POSTGRESQL_CSV.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat5.equals(cSVFormat0);
      cSVFormat2.format(objectArray0);
      Object object1 = new Object();
      cSVFormat4.equals(objectArray0[1]);
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat1.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@;t3St9dM={");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      Character.valueOf('/');
      cSVFormat3.withEscape(character0);
      cSVFormat0.withCommentMarker('/');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getTrim();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('');
      cSVFormat2.getIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat1.equals(cSVFormat3);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.hashCode();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.MYSQL.hashCode();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withTrim();
      cSVFormat0.EXCEL.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withNullString("')");
      cSVFormat1.getTrailingDelimiter();
      cSVFormat2.TDF.withEscape(character0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('=');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.toString();
      cSVFormat2.toString();
      cSVFormat0.getRecordSeparator();
      cSVFormat3.withRecordSeparator("')");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Character.valueOf('Y');
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('Y');
      Character character1 = new Character(' ');
      cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('#');
      cSVFormat4.MYSQL.hashCode();
      cSVFormat3.getHeaderComments();
      cSVFormat2.getIgnoreEmptyLines();
      Long long0 = new Long(0L);
      cSVFormat0.equals(long0);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withAutoFlush(false);
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat1.withEscape('o');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat6;
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!AS@{mX-'bX(jj");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "!AS@{mX-'bX(jj";
      objectArray0[4] = (Object) "";
      cSVFormat1.equals((Object) null);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat3.getRecordSeparator();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) "\n";
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      cSVFormat2.isCommentMarkerSet();
      MockFile mockFile0 = new MockFile("");
      cSVFormat3.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat2.withAutoFlush(false);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat2.MYSQL.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withRecordSeparator("");
      cSVFormat3.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(false);
      String string0 = "/cgnc(";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cgnc(");
      cSVFormat3.MYSQL.hashCode();
      cSVFormat3.withIgnoreSurroundingSpaces();
      PipedWriter pipedWriter0 = null;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('9');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('9');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('q');
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat4.withTrailingDelimiter(false);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      cSVFormat1.withHeader(resultSet1);
      cSVFormat0.withEscape('B');
      Character character0 = Character.valueOf(']');
      cSVFormat5.withCommentMarker(character0);
      Character character1 = new Character(']');
      cSVFormat2.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('0');
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withQuote('4');
      CSVFormat cSVFormat8 = cSVFormat7.RFC4180.withAllowMissingColumnNames(true);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined0.getFormat();
      MockFile mockFile1 = new MockFile("~7oK|w]}rX51'89~Vu");
      cSVFormat7.withTrim(true);
      cSVFormat2.withAutoFlush(true);
      CSVFormat.Predefined.values();
      cSVFormat1.isCommentMarkerSet();
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.getDelimiter();
      cSVFormat8.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('8');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(';');
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVFormat1.format(objectArray0);
      Character character0 = Character.valueOf('s');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape(character0);
      cSVFormat3.isCommentMarkerSet();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(false);
      cSVFormat8.withTrim();
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat1.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat3.getRecordSeparator();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) "\n";
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@;t3St9dM={");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "@;t3St9dM={";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) character0;
      cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('/')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces(false);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.DEFAULT.parse(pipedReader0);
      CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(false);
      cSVFormat6.EXCEL.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat7 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat3.withEscape('o');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat8;
      cSVFormat7.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('0');
      CSVFormat cSVFormat7 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat8 = cSVFormat2.withQuote('4');
      MockFile mockFile1 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('4');
      cSVFormat0.println(mockPrintWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat5.withHeaderComments(objectArray0);
      CSVFormat cSVFormat9 = cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat9.getTrailingDelimiter();
      cSVFormat7.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat8.getCommentMarker();
      cSVFormat6.withQuote((Character) null);
      cSVFormat7.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat1.withDelimiter('O');
      cSVFormat4.withNullString("\r\n");
      cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat6.withCommentMarker('O');
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withTrailingDelimiter(false);
      cSVFormat1.POSTGRESQL_TEXT.withFirstRecordAsHeader();
      Character character0 = new Character('6');
      cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker('(');
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getTrim();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('/');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@;t3St9dM={");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "@;t3St9dM={";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) character0;
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withRecordSeparator('q');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape((Character) null);
      cSVFormat4.POSTGRESQL_TEXT.withEscape('d');
      cSVFormat4.getHeaderComments();
      cSVFormat1.hashCode();
      cSVFormat3.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat1.withNullString("')");
      cSVFormat1.getTrailingDelimiter();
      Character character1 = new Character('I');
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('I');
      cSVFormat6.withEscape((Character) null);
      cSVFormat6.withQuote('q');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat1.toString();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat7.toString();
      cSVFormat4.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('Q');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat3.withEscape('P');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat5.INFORMIX_UNLOAD.toString();
      String[] stringArray0 = cSVFormat5.getHeaderComments();
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat.newFormat('g');
      cSVFormat6.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat0.withAutoFlush(false);
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      cSVFormat7.format(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object1 = new Object();
      cSVFormat4.equals(object1);
      cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat cSVFormat8 = cSVFormat5.withNullString("\"java.lang.String@0000000007\",\"java.lang.String@0000000008\",\"java.lang.String@0000000009\",\"java.lang.String@0000000010\",\"java.lang.String@0000000011\",\"java.lang.String@0000000012\",\"java.lang.String@0000000013\"");
      cSVFormat8.getQuoteCharacter();
      cSVFormat6.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.isCommentMarkerSet();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("`VaUq}2`3");
      cSVFormat2.printer();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = CSVFormat.newFormat('S');
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      cSVFormat6.TDF.withTrim();
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator('0');
      cSVFormat7.isEscapeCharacterSet();
      cSVFormat3.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("INVALID", "Tcsh");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Tcsh
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('0');
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withQuote('4');
      cSVFormat7.RFC4180.withAllowMissingColumnNames(true);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat8 = cSVFormat_Predefined0.getFormat();
      MockFile mockFile1 = new MockFile("~7oK|w]}rX51'89~Vu");
      cSVFormat8.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat9 = CSVFormat.DEFAULT;
      cSVFormat9.withEscape('0');
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      char char0 = 'j';
      Character.valueOf('j');
      cSVFormat2.EXCEL.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat3.withRecordSeparator("");
      cSVFormat0.printer();
      MockFile mockFile0 = new MockFile("Z6R<OlctMcnOSO~1g", "InformixUnload");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append(']');
      cSVFormat2.println(mockPrintWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat4.getTrailingDelimiter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("QuoteChar=<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.QuoteChar=<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      cSVFormat3.POSTGRESQL_TEXT.withEscape('d');
      cSVFormat0.RFC4180.withRecordSeparator('/');
      cSVFormat3.getHeaderComments();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat1.equals(cSVFormat2);
      cSVFormat0.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('y');
      cSVFormat5.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "url";
      stringArray0[1] = "},]%D&,lJ%BT5_G5!5";
      stringArray0[2] = "";
      stringArray0[3] = "2uI`F";
      stringArray0[4] = "";
      stringArray0[5] = "g+j(Uo'BQEVPs";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [url, },]%D&,lJ%BT5_G5!5, , 2uI`F, , g+j(Uo'BQEVPs]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
          CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
          cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord();
          CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
          cSVFormat2.MYSQL.withQuote('U');
          cSVFormat2.withIgnoreSurroundingSpaces(false);
          Object[] objectArray0 = new Object[6];
          objectArray0[0] = (Object) cSVFormat0;
          objectArray0[1] = (Object) cSVFormat1;
          objectArray0[2] = (Object) class0;
          objectArray0[3] = (Object) cSVFormat0;
          objectArray0[4] = (Object) class0;
          objectArray0[5] = (Object) class0;
          MockFile mockFile0 = new MockFile("i`Ps");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.POSTGRESQL_CSV.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"i`Ps\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor219.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('Z');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.withRecordSeparator('q');
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat4.withTrailingDelimiter(false);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat1.withHeader(resultSet1);
      cSVFormat0.withEscape('B');
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.INFORMIX_UNLOAD.withRecordSeparator('q');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      cSVFormat3.POSTGRESQL_TEXT.withEscape('d');
      cSVFormat3.getHeaderComments();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat1.equals(cSVFormat2);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      cSVFormat1.INFORMIX_UNLOAD.withDelimiter('l');
      cSVFormat1.INFORMIX_UNLOAD.hashCode();
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.MYSQL.withDelimiter('Y');
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      Character character0 = new Character('.');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat2.DEFAULT.withCommentMarker(character0);
      String string0 = "_Y]1Ln";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_Y]1Ln");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        mockPrintStream1.append((CharSequence) "_Y]1Ln", 34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.withCommentMarker('=');
      cSVFormat1.RFC4180.withHeader((ResultSet) null);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('a');
      cSVFormat3.getTrim();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("kJ$ynsZX'Seq:Y%/b");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "kJ$ynsZX'Seq:Y%/b";
      objectArray0[2] = (Object) "kJ$ynsZX'Seq:Y%/b";
      objectArray0[3] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withNullString("hC");
      cSVFormat3.TDF.hashCode();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(true);
      cSVFormat4.withIgnoreHeaderCase();
      String string0 = "c[3 ?B.#";
      // Undeclared exception!
      try { 
        MockURI.create("c[3 ?B.#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 1: c[3 ?B.#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.MYSQL.withQuote('-');
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("i^2cU*m(EY");
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD.withNullString("i^2cU*m(EY");
      cSVFormat4.POSTGRESQL_TEXT.withAutoFlush(true);
      cSVFormat1.withNullString("i^2cU*m(EY");
      cSVFormat3.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("i^2cU*m(EY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.i^2cU*m(EY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.getTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat1.TDF.withTrailingDelimiter(false);
      cSVFormat1.RFC4180.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('6');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("PostgreSQLCsv");
      cSVFormat4.POSTGRESQL_CSV.withQuote((Character) null);
      cSVFormat0.withCommentMarker('o');
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      Character character0 = new Character('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_CSV.withCommentMarker(character0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('v', (char)cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isNullStringSet());
      assertEquals("", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertEquals('v', cSVFormat4.getDelimiter());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withTrim(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertEquals('v', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertEquals('v', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getCommentMarker());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getTrim());
      assertNull(cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getAutoFlush());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat3);
      
      CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator("The quoteChar character and the delimiter cannot be the same ('");
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertEquals('v', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertEquals('v', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat8.isNullStringSet());
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertEquals('v', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getAutoFlush());
      assertNull(cSVFormat8.getNullString());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat3);
      
      CSVFormat cSVFormat9 = cSVFormat7.POSTGRESQL_TEXT.withSkipHeaderRecord();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertEquals('v', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat9.isNullStringSet());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getAutoFlush());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals("\\N", cSVFormat9.getNullString());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertTrue(cSVFormat9.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat9.getQuoteMode());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat2);
      
      CSVFormat cSVFormat10 = cSVFormat1.POSTGRESQL_TEXT.withAutoFlush(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertTrue(cSVFormat10.isEscapeCharacterSet());
      assertNull(cSVFormat10.getCommentMarker());
      assertTrue(cSVFormat10.getAutoFlush());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat10.getDelimiter());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat10.getNullString());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat10.getQuoteMode());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat6);
      
      String string0 = cSVFormat7.getRecordSeparator();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat9));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat10));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteMode());
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertEquals('v', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat10);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertEquals("The quoteChar character and the delimiter cannot be the same ('", string0);
      
      boolean boolean0 = cSVFormat4.getIgnoreHeaderCase();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertEquals('v', cSVFormat4.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat11 = cSVFormat4.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertEquals('v', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat11.getIgnoreEmptyLines());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertNull(cSVFormat11.getRecordSeparator());
      assertEquals('v', cSVFormat11.getDelimiter());
      assertTrue(cSVFormat11.getTrim());
      assertNull(cSVFormat11.getQuoteMode());
      assertTrue(cSVFormat11.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat11.isQuoteCharacterSet());
      assertNull(cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.getAutoFlush());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertFalse(cSVFormat11.isNullStringSet());
      assertTrue(cSVFormat11.getSkipHeaderRecord());
      assertNull(cSVFormat11.getNullString());
      assertNull(cSVFormat11.getCommentMarker());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat11);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat0);
      
      CSVFormat cSVFormat12 = cSVFormat2.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertFalse(cSVFormat12.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat2));
      assertFalse(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat11));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertNull(cSVFormat12.getQuoteCharacter());
      assertNull(cSVFormat12.getNullString());
      assertTrue(cSVFormat12.getTrim());
      assertNull(cSVFormat12.getQuoteMode());
      assertFalse(cSVFormat12.getAutoFlush());
      assertFalse(cSVFormat12.isNullStringSet());
      assertFalse(cSVFormat12.getIgnoreEmptyLines());
      assertNull(cSVFormat12.getEscapeCharacter());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertTrue(cSVFormat12.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertFalse(cSVFormat12.isQuoteCharacterSet());
      assertNull(cSVFormat12.getCommentMarker());
      assertNull(cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.isEscapeCharacterSet());
      assertTrue(cSVFormat12.getSkipHeaderRecord());
      assertEquals('v', cSVFormat12.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertEquals('v', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('v', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getTrim());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('v', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertNotNull(cSVFormat12);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withEscape('u');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('u', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getAutoFlush());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVFormat cSVFormat4 = cSVFormat0.RFC4180.withCommentMarker(':');
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertEquals(':', (char)cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getAutoFlush());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      
      CSVFormat cSVFormat5 = cSVFormat2.withTrim();
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getTrim());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getAutoFlush());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat6.getNullString());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat5);
      
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", ")B^^X?q*BPEJ9[+");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals(7, objectArray0.length);
      
      Character character0 = Character.valueOf('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withSkipHeaderRecord();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertEquals(7, objectArray0.length);
      
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertEquals(7, objectArray0.length);
      
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('j', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertEquals(7, objectArray0.length);
      
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(false);
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals(7, objectArray0.length);
      
      String string0 = cSVFormat6.INFORMIX_UNLOAD.toString();
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(string0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertEquals(7, objectArray0.length);
      
      String[] stringArray0 = cSVFormat6.getHeaderComments();
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(stringArray0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
      
      CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("", cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      
      CSVFormat cSVFormat8 = CSVFormat.newFormat('g');
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getQuoteCharacter());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.getAutoFlush());
      assertEquals('g', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.isQuoteCharacterSet());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNull(cSVFormat8.getCommentMarker());
      assertNull(cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat3);
      
      CSVFormat cSVFormat9 = cSVFormat7.withIgnoreHeaderCase();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertTrue(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("", cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat9.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertTrue(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertTrue(cSVFormat9.isNullStringSet());
      assertEquals('\"', (char)cSVFormat9.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat9.getQuoteCharacter());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat9.getNullString());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat7);
      
      CSVFormat cSVFormat10 = cSVFormat0.withAutoFlush(false);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertTrue(cSVFormat10.equals((Object)cSVFormat0));
      assertTrue(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertTrue(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertTrue(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getTrim());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertEquals("", cSVFormat10.getNullString());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertTrue(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat10.getQuoteMode());
      assertFalse(cSVFormat10.getAutoFlush());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertTrue(cSVFormat10.isEscapeCharacterSet());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = cSVFormat2.equals(object0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(boolean0);
      assertEquals(7, objectArray0.length);
      
      String string1 = cSVFormat10.format(stringArray0);
      assertTrue(cSVFormat6.equals((Object)cSVFormat10));
      assertFalse(cSVFormat6.equals((Object)cSVFormat9));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat8));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertTrue(cSVFormat10.equals((Object)cSVFormat0));
      assertTrue(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertTrue(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertTrue(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getTrim());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertEquals("", cSVFormat10.getNullString());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertTrue(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat10.getQuoteMode());
      assertFalse(cSVFormat10.getAutoFlush());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertTrue(cSVFormat10.isEscapeCharacterSet());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(string1);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat9);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat11 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNull(cSVFormat11.getCommentMarker());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertEquals(',', cSVFormat11.getDelimiter());
      assertFalse(cSVFormat11.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat11.getTrim());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.getIgnoreEmptyLines());
      assertTrue(cSVFormat11.isNullStringSet());
      assertEquals("", cSVFormat11.getNullString());
      assertEquals("\n", cSVFormat11.getRecordSeparator());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat11.getEscapeCharacter());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertTrue(cSVFormat11.isEscapeCharacterSet());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertEquals(7, objectArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = cSVFormat5.equals(object1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat11));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat11));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat10));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('j', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(object1, object0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat11);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertFalse(boolean1);
      assertEquals(7, objectArray0.length);
      
      CSVFormat cSVFormat12 = cSVFormat6.withIgnoreEmptyLines(false);
      assertTrue(cSVFormat6.equals((Object)cSVFormat10));
      assertFalse(cSVFormat6.equals((Object)cSVFormat9));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat8));
      assertTrue(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat11));
      assertTrue(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat11));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat12.equals((Object)cSVFormat1));
      assertTrue(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertTrue(cSVFormat12.equals((Object)cSVFormat2));
      assertTrue(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertTrue(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getCommentMarker());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat12.getQuoteMode());
      assertEquals("\n", cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.getAutoFlush());
      assertEquals("", cSVFormat12.getNullString());
      assertTrue(cSVFormat12.isNullStringSet());
      assertFalse(cSVFormat12.getIgnoreEmptyLines());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertFalse(cSVFormat12.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat12.getTrim());
      assertEquals(',', cSVFormat12.getDelimiter());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat12.getEscapeCharacter());
      assertNull(cSVFormat12.getCommentMarker());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertTrue(cSVFormat12.isEscapeCharacterSet());
      assertNotNull(cSVFormat12);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat9);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat10);
      assertNotSame(cSVFormat6, cSVFormat12);
      assertNotSame(cSVFormat6, cSVFormat11);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertEquals(7, objectArray0.length);
      
      boolean boolean2 = cSVFormat2.isQuoteCharacterSet();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertTrue(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertTrue(cSVFormat1.equals((Object)cSVFormat12));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat11));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat10));
      assertTrue(cSVFormat2.equals((Object)cSVFormat12));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertTrue(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertTrue(boolean2);
      assertEquals(7, objectArray0.length);
      
      CSVFormat cSVFormat13 = cSVFormat7.withTrailingDelimiter(false);
      assertFalse(cSVFormat13.equals((Object)cSVFormat3));
      assertFalse(cSVFormat13.equals((Object)cSVFormat0));
      assertFalse(cSVFormat13.equals((Object)cSVFormat1));
      assertTrue(cSVFormat13.equals((Object)cSVFormat7));
      assertFalse(cSVFormat13.equals((Object)cSVFormat6));
      assertFalse(cSVFormat13.equals((Object)cSVFormat2));
      assertTrue(cSVFormat13.equals((Object)cSVFormat9));
      assertFalse(cSVFormat13.equals((Object)cSVFormat8));
      assertFalse(cSVFormat13.equals((Object)cSVFormat10));
      assertFalse(cSVFormat13.equals((Object)cSVFormat12));
      assertFalse(cSVFormat13.equals((Object)cSVFormat4));
      assertFalse(cSVFormat13.equals((Object)cSVFormat5));
      assertFalse(cSVFormat13.equals((Object)cSVFormat11));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertTrue(cSVFormat0.equals((Object)cSVFormat10));
      assertTrue(cSVFormat0.equals((Object)cSVFormat12));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertTrue(cSVFormat1.equals((Object)cSVFormat12));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertTrue(cSVFormat7.equals((Object)cSVFormat9));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat11));
      assertFalse(cSVFormat7.equals((Object)cSVFormat12));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat10));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertEquals(',', cSVFormat13.getDelimiter());
      assertFalse(cSVFormat13.getTrim());
      assertFalse(cSVFormat13.getAutoFlush());
      assertTrue(cSVFormat13.isQuoteCharacterSet());
      assertTrue(cSVFormat13.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat13.getEscapeCharacter());
      assertFalse(cSVFormat13.getTrailingDelimiter());
      assertFalse(cSVFormat13.getAllowMissingColumnNames());
      assertFalse(cSVFormat13.getIgnoreHeaderCase());
      assertTrue(cSVFormat13.isEscapeCharacterSet());
      assertNull(cSVFormat13.getCommentMarker());
      assertFalse(cSVFormat13.isCommentMarkerSet());
      assertEquals("", cSVFormat13.getNullString());
      assertFalse(cSVFormat13.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat13.getQuoteMode());
      assertEquals("\n", cSVFormat13.getRecordSeparator());
      assertFalse(cSVFormat13.getIgnoreEmptyLines());
      assertTrue(cSVFormat13.isNullStringSet());
      assertEquals('\"', (char)cSVFormat13.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("", cSVFormat7.getNullString());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertNull(cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertNotNull(cSVFormat13);
      assertNotSame(cSVFormat13, cSVFormat3);
      assertNotSame(cSVFormat13, cSVFormat0);
      assertNotSame(cSVFormat13, cSVFormat1);
      assertNotSame(cSVFormat13, cSVFormat9);
      assertNotSame(cSVFormat13, cSVFormat6);
      assertNotSame(cSVFormat13, cSVFormat2);
      assertNotSame(cSVFormat13, cSVFormat8);
      assertNotSame(cSVFormat13, cSVFormat10);
      assertNotSame(cSVFormat13, cSVFormat12);
      assertNotSame(cSVFormat13, cSVFormat7);
      assertNotSame(cSVFormat13, cSVFormat4);
      assertNotSame(cSVFormat13, cSVFormat5);
      assertNotSame(cSVFormat13, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat13);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat13);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat11);
      assertNotSame(cSVFormat7, cSVFormat12);
      assertNotSame(cSVFormat7, cSVFormat13);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat9);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat10);
      assertNotSame(cSVFormat7, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('S', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('S', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals("", cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals('S', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      MockFile mockFile0 = new MockFile("file", "file");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print((File) mockFile0, charset0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('S', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals("", cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals('S', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("file", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/file", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/file/file", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertEquals('S', (char)cSVFormat5.getEscapeCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertEquals('S', (char)cSVFormat5.getEscapeCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat6.getCommentMarker());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals("", cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertTrue(cSVFormat6.isNullStringSet());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('S', (char)cSVFormat6.getEscapeCharacter());
      assertTrue(cSVFormat6.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('0');
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('S', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals("", cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals('S', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('0', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertTrue(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals('S', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAutoFlush());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      
      CSVFormat cSVFormat8 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat8.getEscapeCharacter());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertEquals("\\N", cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertNull(cSVFormat8.getCommentMarker());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat8.getQuoteMode());
      assertEquals('\t', cSVFormat8.getDelimiter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isNullStringSet());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getTrim());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat7);
      
      char char0 = cSVFormat7.getDelimiter();
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat8));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('S', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertEquals("", cSVFormat3.getNullString());
      assertTrue(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.isNullStringSet());
      assertEquals("", cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals('S', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('0', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertTrue(cSVFormat7.getTrim());
      assertTrue(cSVFormat7.isNullStringSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
      assertTrue(cSVFormat7.getSkipHeaderRecord());
      assertEquals('S', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAutoFlush());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals("", cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat8);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertEquals('0', char0);
      
      CSVFormat cSVFormat9 = cSVFormat2.withQuote('4');
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat9.getNullString());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals('4', (char)cSVFormat9.getQuoteCharacter());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertTrue(cSVFormat9.getTrim());
      assertTrue(cSVFormat9.isNullStringSet());
      assertEquals('S', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertNotNull(cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat6);
      
      boolean boolean0 = true;
      CSVFormat cSVFormat10 = cSVFormat9.RFC4180.withAllowMissingColumnNames(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat9.getNullString());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals('4', (char)cSVFormat9.getQuoteCharacter());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertNull(cSVFormat9.getCommentMarker());
      assertEquals(',', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat9.getQuoteMode());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertTrue(cSVFormat9.getTrim());
      assertTrue(cSVFormat9.isNullStringSet());
      assertEquals('S', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertFalse(cSVFormat10.isEscapeCharacterSet());
      assertFalse(cSVFormat10.getAutoFlush());
      assertEquals("\r\n", cSVFormat10.getRecordSeparator());
      assertNull(cSVFormat10.getCommentMarker());
      assertEquals('\"', (char)cSVFormat10.getQuoteCharacter());
      assertNull(cSVFormat10.getQuoteMode());
      assertTrue(cSVFormat10.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertNull(cSVFormat10.getNullString());
      assertNull(cSVFormat10.getEscapeCharacter());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertNotNull(cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat1);
      
      CSVFormat cSVFormat11 = cSVFormat2.withFirstRecordAsHeader();
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertTrue(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat10));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertNull(cSVFormat11.getCommentMarker());
      assertTrue(cSVFormat11.getTrim());
      assertEquals(',', cSVFormat11.getDelimiter());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.getIgnoreEmptyLines());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertFalse(cSVFormat11.getAutoFlush());
      assertTrue(cSVFormat11.isNullStringSet());
      assertEquals("", cSVFormat11.getNullString());
      assertEquals("\n", cSVFormat11.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      assertTrue(cSVFormat11.isEscapeCharacterSet());
      assertTrue(cSVFormat11.isQuoteCharacterSet());
      assertTrue(cSVFormat11.getSkipHeaderRecord());
      assertEquals('S', (char)cSVFormat11.getEscapeCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('S', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('S', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat9);
      
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      assertEquals(CSVFormat.Predefined.InformixUnloadCsv, cSVFormat_Predefined0);
      
      CSVFormat cSVFormat12 = cSVFormat_Predefined0.getFormat();
      assertFalse(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat2));
      assertFalse(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertFalse(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat12.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertNull(cSVFormat12.getEscapeCharacter());
      assertFalse(cSVFormat12.getTrim());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertNull(cSVFormat12.getCommentMarker());
      assertFalse(cSVFormat12.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat12.getQuoteMode());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertFalse(cSVFormat12.getAutoFlush());
      assertEquals(',', cSVFormat12.getDelimiter());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertFalse(cSVFormat12.isNullStringSet());
      assertNull(cSVFormat12.getNullString());
      assertEquals("\n", cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.isEscapeCharacterSet());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertTrue(cSVFormat12.getIgnoreEmptyLines());
      assertNotNull(cSVFormat12);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat1);
      
      MockFile mockFile1 = new MockFile("~7oK|w]}rX51'89~Vu");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "K6!A3lW`wLG`}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // K6!A3lW`wLG`}
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      String string0 = "The delimiter cannot be a line break";
      cSVFormat1.RFC4180.hashCode();
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withSkipHeaderRecord(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getTrim());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getQuoteMode());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertEquals(QuoteMode.NONE, cSVFormat5.getQuoteMode());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('W');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('W', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("B,KPt4j}k;j/jI?G");
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('W', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getAutoFlush());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("B,KPt4j}k;j/jI?G", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrim());
      assertEquals('W', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('<', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('<', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      QuoteMode quoteMode0 = QuoteMode.ALL;
      assertEquals(QuoteMode.ALL, quoteMode0);
      
      // Undeclared exception!
      try { 
        MockURI.create("*+:-MW%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0: *+:-MW%
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.isNullStringSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      String string0 = null;
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      try { 
        cSVFormat2.INFORMIX_UNLOAD.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Class<QuoteMode> class0 = QuoteMode.class;
      PipedReader pipedReader0 = new PipedReader(1093);
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat1.INFORMIX_UNLOAD.parse(pipedReader0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertNotNull(cSVParser0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("y+ja", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVFormat0.getQuoteMode();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertNotSame(cSVFormat0, cSVFormat1);
      
      boolean boolean0 = cSVFormat1.isCommentMarkerSet();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(boolean0);
      
      boolean boolean1 = cSVFormat1.getAllowMissingColumnNames();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(boolean1);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('/');
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('/', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = CSVFormat.newFormat('/');
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertEquals('/', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) null;
      CSVPrinter cSVPrinter0 = cSVFormat1.INFORMIX_UNLOAD.printer();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertNotNull(cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) null;
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertEquals(9, objectArray0.length);
      
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) null);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('/', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertNull(cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('/', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      
      boolean boolean2 = cSVFormat2.getIgnoreEmptyLines();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('/', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertFalse(boolean2);
      
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat6.getAutoFlush());
      assertFalse(cSVFormat6.isNullStringSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('/', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertNull(cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreEmptyLines(true);
      assertTrue(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertEquals('/', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals('/', cSVFormat7.getDelimiter());
      assertNull(cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertNull(cSVFormat7.getQuoteMode());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat6);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('j', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('F');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('Q');
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat1;
      String string0 = cSVFormat4.format(objectArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(string0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertEquals(9, objectArray0.length);
      
      Character character0 = Character.valueOf('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('F', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('H', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('Q', (char)cSVFormat5.getCommentMarker());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      
      boolean boolean0 = cSVFormat2.isCommentMarkerSet();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertFalse(boolean0);
      
      String string1 = cSVFormat3.getRecordSeparator();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertNotNull(string1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertEquals("\n", string1);
      
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('F', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isNullStringSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('H', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('Q', (char)cSVFormat5.getCommentMarker());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('|', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertTrue(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertEquals('H', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAutoFlush());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.getTrim());
      assertEquals('F', (char)cSVFormat6.getQuoteCharacter());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('Q', (char)cSVFormat6.getCommentMarker());
      assertNotNull(cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat1);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) "\n";
      CSVFormat cSVFormat7 = cSVFormat2.withHeaderComments(objectArray1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertTrue(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getCommentMarker());
      assertEquals(',', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertNull(cSVFormat7.getQuoteMode());
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertFalse(cSVFormat7.isEscapeCharacterSet());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat7.getQuoteCharacter());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertNull(cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isNullStringSet());
      assertNull(cSVFormat7.getNullString());
      assertNotNull(cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertEquals(2, objectArray1.length);
      
      CSVFormat cSVFormat8 = cSVFormat4.withEscape(character0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertTrue(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('F', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('Q', (char)cSVFormat3.getCommentMarker());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('|', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('|', cSVFormat8.getDelimiter());
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      assertNull(cSVFormat8.getNullString());
      assertEquals('H', (char)cSVFormat8.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertFalse(cSVFormat8.isNullStringSet());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getAutoFlush());
      assertTrue(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertNull(cSVFormat8.getQuoteMode());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getTrim());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat8.getRecordSeparator());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertNotNull(cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNotNull(cSVFormat0);
      
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = CSVFormat.newFormat('+');
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('+', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat1.DEFAULT.withIgnoreHeaderCase(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withHeader(class0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentMarker());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getQuoteMode());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertNull(cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\u0085";
      stringArray0[1] = "1-0s=NBCc/vjJ$";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        cSVFormat5.DEFAULT.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [\u0085, 1-0s=NBCc/vjJ$, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.MYSQL.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withTrim();
      cSVFormat2.EXCEL.withSkipHeaderRecord(true);
      cSVFormat4.POSTGRESQL_CSV.withNullString("')");
      cSVFormat2.getTrailingDelimiter();
      Character character1 = new Character('=');
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withEscape(character1);
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat6 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('=');
      assertEquals('=', (char)cSVFormat6.getQuoteCharacter());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat2.withQuoteMode(quoteMode0);
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:true", string0);
      
      String string1 = cSVFormat4.toString();
      assertTrue(cSVFormat4.getTrim());
      assertEquals("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", string1);
      
      CSVFormat cSVFormat8 = cSVFormat7.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      assertFalse(cSVFormat7.getAutoFlush());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
          CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
          CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('A');
          MockFile mockFile0 = new MockFile("file");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"file\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor219.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
          cSVFormat_Predefined0.getFormat();
          boolean boolean0 = false;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor56.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withDelimiter('l');
      Character character0 = Character.valueOf('l');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('l')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(true);
      Character character0 = new Character('a');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker('a');
      boolean boolean0 = cSVFormat1.getTrim();
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces(false);
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.DEFAULT.parse(pipedReader0);
      CSVFormat cSVFormat6 = cSVFormat4.withAutoFlush(false);
      CSVFormat cSVFormat7 = cSVFormat6.EXCEL.withIgnoreSurroundingSpaces(true);
      assertTrue(cSVFormat7.isQuoteCharacterSet());
      assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat8 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat8.hashCode();
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(':');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Med9^:}$~94";
      stringArray0[1] = "ALL";
      stringArray0[2] = "org.apache.commons.csv.QuoteMode";
      stringArray0[3] = "34{}gM";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat1.MYSQL.withSkipHeaderRecord(false);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      Character character0 = new Character('D');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      
      cSVFormat1.printer();
      boolean boolean0 = cSVFormat2.getIgnoreEmptyLines();
      assertEquals(' ', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter();
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withDelimiter('R');
      CSVFormat cSVFormat4 = cSVFormat0.EXCEL.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat2.INFORMIX_UNLOAD_CSV.withAutoFlush(true);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.getRecordSeparator();
      cSVFormat4.withHeader((String[]) null);
      cSVFormat1.getCommentMarker();
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat2.withCommentMarker((Character) null);
      MockFile mockFile0 = new MockFile("\r\n");
      // Undeclared exception!
      try { 
        cSVFormat3.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("CpQ)@H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.CpQ)@H
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
