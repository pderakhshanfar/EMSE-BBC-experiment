/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:26:17 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.DEFAULT.withCommentMarker('=');
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat1.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat2.TDF.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat3.POSTGRESQL_TEXT.withQuote('p');
      cSVFormat3.POSTGRESQL_TEXT.withRecordSeparator('J');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat6.getRecordSeparator();
      cSVFormat5.printer();
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote((Character) null);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?8iQ$");
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('?');
      PipedReader pipedReader1 = new PipedReader(2329);
      cSVFormat3.parse(pipedReader1);
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('^');
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "?8iQ$";
      objectArray0[3] = (Object) pipedReader1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) pipedReader1;
      objectArray0[6] = (Object) pipedReader1;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      cSVFormat1.toString();
      cSVFormat5.format(objectArray0);
      cSVFormat4.withTrim();
      cSVFormat4.getHeaderComments();
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat2.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.INFORMIX_UNLOAD.withDelimiter('2');
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat0.hashCode();
      Character character0 = Character.valueOf(';');
      cSVFormat1.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('_');
      cSVFormat2.withTrim();
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)75;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("CSVRecord [comment=");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) (byte)14;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat2.getHeaderComments();
      cSVFormat5.getQuoteCharacter();
      cSVFormat3.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat2.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedReader0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat5 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat8 = cSVFormat6.withQuoteMode(quoteMode1);
      cSVFormat8.format(objectArray0);
      cSVFormat2.withTrim();
      cSVFormat8.getHeaderComments();
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      cSVFormat2.withTrailingDelimiter(false);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("W',cw!OP5UgzI<D");
      cSVFormat2.parse(stringReader0);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('s');
      cSVFormat3.withDelimiter('W');
      Object object1 = new Object();
      cSVFormat4.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.MYSQL.withHeader(class0);
      cSVFormat5.withNullString("\r\n");
      CSVFormat cSVFormat6 = cSVFormat2.withTrim(true);
      cSVFormat6.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('s');
      cSVFormat3.withDelimiter('(');
      Object object1 = new Object();
      cSVFormat5.format(objectArray0);
      cSVFormat5.withNullString("ALLsALL_NON_NULLsMINIMALsNON_NUMERICsNONE\r\n\"org.apache.commons.csv.CSVFormat@0000000005\"s");
      cSVFormat3.getTrailingDelimiter();
      cSVFormat5.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat1.hashCode();
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat3.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('T');
      cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) character0;
      cSVFormat5.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat2.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Object object1 = new Object();
      cSVFormat2.withDelimiter('%');
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('<');
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('U');
      Character.valueOf('s');
      Character character1 = Character.valueOf('I');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character1);
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat3.withCommentMarker('D');
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('6');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.toString();
      Character character0 = new Character('6');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('6')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile((String) null, "CV! 0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("hw^v1vuHIT", objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.print((Object) mockFile0, (Appendable) printWriter0, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      CSVFormat.newFormat('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}cjh\">=% R");
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat4.format(objectArray0);
      cSVFormat4.withNullString((String) null);
      cSVFormat3.getTrailingDelimiter();
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withTrailingDelimiter();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      cSVFormat1.equals(cSVFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)75;
      byteArray0[1] = (byte)1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "32M5G'5";
      objectArray0[1] = (Object) (byte)14;
      objectArray0[3] = (Object) (byte) (-124);
      objectArray0[4] = (Object) (byte) (-124);
      mockPrintWriter1.format("32M5G'5", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('J');
      cSVFormat1.print((Object) null, (Appendable) mockPrintWriter0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      cSVFormat2.printer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('?');
      cSVFormat0.format(objectArray0);
      cSVFormat4.getTrim();
      cSVFormat4.getNullString();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("?");
      cSVFormat5.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      cSVFormat4.EXCEL.withIgnoreHeaderCase(false);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "f@it?(E:O5FK_D=bx";
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withNullString("");
      cSVFormat4.getTrailingDelimiter();
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.isCommentMarkerSet();
      cSVFormat3.withTrailingDelimiter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = new Character('q');
      cSVFormat2.TDF.withEscape(character0);
      cSVFormat2.getRecordSeparator();
      CSVFormat.newFormat('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r\n");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\r\n", objectArray0);
      cSVFormat1.print((Object) "\r\n", (Appendable) printWriter0, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('s');
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('(');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker('3');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      cSVFormat5.format(objectArray0);
      cSVFormat1.withRecordSeparator("HsRk.$8Bs+*:U}");
      cSVFormat5.hashCode();
      cSVFormat7.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(')');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.format(objectArray0);
      cSVFormat1.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat6.withHeader((String[]) null);
      cSVFormat3.getEscapeCharacter();
      cSVFormat2.getHeader();
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(')');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (')')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('<');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      cSVFormat0.withCommentMarker('*');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("/|`va*Jdd}&[%s`iS");
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      Object object2 = new Object();
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter(',');
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker('I');
      cSVFormat0.format(objectArray0);
      cSVFormat2.getTrim();
      CSVFormat cSVFormat8 = cSVFormat5.withTrim();
      Object object3 = new Object();
      cSVFormat6.format(objectArray0);
      cSVFormat7.withNullString("0/YeC:");
      CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat6.getTrailingDelimiter();
      cSVFormat8.withAutoFlush(false);
      cSVFormat9.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.parse(pipedReader0);
      Object object3 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('0');
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker('0');
      cSVFormat4.format(objectArray0);
      cSVFormat2.getTrim();
      CSVFormat cSVFormat6 = cSVFormat1.withTrim();
      Object object4 = new Object();
      cSVFormat6.format(objectArray0);
      cSVFormat5.withNullString("\"org.apache.commons.csv.CSVFormat@0000000001\"0000");
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat7.getTrailingDelimiter();
      cSVFormat4.withTrim(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('8');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("Escape=<", "0,;`{{}wI-i4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 116);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0, true);
      Object object0 = new Object();
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Escape=<";
      objectArray0[1] = (Object) "Escape=<";
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[8] = (Object) "Escape=<";
      cSVFormat0.format(objectArray0);
      cSVFormat2.withNullString("");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      PipedReader pipedReader1 = new PipedReader();
      cSVFormat1.parse(pipedReader1);
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withHeader((String[]) null);
      cSVFormat5.getEscapeCharacter();
      cSVFormat7.getHeader();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat0.POSTGRESQL_TEXT.withTrim(true);
      objectArray0[1] = (Object) quoteMode0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) character0;
      cSVFormat3.format(objectArray0);
      cSVFormat2.withRecordSeparator("\"org.apache.commons.csv.CSVFormat@0000000003\"\t\"org.apache.commons.csv.QuoteMode@0000000006\"\t\"java.lang.Character@0000000007\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fI-RFfS:%-#");
      cSVFormat3.getTrailingDelimiter();
      cSVFormat2.equals(class0);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      cSVFormat2.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "32M5G'5";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "\n";
      CSVFormat cSVFormat3 = CSVFormat.newFormat('9');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 31);
      cSVFormat3.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('G');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('9');
      CSVFormat cSVFormat6 = cSVFormat4.withHeaderComments(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker('4');
      cSVFormat5.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat7.getNullString();
      cSVFormat4.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) pipedWriter0, (Appendable) pipedWriter0, true);
      cSVFormat4.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      cSVFormat2.withCommentMarker('1');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat3.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.withHeader((String[]) null);
      cSVFormat4.getEscapeCharacter();
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character.valueOf('{');
      Character character0 = new Character('(');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Character character1 = new Character('(');
      Character character2 = Character.valueOf('W');
      cSVFormat1.withEscape(character2);
      cSVFormat2.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVParser0;
      objectArray0[2] = (Object) character2;
      objectArray0[3] = (Object) character1;
      objectArray0[5] = (Object) character1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines();
      Object object0 = new Object();
      cSVFormat4.print(object0, (Appendable) pipedWriter0, false);
      cSVFormat3.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character0);
      Character character1 = new Character('4');
      CSVFormat cSVFormat5 = cSVFormat2.withEscape(character1);
      cSVFormat5.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 32);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) cSVParser0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) pipedReader0;
      cSVFormat4.format(objectArray0);
      cSVFormat5.withIgnoreEmptyLines();
      cSVFormat1.print((Object) character1, (Appendable) pipedWriter0, true);
      cSVFormat2.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat0.withHeader((String[]) null);
      cSVFormat6.getEscapeCharacter();
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('1');
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object2 = new Object();
      cSVFormat0.withDelimiter('s');
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('(');
      cSVFormat3.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat5.getNullString();
      cSVFormat4.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) "(startline ", (Appendable) charArrayWriter0, true);
      cSVFormat6.parse(pipedReader0);
      cSVFormat4.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "32M5G'5";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "\n";
      cSVFormat3.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      cSVFormat1.withDelimiter('9');
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.format(objectArray0);
      Object object1 = new Object();
      cSVFormat2.toString();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator(">z?z'yM+xDsN");
      cSVFormat4.withNullString("32M5G'5");
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Character character0 = new Character('?');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat7 = cSVFormat6.RFC4180.withTrailingDelimiter(false);
      CSVFormat cSVFormat8 = cSVFormat6.DEFAULT.withAllowMissingColumnNames(false);
      cSVFormat5.withTrailingDelimiter(false);
      cSVFormat8.printer();
      cSVFormat7.withNullString("No quotes mode set but no escape character is set");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+zeen,$%,0B/i2,F=_<";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('5');
      cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat1.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('%');
      CSVFormat cSVFormat5 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat5.format(objectArray0);
      cSVFormat4.getTrim();
      cSVFormat4.getNullString();
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat6.format(objectArray0);
      cSVFormat4.withTrim();
      cSVFormat2.getHeaderComments();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withRecordSeparator('%');
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      Character.valueOf('8');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("Escape=<", "0,;`{{}wI-i4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 116);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0, true);
      Object object0 = new Object();
      cSVFormat2.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Escape=<";
      objectArray0[1] = (Object) "Escape=<";
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat5.getTrim();
      cSVFormat2.getNullString();
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat1.format(objectArray0);
      cSVFormat5.withTrim();
      cSVFormat4.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[0] = object1;
      cSVFormat1.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object2 = new Object();
      cSVFormat1.withDelimiter('(');
      cSVFormat2.EXCEL.withCommentMarker('(');
      cSVFormat1.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat0.withRecordSeparator("The header contains a duplicate entry: '");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('$');
      Character character1 = new Character('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat1.getTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "f@it?(E:O5FK_D=bx";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "f@it?(E:O5FK_D=bx";
      objectArray0[4] = (Object) character1;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      Double double0 = new Double(3784.8);
      cSVFormat4.equals(double0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat2.hashCode();
      cSVFormat3.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(')');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.format(objectArray0);
      Object object1 = new Object();
      cSVFormat2.toString();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) ")java.lang.Class@0000000001)java.lang.Class@0000000001)org.apache.commons.csv.CSVFormat@0000000002";
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) ")java.lang.Class@0000000001)java.lang.Class@0000000001)org.apache.commons.csv.CSVFormat@0000000002";
      objectArray1[3] = object1;
      objectArray1[4] = object1;
      cSVFormat3.format(objectArray1);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString(">z?z'yM+xDsN");
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat2.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('l');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('1');
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat4.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object2 = new Object();
      cSVFormat0.withDelimiter('s');
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('(');
      cSVFormat3.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat5.getNullString();
      cSVFormat4.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) "(startline ", (Appendable) charArrayWriter0, true);
      cSVFormat6.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      CSVFormat.newFormat('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "32M5G'5";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "32M5G'5";
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.withEscape('9');
      cSVFormat3.print(objectArray0[3], (Appendable) mockPrintWriter0, false);
      Character character0 = Character.valueOf('9');
      cSVFormat2.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          CSVFormat cSVFormat0 = CSVFormat.TDF;
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
          cSVFormat0.withTrailingDelimiter(true);
          Object object0 = new Object();
          Object[] objectArray0 = new Object[5];
          objectArray0[0] = (Object) cSVFormat1;
          objectArray0[1] = (Object) cSVFormat1;
          objectArray0[2] = (Object) cSVFormat1;
          Object object1 = new Object();
          Class<QuoteMode> class0 = QuoteMode.class;
          CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
          CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('\'');
          cSVFormat3.TDF.withQuote('?');
          cSVFormat0.format(objectArray0);
          cSVFormat2.getTrim();
          cSVFormat2.isEscapeCharacterSet();
          CSVFormat.Predefined.values();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.ExtendedBufferedReader");
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("-Z7vB!IL>+\"j>2k0", "\r\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      mockPrintWriter1.format("\r\n", objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote((Character) null);
      Byte byte0 = new Byte((byte)82);
      cSVFormat4.print((Object) byte0, (Appendable) mockPrintWriter1, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Object object1 = new Object();
      cSVFormat1.withDelimiter('F');
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.format(objectArray0);
      cSVFormat3.getTrim();
      cSVFormat2.getNullString();
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat5.withRecordSeparator("org.apache.commons.csv.CSVFormat$Predefined@0000000002\tjava.lang.Class@0000000003");
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('u');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat0.DEFAULT.withEscape('u');
      cSVFormat2.POSTGRESQL_CSV.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("-F.");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.DEFAULT.withHeader(resultSet0);
      CSVFormat.newFormat(']');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.withHeader(class0);
      cSVFormat1.getHeader();
      cSVFormat5.withRecordSeparator('S');
      cSVFormat2.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('z');
      CSVFormat cSVFormat4 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat4.getNullString();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withRecordSeparator((String) null);
      cSVFormat5.getTrailingDelimiter();
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u2029");
      cSVFormat1.getTrailingDelimiter();
      cSVFormat3.equals((Object) null);
      cSVFormat1.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(')');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.format(objectArray0);
      cSVFormat3.isEscapeCharacterSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "''/cx[nag0PvOypq");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      cSVFormat1.equals(cSVFormat2);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('x');
      cSVFormat4.getIgnoreSurroundingSpaces();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat2.getTrailingDelimiter();
      cSVFormat0.equals(cSVFormat1);
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('u');
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("H|b FRY#$1>)Wz");
      cSVFormat4.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.parse(pipedReader0);
      Object object2 = new Object();
      cSVFormat5.withDelimiter('3');
      CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker('u');
      cSVFormat6.EXCEL.withEscape('u');
      cSVFormat6.format(objectArray0);
      cSVFormat4.getTrim();
      cSVFormat4.getNullString();
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat3.withRecordSeparator("H|b FRY#$1>)Wz");
      cSVFormat7.getTrailingDelimiter();
      cSVFormat5.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.INFORMIX_UNLOAD.parse(pipedReader0);
      Object object0 = new Object();
      cSVFormat1.RFC4180.withDelimiter('<');
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat2.EXCEL.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      Object object1 = new Object();
      cSVFormat4.equals(object1);
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat2.toString();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat3.withDelimiter('<');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("N");
      cSVFormat3.getTrailingDelimiter();
      cSVFormat4.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      String string0 = "d-5m'=5c<";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat4.withDelimiter('C');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('C')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = Character.valueOf(')');
      cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat4.getTrailingDelimiter();
      cSVFormat4.equals(cSVFormat0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CommentStart=<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.toString();
      cSVFormat1.print((Appendable) mockPrintStream0);
      CSVFormat.newFormat('o');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("4cKMrS[");
      PrintStream printStream0 = mockPrintStream0.format("4cKMrS[", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 34);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Object object0 = new Object();
      Class<QuoteMode> class1 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class1);
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("4cKMrS[");
      cSVFormat4.print((Appendable) mockPrintStream1);
      CSVFormat.newFormat('t');
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('s');
      CSVFormat cSVFormat7 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat6.format(objectArray0);
      cSVFormat7.withIgnoreEmptyLines();
      Appendable appendable0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        cSVFormat6.withEscape('8');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('8')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      char char0 = ')';
      cSVFormat3.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 27);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object object0 = new Object();
      cSVFormat3.toString();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      cSVFormat1.withNullString("");
      cSVFormat2.print((Appendable) mockPrintStream0);
      CSVFormat.newFormat('2');
      cSVFormat1.isQuoteCharacterSet();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('o');
      cSVFormat4.MYSQL.withCommentMarker(character0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      stringArray0[1] = "";
      cSVFormat4.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) pipedOutputStream0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withNullString("\"\",,java.io.PipedOutputStream@0000000006");
      cSVFormat1.print((Appendable) mockPrintStream0);
      CSVFormat.newFormat('(');
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = false;
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char char0 = 'S';
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('/');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.getCommentMarker();
      cSVFormat2.withDelimiter('/');
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.getAllowMissingColumnNames();
      Locale.getISOLanguages();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cSVFormat3.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat1.format(objectArray0);
      cSVFormat2.withRecordSeparator("");
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('$')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '8';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      Character character0 = new Character('8');
      Character character1 = new Character('k');
      cSVFormat0.withQuote(character1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      char char1 = 'S';
      cSVFormat5.EXCEL.withIgnoreEmptyLines();
      cSVFormat3.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat5.DEFAULT.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) class0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat1.withNullString("Dz");
      cSVFormat1.format(objectArray0);
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Short short0 = new Short((short)8);
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.parse(pipedReader0);
      cSVFormat3.withTrailingDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('8');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat5.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('s');
      CSVFormat cSVFormat7 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.format(objectArray0);
      cSVFormat6.getTrim();
      cSVFormat4.isEscapeCharacterSet();
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      cSVFormat6.withEscape('8');
      // Undeclared exception!
      try { 
        cSVFormat8.print((Object) cSVFormat0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('8');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("Escape=<", "0,;`{{}wI-i4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 116);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0, true);
      Object object0 = new Object();
      cSVFormat2.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Escape=<";
      objectArray0[1] = (Object) "Escape=<";
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "Delimiter=<\t> Escape=<8> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) "Delimiter=<\t> Escape=<8> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[8] = (Object) "Escape=<";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("");
      cSVFormat5.print((Appendable) mockPrintStream0);
      CSVFormat.newFormat('8');
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      cSVFormat2.toString();
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      cSVFormat3.TDF.print((Appendable) mockPrintStream0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('2');
      cSVFormat4.isQuoteCharacterSet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      stringArray0[3] = ",,,,";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > SurroundingSpaces:ignored SkipHeaderRecord:false, ,,,,, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames(false);
      cSVFormat1.TDF.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = new Character(')');
      CSVFormat cSVFormat5 = cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 62);
      cSVFormat5.parse(pipedReader0);
      cSVFormat4.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat5.print((Object) "org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000005,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000003", (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      char char0 = ')';
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(')');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.format(objectArray0);
      cSVFormat3.getTrim();
      cSVFormat3.isEscapeCharacterSet();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray1);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(')');
      // Undeclared exception!
      try { 
        cSVFormat5.print((Object) null, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      PipedReader pipedReader0 = new PipedReader();
      Object object0 = new Object();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withDelimiter('<');
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat1.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat3.withDelimiter('<');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      cSVFormat0.format(objectArray0);
      cSVFormat3.withRecordSeparator("N");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('(');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat4.format(objectArray0);
      cSVFormat3.getTrim();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      cSVFormat5.withQuote('A');
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat6.withIgnoreSurroundingSpaces();
      Character.valueOf('!');
      cSVFormat3.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"org.apache.commons.csv.CSVFormat$Predefined@0000000001\"(\"java.lang.Class@0000000002\"(\"java.lang.Class@0000000002\"(\"org.apache.commons.csv.CSVFormat@0000000003\"");
      cSVFormat2.println(mockFileWriter0);
      cSVFormat6.getHeader();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.getRecordSeparator();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("32M5G'5");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "32M5G'5";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "32M5G'5";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      cSVFormat1.print((Object) "\n", (Appendable) printWriter0, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "";
      Character.valueOf('>');
      Character.valueOf('1');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.getHeaderComments();
      cSVFormat3.withNullString("E<");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = new Character(')');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat2.getHeaderComments();
      cSVFormat6.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('8');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "d-5m'=5c<";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('c');
      cSVFormat5.getTrim();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character character0 = Character.valueOf('8');
      cSVFormat3.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      char char0 = '$';
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.INFORMIX_UNLOAD.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        cSVFormat5.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('8');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      cSVFormat1.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "d-5m'=5c<";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      cSVFormat2.withDelimiter('!');
      cSVFormat0.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withNullString("d-5m'=5c<");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('<');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      Character.valueOf('C');
      cSVFormat4.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("d-5m'=5c<");
      cSVFormat5.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape('(');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('(');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('(');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat1.withHeader(stringArray0);
      cSVFormat1.getQuoteMode();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat6 = cSVFormat2.withEscape(character0);
      PipedReader pipedReader0 = new PipedReader(14);
      cSVFormat6.parse(pipedReader0);
      Object object0 = new Object();
      cSVFormat5.withDelimiter('.');
      cSVFormat1.format(stringArray0);
      cSVFormat4.getTrim();
      cSVFormat0.getNullString();
      CSVFormat cSVFormat7 = cSVFormat3.withAutoFlush(false);
      CSVFormat cSVFormat8 = cSVFormat7.withAllowMissingColumnNames(false);
      cSVFormat8.withFirstRecordAsHeader();
      cSVFormat3.withSkipHeaderRecord();
      cSVFormat8.withNullString("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('A');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      File file0 = MockFile.createTempFile("InformixUnload", "InformixUnload");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.POSTGRESQL_CSV.print(file0, charset0);
      cSVFormat0.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      cSVFormat1.EXCEL.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) quoteMode0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat2.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      Character character0 = cSVFormat5.getEscapeCharacter();
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      cSVFormat6.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('=');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class1);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      boolean boolean0 = false;
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("|3(ydJ(l,,K0");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) mockPrintStream0;
      cSVFormat5.EXCEL.printRecord(mockPrintStream0, objectArray0);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('<');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat0.getNullString();
      cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withNullString("\"java.lang.Object@0000000004\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000003\"");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('-');
      Character character0 = new Character('<');
      Character.valueOf('<');
      Character character1 = Character.valueOf('O');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      cSVFormat2.getCommentMarker();
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat3.getAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat4.getHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      char[] charArray0 = new char[1];
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      charArray0[0] = '`';
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote('L');
      cSVFormat2.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withAllowMissingColumnNames();
      CSVFormat.newFormat('`');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat0.println(charBuffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' must not be null!");
      cSVFormat2.getTrailingDelimiter();
      cSVFormat1.equals("Delimiter=<,> QuoteChar=<L> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat3.hashCode();
      cSVFormat3.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      char[] charArray0 = new char[1];
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      charArray0[0] = '`';
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('<');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat3.getNullString();
      cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('L');
      cSVFormat1.toString();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('3');
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'L';
      charArray0[2] = '3';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat2.println(charBuffer1);
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat2.withDelimiter('=');
      cSVFormat2.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat1.isEscapeCharacterSet();
      Character.valueOf('^');
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.getCommentMarker();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('C');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat5.getHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat3.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = CSVFormat.newFormat('$');
      Character character0 = Character.valueOf('$');
      cSVFormat2.TDF.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('$')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Character character1 = new Character('R');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      cSVFormat4.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1237);
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(')');
      cSVFormat6.parse(pipedReader0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) character0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.print((Object) cSVFormat0, (Appendable) pipedWriter0, true);
      cSVFormat7.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('(');
      CSVFormat.newFormat('(');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('(');
      cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat1.withHeader(stringArray0);
      cSVFormat1.getQuoteMode();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat7 = cSVFormat2.withEscape(character0);
      cSVFormat7.getCommentMarker();
      cSVFormat4.withHeaderComments(stringArray0);
      cSVFormat3.format(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord((Appendable) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('=');
      Class<QuoteMode> class0 = QuoteMode.class;
      Object object0 = new Object();
      cSVFormat2.printer();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      cSVFormat3.getNullString();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('8');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("d-5m'=5c<");
      cSVFormat1.withTrailingDelimiter(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "d-5m'=5c<";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      cSVFormat2.withDelimiter('!');
      cSVFormat0.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat3.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character.valueOf('<');
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('^');
      cSVFormat4.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = new Character(')');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[4];
      PipedReader pipedReader0 = new PipedReader(33);
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      cSVFormat1.withDelimiter('<');
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat5.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat0.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character.valueOf('<');
      cSVFormat3.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      Character character2 = new Character('V');
      cSVFormat6.withQuote(character2);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withSkipHeaderRecord();
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f@it?(E:O5FK_D=bx");
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("reader");
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('\"');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.INFORMIX_UNLOAD.withEscape('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.TDF.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("V:Vb|2e~J_7");
      cSVFormat4.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.getTrim();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat3.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.MYSQL.withTrailingDelimiter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".Z7T3-$5m$85T";
      stringArray0[1] = "\r\n";
      stringArray0[2] = "Vggv";
      stringArray0[3] = " `cBkg9QRW:&byk)L";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "!lb]j,LgwZw:.VID";
      stringArray0[7] = "";
      stringArray0[8] = ") invalid parse sequence";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [.Z7T3-$5m$85T, \r
         // , Vggv,  `cBkg9QRW:&byk)L, , , !lb]j,LgwZw:.VID, , ) invalid parse sequence]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat.newFormat('-');
      Character character0 = new Character('<');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withEscape(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GvY#9{C):B;^=");
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('B');
      cSVFormat0.MYSQL.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.printer();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      cSVFormat0.RFC4180.withEscape(character0);
      Character character1 = new Character(')');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, ' ');
      cSVFormat2.INFORMIX_UNLOAD.parse(pipedReader0);
      cSVFormat0.format(objectArray0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000005\torg.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000003");
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(true);
      Character character2 = new Character(')');
      cSVFormat5.withCommentMarker(character2);
      boolean boolean0 = true;
      URI uRI0 = MockURI.URI("Header:", "Header:", "Header:");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=L-_z\"{&/qy/y4vz";
      stringArray0[1] = "W&m>:+";
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote(character0);
      stringArray0[2] = "mn8'_pT*(x";
      cSVFormat0.INFORMIX_UNLOAD.withTrim(false);
      cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      cSVFormat0.withTrailingDelimiter();
      stringArray0[3] = "striing";
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat3.POSTGRESQL_CSV.withHeader(stringArray0);
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      cSVFormat2.withEscape(character0);
      Character character1 = new Character('9');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      cSVFormat1.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1525);
      CSVParser cSVParser0 = cSVFormat5.parse(pipedReader0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedWriter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVParser0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat5.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat6.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '8';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.withAllowMissingColumnNames(false);
      Character.valueOf('8');
      Character character0 = new Character('k');
      cSVFormat0.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      char char1 = 'S';
      // Undeclared exception!
      try { 
        cSVFormat4.DEFAULT.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape('(');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('(');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat5 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat7.printer();
      CSVFormat cSVFormat8 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat6.getDelimiter();
      cSVFormat3.withNullString("");
      cSVFormat2.withRecordSeparator('j');
      cSVFormat7.withDelimiter('h');
      cSVFormat4.isNullStringSet();
      cSVFormat1.withDelimiter('{');
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      String string0 = "d-5m'=5c<";
      cSVFormat1.withNullString("d-5m'=5c<");
      cSVFormat0.withRecordSeparator('C');
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      char char0 = '>';
      Character character0 = Character.valueOf('C');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('C')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      char char0 = '$';
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        cSVFormat5.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('=');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.getNullString();
      cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat1.withEscape('(');
      CSVFormat.newFormat('(');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('(');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(stringArray0);
      cSVFormat1.getQuoteMode();
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat6 = cSVFormat2.withEscape(character0);
      cSVFormat6.getCommentMarker();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat4.getHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat7.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('y');
      Character character1 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) character0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      Character.valueOf('C');
      Character character2 = Character.valueOf('/');
      cSVFormat1.withCommentMarker(character2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('o');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("charset");
      cSVFormat4.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      char char0 = 'B';
      Character.valueOf('B');
      cSVFormat0.withQuote('B');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character.valueOf('B');
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.getHeaderComments();
      cSVFormat1.getIgnoreSurroundingSpaces();
      Character character1 = cSVFormat3.getQuoteCharacter();
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('=');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.withQuoteMode(quoteMode0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("<e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.<e
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('(');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('(');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat3.getHeaderComments();
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat.Predefined.values();
      CharBuffer.wrap((CharSequence) "");
      cSVFormat0.equals(cSVFormat2);
      cSVFormat4.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object object0 = new Object();
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = object0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) pipedOutputStream0;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withNullString("OM.EKuy^=R-ObOmSA3");
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      cSVFormat3.print((Appendable) mockPrintStream0);
      CSVFormat.newFormat('>');
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "";
      cSVFormat1.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      Object object1 = new Object();
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('<');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat5.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character character0 = Character.valueOf('^');
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      cSVFormat6.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0, 35);
      cSVFormat1.parse(pipedReader0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("NONE");
      Integer integer0 = new Integer(35);
      cSVFormat5.print((Object) integer0, (Appendable) pipedWriter0, false);
      cSVFormat4.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      cSVFormat1.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[1];
      cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat5.printer();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat6.getDelimiter();
      cSVFormat1.withNullString(stringArray0[0]);
      cSVFormat3.withRecordSeparator('$');
      cSVFormat5.isNullStringSet();
      cSVFormat4.withDelimiter('7');
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.csv.Constants";
      stringArray0[1] = "";
      stringArray0[2] = "SbI!g'HRxI>uzVUeB";
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '<';
      charArray0[2] = '&';
      charArray0[3] = '{';
      charArray0[4] = 'A';
      charArray0[5] = '^';
      charArray0[6] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.EXCEL.print((Appendable) charBuffer0);
      stringArray0[3] = "The header contains a duplicate name: \"";
      stringArray0[4] = "E\"7uk&]<(29=";
      stringArray0[5] = "s 5rk0D6$DH;xz";
      stringArray0[6] = "AG'%K.";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.shouldAllThrowIOExceptions();
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)29;
          byteArray0[1] = (byte)4;
          byteArray0[2] = (byte)31;
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          CSVFormat cSVFormat0 = CSVFormat.RFC4180;
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
          MockPrintStream mockPrintStream0 = new MockPrintStream("g+o&LuFC$");
          cSVFormat1.INFORMIX_UNLOAD.println(mockPrintStream0);
          cSVFormat0.EXCEL.withSkipHeaderRecord();
          CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
          cSVFormat1.TDF.withNullString("-,,(Z$Cicc^hrb7nH)");
          MockFile mockFile0 = new MockFile("org.apache.commons.csv.ExtendedBufferedReader", "org.apache.commons.csv.ExtendedBufferedReader");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.DEFAULT.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/org.apache.commons.csv.ExtendedBufferedReader/org.apache.commons.csv.ExtendedBufferedReader\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('=');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.getNullString();
      cSVFormat0.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.withIgnoreSurroundingSpaces();
      Character.valueOf(']');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(']');
      char char0 = 'G';
      Character character0 = new Character('G');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withIgnoreHeaderCase(false);
      Character character1 = new Character('3');
      Character character2 = new Character(']');
      cSVFormat3.withEscape(character2);
      cSVFormat1.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 34);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('$');
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("VVsKmd-Z&XC");
      cSVFormat1.parse(stringReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('<');
      cSVFormat3.format(objectArray0);
      cSVFormat2.getTrim();
      cSVFormat4.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character.valueOf('$');
      CSVFormat cSVFormat5 = cSVFormat0.withQuote((Character) null);
      cSVFormat5.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('7');
      cSVFormat4.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withIgnoreEmptyLines(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "d-5m'=5c<";
      stringArray0[1] = "d-5m'=5c<";
      stringArray0[2] = "d-5m'=5c<";
      stringArray0[3] = "d-5m'=5c<";
      stringArray0[4] = "d-5m'=5c<";
      stringArray0[5] = "d-5m'=5c<";
      stringArray0[6] = "d-5m'=5c<";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'd-5m'=5c<' in [d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      char[] charArray0 = new char[1];
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      charArray0[0] = '`';
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote('`');
      cSVFormat2.toString();
      cSVFormat2.DEFAULT.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('`');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.println(charBuffer1);
      cSVFormat3.POSTGRESQL_TEXT.withQuote('`');
      cSVFormat0.withTrailingDelimiter(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat1.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withRecordSeparator('B');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withDelimiter('B');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("INVALID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.INVALID
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      cSVFormat4.withIgnoreHeaderCase(false);
      Character character1 = new Character(' ');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape(character0);
      cSVFormat2.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      cSVFormat4.parse(pipedReader0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) character1;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat4.format(objectArray0);
      cSVFormat5.withIgnoreEmptyLines();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat0.print(object0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat0.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      Character character1 = Character.valueOf(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      Character character2 = new Character('D');
      cSVFormat3.withEscape(character0);
      cSVFormat5.isEscapeCharacterSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 19);
      cSVFormat2.parse(pipedReader0);
      Object[] objectArray0 = new Object[0];
      cSVFormat5.format(objectArray0);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat6.print((Object) character1, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withCommentMarker((Character) null);
      cSVFormat2.getAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('o');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withDelimiter('f');
      cSVFormat4.withIgnoreEmptyLines();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      cSVFormat6.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\u2028");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\u2028
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.RFC4180.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withHeader(class0);
      Character character0 = new Character('R');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat0.getAllowMissingColumnNames();
      char char0 = '2';
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('2');
      cSVFormat2.withTrailingDelimiter();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("8y9vR;E2>M``", "8y9vR;E2>M``");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 8y9vR;E2>M``
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('y');
      cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Qa!:4");
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Header:";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      boolean boolean0 = true;
      cSVFormat3.withIgnoreSurroundingSpaces();
      char char0 = '{';
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("1*,>+J[A1W{A!Z1tl`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.1*,>+J[A1W{A!Z1tl`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('B');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('B');
      cSVFormat0.format(objectArray0);
      cSVFormat0.getTrim();
      cSVFormat2.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character.valueOf('<');
      cSVFormat0.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      char char0 = 'B';
      Character.valueOf('B');
      Character character0 = new Character('!');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat1.withQuote('c');
      cSVFormat0.withTrailingDelimiter();
      String string0 = "XS/MhD";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("%", "%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      Character character1 = Character.valueOf('g');
      cSVFormat2.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withQuote('!');
      Character character0 = new Character('!');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat2.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.POSTGRESQL_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withEscape(':');
      cSVFormat1.DEFAULT.withSkipHeaderRecord();
      cSVFormat4.POSTGRESQL_TEXT.withRecordSeparator('q');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat5.TDF.withDelimiter('f');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      cSVFormat6.EXCEL.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.CSVFormat");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVFormat
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.DEFAULT.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char char0 = 'C';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.withEscape('7');
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat3.withQuote('y');
      cSVFormat1.withTrailingDelimiter();
      String string0 = "XS/MhD";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("'w9Bxe6Sh}Xk]", "c9uEEVt3iX8ptnqP");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // c9uEEVt3iX8ptnqP
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.RFC4180.toString();
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("PostgreSQLText");
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.TDF.print((File) mockFile0, charset0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[1];
      cSVFormat0.POSTGRESQL_TEXT.withQuote('Q');
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.POSTGRESQL_CSV.toString();
      cSVFormat0.format(objectArray0);
      cSVFormat2.withNullString("");
      CSVFormat.newFormat('Q');
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) cSVFormat4;
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat6 = cSVFormat4.withQuoteMode(quoteMode1);
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat5.printer();
      cSVFormat1.getDelimiter();
      cSVFormat4.withNullString("e\"Ok;");
      cSVFormat1.isNullStringSet();
      cSVFormat0.withDelimiter('?');
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withSkipHeaderRecord(false);
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withHeaderComments((Object[]) null);
      cSVFormat2.printer();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('2');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "VbYI.8e q%tr2kMyR";
      stringArray0[1] = "bn";
      stringArray0[2] = "B3e?n";
      stringArray0[3] = "wF@u#Ku|]";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "d-5m'=5c<";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat2.printer();
      cSVFormat7.getDelimiter();
      cSVFormat4.withNullString("d-5m'=5c<");
      cSVFormat6.isNullStringSet();
      // Undeclared exception!
      try { 
        cSVFormat7.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char char0 = ':';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Header:";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('{');
      cSVFormat5.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'n';
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('n')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getTrim();
      Character character0 = new Character('I');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("d-5m'=5c<");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('7');
      cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat3.printer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "d-5m'=5c<";
      stringArray0[1] = "d-5m'=5c<";
      stringArray0[2] = "d-5m'=5c<";
      stringArray0[3] = "d-5m'=5c<";
      stringArray0[4] = "d-5m'=5c<";
      stringArray0[5] = "d-5m'=5c<";
      stringArray0[6] = "d-5m'=5c<";
      stringArray0[7] = "d-5m'=5c<";
      stringArray0[8] = "d-5m'=5c<";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'd-5m'=5c<' in [d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<, d-5m'=5c<]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      String string0 = "";
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat4.POSTGRESQL_TEXT.withFirstRecordAsHeader();
      cSVFormat3.RFC4180.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('e');
      cSVFormat5.getHeaderComments();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.DEFAULT.withCommentMarker('o');
      cSVFormat4.withRecordSeparator('F');
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character(']');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('O');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("#{gUDM0mKM!}O'c\"Jj");
      cSVFormat5.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.MYSQL.withCommentMarker((Character) null);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat1.withQuote('y');
      cSVFormat2.withTrailingDelimiter();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("XS/MhD", "XS/MhD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // XS/MhD
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat0.EXCEL.withEscape('f');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.POSTGRESQL_TEXT.withHeader(resultSet0);
      cSVFormat2.EXCEL.parse(pipedReader0);
      cSVFormat2.withEscape((Character) null);
      cSVFormat2.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(')');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat4.RFC4180.withQuote(')');
      cSVFormat1.DEFAULT.withTrailingDelimiter();
      cSVFormat4.withDelimiter(')');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat4.POSTGRESQL_TEXT.withTrailingDelimiter();
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=L-_z\"{&/qy/y4vz";
      stringArray0[1] = "W&m>:+";
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote(character0);
      stringArray0[2] = "mn8'_pT*(x";
      cSVFormat0.INFORMIX_UNLOAD.withTrim(false);
      cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      stringArray0[3] = "string";
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat4.POSTGRESQL_CSV.withHeader(stringArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat0.getCommentMarker();
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat0.getHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat1.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withDelimiter('$');
      int int0 = 92;
      PipedReader pipedReader0 = new PipedReader(92);
      cSVFormat0.parse(pipedReader0);
      cSVFormat0.EXCEL.withAllowMissingColumnNames();
      char char0 = 'U';
      cSVFormat0.TDF.withQuote('U');
      URI uRI0 = MockURI.URI((String) null, "", "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.withQuoteMode(quoteMode1);
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        cSVFormat2.RFC4180.print((Object) double0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "";
      cSVFormat1.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      cSVFormat3.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Character character0 = Character.valueOf('>');
      cSVFormat1.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.format(objectArray0);
      Character.valueOf('x');
      cSVFormat4.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat0.RFC4180.withEscape(character0);
      cSVFormat4.TDF.withIgnoreHeaderCase(false);
      Character character1 = new Character(')');
      CSVFormat cSVFormat5 = cSVFormat2.withEscape(character1);
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      cSVFormat2.INFORMIX_UNLOAD.parse(pipedReader0);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) cSVFormat6, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String string0 = "!Q$M$-uv";
      cSVFormat0.MYSQL.withRecordSeparator("!Q$M$-uv");
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      char char0 = ',';
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat1.POSTGRESQL_CSV.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.INFORMIX_UNLOAD.parse(pipedReader0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withDelimiter('<');
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat2.EXCEL.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat1.isEscapeCharacterSet();
      CSVFormat.Predefined.values();
      Character character0 = Character.valueOf('^');
      cSVFormat4.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Character character0 = Character.valueOf(']');
      cSVFormat1.EXCEL.withQuote(character0);
      cSVFormat1.RFC4180.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getNullString();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.printer();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Character character1 = new Character('_');
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('_')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat0.hashCode();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('M');
      cSVFormat0.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      MockFile mockFile0 = new MockFile("W_MqN;|<^");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("W_MqN;|<^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // W_MqN;|<^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim(false);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      // Undeclared exception!
      try { 
        cSVFormat2.RFC4180.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('B');
      cSVFormat0.MYSQL.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.RFC4180.format(objectArray0);
      Character character1 = Character.valueOf('g');
      cSVFormat2.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.POSTGRESQL_TEXT.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('+');
      Float float0 = new Float(867.3);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      cSVFormat1.withTrailingDelimiter();
      Character character0 = new Character('\"');
      cSVFormat2.RFC4180.withQuote(character0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat2.MYSQL.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) float0, (Appendable) charBuffer1, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withSkipHeaderRecord(false);
      boolean boolean1 = false;
      cSVFormat1.TDF.withIgnoreHeaderCase(false);
      cSVFormat0.getDelimiter();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withRecordSeparator('+');
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("g dzaQq0sk5?,d,", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      cSVFormat0.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat4.EXCEL.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat7.POSTGRESQL_TEXT.printer();
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      
      char char0 = cSVFormat1.getDelimiter();
      assertEquals('2', char0);
      
      cSVFormat3.RFC4180.withNullString("");
      boolean boolean0 = cSVFormat4.isNullStringSet();
      assertFalse(boolean0);
      
      CSVFormat cSVFormat8 = cSVFormat6.withDelimiter('=');
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      assertTrue(cSVFormat5.getTrim());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      Character character0 = Character.valueOf('L');
      cSVFormat0.EXCEL.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      cSVFormat0.getAutoFlush();
      OutputStream outputStream0 = null;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('L');
      cSVFormat1.withIgnoreHeaderCase(false);
      File file0 = null;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('=');
      cSVFormat1.printer();
      cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
      boolean boolean0 = cSVFormat0.getTrailingDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      char[] charArray0 = new char[1];
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      
      charArray0[0] = '`';
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withQuote('L');
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> QuoteChar=<L> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withAllowMissingColumnNames();
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat4 = CSVFormat.newFormat('`');
      assertFalse(cSVFormat4.getTrailingDelimiter());
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat0.println(charBuffer1);
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter(true);
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getAutoFlush());
      
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat4.withQuoteMode(quoteMode0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getTrim());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      cSVFormat0.DEFAULT.withTrailingDelimiter(true);
      cSVFormat0.withAutoFlush(true);
      char char0 = 'l';
      String string0 = "ge=sMd:WW12y";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("ge=sMd:WW12y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.ge=sMd:WW12y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("`'4#");
          Class<Token.Type> class0 = Token.Type.class;
          CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
          CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
          Appendable appendable0 = null;
          Object[] objectArray0 = new Object[7];
          objectArray0[0] = (Object) rowSetMetaDataImpl0;
          objectArray0[1] = (Object) class0;
          objectArray0[2] = (Object) cSVFormat3;
          objectArray0[3] = (Object) class0;
          MockFile mockFile0 = new MockFile("\" in ", "`'4#");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.MYSQL.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/\" in /`'4#\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 5);
      cSVFormat0.POSTGRESQL_TEXT.parse(pipedReader0);
      cSVFormat0.getCommentMarker();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '{';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('{');
      Character character0 = new Character('{');
      cSVFormat1.RFC4180.withCommentMarker(character0);
      cSVFormat1.withTrim();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        cSVFormat4.RFC4180.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
