/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:22:01 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.println(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      Object object0 = new Object();
      cSVFormat0.printer();
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      cSVFormat1.toString();
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat0.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.POSTGRESQL_CSV.withEscape('1');
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(false);
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      cSVFormat2.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('+');
      char char0 = new Character('+');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat0.POSTGRESQL_TEXT.withEscape('+');
      cSVFormat1.withAutoFlush(false);
      cSVFormat1.withRecordSeparator('G');
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat4.RFC4180.withEscape('\'');
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      cSVFormat2.printer();
      cSVFormat3.printRecord(charArrayWriter0, objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat6.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("N|AN#D 6KnN)*d9");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Character character0 = new Character('?');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('+');
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat6.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false");
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = '$';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('o');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      cSVFormat3.withFirstRecordAsHeader();
      String string0 = "Jh/'<(PqZ/YpXn(z]d";
      cSVFormat3.DEFAULT.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("Jh/'<(PqZ/YpXn(z]d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Jh/'<(PqZ/YpXn(z]d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0084';
      charArray0[2] = '\u0084';
      charArray0[3] = 'U';
      charArray0[4] = '\u0084';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[4] = 'E';
      charArray0[3] = ':';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.getDelimiter();
      cSVFormat1.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-VT9!L>3%QQ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('-');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('-')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.EXCEL.withHeader(resultSet0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('\u0087');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Long long0 = new Long((-1344L));
      URI uRI0 = MockURI.aHttpURI;
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.withQuote('}');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) uRI0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      cSVFormat0.print((Object) "", (Appendable) mockPrintWriter0, true);
      URI uRI0 = MockURI.aHttpURI;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('m');
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      cSVFormat2.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat4.getDelimiter();
      String[] stringArray0 = new String[0];
      cSVFormat2.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat3.printRecord(charArrayWriter0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat1.equals(cSVFormat0);
      File file0 = MockFile.createTempFile("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", "");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print(file0, charset0);
      cSVFormat2.withRecordSeparator('x');
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('g');
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = ' ';
      charArray0[2] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) cSVFormat0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.println(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "MINIMAL";
      objectArray0[2] = (Object) stringWriter0;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('n');
      Character character1 = Character.valueOf('n');
      cSVFormat0.withQuote(character1);
      cSVFormat0.getDelimiter();
      Character character2 = Character.valueOf('n');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character2);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withEscape('j');
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('G');
      cSVFormat3.withRecordSeparator('j');
      cSVFormat0.getIgnoreHeaderCase();
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      CharBuffer.wrap(charArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Character character0 = new Character('7');
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withCommentMarker(character0);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("(1`G");
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat3.getDelimiter();
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat6.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[0];
      cSVFormat2.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Character character0 = Character.valueOf('Z');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.INFORMIX_UNLOAD_CSV.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(";CR:b+cy]i7A");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      CSVFormat.Predefined.values();
      Character.valueOf('\"');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-832));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Character character0 = new Character('+');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat.Predefined cSVFormat_Predefined1 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("~NuwxmrO(C% cnQ");
      cSVFormat2.withRecordSeparator('!');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat3.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[4] = 'E';
      charArray0[1] = ':';
      charArray0[3] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
      cSVFormat2.printer();
      cSVFormat2.print((Appendable) charBuffer0);
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.INFORMIX_UNLOAD.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat0.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 's';
      charArray0[3] = 'e';
      Object object1 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("?#*jEs9R|3U E[{#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.?#*jEs9R|3U E[{#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = ':';
      charArray0[3] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
      cSVFormat2.printer();
      cSVFormat2.print((Appendable) charBuffer0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat5.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = ':';
      charArray0[3] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
      cSVFormat2.printer();
      cSVFormat2.print((Appendable) charBuffer0);
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat2.print((Object) fileSystemHandling0, (Appendable) charArrayWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 's';
      charArray0[2] = '(';
      charArray0[3] = 'e';
      charArray0[4] = '>';
      charArray0[5] = '{';
      charArray0[6] = '';
      charArray0[7] = '\'';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) '';
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) '>';
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "\n";
      cSVFormat4.EXCEL.printRecord(printWriter0, objectArray0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withEscape('A');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('~');
      cSVFormat3.TDF.withAllowMissingColumnNames();
      boolean boolean0 = true;
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withAutoFlush(true);
      cSVFormat4.MYSQL.withIgnoreEmptyLines();
      cSVFormat3.printer();
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord();
      cSVFormat2.MYSQL.withNullString("m'pX");
      boolean boolean1 = true;
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(true);
      String string0 = "\n";
      CSVFormat cSVFormat7 = cSVFormat5.withNullString("\n");
      cSVFormat6.withIgnoreEmptyLines(true);
      CSVFormat.newFormat('A');
      cSVFormat7.getSkipHeaderRecord();
      cSVFormat5.withRecordSeparator('A');
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      cSVFormat1.toString();
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat0.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat3.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat4.toString();
      cSVFormat2.isCommentMarkerSet();
      cSVFormat5.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('+');
      cSVFormat0.withTrim();
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      PipedWriter pipedWriter0 = new PipedWriter();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      try { 
        cSVFormat1.print((Object) cSVFormat2, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('O');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      Character character0 = new Character('>');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) character0;
      cSVFormat4.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      char[] charArray0 = new char[7];
      charArray0[2] = 'G';
      charArray0[1] = 'G';
      charArray0[3] = 'z';
      charArray0[4] = 'E';
      charArray0[5] = 'G';
      charArray0[6] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.printer();
      cSVFormat0.print((Appendable) charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat4.withDelimiter('E');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat4.printRecord(charArrayWriter0, objectArray0);
      Character character0 = new Character('R');
      cSVFormat4.withQuote(character0);
      cSVFormat2.withQuote(']');
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Long long0 = new Long((-1L));
      StringWriter stringWriter0 = new StringWriter(24);
      StringWriter stringWriter1 = stringWriter0.append('u');
      cSVFormat1.RFC4180.print((Object) long0, (Appendable) stringWriter1, false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      cSVFormat2.DEFAULT.withDelimiter('u');
      Character character0 = Character.valueOf('s');
      cSVFormat2.withQuote(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'U';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = new Character('+');
      Character character1 = new Character('+');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character1);
      cSVFormat4.getDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('+')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('[');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat1.TDF.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(406);
      StringWriter stringWriter1 = stringWriter0.append('^');
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 406);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) bufferedWriter0;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat2.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      cSVFormat5.printRecord(bufferedWriter0, objectArray0);
      Character character0 = new Character('(');
      cSVFormat5.withEscape(character0);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.withTrim(true);
      File file0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.withSkipHeaderRecord();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.withRecordSeparator('d');
      Object[] objectArray0 = null;
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('+');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat0.getDelimiter();
      Character character0 = Character.valueOf('O');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('|');
      Byte byte0 = new Byte((byte)56);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.withRecordSeparator('2');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat1.getIgnoreHeaderCase();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat1.printer();
      cSVFormat1.print((Appendable) charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.withDelimiter('@');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat4.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withRecordSeparator("MINIMAL");
      cSVFormat1.toString();
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat0.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Jh/'<(PqZ/YpXn(z]d");
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.withIgnoreHeaderCase(false);
      Character.valueOf('}');
      Character character1 = new Character('}');
      cSVFormat0.withQuote(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = '}';
      charArray0[6] = 'z';
      CharBuffer.wrap(charArray0);
      try { 
        Byte.valueOf("q77%0M{II5P:", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('W');
      Character.valueOf('}');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) character0, (Appendable) charArrayWriter0, true);
      cSVFormat2.printer();
      // Undeclared exception!
      try { 
        cSVFormat2.print((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat2.EXCEL.toString();
      Character character0 = Character.valueOf('}');
      Character character1 = Character.valueOf('}');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) character0;
      cSVFormat3.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0011';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withRecordSeparator("MINIMAL");
      cSVFormat1.toString();
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat0.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.withAutoFlush(false);
      cSVFormat2.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      CSVFormat.newFormat('z');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat3.EXCEL.withSkipHeaderRecord();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat1.withRecordSeparator("");
      cSVFormat2.equals(cSVFormat1);
      cSVFormat0.println(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
      cSVFormat2.printer();
      cSVFormat2.print((Appendable) charBuffer0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat1.withDelimiter('!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      Character.valueOf('}');
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '}';
      cSVFormat3.print((Object) class0, (Appendable) charArrayWriter0, true);
      CharBuffer charBuffer0 = CharBuffer.allocate(1585);
      CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat1.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.print((Object) class0, (Appendable) charArrayWriter0, true);
      Object object0 = new Object();
      cSVFormat2.print((Object) charBuffer0, (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withRecordSeparator("IMA");
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat2.POSTGRESQL_TEXT.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat0.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001,java.lang.Object@0000000004,java.lang.Object@0000000004,");
      Character character0 = Character.valueOf(')');
      cSVFormat4.withQuote(character0);
      cSVFormat4.equals(cSVFormat3);
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.withDelimiter('c');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('c');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat2.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      cSVFormat0.getDelimiter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$]";
      stringArray0[1] = ",;)lVYyY-|3Mo";
      stringArray0[2] = "Jh/'<(PqZ/YpXn(z]d";
      stringArray0[3] = "TOKEN";
      stringArray0[4] = "NONE";
      cSVFormat0.TDF.withHeader(stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.withAutoFlush(false);
      cSVFormat1.getQuoteCharacter();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = new Character('3');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat2.withQuote('n');
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.POSTGRESQL_TEXT.withEscape(']');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object2 = new Object();
      MockFileWriter mockFileWriter0 = new MockFileWriter("5A57_(@tphBon");
      cSVFormat1.printRecord(mockFileWriter0, objectArray0);
      Character character0 = new Character('`');
      cSVFormat5.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      char char0 = '+';
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('+');
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      cSVFormat1.equals(byte0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat2.withRecordSeparator('2');
      cSVFormat3.getIgnoreSurroundingSpaces();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat6 = cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat5.getDelimiter();
      cSVFormat3.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer1;
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.withDelimiter('Y');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.getQuoteCharacter();
      cSVFormat0.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) charArrayWriter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = object1;
      cSVFormat4.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Jh/'<(PqZ/YpXn(z]d");
      cSVFormat3.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat3.getTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withFirstRecordAsHeader();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat1.TDF.withFirstRecordAsHeader();
      cSVFormat2.getTrim();
      cSVFormat1.getHeaderComments();
      Character character0 = Character.valueOf('\'');
      cSVFormat3.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat5.equals(quoteMode0);
      cSVFormat5.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 'm';
      Character character0 = new Character('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "";
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      cSVFormat0.print((Object) "", (Appendable) mockPrintWriter0, true);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "MINIMAL";
      objectArray0[1] = (Object) "MINIMAL";
      objectArray0[2] = (Object) "MINIMAL";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "MINIMAL";
      objectArray0[5] = (Object) cSVFormat4;
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat5.toString();
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat6.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat7 = cSVFormat4.withTrim();
      cSVFormat7.withQuoteMode(quoteMode0);
      cSVFormat7.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> CommentStart=<w> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.TDF.withIgnoreHeaderCase(true);
      cSVFormat3.getDelimiter();
      cSVFormat3.withDelimiter('E');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CharBuffer.wrap((CharSequence) "MINIMAL");
      Character character0 = Character.valueOf('E');
      cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      cSVFormat2.withQuote(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'c';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat4.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('n');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat1.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("h9@v49&AW3g*");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat6.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat5.withQuoteMode(quoteMode1);
      cSVFormat5.getDelimiter();
      cSVFormat5.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "h9@v49&AW3g*");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) cSVFormat6;
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      Object[] objectArray0 = null;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('}');
      Character character0 = Character.valueOf('}');
      cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat0.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat4.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat5.printRecord(mockPrintWriter0, objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
          CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
          CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
          CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
          String[] stringArray0 = new String[4];
          stringArray0[0] = "out";
          stringArray0[1] = "org.apache.commons.csv.Token$Type";
          stringArray0[2] = "EOF";
          stringArray0[3] = "\"=,d+!hvs*fb4>";
          cSVFormat4.withHeader(stringArray0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor65.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('D');
      cSVFormat1.withDelimiter('$');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('b');
      cSVFormat2.withSkipHeaderRecord();
      String string0 = null;
      MockFile mockFile0 = new MockFile("tj b%");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jO'";
      stringArray0[1] = "";
      stringArray0[2] = "<8zB&!%N4[%H";
      cSVFormat2.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat3.withHeader(class0);
      cSVFormat3.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.print((Object) charArrayWriter0, (Appendable) charArrayWriter0, false);
      cSVFormat2.print((Appendable) charArrayWriter0);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat0.withDelimiter('a');
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.toString();
      String string0 = "";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withIgnoreHeaderCase(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.withRecordSeparator("");
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('5');
      StringWriter stringWriter0 = new StringWriter();
      Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('5');
      cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('@');
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '5';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat4.equals(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('5');
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character1 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
      Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.INFORMIX_UNLOAD.withQuote(' ');
      Integer integer0 = new Integer((-1682));
      cSVFormat0.print((Object) integer0, (Appendable) charArrayWriter0, false);
      cSVFormat1.print((Appendable) charArrayWriter0);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withDelimiter('K');
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      Character character2 = Character.valueOf(')');
      cSVFormat4.POSTGRESQL_CSV.withEscape(character2);
      cSVFormat2.getHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character.valueOf('8');
      Character character0 = Character.valueOf('8');
      cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      Short short0 = new Short((short) (-1));
      cSVFormat2.print((Object) short0, (Appendable) charArrayWriter0, false);
      cSVFormat3.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat1.withDelimiter('s');
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withQuoteMode(quoteMode0);
      cSVFormat1.getQuoteCharacter();
      Character character0 = new Character('M');
      cSVFormat0.DEFAULT.printer();
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat3.MYSQL.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withAutoFlush(true);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat5.EXCEL.withQuoteMode(quoteMode0);
      cSVFormat4.MYSQL.hashCode();
      String string0 = "";
      cSVFormat6.POSTGRESQL_TEXT.withNullString("");
      cSVFormat0.getHeader();
      CSVFormat cSVFormat7 = cSVFormat2.withEscape('-');
      cSVFormat7.withQuoteMode(quoteMode0);
      URI uRI0 = MockURI.aHttpURI;
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet2).getMetaData();
      cSVFormat1.withHeader(resultSet2);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'c';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat1.println(charArrayWriter0);
      cSVFormat2.withCommentMarker('c');
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat4.getEscapeCharacter();
      cSVFormat4.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withHeader((String[]) null);
      cSVFormat1.EXCEL.withCommentMarker('#');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      cSVFormat3.withNullString("<'K&ab");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(118);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "<'K&ab");
      cSVFormat1.print((Object) cSVFormat3, (Appendable) charArrayWriter1, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      cSVFormat3.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat6 = cSVFormat1.withTrim(true);
      CSVFormat.newFormat('[');
      cSVFormat5.hashCode();
      Character.valueOf('[');
      cSVFormat3.withEscape((Character) null);
      cSVFormat6.getTrim();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat2.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat0.toString();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('1');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat6.getDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat2.withHeader(class0);
      cSVFormat7.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "MINIMAL";
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('4');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat4.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = false;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(false);
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withNullString("g-YoX/G~cq3u.t^");
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withRecordSeparator("!.jy");
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.MYSQL.withHeader(class0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = cSVFormat0.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      cSVFormat5.getHeaderComments();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat5.getNullString();
      cSVFormat6.POSTGRESQL_TEXT.withCommentMarker('\'');
      cSVFormat6.withAllowMissingColumnNames(true);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat5.withDelimiter('l');
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.withQuote('l');
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      char char0 = 'j';
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('j');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('j');
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker((Character) null);
      cSVFormat3.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode1);
      cSVFormat4.getDelimiter();
      cSVFormat3.getIgnoreHeaderCase();
      Object[] objectArray0 = new Object[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quoteMode1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) quoteMode1;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat2.print((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat2.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator(')');
      cSVFormat5.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quoteMode0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charArrayWriter0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      cSVFormat1.format(objectArray0);
      Long long0 = new Long((-1649L));
      Object object3 = new Object();
      cSVFormat6.print(object3, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat7 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat7.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('5');
      StringWriter stringWriter0 = new StringWriter();
      Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('5');
      cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat1.print(object0, (Appendable) charArrayWriter0, false);
      cSVFormat1.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withDelimiter('5');
      cSVFormat2.isNullStringSet();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('m');
      cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      cSVFormat0.print((Object) "", (Appendable) mockPrintWriter0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('m');
      cSVFormat3.hashCode();
      Character.valueOf('m');
      Character character1 = Character.valueOf('m');
      cSVFormat2.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat3.EXCEL.format(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(true);
      cSVFormat4.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('4');
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      cSVFormat4.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character.valueOf('<');
      Character.valueOf(' ');
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'G';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      charArray0[8] = '<';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (' ')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'c';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.withDelimiter('s');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat4.getHeader();
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      boolean boolean0 = false;
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      Character character1 = new Character('@');
      cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat.newFormat('@');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat8 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat8.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat7.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat9 = cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat8.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat7;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat9;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote((Character) null);
      cSVFormat4.toString();
      CSVFormat.newFormat('R');
      Character character0 = new Character('j');
      cSVFormat3.withQuote(character0);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.hashCode();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      Long long0 = new Long(849L);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.print((Object) "w0IAMv&eS?yS9PA8%", (Appendable) charArrayWriter0, false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character0);
      cSVFormat2.equals(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.toString();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('b');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character.valueOf('m');
      char char0 = '[';
      Character.valueOf('m');
      Character character1 = Character.valueOf('b');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('b')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('l');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat0.getDelimiter();
      cSVFormat1.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "MINIMAL");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      Long long0 = new Long((-1L));
      Byte byte0 = new Byte((byte)33);
      cSVFormat0.print((Object) byte0, (Appendable) charArrayWriter0, true);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.getCommentMarker();
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      Character character1 = new Character('@');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat5.getDelimiter();
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat7 = CSVFormat.newFormat('@');
      cSVFormat7.equals((Object) null);
      CSVFormat cSVFormat8 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat8.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat6.getIgnoreSurroundingSpaces();
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat2.getHeaderComments();
      CSVFormat cSVFormat9 = cSVFormat5.withTrim(false);
      CSVFormat.newFormat('s');
      cSVFormat9.hashCode();
      Character.valueOf('Y');
      Character character2 = new Character('@');
      cSVFormat5.withEscape(character2);
      cSVFormat6.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat.newFormat('q');
      Object object0 = new Object();
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = ']';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      charArray0[7] = 'q';
      charArray0[8] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat4.print(object0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      cSVFormat3.toString();
      CSVFormat.newFormat('R');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat4.getDelimiter();
      cSVFormat3.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false");
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat5.withQuote(character0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat5.RFC4180.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        cSVFormat5.print((Object) double0, (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.withEscape('g');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.println(stringWriter0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat2.toString();
      CSVFormat.newFormat('q');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat0.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('u');
      Object[] objectArray0 = new Object[0];
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('u');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.equals(cSVFormat5);
      cSVFormat3.withQuote('a');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Character character0 = new Character('U');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.withIgnoreHeaderCase(true);
      Character character1 = Character.valueOf('T');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character1);
      cSVFormat4.POSTGRESQL_TEXT.withQuote('~');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) cSVFormat4, (Appendable) charArrayWriter0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      cSVFormat3.toString();
      CSVFormat.newFormat('R');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode1);
      cSVFormat4.getDelimiter();
      cSVFormat3.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quoteMode1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) quoteMode1;
      objectArray0[6] = (Object) quoteMode0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('s');
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'G';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat3.print((Appendable) charArrayWriter0);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat1.withDelimiter('s');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.getHeaderComments();
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat0.withIgnoreHeaderCase(false);
      Character.valueOf('s');
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.print((Object) class0, (Appendable) charArrayWriter0, false);
      cSVFormat1.print((Appendable) charArrayWriter0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class1);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('#');
      cSVFormat1.isNullStringSet();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat2.getHeader();
      cSVFormat4.getNullString();
      cSVFormat3.withEscape('7');
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:true");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Long long0 = new Long((-1649L));
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      cSVFormat2.print((Object) cSVFormat0, (Appendable) charArrayWriter1, false);
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat.newFormat('%');
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat3;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[2] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat5.EXCEL.format(objectArray0);
      Long long0 = new Long((-1649L));
      cSVFormat4.print((Object) long0, (Appendable) charArrayWriter0, false);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      String string0 = "MINIMAL";
      String string1 = "ALL_NON_NULL";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("ALL_NON_NULL");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      cSVFormat3.toString();
      CSVFormat.newFormat('\"');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.POSTGRESQL_CSV.printer();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.toString();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat4.toString();
      CSVFormat.newFormat('q');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat2.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false Header:[INVALID, TOKEN, EOF, EORECORD, COMMENT]");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('F');
      cSVFormat4.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat6 = cSVFormat3.withAutoFlush(true);
      cSVFormat6.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat5.print((Object) cSVFormat7, (Appendable) charArrayWriter0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) class0, (Appendable) charArrayWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat4.withEscape('.');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withDelimiter('Z');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8`<u*Jc+Ja(#I$7R9w";
      stringArray0[1] = "w$k[zg\"6Y]}Y?z";
      stringArray0[2] = "SVm;<?-lLhm";
      stringArray0[3] = "The comment start marker character cannot be a line break";
      stringArray0[4] = "Gs`C*`P|QP";
      stringArray0[5] = "WA*25=t>\"|mY0mWT7j";
      stringArray0[6] = "$VALUES";
      stringArray0[7] = "'a]:@Y%";
      stringArray0[8] = "org.apache.commons.csv.ExtendedBufferedReader";
      cSVFormat2.DEFAULT.withHeader(stringArray0);
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat0.POSTGRESQL_TEXT.withTrim(true);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat4.DEFAULT.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withTrim();
      cSVFormat5.MYSQL.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat3.RFC4180.withQuoteMode(quoteMode1);
      cSVFormat4.RFC4180.withRecordSeparator('Z');
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat7.withAllowMissingColumnNames(false);
      cSVFormat7.getQuoteCharacter();
      cSVFormat1.withIgnoreHeaderCase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat6.getHeaderComments();
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.toString();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      Character.valueOf('?');
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat5 = cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) null, (Appendable) charArrayWriter0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = new Character('p');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Long long0 = new Long(184L);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.print((Object) cSVFormat0, (Appendable) charArrayWriter0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      cSVFormat1.print((Appendable) charArrayWriter0);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('S');
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('2');
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(true);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat2.printer();
      CSVFormat cSVFormat8 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase(false);
      cSVFormat9.printer();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat4.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat2.toString();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('R');
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.getDelimiter();
      cSVFormat4.getIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat6;
      // Undeclared exception!
      try { 
        cSVFormat6.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat1.withRecordSeparator('D');
      Object[] objectArray0 = null;
      cSVFormat0.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('U');
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray1);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat3.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('V');
      cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", (Appendable) charArrayWriter0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat3.toString();
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('4');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false");
      Character character0 = Character.valueOf('d');
      cSVFormat5.POSTGRESQL_TEXT.withCommentMarker(character0);
      Float float0 = new Float(2141.288);
      cSVFormat5.equals(float0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      cSVFormat3.equals(byte0);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat3.withRecordSeparator('2');
      cSVFormat4.getIgnoreSurroundingSpaces();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat6.getDelimiter();
      cSVFormat4.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat6.withAllowMissingColumnNames();
      cSVFormat1.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('e');
      cSVFormat1.withAutoFlush(true);
      cSVFormat2.withDelimiter(';');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withEscape(character0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat1.MYSQL.withHeader(class1);
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('?');
      CSVFormat cSVFormat7 = cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) class1;
      cSVFormat7.withHeaderComments(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.newFormat('E');
      cSVFormat8.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      Long long0 = new Long((-2118L));
      cSVFormat0.equals(long0);
      cSVFormat5.getQuoteCharacter();
      cSVFormat4.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat1.POSTGRESQL_TEXT.withDelimiter('4');
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      String string0 = " bwS/?\\@:i5R&h Ys";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(" bwS/?@:i5R&h Ys");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      char char0 = '=';
      Character character0 = new Character('=');
      Character character1 = new Character('m');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character1);
      cSVFormat2.getDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('m')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat4.toString();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      cSVFormat4.withIgnoreHeaderCase(true);
      Character.valueOf('?');
      Character character0 = new Character('.');
      CSVFormat cSVFormat5 = cSVFormat3.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Long long0 = new Long(184L);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat6.print((Object) null, (Appendable) charArrayWriter0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      cSVFormat3.print((Appendable) mockPrintWriter0);
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "charset";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("charset");
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat2.withHeader(class1);
      cSVFormat2.withHeader(class1);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat4.isEscapeCharacterSet();
      cSVFormat1.printer();
      cSVFormat3.printer();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("charset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.charset
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      cSVFormat3.withDelimiter('U');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      Object object0 = new Object();
      cSVFormat4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('p');
      cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('p');
      cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.print((Object) "w0IAMv&eS?yS9PA8%", (Appendable) charArrayWriter0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(true);
      Character.valueOf('e');
      cSVFormat0.withAutoFlush(true);
      cSVFormat3.withDelimiter(';');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat4.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat6.withEscape('e');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      Short short0 = new Short((short)92);
      cSVFormat5.equals(short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The quoteChar cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat2.withCommentMarker('T');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("MINIMAL", true);
      cSVFormat3.print((Object) null, (Appendable) mockFileWriter0, true);
      cSVFormat2.print((Appendable) mockFileWriter0);
      Character character0 = Character.valueOf('_');
      cSVFormat2.RFC4180.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('#');
      cSVFormat3.isNullStringSet();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat6.getHeader();
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Long long0 = new Long((-1649L));
      cSVFormat4.print((Object) long0, (Appendable) charArrayWriter0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      cSVFormat5.print((Appendable) mockPrintWriter0);
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('{');
      cSVFormat2.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('{');
      cSVFormat1.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      cSVFormat5.print(object0, (Appendable) charArrayWriter0, true);
      cSVFormat4.print((Appendable) charArrayWriter0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat6.withDelimiter('-');
      cSVFormat6.isNullStringSet();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character.valueOf('e');
      cSVFormat1.withAutoFlush(true);
      cSVFormat2.withDelimiter(';');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat4.INFORMIX_UNLOAD.withEscape(';');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat4.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Character character0 = new Character('m');
      cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      cSVFormat0.print((Object) "", (Appendable) mockPrintWriter0, false);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.POSTGRESQL_CSV.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat.newFormat('-');
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.getHeaderComments();
      CSVFormat cSVFormat4 = cSVFormat1.withTrim(true);
      CSVFormat.newFormat('[');
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.equals(cSVFormat2);
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      cSVFormat0.withIgnoreHeaderCase(false);
      Character.valueOf('p');
      Character character0 = Character.valueOf('p');
      cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVFormat1.print((Object) cSVFormat4, (Appendable) charArrayWriter0, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SurroundingSpaces:ignored SkipHeaderRecord:false", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('!');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat4.EXCEL.withHeader((String[]) null);
      cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat4.getHeaderComments();
      cSVFormat1.withTrim(true);
      cSVFormat5.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      char char0 = 'E';
      Character character0 = Character.valueOf('E');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      Character character1 = new Character('E');
      Character character2 = Character.valueOf('9');
      cSVFormat1.withQuote(character2);
      cSVFormat2.getDelimiter();
      Character character3 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      cSVFormat3.equals(byte0);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat5.withAutoFlush(false);
      cSVFormat4.withDelimiter('i');
      cSVFormat1.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat6.equals(character0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter(false);
      Object object0 = new Object();
      cSVFormat4.withRecordSeparator("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.POSTGRESQL_TEXT.withHeader(resultSet0);
      cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat5.isQuoteCharacterSet();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      cSVFormat1.RFC4180.withTrim();
      cSVFormat1.EXCEL.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      Character character1 = new Character('@');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat4.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('@');
      cSVFormat6.equals((Object) null);
      CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = cSVFormat7.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat7.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat8.withIgnoreSurroundingSpaces(false);
      cSVFormat6.equals(cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat7;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      Character character1 = new Character('@');
      CSVFormat cSVFormat7 = cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat8 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat9 = CSVFormat.newFormat('@');
      cSVFormat9.equals((Object) null);
      CSVFormat cSVFormat10 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat10.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat8.getIgnoreSurroundingSpaces();
      cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat10.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      cSVFormat7.withTrim(false);
      CSVFormat.newFormat('&');
      cSVFormat7.hashCode();
      Character.valueOf('8');
      CSVFormat cSVFormat11 = cSVFormat3.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat11.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat2.withDelimiter('g');
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat0.equals(cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withQuoteMode(quoteMode0);
      cSVFormat1.getQuoteCharacter();
      Character character0 = new Character('M');
      cSVFormat0.DEFAULT.printer();
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withEscape(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.MYSQL.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withAutoFlush(true);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat4.MYSQL.hashCode();
      String string0 = "";
      cSVFormat6.POSTGRESQL_TEXT.withNullString("");
      cSVFormat0.getHeader();
      CSVFormat cSVFormat7 = cSVFormat2.withEscape('-');
      cSVFormat7.withQuoteMode(quoteMode0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Character character0 = new Character('K');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.TDF.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.isQuoteCharacterSet();
      cSVFormat1.getQuoteMode();
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
      cSVFormat5.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      cSVFormat3.printer();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      Character character1 = new Character('E');
      cSVFormat6.withQuote(character0);
      cSVFormat6.getDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('5')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat1.MYSQL.withHeader(class1);
      cSVFormat4.POSTGRESQL_CSV.withIgnoreEmptyLines(false);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.printer();
      cSVFormat4.printer();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat1.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat5.EXCEL.withAllowMissingColumnNames(false);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat6.getHeaderComments();
      cSVFormat4.withTrim(false);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) cSVFormat3, (Appendable) charArrayWriter0, false);
      cSVFormat4.print((Appendable) charArrayWriter0);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('#');
      cSVFormat5.isNullStringSet();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat6.getHeader();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('+');
      cSVFormat2.withRecordSeparator("(wMG|.{rjl8aA*");
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '+';
      objectArray0[1] = (Object) '+';
      // Undeclared exception!
      try { 
        cSVFormat2.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat3.withQuoteMode(quoteMode0);
      Character character1 = new Character('@');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat8 = CSVFormat.newFormat('@');
      cSVFormat8.equals((Object) null);
      CSVFormat cSVFormat9 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat9.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat7.getIgnoreSurroundingSpaces();
      cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat9.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat9.withIgnoreEmptyLines();
      cSVFormat2.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('4');
      cSVFormat2.withNullString("Uv#|'(#WZ");
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('4')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('4');
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat5.withNullString("FF");
      cSVFormat0.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.print((Object) cSVFormat1, (Appendable) charArrayWriter0, false);
      cSVFormat5.RFC4180.print((Appendable) charArrayWriter0);
      cSVFormat5.withAllowMissingColumnNames();
      cSVFormat3.isNullStringSet();
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      cSVFormat3.equals(byte0);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat3.withRecordSeparator('2');
      cSVFormat2.equals(cSVFormat3);
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat4.withRecordSeparator(',');
      cSVFormat6.getIgnoreSurroundingSpaces();
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat7.getDelimiter();
      cSVFormat5.getIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('L');
      cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat0.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      cSVFormat2.withRecordSeparator("(wMG|.{rjl8aA*");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      cSVFormat0.POSTGRESQL_TEXT.withEscape((Character) null);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "(wMG|.{rjl8aA*");
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "(wMG|.{rjl8aA*", 2439, 2439);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat0.toString();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('n');
      cSVFormat0.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat4;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "5?";
      cSVFormat1.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('m');
      Character character1 = Character.valueOf('[');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character1);
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withEscape(character0);
      cSVFormat4.MYSQL.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (Appendable) charArrayWriter0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      File file0 = MockFile.createTempFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", "N", (File) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.print((Object) cSVFormat1, (Appendable) charArrayWriter0, false);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('L');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat6.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.println(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat2.printRecord(stringWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("out");
      cSVFormat2.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.println(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.DEFAULT.withQuoteMode(quoteMode0);
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.POSTGRESQL_CSV.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.getHeaderComments();
      CSVFormat cSVFormat5 = cSVFormat1.withTrim(true);
      CSVFormat.newFormat('[');
      cSVFormat4.hashCode();
      Character character0 = Character.valueOf('[');
      // Undeclared exception!
      try { 
        cSVFormat5.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('[')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('T');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MINIMAL";
      cSVFormat1.withHeaderComments(stringArray0);
      Character.valueOf('$');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('&');
      cSVFormat3.withQuote(character0);
      int int0 = new Character('$');
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat3.withQuoteMode(quoteMode0);
      Character character1 = new Character('@');
      cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat7.getDelimiter();
      CSVFormat cSVFormat8 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat9 = CSVFormat.newFormat('@');
      cSVFormat9.equals((Object) null);
      CSVFormat cSVFormat10 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat10.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat8.getIgnoreSurroundingSpaces();
      cSVFormat5.withTrim(false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat7.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat.newFormat('q');
      cSVFormat2.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.getDelimiter();
      cSVFormat4.getIgnoreHeaderCase();
      char[] charArray0 = new char[5];
      charArray0[1] = 'q';
      charArray0[3] = '\t';
      charArray0[4] = '\t';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVFormat5.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      Character.valueOf('=');
      cSVFormat0.equals(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      Character character0 = new Character('l');
      cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat1.MYSQL.withHeader(class1);
      cSVFormat5.TDF.withRecordSeparator("");
      CSVFormat cSVFormat6 = cSVFormat4.POSTGRESQL_CSV.withIgnoreEmptyLines(false);
      cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.printer();
      cSVFormat4.printer();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String string0 = "\\!p4[\"k";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("!p4[\"k");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z=$qt# edt.I}";
      stringArray0[1] = "!p4[\"k";
      stringArray0[2] = "!p4[\"k";
      cSVFormat1.DEFAULT.withTrailingDelimiter(true);
      stringArray0[3] = "!p4[\"k";
      stringArray0[4] = "!p4[\"k";
      stringArray0[5] = "!p4[\"k";
      stringArray0[6] = "!p4[\"k";
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withAutoFlush(true);
      // Undeclared exception!
      try { 
        cSVFormat3.RFC4180.print((Object) "!p4[\"k", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('+');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat(',');
      Byte byte0 = new Byte((byte) (-112));
      cSVFormat3.equals(byte0);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat3.withRecordSeparator('2');
      cSVFormat4.getIgnoreSurroundingSpaces();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat0.withQuoteMode(quoteMode1);
      cSVFormat6.getDelimiter();
      cSVFormat4.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVFormat4.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character.valueOf('=');
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat3.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character.valueOf('L');
      Character character0 = new Character('l');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) cSVFormat5, (Appendable) charArrayWriter0, true);
      MockFile mockFile0 = new MockFile("HeaderComments:", "HeaderComments:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      cSVFormat2.print((Appendable) printWriter0);
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('T');
      String[] stringArray0 = new String[2];
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('B');
      cSVFormat2.withTrim(true);
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      cSVFormat3.getNullString();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat1.MYSQL.withHeader(class1);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withIgnoreEmptyLines(false);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withQuote('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat3.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.print((Object) cSVFormat1, (Appendable) charArrayWriter0, false);
      cSVFormat5.RFC4180.print((Appendable) charArrayWriter0);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat3.withQuoteMode(quoteMode0);
      Character character1 = new Character('@');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat6.getDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat8 = CSVFormat.newFormat('@');
      cSVFormat8.equals((Object) null);
      CSVFormat cSVFormat9 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat9.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat7.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat10 = cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat9.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat7;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat10;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) character0;
      cSVFormat8.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.print((Object) cSVFormat1, (Appendable) charArrayWriter0, false);
      cSVFormat5.RFC4180.print((Appendable) charArrayWriter0);
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat1.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.print((Object) cSVFormat1, (Appendable) charArrayWriter0, false);
      cSVFormat5.RFC4180.print((Appendable) charArrayWriter0);
      cSVFormat5.withAllowMissingColumnNames();
      cSVFormat3.isNullStringSet();
      cSVFormat2.getHeader();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('p');
      cSVFormat0.withQuote(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", (Appendable) charArrayWriter0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      cSVFormat3.print((Appendable) mockPrintWriter0);
      cSVFormat1.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat5 = CSVFormat.newFormat('q');
      String[] stringArray0 = new String[0];
      cSVFormat0.MYSQL.withHeader(stringArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat4.TDF.withTrim(false);
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[8] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat5.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      cSVFormat1.MYSQL.withSkipHeaderRecord();
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class1);
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat0.withQuote('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.isEscapeCharacterSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.printer();
      cSVFormat1.RFC4180.withAllowMissingColumnNames();
      cSVFormat2.printer();
      Object[] objectArray0 = new Object[0];
      cSVFormat5.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat.newFormat('6');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('6');
      cSVFormat0.withNullString("");
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withDelimiter('4');
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat1.equals(objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      Character.valueOf('=');
      cSVFormat1.withQuote((Character) null);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.toString();
      CSVFormat.newFormat('~');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(true);
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat5.format(objectArray0);
      cSVFormat4.getNullString();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('T');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SZ4Ov k4(;/0qZ:";
      cSVFormat1.EXCEL.withSkipHeaderRecord(true);
      stringArray0[1] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.MYSQL.toString();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(class0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat3.TDF.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat3.withTrim();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat1.POSTGRESQL_TEXT.withDelimiter('4');
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('6');
      cSVFormat4.POSTGRESQL_TEXT.withCommentMarker('4');
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("");
      // Undeclared exception!
      try { 
        cSVFormat5.TDF.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("", "Unexpected Quote value: ");
      Charset charset0 = Charset.defaultCharset();
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord(false);
      char char0 = '$';
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withTrailingDelimiter(false);
      cSVFormat2.POSTGRESQL_TEXT.withTrailingDelimiter();
      Character character0 = new Character('$');
      cSVFormat1.EXCEL.withQuote(character0);
      cSVFormat0.TDF.print((File) mockFile0, charset0);
      Reader reader0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Unexpected Quote value: ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Unexpected Quote value: ";
      stringArray0[4] = "";
      cSVFormat1.INFORMIX_UNLOAD.hashCode();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("}tF*^Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.}tF*^Y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('!');
      MockFile mockFile0 = new MockFile("hNLFcC'UJH;_WaPD");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string0 = "";
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) cSVFormat_PredefinedArray0);
      cSVFormat1.println(printStream0);
      cSVFormat0.withIgnoreSurroundingSpaces();
      boolean boolean0 = false;
      String string1 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.EXCEL.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat1.INFORMIX_UNLOAD.withHeader(class0);
      cSVFormat4.MYSQL.withHeader(class0);
      String string0 = "";
      Character character0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3144);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 3144, 3144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.EXCEL.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
      cSVFormat0.RFC4180.withHeader(resultSet0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat1.getDelimiter();
      cSVFormat0.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines(false);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat1.withHeader(resultSet1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withIgnoreHeaderCase(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "X";
      stringArray0[1] = "CSrUFd+9";
      stringArray0[2] = "\u0085";
      stringArray0[3] = "";
      stringArray0[4] = "$VALUES";
      cSVFormat4.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("!p4[\"k");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z=$qt# edt.I}";
      stringArray0[1] = "!p4[\"k";
      stringArray0[2] = "!p4[\"k";
      cSVFormat1.DEFAULT.withTrailingDelimiter(true);
      stringArray0[3] = "!p4[\"k";
      stringArray0[4] = "!p4[\"k";
      stringArray0[5] = "!p4[\"k";
      stringArray0[6] = "!p4[\"k";
      cSVFormat2.RFC4180.withAutoFlush(true);
      stringArray0[7] = "!p4[\"k";
      stringArray0[8] = "!p4[\"k";
      // Undeclared exception!
      try { 
        cSVFormat1.MYSQL.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '!p4[\"k' in [Z=$qt# edt.I}, !p4[\"k, !p4[\"k, !p4[\"k, !p4[\"k, !p4[\"k, !p4[\"k, !p4[\"k, !p4[\"k]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("(wMG|.{rjl8aA*");
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVFormat_Predefined0;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat0.TDF.withHeaderComments(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      boolean boolean0 = true;
      boolean boolean1 = false;
      cSVFormat1.withTrim(false);
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('s');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat4.toString();
      cSVFormat3.withTrailingDelimiter(true);
      cSVFormat1.toString();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat2.getDelimiter();
      cSVFormat0.getIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[8] = object0;
      cSVFormat1.printRecord(mockPrintWriter0, objectArray0);
      cSVFormat3.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withAllowMissingColumnNames(true);
      cSVFormat1.equals((Object) null);
      CSVFormat cSVFormat5 = cSVFormat0.withHeader((String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";7Y3U!=[dY");
      PrintWriter printWriter0 = mockPrintWriter0.printf("-@C}IH\"wtf+x#VV", (Object[]) null);
      cSVFormat5.print((Appendable) printWriter0);
      cSVFormat0.withRecordSeparator('|');
      CSVFormat cSVFormat6 = cSVFormat3.withTrim(true);
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat3.withHeader((ResultSet) null);
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat4.withDelimiter('|');
      cSVFormat6.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.INFORMIX_UNLOAD.withTrim();
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      Long long0 = new Long(0L);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines();
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withSkipHeaderRecord(false);
      cSVFormat2.MYSQL.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "\u0085");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.MYSQL.print((File) mockFile1, charset0);
      cSVFormat5.TDF.withIgnoreHeaderCase();
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        Charset.forName(":+0W+_F&}wCHLm");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // :+0W+_F&}wCHLm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');
      String string0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      Character character0 = Character.valueOf('Y');
      cSVFormat2.MYSQL.withEscape(character0);
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat1.RFC4180.toString();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('C');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      String string1 = "";
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('-');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.println(stringWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAutoFlush(false);
      cSVFormat2.getHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat2.parse(pipedReader0);
      cSVFormat4.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat.Predefined.values();
      cSVFormat0.getIgnoreHeaderCase();
      Character character0 = Character.valueOf('Y');
      cSVFormat0.DEFAULT.withQuote(character0);
      cSVFormat0.getNullString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.MYSQL.withTrim(false);
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat0.getEscapeCharacter();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.isEscapeCharacterSet();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "k=Hi~)3[:\"K]K}q\"r`";
      stringArray0[2] = "";
      stringArray0[3] = "\" in ";
      stringArray0[4] = "|+?,~Xf0d'Z[M";
      stringArray0[5] = " EmptyLines:ignored";
      stringArray0[6] = "";
      stringArray0[7] = "inputStream";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, k=Hi~)3[:\"K]K}q\"r`, , \" in , |+?,~Xf0d'Z[M,  EmptyLines:ignored, , inputStream, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char char0 = 'w';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      boolean boolean1 = true;
      String string0 = "RecordSeparator=<";
      cSVFormat1.EXCEL.withRecordSeparator("RecordSeparator=<");
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      cSVFormat4.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<MINIMAL> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat.newFormat('q');
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat4.TDF.withTrim(false);
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[8] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat2.getNullString();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat5.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('T');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SZ4Ov k4(0Q;/0qZ:";
      stringArray0[1] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      cSVFormat1.equals(cSVFormat_Predefined0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat2.withIgnoreHeaderCase(false);
      Character.valueOf('L');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      Character character0 = new Character('|');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('?')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "HxdH";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("HxdH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.HxdH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.EXCEL.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('s');
      cSVFormat2.EXCEL.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader(6);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (-785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      char char0 = '?';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('?');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      Character character0 = Character.valueOf('?');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('?')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.DEFAULT.withNullString("NullString=<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u2029");
      cSVFormat4.POSTGRESQL_CSV.print((Appendable) mockPrintWriter0);
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat5 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat6.MYSQL.withFirstRecordAsHeader();
      cSVFormat6.toString();
      cSVFormat3.getCommentMarker();
      cSVFormat0.getCommentMarker();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "NullString=<";
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat6.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
          CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("%vA9W5[)<");
          Character character0 = new Character('m');
          CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
          CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
          CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
          cSVFormat2.RFC4180.withDelimiter(']');
          cSVFormat2.isQuoteCharacterSet();
          cSVFormat4.MYSQL.withTrailingDelimiter(true);
          CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true);
          cSVFormat6.POSTGRESQL_TEXT.withRecordSeparator("EORECORD");
          Character character1 = new Character('n');
          cSVFormat5.withCommentMarker(character1);
          MockFile mockFile0 = new MockFile("9mV$d>I]+IGn'");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat4.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"9mV$d>I]+IGn'\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat1.MYSQL.withHeader(class1);
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withIgnoreEmptyLines(false);
      cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote('-');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.isEscapeCharacterSet();
      cSVFormat4.printer();
      cSVFormat5.printer();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVFormat3.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('E');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat2.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat4.withQuoteMode(quoteMode0);
      Character character1 = new Character('@');
      cSVFormat6.INFORMIX_UNLOAD_CSV.withQuote(character1);
      cSVFormat7.getDelimiter();
      CSVFormat cSVFormat8 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat9 = CSVFormat.newFormat('@');
      cSVFormat9.equals((Object) null);
      CSVFormat cSVFormat10 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat10.INFORMIX_UNLOAD.withRecordSeparator('E');
      cSVFormat8.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat11 = cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat10.getDelimiter();
      cSVFormat2.getIgnoreHeaderCase();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat8;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat11;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getAutoFlush());
      
      CSVFormat cSVFormat6 = cSVFormat0.withAllowMissingColumnNames(false);
      assertTrue(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.getTrim());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('k');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      boolean boolean0 = cSVFormat4.getIgnoreEmptyLines();
      assertFalse(cSVFormat3.getTrim());
      assertEquals('k', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.getIgnoreHeaderCase());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(boolean0);
  }
}
