* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-80
* Going to generate test cases for class: org.apache.commons.csv.CSVFormat
* Starting Client-0
* Connecting to master process on port 9027
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-15/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3008
* Using seed 3248452497
* Starting evolution
bbc usage percentage is: 80%
* Initial Number of Goals in DynaMOSA = 1645 / 3008
[MASTER] 12:28:31.585 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - CurrentThread has not been set!
[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Signal Dispatcher,9,system]

[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[main,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.DataInputStream.readByte(DataInputStream.java:265)
 -> sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
 -> sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
 -> java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:235)
 -> java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:180)
 -> com.sun.proxy.$Proxy7.waitUntilFinished(Unknown Source)
 -> org.evosuite.utils.ExternalProcessGroupHandler.waitForResult(ExternalProcessGroupHandler.java:694)
 -> org.evosuite.executionmode.TestGeneration.generateTests(TestGeneration.java:515)
 -> org.evosuite.executionmode.TestGeneration.executeTestGeneration(TestGeneration.java:80)
 -> org.evosuite.EvoSuite.parseCommandLine(EvoSuite.java:349)
 -> org.evosuite.EvoSuite.main(EvoSuite.java:115)

[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-3,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[GC Daemon,2,system]
 -> java.lang.Object.wait(Native Method)
 -> sun.misc.GC$Daemon.run(GC.java:117)

[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(1)-172.17.0.2,5,RMI Runtime]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.FilterInputStream.read(FilterInputStream.java:83)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:555)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1481292009.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.588 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[process reaper,10,system]
 -> java.lang.UNIXProcess.waitForProcessExit(Native Method)
 -> java.lang.UNIXProcess.lambda$initStreams$3(UNIXProcess.java:289)
 -> java.lang.UNIXProcess$$Lambda$16/540159270.run(Unknown Source)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-1,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Accept-17065,5,system]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:405)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-3-thread-2,5,main]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.ObjectInputStream$PeekInputStream.peek(ObjectInputStream.java:2758)
 -> java.io.ObjectInputStream$BlockDataInputStream.peek(ObjectInputStream.java:3065)
 -> java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3075)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1617)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:152)
 -> org.evosuite.utils.LoggingUtils$1$1.call(LoggingUtils.java:143)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Thread-2,5,main]
 -> java.io.FileInputStream.readBytes(Native Method)
 -> java.io.FileInputStream.read(FileInputStream.java:255)
 -> java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:345)
 -> sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
 -> sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
 -> sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
 -> java.io.InputStreamReader.read(InputStreamReader.java:184)
 -> java.io.BufferedReader.fill(BufferedReader.java:161)
 -> java.io.BufferedReader.read(BufferedReader.java:182)
 -> org.evosuite.utils.ExternalProcessGroupHandler$3.run(ExternalProcessGroupHandler.java:482)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI Reaper,5,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)
 -> sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:351)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI Scheduler(0),5,system]
 -> sun.misc.Unsafe.park(Native Method)
 -> java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
 -> java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
 -> java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-1,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-3,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.589 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Accept-9027,5,system]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:405)
 -> sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.590 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Finalizer,8,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)
 -> java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)

[MASTER] 12:28:31.590 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Reference Handler,10,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.Object.wait(Object.java:502)
 -> java.lang.ref.Reference.tryHandlePending(Reference.java:191)
 -> java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)

[MASTER] 12:28:31.590 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[Thread-3,5,main]
 -> java.io.FileInputStream.readBytes(Native Method)
 -> java.io.FileInputStream.read(FileInputStream.java:255)
 -> java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:345)
 -> sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
 -> sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
 -> sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
 -> java.io.InputStreamReader.read(InputStreamReader.java:184)
 -> java.io.BufferedReader.fill(BufferedReader.java:161)
 -> java.io.BufferedReader.read(BufferedReader.java:182)
 -> org.evosuite.utils.ExternalProcessGroupHandler$4.run(ExternalProcessGroupHandler.java:523)

[MASTER] 12:28:31.590 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[logback-2,5,main]
 -> java.lang.Thread.sleep(Native Method)
 -> ch.qos.logback.core.net.DefaultSocketConnector.call(DefaultSocketConnector.java:73)
 -> ch.qos.logback.core.net.AbstractSocketAppender.socketConnectionCouldBeEstablished(AbstractSocketAppender.java:209)
 -> ch.qos.logback.core.net.AbstractSocketAppender.connectSocketAndDispatchEvents(AbstractSocketAppender.java:189)
 -> ch.qos.logback.core.net.AbstractSocketAppender.access$000(AbstractSocketAppender.java:44)
 -> ch.qos.logback.core.net.AbstractSocketAppender$1.run(AbstractSocketAppender.java:150)
 -> java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
 -> java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.591 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
 -> java.lang.Thread.dumpThreads(Native Method)
 -> java.lang.Thread.getAllStackTraces(Thread.java:1610)
 -> org.evosuite.testcase.execution.ExecutionTracer.isThreadNeqCurrentThread(ExecutionTracer.java:214)
 -> org.evosuite.testcase.execution.ExecutionTracer.returnValue(ExecutionTracer.java:311)
 -> org.apache.commons.csv.CSVFormat.toStringArray(CSVFormat.java:1347)
 -> org.apache.commons.csv.CSVFormat.<init>(CSVFormat.java:644)
 -> org.apache.commons.csv.CSVFormat.<clinit>(CSVFormat.java)
 -> org.apache.commons.csv.CSVFormat$Predefined.<clinit>(CSVFormat.java)
 -> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 -> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.lang.Class.getEnumConstantsShared(Class.java:3320)
 -> java.lang.Class.getEnumConstants(Class.java:3297)
 -> org.evosuite.testcase.statements.EnumPrimitiveStatement.readObject(EnumPrimitiveStatement.java:264)
 -> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 -> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> java.util.ArrayList.readObject(ArrayList.java:799)
 -> sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:632)
 -> org.evosuite.testcase.DefaultTestCase.readObject(DefaultTestCase.java:1103)
 -> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 -> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> java.util.ArrayList.readObject(ArrayList.java:799)
 -> sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
 -> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 -> java.lang.reflect.Method.invoke(Method.java:498)
 -> java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1184)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2295)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2404)
 -> java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2328)
 -> java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2186)
 -> java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1666)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:502)
 -> java.io.ObjectInputStream.readObject(ObjectInputStream.java:460)
 -> sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:327)
 -> sun.rmi.server.UnicastServerRef.unmarshalParametersUnchecked(UnicastServerRef.java:629)
 -> sun.rmi.server.UnicastServerRef.unmarshalParameters(UnicastServerRef.java:617)
 -> sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:338)
 -> sun.rmi.transport.Transport$1.run(Transport.java:200)
 -> sun.rmi.transport.Transport$1.run(Transport.java:197)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.Transport.serviceCall(Transport.java:196)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1481292009.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.592 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[pool-2-thread-1,5,main]
 -> java.net.PlainSocketImpl.socketAccept(Native Method)
 -> java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)
 -> java.net.ServerSocket.implAccept(ServerSocket.java:560)
 -> java.net.ServerSocket.accept(ServerSocket.java:528)
 -> org.evosuite.utils.LoggingUtils$1.call(LoggingUtils.java:141)
 -> org.evosuite.utils.LoggingUtils$1.call(LoggingUtils.java:137)
 -> java.util.concurrent.FutureTask.run(FutureTask.java:266)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.592 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI RenewClean-[127.0.0.1:9028],5,system]
 -> java.lang.Object.wait(Native Method)
 -> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)
 -> sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:563)
 -> java.lang.Thread.run(Thread.java:748)

[MASTER] 12:28:31.592 [RMI TCP Connection(2)-127.0.0.1] ERROR ExecutionTracer - Thread: Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
 -> java.net.SocketInputStream.socketRead0(Native Method)
 -> java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
 -> java.net.SocketInputStream.read(SocketInputStream.java:171)
 -> java.net.SocketInputStream.read(SocketInputStream.java:141)
 -> java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
 -> java.io.BufferedInputStream.read(BufferedInputStream.java:265)
 -> java.io.FilterInputStream.read(FilterInputStream.java:83)
 -> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:555)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$20/1481292009.run(Unknown Source)
 -> java.security.AccessController.doPrivileged(Native Method)
 -> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)
 -> java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 -> java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 -> java.lang.Thread.run(Thread.java:748)

* Search finished after 602s and 2656 generations, 1087307 statements, best individual has fitness: 159.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 344
* Number of covered goals: 337
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 98%
* Total number of goals: 338
* Number of covered goals: 330
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 929
* Number of covered goals: 912
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 92%
* Total number of goals: 923
* Number of covered goals: 849
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 95%
* Total number of goals: 338
* Number of covered goals: 321
* Generated 364 tests with total length 1251
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:39:48.019 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6673166666666667% of time used, but only 75/364 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
[MASTER] 12:40:00.868 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:00.948 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:00.992 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.050 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.106 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.381 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.479 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.530 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.584 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.713 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.759 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.855 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.907 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:01.961 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.106 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.150 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.195 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.326 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.456 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.497 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.548 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.671 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.730 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.773 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.811 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.875 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:02.955 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.091 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.150 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.231 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.325 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.505 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:03.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:04.036 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:04.102 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:04.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:40:07.692 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVFormat_482_tmp__ESTest.test0(CSVFormat_482_tmp__ESTest.java:98)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:40:07.693 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('|', cSVFormat0.getDelimiter());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAutoFlush());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isEscapeCharacterSet());

RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
assertNotNull(rowSetMetaDataImpl0);

CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotNull(cSVFormat1);
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('|', cSVFormat0.getDelimiter());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getAutoFlush());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentMarker());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isEscapeCharacterSet());
assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
assertFalse(cSVFormat1.getTrim());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.isQuoteCharacterSet());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getTrailingDelimiter());
assertNull(cSVFormat1.getCommentMarker());
assertFalse(cSVFormat1.isCommentMarkerSet());
assertFalse(cSVFormat1.getIgnoreHeaderCase());
assertTrue(cSVFormat1.isEscapeCharacterSet());
assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
assertFalse(cSVFormat1.getAllowMissingColumnNames());
assertFalse(cSVFormat1.isNullStringSet());
assertNull(cSVFormat1.getNullString());
assertEquals('|', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getAutoFlush());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuoteMode());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

cSVFormat1.print((Appendable) mockFileWriter0);

[MASTER] 12:40:10.974 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "gyga3j" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
java.nio.file.Files.newOutputStream(Files.java:216)
java.nio.file.Files.newBufferedWriter(Files.java:2860)
org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
org.apache.commons.csv.CSVFormat_487_tmp__ESTest.test0(CSVFormat_487_tmp__ESTest.java:78)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:40:10.975 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getAutoFlush());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscapeCharacter());
assertNull(cSVFormat0.getNullString());

MockFile mockFile0 = new MockFile("gyga3j");
assertNotNull(mockFile0);

Path path0 = mockFile0.toPath();
assertNotNull(path0);
assertFalse(mockFile0.canWrite());
assertFalse(mockFile0.canExecute());
assertEquals("gyga3j", mockFile0.getName());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.getTotalSpace());
assertEquals(0L, mockFile0.getFreeSpace());
assertFalse(mockFile0.isDirectory());
assertEquals(0L, mockFile0.lastModified());
assertFalse(mockFile0.isAbsolute());
assertEquals(0L, mockFile0.length());
assertFalse(mockFile0.exists());
assertEquals("gyga3j", mockFile0.toString());
assertEquals(0L, mockFile0.getUsableSpace());
assertNull(mockFile0.getParent());
assertTrue(mockFile0.isFile());
assertFalse(mockFile0.canRead());

Charset charset0 = Charset.defaultCharset();
assertNotNull(charset0);
assertTrue(charset0.canEncode());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.toString());

cSVFormat0.TDF.print(path0, charset0);

[MASTER] 12:40:20.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVFormat_491_tmp__ESTest.test0(CSVFormat_491_tmp__ESTest.java:50)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:40:20.304 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getAutoFlush());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.isNullStringSet());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreHeaderCase());

Object[] objectArray0 = new Object[5];
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

cSVFormat0.printRecord(mockFileWriter0, objectArray0);

[MASTER] 12:40:25.905 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/foo.bar" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
java.nio.file.Files.newOutputStream(Files.java:216)
java.nio.file.Files.newBufferedWriter(Files.java:2860)
org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
org.apache.commons.csv.CSVFormat_526_tmp__ESTest.test0(CSVFormat_526_tmp__ESTest.java:103)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:40:25.907 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getAutoFlush());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());

URI uRI0 = MockURI.aFileURI;
assertNotNull(uRI0);
assertEquals((-1), uRI0.getPort());
assertEquals("file:///tmp/foo.bar", uRI0.toString());
assertNull(uRI0.getRawQuery());
assertFalse(uRI0.isOpaque());
assertTrue(uRI0.isAbsolute());
assertNull(uRI0.getRawFragment());
assertNull(uRI0.getRawAuthority());
assertNull(uRI0.getRawUserInfo());
assertEquals("/tmp/foo.bar", uRI0.getRawPath());
assertNull(uRI0.getHost());
assertEquals("file", uRI0.getScheme());

MockFile mockFile0 = new MockFile(uRI0);
assertNotNull(mockFile0);

Path path0 = mockFile0.toPath();
assertNotNull(path0);
assertEquals((-1), uRI0.getPort());
assertEquals("file:///tmp/foo.bar", uRI0.toString());
assertNull(uRI0.getRawQuery());
assertFalse(uRI0.isOpaque());
assertTrue(uRI0.isAbsolute());
assertNull(uRI0.getRawFragment());
assertNull(uRI0.getRawAuthority());
assertNull(uRI0.getRawUserInfo());
assertEquals("/tmp/foo.bar", uRI0.getRawPath());
assertNull(uRI0.getHost());
assertEquals("file", uRI0.getScheme());
assertFalse(mockFile0.exists());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.length());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(0L, mockFile0.getUsableSpace());
assertEquals("foo.bar", mockFile0.getName());
assertEquals(0L, mockFile0.lastModified());
assertFalse(mockFile0.isDirectory());
assertEquals("/tmp/foo.bar", mockFile0.toString());
assertTrue(mockFile0.isAbsolute());
assertFalse(mockFile0.canWrite());
assertFalse(mockFile0.canRead());
assertEquals("/tmp", mockFile0.getParent());
assertEquals(0L, mockFile0.getTotalSpace());
assertTrue(mockFile0.isFile());
assertFalse(mockFile0.canExecute());

Charset charset0 = Charset.defaultCharset();
assertNotNull(charset0);
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());

CSVPrinter cSVPrinter0 = cSVFormat0.print(path0, charset0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuoteMode());
assertFalse(cSVFormat0.getAutoFlush());
assertFalse(cSVFormat0.isEscapeCharacterSet());
assertNull(cSVFormat0.getEscapeCharacter());
assertFalse(cSVFormat0.getAllowMissingColumnNames());
assertFalse(cSVFormat0.getIgnoreHeaderCase());
assertFalse(cSVFormat0.isCommentMarkerSet());
assertNull(cSVFormat0.getCommentMarker());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getTrailingDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoteCharacterSet());
assertFalse(cSVFormat0.getTrim());
assertFalse(cSVFormat0.isNullStringSet());
assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
assertEquals((-1), uRI0.getPort());
assertEquals("file:///tmp/foo.bar", uRI0.toString());
assertNull(uRI0.getRawQuery());
assertFalse(uRI0.isOpaque());
assertTrue(uRI0.isAbsolute());
assertNull(uRI0.getRawFragment());
assertNull(uRI0.getRawAuthority());
assertNull(uRI0.getRawUserInfo());
assertEquals("/tmp/foo.bar", uRI0.getRawPath());
assertNull(uRI0.getHost());
assertEquals("file", uRI0.getScheme());
assertFalse(mockFile0.exists());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.length());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(0L, mockFile0.getUsableSpace());
assertEquals("foo.bar", mockFile0.getName());
assertEquals(0L, mockFile0.lastModified());
assertFalse(mockFile0.isDirectory());
assertEquals("/tmp/foo.bar", mockFile0.toString());
assertTrue(mockFile0.isAbsolute());
assertFalse(mockFile0.canWrite());
assertFalse(mockFile0.canRead());
assertEquals("/tmp", mockFile0.getParent());
assertEquals(0L, mockFile0.getTotalSpace());
assertTrue(mockFile0.isFile());
assertFalse(mockFile0.canExecute());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());


* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write gyga3j: 1
         write /experiment/D"R}yxr<3]/D"R}yxr<3]: 1
         write : 1
         write /tmp/foo.bar: 1
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'CSVFormat_ESTest' to results/Csv-15/org.apache.commons.csv.CSVFormat/BBC-F0-opt-80/tests/8
* Done!

* Computation finished
