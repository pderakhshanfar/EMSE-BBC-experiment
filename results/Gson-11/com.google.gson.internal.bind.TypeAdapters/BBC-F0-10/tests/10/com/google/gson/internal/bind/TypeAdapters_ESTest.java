/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:23:17 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      Gson gson0 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("48:ET{", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character(')');
      jsonArray0.add(character0);
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Expecting: bitset number value (1, 0), Found: )
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Locale>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson("-", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.JsonTreeReader");
      Class<Calendar> class0 = Calendar.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<StringBuilder>) null);
      Class<Long> class1 = Long.class;
      JsonSerializer<Long> jsonSerializer0 = (JsonSerializer<Long>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyLong() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Long> jsonDeserializer0 = (JsonDeserializer<Long>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<Long> typeToken0 = TypeToken.get(class1);
      TreeTypeAdapter<Long> treeTypeAdapter0 = new TreeTypeAdapter<Long>(jsonSerializer0, jsonDeserializer0, (Gson) null, typeToken0, typeAdapterFactory0);
      Long long0 = new Long(200L);
      JsonElement jsonElement0 = treeTypeAdapter0.toJsonTree(long0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Excluder excluder0 = new Excluder();
      JsonDeserializer<Long> jsonDeserializer0 = (JsonDeserializer<Long>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Long> treeTypeAdapter0 = new TreeTypeAdapter<Long>((JsonSerializer<Long>) null, jsonDeserializer0, gson0, (TypeToken<Long>) null, excluder0);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TreeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("WJWa9z5aiTu%p@X_K", class0);
      assertEquals("wjwa9z5aitu%p@x_K", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("LOWER_CASE_WITH_DASHES", class0);
      assertEquals("lower_CASE_WITH", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("_", (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("null", class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(">}");
      Locale locale0 = gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
      assertEquals(">}", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Locale locale0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      try { 
        gson0.fromJson("{0. 89HK", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected ':' at line 1 column 6 path $.0.
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) uUID0);
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(">}");
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getByName("2bWy3v@w8");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("@!bmEij;IJj{_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 9 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.create("");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uRI0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('[');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 0: [
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFileExample();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) uRL0);
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URL uRL0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("[U0:sr");
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: [U0:sr
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      String string0 = gson0.toJson(jsonElement0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter(1466);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      try { 
        gson0.fromJson("Ne+^GvKrv:DvY", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 12 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder("com.google.gson.internal.bind.TypeAdapters$13");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) stringBuilder0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Locale locale0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("94aXQqWhqNk0c{h", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 15 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<String> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<String>(gson0, typeAdapter0, class0);
      String string0 = typeAdapterRuntimeTypeWrapper0.fromJson("2");
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('A');
      JsonElement jsonElement0 = gson0.toJsonTree((Object) character0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("A]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Character> class0 = Character.TYPE;
      Locale locale0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("closed", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: closed
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_FACTORY;
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonSerializer<Long> jsonSerializer0 = (JsonSerializer<Long>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Long> treeTypeAdapter0 = new TreeTypeAdapter<Long>(jsonSerializer0, (JsonDeserializer<Long>) null, gson0, typeToken0, typeAdapterFactory0);
      Long long0 = treeTypeAdapter0.fromJsonTree(jsonNull0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("vm!*(", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"vm!*(\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character('5');
      jsonArray0.add(character0);
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("[5]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Character character0 = new Character('M');
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add(character0);
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"M\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = gson0.fromJson("null", class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson("GSON cannot handle ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"GSON\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      ReflectiveTypeAdapterFactory.BoundField reflectiveTypeAdapterFactory_BoundField0 = gson0.fromJson("null", (Type) class0);
      assertNull(reflectiveTypeAdapterFactory_BoundField0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("closed", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"closed\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      String string0 = gson0.fromJson("null", (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("`F}P_wJay]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"`F\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("[42zt+/9@/\"R", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      URL uRL0 = gson0.fromJson("null", (Type) class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("Attempted to serialize java.lang.Class: ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 12 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1483;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[1,1,0,1,0,0,1,1,1,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add((JsonElement) jsonArray0);
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid bitset value type: BEGIN_ARRAY
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('3');
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add(character0);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = new Boolean("BuV,^~Js");
      jsonArray0.add(boolean0);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson(jsonElement0, class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(932);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(932, jsonArray0.size());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonSerializer<StringBuffer> jsonSerializer0 = (JsonSerializer<StringBuffer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      Currency currency0 = Currency.getInstance(locale0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) currency0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(5194);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) atomicInteger0);
      assertFalse(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("R[&", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"R\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) atomicBoolean0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson("94aXQqWhqNk0c{h", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-18));
      JsonElement jsonElement0 = gson0.toJsonTree((Object) byte0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1276), 1453, (-1276), (-339), 12);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      String string0 = gson0.toJson((Object) jsonElement0, (Type) class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)217);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<String>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class0);
      TypeAdapter<JsonNull> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }
}
