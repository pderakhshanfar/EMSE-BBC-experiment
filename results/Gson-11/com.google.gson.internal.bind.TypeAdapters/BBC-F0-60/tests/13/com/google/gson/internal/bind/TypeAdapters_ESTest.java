/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:24:50 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.File;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<AtomicBoolean>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Class<Object> class1 = Object.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<?>) class0, (TypeAdapter<? super Object>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('8');
      jsonObject0.addProperty("dayOfMonth", character0);
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("t", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"t\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$8", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("cT|@CfEEfd");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 2: cT|@CfEEfd
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Long>) null);
      Gson gson0 = new Gson();
      Class<StringBuffer> class1 = StringBuffer.class;
      JsonSerializer<StringBuffer> jsonSerializer0 = (JsonSerializer<StringBuffer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<StringBuffer> jsonDeserializer0 = (JsonDeserializer<StringBuffer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class1);
      TreeTypeAdapter<StringBuffer> treeTypeAdapter0 = new TreeTypeAdapter<StringBuffer>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, (TypeAdapter<StringBuffer>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class1 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      Integer integer0 = new Integer(5);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) integer0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class1 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      Locale locale0 = Locale.UK;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class1 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class1 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class1);
      Boolean boolean0 = new Boolean("WO[=");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) boolean0);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectConstructor<Short> objectConstructor0 = (ObjectConstructor<Short>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) objectConstructor0, (Appendable) stringBuilder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.internal.ObjectConstructor. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = Boolean.valueOf(true);
      jsonArray0.add(boolean0);
      gson0.toJson((Object) jsonArray0, (Appendable) stringBuilder0);
      assertEquals("[true]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('%');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      jsonObject0.add("R2aT0", jsonPrimitive0);
      gson0.toJson((Object) jsonObject0, (Appendable) stringBuilder0);
      assertEquals("{\"R2aT0\":\"%\"}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-1220.0F));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      JsonPrimitive jsonPrimitive1 = (JsonPrimitive)gson0.toJsonTree((Object) jsonPrimitive0);
      assertTrue(jsonPrimitive1.isNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Gson gson0 = new Gson();
      gson0.toJson((Object) null, (Appendable) stringBuffer0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null, (Appendable) stringBuilder0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class1 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      JsonObject jsonObject0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      Class<? super Locale> class1 = typeToken0.getRawType();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      Class<? super Locale> class1 = typeToken0.getRawType();
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class1);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      Class<? super Locale> class1 = typeToken0.getRawType();
      try { 
        gson0.fromJson("Ls haQR$[Ie?w?VY4jn", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(55, 54, (-2438), 54, 54);
      gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60500365560000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=302,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=54,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('0');
      jsonObject0.addProperty("@$$>^^B|[wW", character0);
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = new Character('2');
      jsonObject0.addProperty("hourOfDay", character0);
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Character character0 = new Character('8');
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("month", character0);
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=8,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Character character0 = Character.valueOf('2');
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("year", character0);
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Short short0 = Short.valueOf((short) (-114));
      jsonObject0.addProperty("minute", (Number) short0);
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=-114,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      File file0 = MockFile.createTempFile("WPu)B%icZ,#$|f]Z5", "minute");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockFileWriter0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      gson0.toJson((Object) uUID0, (Appendable) stringBuilder0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("minute", class0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      StringBuffer stringBuffer0 = new StringBuffer();
      gson0.toJson((Object) inetAddress0, (Appendable) stringBuffer0);
      assertEquals("\"192.168.1.42\"", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      BitSet bitSet0 = gson0.fromJson("null", (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("ihs5;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder("IQePi%f5ke3tC%");
      gson0.toJson((Object) null, (Type) class0, (Appendable) stringBuilder0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      URI uRI0 = MockURI.aHttpURI;
      gson0.toJson((Object) uRI0, (Appendable) stringBuilder0);
      assertEquals("\"http://foo.bar\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Object object0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      MockFile mockFile0 = new MockFile("LR7NWq5c0", "com.google.gson.internal.bind.SqlDateTypeAdapter");
      URL uRL0 = mockFile0.toURL();
      gson0.toJson((Object) uRL0, (Appendable) stringBuilder0);
      assertEquals("\"file:/experiment/LR7NWq5c0/com.google.gson.internal.bind.SqlDateTypeAdapter\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Character character0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("R2aT;", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: R2aT
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Gson gson0 = new Gson();
      gson0.toJson((Object) stringBuffer0, (Appendable) stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\"\"", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class0);
      TypeAdapter<StringBuffer> typeAdapter0 = gson0.getAdapter(typeToken0);
      ArrayTypeAdapter<StringBuffer> arrayTypeAdapter0 = new ArrayTypeAdapter<StringBuffer>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      AtomicBoolean atomicBoolean0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("dayOfMonth", class0);
      assertEquals("dayOfMonth", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0, (Appendable) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      BitSet bitSet0 = gson0.fromJson("NULL", (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson("F,~8x0", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      BitSet bitSet0 = gson0.fromJson("null", (Type) class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$35");
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("com.google.gson.internal.bind.TypeAdapters$35", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("Expected value", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Expected
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class0);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("L,vDkniN\"*AMe[my+t-", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class0);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("year", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"year\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(31);
      gson0.toJson((Object) atomicIntegerArray0, (Appendable) stringBuilder0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      JsonObject jsonObject0 = gson0.fromJson("NULL", (Type) class0);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson("vJlpZAYk]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"vJlpZAYk\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class0);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("v*iy8?p>1Qg", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"v*iy8?p>1Qg\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("4=.h0", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.class;
      try { 
        gson0.fromJson("Expecting character, got: ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 12 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson("null", class0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("1{Z;+;mFvnZH>/", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      long[] longArray0 = new long[1];
      longArray0[0] = (-566L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJson((Object) bitSet0, (Appendable) stringBuilder0);
      assertEquals("[0,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson("null", class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("gB[TXUeUCz@cJ|m6T5", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.ArrayTypeAdapter");
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Currency currency0 = Currency.getInstance(locale0);
      gson0.toJson((Object) currency0, (Appendable) stringBuilder0);
      assertEquals(2, currency0.getDefaultFractionDigits());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(15);
      StringBuilder stringBuilder0 = new StringBuilder("qJD7t");
      gson0.toJson((Object) atomicInteger0, (Appendable) stringBuilder0);
      assertEquals((byte)15, atomicInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("Z9|!{cX<\"&86+]zK", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Z9|!\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      gson0.toJson((Object) atomicBoolean0, (Appendable) stringBuilder0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-3162.169F));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was NUMBER at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-109));
      gson0.toJson((Object) byte0, (Appendable) stringBuilder0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Long long0 = new Long(0);
      String string0 = gson0.toJson((Object) long0, (Type) class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      ObjectConstructor<GregorianCalendar> objectConstructor0 = (ObjectConstructor<GregorianCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<GregorianCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<GregorianCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<GregorianCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$35");
      Gson gson0 = new Gson();
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonReader0);
      assertFalse(jsonElement0.isJsonArray());
  }
}
