/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 14:27:29 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Integer integer0 = new Integer(385);
      jsonObject0.addProperty("year", (Number) integer0);
      Gson gson1 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson0.fromJson((JsonElement) jsonObject0, class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<Locale> class1 = Locale.class;
      gson0.fromJson(">_B6qWx4", class1);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(31);
      Double double0 = new Double(0.0);
      String string0 = gson0.toJson((Object) double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      gson0.fromJson("null", (Type) class0);
      gson0.toJson((Object) uRI0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      Class<Object> class2 = Object.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<?>) class0, (TypeAdapter<? super Object>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Locale> class1 = Locale.class;
      gson0.fromJson((JsonElement) jsonNull0, class1);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.StringBuffer
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$21", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('3');
      jsonArray0.add(character0);
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      gson0.fromJson((JsonElement) jsonArray0, class0);
      Class<Float> class1 = Float.TYPE;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(719.60657F);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("second", (Number) float0);
      Gson gson1 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson2 = new Gson();
      gson2.fromJson((JsonElement) jsonObject0, class0);
      Class<Float> class1 = Float.TYPE;
      Class<Float> class2 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      String string0 = "|b:";
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson1.fromJson("|b:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 0: |b
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<URI> class0 = URI.class;
      gson0.fromJson("SvlkI9", class0);
      Float float0 = new Float(0.0F);
      jsonObject0.addProperty("uPk~yNEI]", (Number) float0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      gson0.fromJson((JsonElement) jsonObject0, class1);
      Class<Float> class2 = Float.class;
      TypeAdapters.newFactory(class2, (TypeAdapter<Float>) null);
      Random.setNextRandom(16);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('v');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"v\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      gson0.fromJson((String) null, (Type) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      gson0.toString();
      URL uRL0 = MockURL.URL("true", "", 43, "true", uRLStreamHandler0);
      typeAdapterRuntimeTypeWrapper0.toJsonTree(uRL0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<URL>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class1 = Locale.class;
      StringWriter stringWriter0 = new StringWriter(43);
      StringWriter stringWriter1 = new StringWriter(567);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      gson0.toJson((Object) null, (Type) class1, jsonWriter0);
      TypeToken.get(class1);
      // Undeclared exception!
      try { 
        TreeTypeAdapter.newFactory(typeToken0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<AtomicIntegerArray> class1 = AtomicIntegerArray.class;
      gson0.fromJson((JsonElement) jsonArray0, class1);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.StringBuffer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      JsonObject jsonObject0 = new JsonObject();
      Short short0 = new Short((short)70);
      jsonObject0.addProperty("minute", (Number) short0);
      Gson gson1 = new Gson();
      jsonObject0.getAsJsonPrimitive("com.google.gson.internal.bind.TypeAdapters$27");
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson1.fromJson((JsonElement) jsonObject0, class0);
      Gson gson2 = new Gson();
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      AtomicInteger atomicInteger0 = new AtomicInteger();
      atomicInteger0.incrementAndGet();
      jsonObject0.addProperty("month", (Number) atomicInteger0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson0.fromJson((JsonElement) jsonObject0, class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      Class<Integer> class2 = Integer.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<Integer>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Integer integer0 = new Integer(1566);
      jsonObject0.addProperty("hourOfDay", (Number) integer0);
      Gson gson1 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson1.fromJson((JsonElement) jsonObject0, class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      try { 
        gson0.fromJson("b VU:u_la/O91+Vscv\"", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z`s");
      JsonObject jsonObject0 = new JsonObject();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null, (Type) class0);
      Class<JsonNull> class1 = JsonNull.class;
      Class<JsonNull> class2 = JsonNull.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends JsonNull>) class1, (TypeAdapter<? super JsonNull>) null);
      try { 
        gson0.fromJson("oonth", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonObject jsonObject0 = new JsonObject();
      AtomicInteger atomicInteger0 = new AtomicInteger();
      jsonObject0.addProperty("month", (Number) atomicInteger0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      Gson gson1 = new Gson();
      gson1.toJsonTree((Object) gregorianCalendar0, (Type) class0);
      Class<JsonNull> class1 = JsonNull.class;
      Class<JsonNull> class2 = JsonNull.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends JsonNull>) class2, (TypeAdapter<? super JsonNull>) null);
      try { 
        gson1.fromJson("month", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      MockURL.getHttpExample();
      JsonObject jsonObject0 = new JsonObject();
      Float float0 = new Float(1559.0F);
      jsonObject0.addProperty("dayOfMonth", (Number) float0);
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson2.fromJson((JsonElement) jsonObject0, class0);
      Gson gson3 = new Gson();
      try { 
        gson3.fromJson("oonth", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("\"\"", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      Class<StringBuilder> class1 = StringBuilder.class;
      try { 
        gson0.fromJson("jI6Ss;OK\" ", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z`s");
      JsonObject jsonObject0 = new JsonObject();
      AtomicInteger atomicInteger0 = new AtomicInteger();
      jsonObject0.addProperty("month", (Number) atomicInteger0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      gson0.fromJson((JsonElement) jsonObject0, class1);
      Gson gson1 = new Gson();
      try { 
        gson1.fromJson("l$p9,KVk:gmZiH", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$14", class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Float float0 = new Float((-807.232F));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i^]DMQ*we~nZqXs|");
      jsonObject0.addProperty("a", (Number) float0);
      gson0.fromJson((JsonElement) jsonObject0, class0);
      String string0 = gson0.toJson((JsonElement) jsonObject0);
      String string1 = gson0.toJson((Object) gson0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      Class<Long> class1 = Long.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      gson0.fromJson(jsonElement0, (Type) class0);
      Class<Float> class2 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      MockInetAddress.anyLocalAddress();
      Class<Byte> class1 = Byte.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      Class<Float> class2 = Float.TYPE;
      Class<Float> class3 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class3, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      gson0.fromJson(jsonElement0, class0);
      gson0.toJson((Object) null);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      gson0.toJson((Object) inetAddress0);
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("WtO[rok o+uqe", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson1.fromJson((JsonElement) jsonNull0, class0);
      Class<Float> class1 = Float.TYPE;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      MockUUID.randomUUID();
      Class<UUID> class0 = UUID.class;
      Class<Short> class1 = Short.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      Class<Float> class2 = Float.class;
      ObjectConstructor<Float> objectConstructor0 = (ObjectConstructor<Float>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Float> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Float>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, (TypeAdapter<Float>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      MockUUID.randomUUID();
      Class<UUID> class0 = UUID.class;
      Class<Short> class1 = Short.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<URI> class0 = URI.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("`\" 5t2F", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"`\"\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "z,-P%v#h8\"U;^,X";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-105);
      byte byte0 = (byte) (-56);
      StringReader stringReader0 = new StringReader("&@Gc5P3J^SB9&}f\"\"");
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 15 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockURL.getHttpExample();
      Class<Long> class0 = Long.TYPE;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      gson0.fromJson(jsonElement0, (Type) class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      Class<AtomicIntegerArray> class2 = AtomicIntegerArray.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, (TypeAdapter<AtomicIntegerArray>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      gson0.fromJson("null", class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      Class<Locale> class2 = Locale.class;
      Class<Locale> class3 = Locale.class;
      Excluder excluder0 = new Excluder();
      Class<Object> class4 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class4);
      excluder0.create(gson0, typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends Locale>) class3, (TypeAdapter<? super Locale>) typeAdapterRuntimeTypeWrapper0);
      Class<String> class5 = String.class;
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<String> typeToken1 = TypeToken.get(class5);
      TreeTypeAdapter<String> treeTypeAdapter0 = new TreeTypeAdapter<String>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      TypeAdapters.newFactory(class5, (TypeAdapter<String>) treeTypeAdapter0);
      Class<URI> class6 = URI.class;
      Class<URI> class7 = URI.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class6, class7, (TypeAdapter<? super URI>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Gson gson0 = new Gson();
      gson0.toJson((Object) uRL0);
      Gson gson1 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Character> class0 = Character.TYPE;
      gson1.fromJson((JsonElement) jsonNull0, (Type) class0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"");
      try { 
        gson1.fromJson((JsonElement) jsonPrimitive0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      URI uRI0 = MockURI.aFTPURI;
      gson0.toJson((Object) uRI0);
      Class<Float> class0 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
      
      Class<Calendar> class1 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      TypeAdapter<Calendar> typeAdapter0 = gson1.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson1 = new Gson();
      jsonObject0.getAsJsonObject("8l!W8IK^S}8K(qq");
      Class<Character> class0 = Character.TYPE;
      gson1.toJson((Object) null, (Type) class0);
      String string0 = gson1.toJson((Object) gson0);
      gson1.toJson((Object) string0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Random.setNextRandom(2);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeAdapter<MockCalendar> typeAdapter1 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      Double double0 = new Double((-37.824378546937));
      gson0.toJson((Object) double0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Boolean> class0 = Boolean.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      TypeAdapter<URI> typeAdapter0 = TypeAdapters.URI;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory((TypeToken<URI>) null, typeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = gson0.toJson((Object) mockGregorianCalendar0);
      JsonObject jsonObject0 = new JsonObject();
      Integer integer0 = new Integer(29);
      jsonObject0.addProperty(string0, (Number) integer0);
      gson0.toJson((Object) jsonObject0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Class<URL> class0 = URL.class;
      Class<URL> class1 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends URL>) class1, (TypeAdapter<? super URL>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      String string0 = "6kcS}LY{{|GaNy:}E";
      Gson gson1 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.getAsJsonArray();
      Class<UUID> class1 = UUID.class;
      try { 
        gson1.fromJson("6kcS}LY{{|GaNy:}E", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<StringBuffer> typeAdapter0 = TypeAdapters.STRING_BUFFER;
      Character character0 = new Character('C');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Short> class0 = Short.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"C\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<StringBuffer> typeAdapter0 = TypeAdapters.STRING_BUFFER;
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      Gson gson1 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(6);
      MockURL.getFileExample();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJson((Object) inetAddress0);
      Gson gson2 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      TypeAdapter<URL> typeAdapter1 = TypeAdapters.URL;
      assertNotNull(typeAdapter1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("z,-P%v#h8\"U;^,X", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.iterator();
      Class<Currency> class0 = Currency.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(329);
      stringWriter0.getBuffer();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("6kcS}LY{{|GaNy:}E", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      gson0.toJson((Object) locale0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Short> class1 = Short.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson1.fromJson((JsonElement) jsonNull0, (Type) class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Float> class2 = Float.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, (TypeAdapter<Float>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Long long0 = new Long((-291L));
      jsonObject0.addProperty("null", (Number) long0);
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("null", (Type) class0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonPrimitive("6kcS");
      StringBuffer stringBuffer0 = new StringBuffer("V");
      gson0.toJson((JsonElement) null, (Appendable) stringBuffer0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(777);
      gson0.toJson((Object) atomicIntegerArray0);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.URL_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Class<StringBuilder> class1 = StringBuilder.class;
      ObjectConstructor<StringBuilder> objectConstructor0 = (ObjectConstructor<StringBuilder>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<StringBuilder> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<StringBuilder>(objectConstructor0, (Map<String, ReflectiveTypeAdapterFactory.BoundField>) null);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class1, (TypeAdapter<StringBuilder>) reflectiveTypeAdapterFactory_Adapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2);
      gson0.toJson((Object) atomicIntegerArray0);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('i');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Gson gson1 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"i\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(9);
      stringWriter1.getBuffer();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      gson0.toJson((Object) locale0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Class<InetAddress> class0 = InetAddress.class;
      TypeAdapters.newFactory(class0, (TypeAdapter<InetAddress>) null);
      Class<Float> class1 = Float.TYPE;
      TypeToken<Float> typeToken0 = TypeToken.get(class1);
      assertNotNull(typeToken0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      gson0.toJson((Object) bitSet0);
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      ObjectConstructor<MockGregorianCalendar> objectConstructor0 = (ObjectConstructor<MockGregorianCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockGregorianCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockGregorianCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, class2, (TypeAdapter<? super MockGregorianCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class3);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>((JsonSerializer<Object>) null, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.ENUM_FACTORY;
      treeTypeAdapter0.fromJson("[]");
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Class<Short> class1 = Short.TYPE;
      try { 
        gson0.fromJson("NUMBER", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"NUMBER\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Random.setNextRandom((-1034));
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Gson gson1 = new Gson();
      Class<Character> class0 = Character.class;
      try { 
        gson0.fromJson(")}U{SSk8Zjj-zQ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Double> class1 = Double.class;
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      Excluder excluder0 = gson0.excluder();
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super Double>) null);
      gson0.toJson(jsonElement0);
      Class<JsonNull> class3 = JsonNull.class;
      TypeToken<JsonNull> typeToken1 = TypeToken.get(class3);
      TypeAdapter<JsonNull> typeAdapter0 = gson0.getAdapter(typeToken1);
      TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter0);
      Class<Long> class4 = Long.class;
      Class<Long> class5 = Long.class;
      TypeAdapters.newFactoryForMultipleTypes(class4, (Class<? extends Long>) class5, (TypeAdapter<? super Long>) null);
      Class<AtomicBoolean> class6 = AtomicBoolean.class;
      TypeAdapters.newFactory(class6, class6, (TypeAdapter<? super AtomicBoolean>) null);
      Class<String> class7 = String.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends String>) class7, (TypeAdapter<? super String>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character(';');
      gson0.toJsonTree((Object) character0);
      Character.valueOf(';');
      gson0.toJson((Object) character0);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Gson gson2 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.STRING_BUILDER_FACTORY;
      Locale locale0 = Locale.CHINA;
      Currency currency0 = Currency.getInstance(locale0);
      gson2.toJsonTree((Object) currency0, (Type) class0);
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      TypeAdapter<URL> typeAdapter0 = gson2.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends URL>) class1, (TypeAdapter<? super URL>) typeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-1034);
      Random.setNextRandom((-1034));
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson(")}U{SSk8Zjj-zQ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Gson gson1 = new Gson();
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      JsonObject jsonObject0 = new JsonObject();
      StringWriter stringWriter1 = new StringWriter(375);
      stringWriter1.getBuffer();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      gson0.toJson((Object) atomicBoolean0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter1 = TypeAdapters.URL;
      Class<URL> class0 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends URL>) class0, (TypeAdapter<? super URL>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      longArray0[0] = (-1965L);
      BitSet.valueOf(longArray0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonDeserializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      Byte byte0 = new Byte((byte)40);
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson3.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class0);
      MockUUID.fromString("com.google.gson.internal.bind.TypeAdapters$13");
      Short short0 = new Short((byte)40);
      gson0.toJson((Object) short0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<InetAddress> class2 = InetAddress.class;
      Class<InetAddress> class3 = InetAddress.class;
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super InetAddress>) typeAdapterRuntimeTypeWrapper0);
      System.setCurrentTimeMillis((-128L));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Gson gson2 = new Gson();
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      JsonObject jsonObject0 = new JsonObject();
      gson2.toJson((Object) jsonObject0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter1 = TypeAdapters.URL;
      Class<InetAddress> class0 = InetAddress.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, (TypeAdapter<InetAddress>) null);
      Class<Float> class1 = Float.class;
      Class<Float> class2 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class2);
      TypeAdapter<Float> typeAdapter2 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class1, typeAdapter2);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      Byte byte0 = new Byte((byte)40);
      Gson gson2 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      UUID uUID0 = MockUUID.fromString("null");
      gson2.toJson((Object) uUID0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<InetAddress> class3 = InetAddress.class;
      Class<InetAddress> class4 = InetAddress.class;
      TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super InetAddress>) typeAdapterRuntimeTypeWrapper0);
      System.setCurrentTimeMillis((byte)40);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Class<StringBuffer> class1 = StringBuffer.class;
      Gson gson0 = new Gson();
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class1);
      TypeAdapter<StringBuffer> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter0);
      Gson gson1 = new Gson();
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(364);
      stringWriter0.getBuffer();
      Long long0 = new Long(1522L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      gson0.toJson((Object) jsonPrimitive0);
      TypeToken<Object> typeToken1 = TypeToken.get(class2);
      TypeAdapter<Object> typeAdapter1 = gson1.getAdapter(typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.BYTE_FACTORY;
      TypeAdapter<URL> typeAdapter2 = TypeAdapters.URL;
      Class<URL> class3 = URL.class;
      TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends URL>) class3, (TypeAdapter<? super URL>) typeAdapter1);
      Class<Float> class4 = Float.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, class4, (TypeAdapter<? super Float>) typeAdapter1);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character(';');
      Character character1 = Character.valueOf(';');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character1);
      Gson gson1 = new Gson();
      gson1.toJson((Object) character0);
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Gson gson2 = new Gson();
      Class<Object> class1 = Object.class;
      TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Float> class2 = Float.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, (TypeAdapter<Float>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      gson0.toString();
      URL uRL0 = MockURL.URL("true", "{", 43, "true", uRLStreamHandler0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree(uRL0);
      Character character0 = Character.valueOf('e');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      gson0.fromJson(jsonElement0, (Type) class0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withExclusionStrategy((ExclusionStrategy) null, false, true);
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        excluder1.create(gson1, typeToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add("`");
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [\"`\"]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      jsonArray0.add((JsonElement) jsonArray1);
      gson0.toJson((Object) jsonArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      int int0 = 375;
      Class<Character> class1 = Character.class;
      try { 
        gson0.fromJson("4M8gD_,0=!3", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: 4M8gD_
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Gson gson1 = new Gson();
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson2 = new Gson();
      gson2.toJson((Object) gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter1 = TypeAdapters.URL;
      Class<InetAddress> class0 = InetAddress.class;
      TypeAdapters.newFactory(class0, (TypeAdapter<InetAddress>) null);
      Class<Float> class1 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Float> typeAdapter2 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<Float> class2 = Float.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, typeAdapter2);
      assertNotSame(typeAdapterFactory0, typeAdapterFactory1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      Byte byte0 = new Byte((byte)40);
      Character character0 = new Character('v');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Gson gson1 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson1.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      gson1.toJson((Object) typeAdapter0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Float> class3 = Float.class;
      TypeAdapters.newFactory(class3, (TypeAdapter<Float>) null);
      Class<InetAddress> class4 = InetAddress.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, class4, (TypeAdapter<? super InetAddress>) typeAdapterRuntimeTypeWrapper0);
      System.setCurrentTimeMillis((byte)40);
      Class<MockCalendar> class5 = MockCalendar.class;
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class5, (TypeAdapter<MockCalendar>) reflectiveTypeAdapterFactory_Adapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('l');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'l';
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJson((Object) bitSet0);
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      int int0 = 375;
      StringWriter stringWriter0 = new StringWriter(375);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 375, (-1236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(1699);
      stringWriter0.getBuffer();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(110);
      gson0.toJson((Object) atomicIntegerArray0);
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      Gson gson2 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson2.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeAdapter<Object> typeAdapter1 = gson1.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter1, class0);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>((JsonSerializer<Object>) null, jsonDeserializer0, gson1, typeToken0, typeAdapterFactory1);
      JsonDeserializer<Object> jsonDeserializer1 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer1).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<Object> treeTypeAdapter1 = new TreeTypeAdapter<Object>((JsonSerializer<Object>) null, jsonDeserializer1, gson0, typeToken0, typeAdapterFactory0);
      treeTypeAdapter1.fromJson("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class5 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super MockGregorianCalendar>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Character character0 = new Character('l');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class1);
      Type type0 = typeToken0.getType();
      typeArray0[2] = type0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      TypeToken.getParameterized(class0, typeArray0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.JSON_ELEMENT_FACTORY;
      Class<URL> class2 = URL.class;
      TypeToken<URL> typeToken1 = TypeToken.get(class2);
      TypeAdapter<URL> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      Character character1 = new Character('l');
      Character character2 = Character.valueOf('l');
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(character2);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      String string0 = gson0.toString();
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      Class<Long> class2 = Long.TYPE;
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class2);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper1);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      JsonSerializer<Object> jsonSerializer1 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer1 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.ENUM_FACTORY;
      TreeTypeAdapter<Object> treeTypeAdapter1 = new TreeTypeAdapter<Object>(jsonSerializer1, jsonDeserializer1, gson0, typeToken1, typeAdapterFactory1);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJson(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      gson0.toString();
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter1 = gson0.getAdapter(typeToken1);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter1, (Type) null);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper1);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      JsonSerializer<Object> jsonSerializer1 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer1 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer1).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<Object> treeTypeAdapter1 = new TreeTypeAdapter<Object>(jsonSerializer1, jsonDeserializer1, gson0, typeToken1, typeAdapterFactory0);
      treeTypeAdapter1.fromJson("true");
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, class2, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(1699);
      stringWriter0.getBuffer();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(110);
      gson0.toJson((Object) atomicIntegerArray0);
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      Gson gson2 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson2.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.STRING_BUFFER_FACTORY;
      Class<Float> class3 = Float.class;
      TypeAdapters.newFactory(class3, (TypeAdapter<Float>) null);
      Class<InetAddress> class4 = InetAddress.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, class4, (TypeAdapter<? super InetAddress>) typeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(1699);
      stringWriter0.getBuffer();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(110);
      gson0.toJson((Object) atomicIntegerArray0);
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      Gson gson2 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson2.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson1, typeToken0, typeAdapterFactory0);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Gson gson3 = new Gson();
      TypeAdapterRuntimeTypeWrapper<MockGregorianCalendar> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<MockGregorianCalendar>(gson3, (TypeAdapter<MockGregorianCalendar>) null, class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper1);
      Class<JsonPrimitive> class5 = JsonPrimitive.class;
      Class<JsonPrimitive> class6 = JsonPrimitive.class;
      TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends JsonPrimitive>) class6, (TypeAdapter<? super JsonPrimitive>) typeAdapterRuntimeTypeWrapper0);
      Class<Currency> class7 = Currency.class;
      ObjectConstructor<Currency> objectConstructor0 = (ObjectConstructor<Currency>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Currency> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Currency>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class7, (TypeAdapter<Currency>) reflectiveTypeAdapterFactory_Adapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<Object> class2 = Object.class;
      TypeToken.get(class2);
      Byte byte0 = new Byte((byte)40);
      Character character0 = new Character(']');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      gson0.toJson((Object) byte0);
      TypeToken.get(class2);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<Object> class1 = Object.class;
      StringWriter stringWriter0 = new StringWriter(364);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) stringBuffer0);
      TypeToken.get(class1);
      Byte byte0 = new Byte((byte)2);
      gson0.toJson((Object) byte0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      Class<URL> class2 = URL.class;
      Class<URL> class3 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends URL>) class3, (TypeAdapter<? super URL>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      Type[] typeArray0 = new Type[7];
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Character character0 = new Character('l');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      gson0.toJson((Object) jsonPrimitive0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, typeArray0[0]);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class2, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson1 = new Gson();
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>((JsonSerializer<Object>) null, jsonDeserializer0, gson1, typeToken0, typeAdapterFactory0);
      treeTypeAdapter0.fromJson("null");
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion((-620.87));
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      Class<MockGregorianCalendar> class5 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken1 = TypeToken.get(class5);
      excluder3.create(gson0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super MockGregorianCalendar>) null);
      Class<Locale> class6 = Locale.class;
      TypeToken<Locale> typeToken2 = TypeToken.get(class6);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<Locale>) null);
      Class<Calendar> class7 = Calendar.class;
      Class<Calendar> class8 = Calendar.class;
      TypeToken<Calendar> typeToken3 = TypeToken.get(class7);
      TypeAdapter<Calendar> typeAdapter1 = gson0.getAdapter(typeToken3);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends Calendar>) class8, (TypeAdapter<? super Calendar>) typeAdapter1);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('l');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      gson0.toJson((Object) jsonPrimitive0);
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      Gson gson2 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This is not a JSON Null.
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      Class<Object> class3 = Object.class;
      StringWriter stringWriter0 = new StringWriter(364);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) stringBuffer0);
      TypeToken<Object> typeToken0 = TypeToken.get(class3);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
      TypeAdapters.newFactory(class1, class2, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      treeTypeAdapter0.fromJson("\"\"");
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, class4, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) gson0);
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      Long long0 = new Long((-1379L));
      gson1.toJson((Object) long0);
      TypeToken<Object> typeToken1 = TypeToken.get(class2);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson1);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, objectTypeAdapter0, class1);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super MockGregorianCalendar>) objectTypeAdapter0);
      Class<Double> class5 = Double.class;
      TypeToken.get(class5);
      Class<MockGregorianCalendar> class6 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, class6, (TypeAdapter<? super MockGregorianCalendar>) objectTypeAdapter0);
      Class<Character> class7 = Character.class;
      Excluder excluder0 = new Excluder();
      excluder0.create(gson1, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class7, class7, (TypeAdapter<? super Character>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      gson0.fromJson("null", (Type) class0);
      StringReader stringReader0 = new StringReader("6EhJCp;]l");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      Class<MockCalendar> class3 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class3);
      Class<? super MockCalendar> class4 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to invoke protected org.evosuite.runtime.mock.java.util.MockCalendar() with no args
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      Class<Object> class1 = Object.class;
      StringWriter stringWriter0 = new StringWriter(372);
      stringWriter0.getBuffer();
      gson1.toJson((Object) null);
      TypeToken.get(class1);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson1);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      Class<Double> class3 = Double.class;
      TypeToken.get(class3);
      Class<Byte> class4 = Byte.class;
      TypeToken.get(class4);
      TypeToken.getArray(class2);
      Class<URL> class5 = URL.class;
      Class<URL> class6 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class6, (Class<? extends URL>) class5, (TypeAdapter<? super URL>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<Integer>) null, (TypeAdapter<Integer>) null);
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<JsonNull> class1 = JsonNull.class;
      gson0.fromJson(jsonElement0, class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(860L);
      System.setCurrentTimeMillis(860L);
      Class<String> class2 = String.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class3 = String.class;
      TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends String>) class3, (TypeAdapter<? super String>) typeAdapter0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1151L));
      Class<UUID> class4 = UUID.class;
      TypeToken<UUID> typeToken1 = TypeToken.get(class4);
      TypeAdapters.newFactory(typeToken1, (TypeAdapter<UUID>) null);
      Random.setNextRandom(70);
      Class<AtomicInteger> class5 = AtomicInteger.class;
      Class<AtomicInteger> class6 = AtomicInteger.class;
      TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends AtomicInteger>) class6, (TypeAdapter<? super AtomicInteger>) typeAdapter0);
      Class<AtomicBoolean> class7 = AtomicBoolean.class;
      TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends AtomicBoolean>) class7, (TypeAdapter<? super AtomicBoolean>) typeAdapter0);
      Class<StringBuffer> class8 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class8, class8, (TypeAdapter<? super StringBuffer>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      Class<Object> class3 = Object.class;
      StringWriter stringWriter0 = new StringWriter(375);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) stringBuffer0);
      TypeToken<Object> typeToken0 = TypeToken.get(class3);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, class2, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>((JsonSerializer<Object>) null, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      treeTypeAdapter0.fromJson("null");
      Class<Integer> class4 = Integer.class;
      Class<Integer> class5 = Integer.class;
      TypeAdapters.newFactoryForMultipleTypes(class4, (Class<? extends Integer>) class5, (TypeAdapter<? super Integer>) treeTypeAdapter0);
      Class<Locale> class6 = Locale.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class6, (TypeAdapter<Locale>) null);
      Class<MockGregorianCalendar> class7 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class2, class7, (TypeAdapter<? super MockGregorianCalendar>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson1.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Class<Float> class1 = Float.class;
      Gson gson0 = new Gson();
      Class<Float> class2 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class2);
      typeToken0.toString();
      TypeAdapter<Float> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.getBuffer();
      Gson gson1 = new Gson();
      gson1.toJson((Object) "java.lang.Float");
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class3);
      TypeAdapter<Object> typeAdapter1 = gson0.getAdapter(typeToken1);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter1, class2);
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class5 = MockGregorianCalendar.class;
      TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter1);
      Class<Double> class6 = Double.class;
      TypeToken<Double> typeToken2 = TypeToken.get(class6);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken2, (TypeAdapter<Double>) null);
      Class<Byte> class7 = Byte.class;
      TypeToken.get(class7);
      TypeToken.getArray(class2);
      Class<URL> class8 = URL.class;
      Class<URL> class9 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class9, (Class<? extends URL>) class8, (TypeAdapter<? super URL>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.getAdapter(typeToken0);
      Gson gson1 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(375);
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.net.URL. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Class<MockCalendar> class1 = MockCalendar.class;
      StringWriter stringWriter0 = new StringWriter(5498);
      stringWriter0.getBuffer();
      AtomicInteger atomicInteger0 = new AtomicInteger(375);
      gson0.toJson((Object) atomicInteger0);
      Class<Object> class2 = Object.class;
      TypeToken.get(class2);
      Gson gson1 = new Gson();
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class3);
      TypeAdapter<Object> typeAdapter0 = gson1.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson1, typeAdapter0, class1);
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class5 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      Class<Double> class6 = Double.class;
      TypeToken<Double> typeToken1 = TypeToken.get(class6);
      TypeAdapter<Double> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapters.newFactory(typeToken1, typeAdapter1);
      Class<Byte> class7 = Byte.class;
      TypeToken.get(class7);
      TypeToken.getArray(class3);
      Class<URL> class8 = URL.class;
      TypeAdapters.newFactoryForMultipleTypes(class8, (Class<? extends URL>) class8, (TypeAdapter<? super URL>) typeAdapterRuntimeTypeWrapper0);
      Class<StringBuffer> class9 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken2 = TypeToken.get(class9);
      TypeAdapter<StringBuffer> typeAdapter2 = gson1.getAdapter(typeToken2);
      TypeAdapters.newFactory(class9, typeAdapter2);
      Class<JsonArray> class10 = JsonArray.class;
      TypeToken<JsonArray> typeToken3 = TypeToken.get(class10);
      TypeAdapter<JsonArray> typeAdapter3 = gson0.getAdapter(typeToken3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken3, typeAdapter3);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Object> class1 = Object.class;
      TypeToken.get(class1);
      Byte byte0 = new Byte((byte)40);
      Character character0 = Character.valueOf('j');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      try { 
        gson1.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: j
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      String string0 = "true";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Character character0 = new Character('a');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: a
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      Class<Locale> class2 = Locale.class;
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[0];
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder2 = excluder1.withExclusionStrategy(exclusionStrategy0, false, false);
      Excluder excluder3 = excluder2.withVersion(181.7807);
      TypeToken<Locale> typeToken1 = TypeToken.get(class2);
      excluder3.create(gson0, typeToken1);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<GregorianCalendar> class4 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken2 = TypeToken.get(class4);
      TypeAdapter<GregorianCalendar> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken2);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      gson1.fromJson((JsonElement) jsonObject0, class0);
      gson1.toJson((JsonElement) jsonObject0);
      gson1.toJson((Object) gson0);
      Class<Float> class1 = Float.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, (TypeAdapter<Float>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.class;
      Gson gson0 = new Gson();
      Class<Character> class2 = Character.class;
      TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super Character>) typeAdapter0);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<Object> class4 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class4);
      TypeAdapter<Object> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter1);
      Class<Double> class5 = Double.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class5, class5, (TypeAdapter<? super Double>) typeAdapter1);
      Class<Short> class6 = Short.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class4, (Class<?>) class6, (TypeAdapter<? super Object>) typeAdapter1);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Class<Float> class1 = Float.class;
      Gson gson0 = new Gson();
      Class<Float> class2 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class2);
      typeToken0.toString();
      TypeAdapter<Float> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter0);
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      Class<Object> class5 = Object.class;
      StringWriter stringWriter0 = new StringWriter(375);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) stringBuffer0);
      TypeToken<Object> typeToken1 = TypeToken.get(class5);
      TypeAdapter<Object> typeAdapter1 = gson0.getAdapter(typeToken1);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter1, class0);
      TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super MockGregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      Class<Double> class6 = Double.class;
      TypeToken<Double> typeToken2 = TypeToken.get(class6);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<Double>) null);
      Class<Byte> class7 = Byte.class;
      TypeToken.get(class7);
      TypeToken.getArray(class3);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class5;
      typeArray0[1] = (Type) class4;
      typeArray0[2] = (Type) class4;
      typeArray0[3] = (Type) class5;
      typeArray0[4] = (Type) class7;
      typeArray0[5] = (Type) class7;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class6;
      Class<Byte> class8 = Byte.TYPE;
      typeArray0[8] = (Type) class8;
      // Undeclared exception!
      try { 
        TypeToken.getParameterized(class4, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Gson gson0 = new Gson();
      Class<Float> class1 = Float.class;
      Class<URL> class2 = URL.class;
      TypeToken.get(class2);
      JsonArray jsonArray0 = new JsonArray();
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson1.fromJson("?'GaDdNw", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"?'GaDdNw\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<Object> class2 = Object.class;
      TypeToken.get(class2);
      Byte byte0 = new Byte((byte)40);
      Character character0 = new Character('a');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"a\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeToken<UUID> typeToken0 = TypeToken.get(class0);
      StringBuffer stringBuffer0 = new StringBuffer(1291);
      typeToken0.equals(stringBuffer0);
      Gson gson0 = new Gson();
      TypeAdapter<UUID> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<UUID> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<UUID>(gson0, typeAdapter0, class0);
      TypeToken.get((Type) class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<UUID>) typeAdapterRuntimeTypeWrapper0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken1 = TypeToken.get(class1);
      TypeAdapter<MockCalendar> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter1);
      Class<Short> class2 = Short.class;
      Excluder excluder0 = gson0.excluder();
      TypeToken<Short> typeToken2 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken2);
      TypeAdapters.newFactory(class2, (TypeAdapter<Short>) null);
      Class<Locale> class3 = Locale.class;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter2);
      Class<Byte> class4 = Byte.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, (TypeAdapter<Byte>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.JSON_ELEMENT_FACTORY;
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Currency>) typeAdapter0);
      Class<JsonArray> class2 = JsonArray.class;
      Class<JsonArray> class3 = JsonArray.class;
      gson0.getAdapter(class1);
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super JsonArray>) typeAdapter0);
      Class<MockCalendar> class4 = MockCalendar.class;
      Class<MockCalendar> class5 = MockCalendar.class;
      TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      Class<Byte> class6 = Byte.class;
      Class<Byte> class7 = Byte.class;
      TypeAdapters.newFactoryForMultipleTypes(class6, (Class<? extends Byte>) class7, (TypeAdapter<? super Byte>) typeAdapter0);
      Class<JsonNull> class8 = JsonNull.class;
      Gson gson1 = new Gson();
      TypeToken<JsonNull> typeToken1 = TypeToken.get(class8);
      TypeAdapter<JsonNull> typeAdapter1 = gson1.getAdapter(typeToken1);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class8, typeAdapter1);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Class<JsonObject> class1 = JsonObject.class;
      Gson gson0 = new Gson();
      Class<JsonObject> class2 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class2);
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeToken.get(class3);
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super JsonObject>) typeAdapter0);
      Class<Long> class4 = Long.class;
      Class<Long> class5 = Long.class;
      TypeToken<Long> typeToken1 = TypeToken.get(class5);
      TypeAdapter<Long> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super Long>) typeAdapter1);
      Class<AtomicBoolean> class6 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken2 = TypeToken.get(class6);
      TypeAdapter<AtomicBoolean> typeAdapter2 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken2);
      TypeAdapters.newFactory(class6, class6, (TypeAdapter<? super AtomicBoolean>) typeAdapter2);
      Class<JsonArray> class7 = JsonArray.class;
      ObjectConstructor<JsonArray> objectConstructor0 = (ObjectConstructor<JsonArray>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<JsonArray> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<JsonArray>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class7, class7, (TypeAdapter<? super JsonArray>) reflectiveTypeAdapterFactory_Adapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a");
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<StringBuffer>) null);
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<Object> class2 = Object.class;
      StringWriter stringWriter0 = new StringWriter(375);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) stringBuffer0);
      TypeToken.get(class2);
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class1);
      URL uRL0 = MockURL.getHttpExample();
      typeAdapterRuntimeTypeWrapper0.toJsonTree(uRL0);
      Class<URL> class3 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<URL>) typeAdapterRuntimeTypeWrapper0);
      Class<MockCalendar> class4 = MockCalendar.class;
      TypeAdapter<MockCalendar> typeAdapter1 = gson0.getAdapter(class4);
      TypeToken<MockCalendar> typeToken1 = TypeToken.get(class4);
      Class<Currency> class5 = Currency.class;
      TypeToken.get(class5);
      TypeAdapters.newFactory(typeToken1, typeAdapter1);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapter<URL> typeAdapter2 = TypeAdapters.URL;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends URL>) class3, (TypeAdapter<? super URL>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      Class<Integer> class1 = Integer.TYPE;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class1);
      typeToken0.equals(gson0);
      gson0.toString();
      try { 
        MockURL.URL("_s!j i#\"G&Bo%", "_s!j i#\"G&Bo%", 43, "true", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: _s!j i#\"g&bo%
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, (Type) null);
      String string0 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      String string1 = gson0.toString();
      URL uRL0 = MockURL.URL("true", "", 43, "true", uRLStreamHandler0);
      typeAdapterRuntimeTypeWrapper0.toJsonTree(uRL0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<URL>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class1 = Locale.class;
      Object object0 = null;
      StringWriter stringWriter0 = new StringWriter(43);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) string1, 567, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)9);
      MockFile mockFile0 = new MockFile("Expected a ", "1gbV_W%cog<TF]g");
      File file0 = MockFile.createTempFile("com.google.gson.internal.bind.TypeAdapters$35$1", "1gbV_W%cog<TF]g", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "com.google.gson.internal.bind.TypeAdapters$35$1";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      gson0.toJson((Object) byte0, (Type) class0, (Appendable) mockPrintWriter1);
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      excluder0.create(gson0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Double>) null);
      Class<Character> class1 = Character.class;
      TypeToken<Character> typeToken1 = TypeToken.get(class1);
      TypeAdapter<Character> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapters.newFactory(typeToken1, typeAdapter0);
      Class<URL> class2 = URL.class;
      Class<URL> class3 = URL.class;
      Class<URL> class4 = URL.class;
      TypeAdapter<URL> typeAdapter1 = gson0.getAdapter(class4);
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter1, class0);
      TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends URL>) class3, (TypeAdapter<? super URL>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class5 = Locale.class;
      TypeAdapter<Locale> typeAdapter2 = TypeAdapters.LOCALE;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends Locale>) class5, (TypeAdapter<? super Locale>) typeAdapter2);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }
}
