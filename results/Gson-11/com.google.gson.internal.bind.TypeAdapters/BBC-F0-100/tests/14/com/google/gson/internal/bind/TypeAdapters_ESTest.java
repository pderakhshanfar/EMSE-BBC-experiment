/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:41:46 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.CharArrayWriter;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      Class<Double> class1 = Double.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) treeTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte) (-88);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(5, jsonArray0.size());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson("Gwgb=Tf^\"<mLd", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Gwgb\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("*HU", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"ftp://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "aEu=a\"tycdCix'ghgV");
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 5: aEu=a\"tycdCix'ghgV
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFileExample();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uRL0);
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"file://some/fake/but/wellformed/url\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Object>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CHARACTER_FACTORY;
      TreeTypeAdapter<String> treeTypeAdapter0 = new TreeTypeAdapter<String>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, (TypeAdapter<String>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson((JsonElement) jsonNull0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) charArrayWriter0);
      gson0.toJson(jsonElement0, (Appendable) stringBuffer0);
      assertEquals(334, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1630);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray0);
      // Undeclared exception!
      try { 
        jsonElement0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660,java.lang.Long@0000001660]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree((Locale) null);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("igkU8vt8C_Gz", class0);
      assertEquals("igku8vt8c_GZ", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("axRFr0u)M_", class0);
      assertEquals("axrfr0u)m", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("\"\"", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2575, 1011, 1011, 2575, 93);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Calendar) mockGregorianCalendar0);
      assertEquals("{\"year\":2662,\"month\":3,\"dayOfMonth\":22,\"hourOfDay\":8,\"minute\":33,\"second\":0}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Calendar calendar0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      try { 
        gson0.fromJson("{\"buf\":[\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\"],\"count\":java.lang.Integer@0000000098}", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BEGIN_ARRAY at line 1 column 9 path $.buf
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson(jsonElement0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.JAPAN;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson(jsonElement0, class0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      Class<? super InetAddress> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class1, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      Class<? super InetAddress> class1 = typeToken0.getRawType();
      Short short0 = gson0.fromJson("null", (Type) class1);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("com.google.gson.internal.bind.TypeAdapters$34");
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(inet4Address0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson(jsonElement0, class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      URL uRL0 = gson0.fromJson("null", class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson("JH|", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: JH|
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = gson0.toJson((Object) stringBuffer0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      Short short0 = gson0.fromJson("null", (Type) class0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("\"d`>;gaH%", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = gson0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("null", class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$18", class0);
      assertEquals("com.google.gson.internal.bind.TypeAdapters$18", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("8o%q(6W", true);
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockFileWriter0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("43&", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: 43&
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("x=PK0!P{Jm[1<,%", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Character character0 = gson0.fromJson("null", (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Long long0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Integer> class0 = Integer.TYPE;
      Long long0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson("allocateInstance", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"allocateInstance\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.TYPE;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicIntegerArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("pN`a~q.=OT)io", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"pN`a~q.\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson("null", class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson("4", class0);
      assertEquals((byte)4, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Boolean boolean0 = gson0.fromJson("af^j!LMta$Va+", (Type) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Short short0 = gson0.fromJson("null", (Type) class0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("4", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      bitSet0.set(1341);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      assertEquals(1342, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)3;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(5, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      jsonArray0.add((JsonElement) jsonArray0);
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid bitset value type: BEGIN_ARRAY
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      jsonArray0.add("H'$:M^,0f:s");
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Expecting: bitset number value (1, 0), Found: H'$:M^,0f:s
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      Boolean boolean0 = Boolean.valueOf(true);
      jsonArray0.add(boolean0);
      Class<BitSet> class0 = BitSet.class;
      gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(1, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson(jsonElement0, class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Currency> class0 = Currency.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale locale0 = Locale.UK;
      Currency currency0 = Currency.getInstance(locale0);
      gson0.toJson((Object) currency0, (Appendable) charArrayWriter0);
      assertEquals("GBP", currency0.getCurrencyCode());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(1595);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) atomicInteger0, (Appendable) charArrayWriter0);
      assertEquals("1595", atomicInteger0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$22", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$22\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("C>W84=3||YD", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)122);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) byte0);
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)101);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) short0);
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<JsonNull> class0 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<JsonNull> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<JsonNull> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonNull>(gson0, typeAdapter0, (Type) null);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<JsonNull>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class1 = Locale.class;
      TypeToken<Locale> typeToken1 = TypeToken.get(class1);
      JsonSerializer<Locale> jsonSerializer0 = (JsonSerializer<Locale>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Locale> jsonDeserializer0 = (JsonDeserializer<Locale>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<Locale> treeTypeAdapter0 = new TreeTypeAdapter<Locale>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapterRuntimeTypeWrapper0);
      Locale locale0 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 12, 1349, 12);
      gson0.toJson((Object) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=12,MONTH=12,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1349,HOUR_OF_DAY=1349,MINUTE=12,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }
}
