/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:40:59 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.SqlDateTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<JsonObject> class1 = JsonObject.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("hourOfDay");
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"hourOfDay\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('A');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"A\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter();
      UUID uUID0 = MockUUID.fromString("K:()");
      gson0.toJson((Object) uUID0, (Appendable) stringWriter0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("S*x$`bn.W", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 4: S*x$`bn.W
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-#^FXOdLTUqMVxWy");
      gson0.toJson((Object) short0, (Appendable) mockPrintStream0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super BitSet>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, type0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2376);
      gson0.toJson((Object) locale_Category0, (Appendable) charArrayWriter0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\"FORMAT\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) gson0, (Appendable) charArrayWriter0);
      assertEquals(3477, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(963);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("hourOfDay");
      gson0.toJson((Object) jsonPrimitive0, (Appendable) charArrayWriter0);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("\"hourOfDay\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Boolean boolean0 = Boolean.TRUE;
      jsonObject0.addProperty(".JQqPLsBj:", boolean0);
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) jsonObject0);
      assertEquals("{\".JQqPLsBj:\":true}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Float float0 = new Float(1524.9578F);
      jsonArray0.add((Number) float0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [java.lang.Float@0000000004]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonNull0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      JsonSerializer<URL> jsonSerializer0 = (JsonSerializer<URL>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(any(java.net.URL.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      Excluder excluder0 = Excluder.DEFAULT;
      TreeTypeAdapter<URL> treeTypeAdapter0 = new TreeTypeAdapter<URL>(jsonSerializer0, (JsonDeserializer<URL>) null, (Gson) null, typeToken0, excluder0);
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = treeTypeAdapter0.toJson(uRL0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<StringBuffer>) null);
      TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>((JsonSerializer<Character>) null, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) charArrayWriter0);
      Character character0 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<JsonArray>) null);
      Class<Character> class1 = Character.class;
      JsonSerializer<Character> jsonSerializer0 = (JsonSerializer<Character>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Gson gson0 = new Gson();
      TypeToken<Character> typeToken0 = TypeToken.get(class1);
      TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = treeTypeAdapter0.fromJsonTree(jsonArray0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      try { 
        gson0.fromJson((JsonElement) jsonNull0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Boolean boolean0 = Boolean.valueOf("PFynM");
      jsonObject0.addProperty("PFynM", boolean0);
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      JsonObject jsonObject1 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertNotSame(jsonObject0, jsonObject1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("o_CW|m(;8Bmho>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 9 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("4-x{->/UY@{euz", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      String string0 = gson0.toJson((Object) null, type0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.US;
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0, type0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson("{8ic2|&~z'MS:}F", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 14 path $.8ic2|&~z'MS
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      UUID uUID0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('D');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2135);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      gson0.toJson((Object) inetAddress0, (Appendable) charArrayWriter0);
      assertEquals(14, charArrayWriter0.size());
      assertEquals("\"192.168.1.42\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("O_CW|m(;.B7ho>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 9 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2376);
      URI uRI0 = MockURI.aFileURI;
      gson0.toJson((Object) uRI0, (Appendable) charArrayWriter0);
      assertEquals("\"file:///tmp/foo.bar\"", charArrayWriter0.toString());
      assertEquals(21, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      URL uRL0 = MockURL.getHttpExample();
      gson0.toJson((Object) uRL0, (Appendable) charArrayWriter0);
      assertEquals("\"http://www.someFakeButWellFormedURL.org/fooExample\"", charArrayWriter0.toString());
      assertEquals(52, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      ArrayTypeAdapter<Object> arrayTypeAdapter0 = new ArrayTypeAdapter<Object>(gson0, (TypeAdapter<Object>) null, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<URL> class1 = URL.class;
      URL uRL0 = gson0.fromJson(jsonElement0, class1);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("com.google.gson.internal.bind.TypeAdapters$4");
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: com.google.gson.internal.bind.TypeAdapters$4
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("ppC;");
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((Object) stringBuffer0, (Appendable) stringWriter0);
      assertEquals("\"ppC;\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("null", class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("l!hxq<7", class0);
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder("");
      gson0.toJson((Object) stringBuilder0, (Appendable) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      Byte byte0 = gson0.fromJson("null", (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("{}", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("p;[Pv(|X5/ ;w'9", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      URI uRI0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("abc*_MK0]4AX");
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: abc*_MK0]4AX
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Long> class0 = Long.TYPE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("comg}le.gson.JsonWOExption", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"comg\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(963);
      gson0.toJson((Object) atomicIntegerArray0, (Appendable) charArrayWriter0);
      assertEquals(1927, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('5');
      jsonArray0.add(character0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals("[5]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Locale locale0 = Locale.US;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0, (Type) class0);
      Class<Integer> class1 = Integer.TYPE;
      try { 
        gson0.fromJson(jsonElement0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"en_US\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>((ObjectConstructor<Object>) null, hashMap0);
      Class<Object> class1 = Object.class;
      ArrayTypeAdapter<Object> arrayTypeAdapter0 = new ArrayTypeAdapter<Object>(gson0, reflectiveTypeAdapterFactory_Adapter0, class1);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Character character0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("78l6v-", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"78l6v-\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      Byte byte0 = gson0.fromJson("2", (Type) class0);
      assertEquals((byte)2, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("@5M:*", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Byte byte0 = gson0.fromJson("null", (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("{}", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long[] longArray0 = new long[5];
      longArray0[4] = 466L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      gson0.toJson((Object) bitSet0, (Appendable) charArrayWriter0);
      assertEquals(531, charArrayWriter0.size());
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("[o{xnbcw4q<;`(?}E", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Expecting: bitset number value (1, 0), Found: o
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(963);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) charArrayWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: org.evosuite.runtime.mock.java.util.MockGregorianCalendar. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("ppC;", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("com.google.gsoninternal.bind.ArrayTypeAdapter1");
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      Currency currency0 = Currency.getInstance(locale0);
      gson0.toJson((Object) currency0, (Appendable) stringBuffer0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      AtomicInteger atomicInteger0 = new AtomicInteger(117);
      gson0.toJson((Object) atomicInteger0, (Appendable) charArrayWriter0);
      assertEquals("117", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("T\"-KV[%kgwnv7q");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"T\"-KV\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(8);
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      gson0.toJson((Object) atomicBoolean0, (Appendable) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Locale locale0 = Locale.US;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0, (Type) class0);
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      try { 
        gson0.fromJson(jsonElement0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("com.google.gson.internal.bind.ArrayTypeAdapter$1");
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)1);
      gson0.toJson((Object) byte0, (Appendable) stringBuffer0);
      assertEquals(73, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = SqlDateTypeAdapter.FACTORY;
      TypeAdapter<Locale> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0);
      assertTrue(jsonElement0.isJsonObject());
  }
}
