/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:41:27 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<InetAddress> class1 = InetAddress.class;
      Gson gson0 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      ObjectConstructor<Locale> objectConstructor0 = (ObjectConstructor<Locale>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>(1517, 450.48145F);
      ReflectiveTypeAdapterFactory.Adapter<Locale> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Locale>(objectConstructor0, hashMap0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, reflectiveTypeAdapterFactory_Adapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-71);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      String string0 = objectTypeAdapter0.toJson((Object) bitSet0);
      assertEquals("[0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("D", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"D\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter((Gson) null);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapter<URL> typeAdapter0 = gson0.getDelegateAdapter(objectTypeAdapter0.FACTORY, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      // Undeclared exception!
      try { 
        objectTypeAdapter0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Integer integer0 = new Integer(47);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(integer0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonPrimitive0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonPrimitive0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = objectTypeAdapter0.toJson((Object) jsonNull0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("{serializeNulls:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 17 path $.serializeNulls
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson("{}", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson("null", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonSerializer<Character> jsonSerializer0 = (JsonSerializer<Character>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, treeTypeAdapter0, class0);
      StringReader stringReader0 = new StringReader("\"it\"");
      Character character0 = typeAdapterRuntimeTypeWrapper0.fromJson((Reader) stringReader0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson("8:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = objectTypeAdapter0.toJson((Object) locale0);
      assertEquals("\"it\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('4');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      try { 
        gson0.fromJson("Z..pfq0^t?CtPXO(C+?", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("com.google.gson.JsonObject", class0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = objectTypeAdapter0.toJson((Object) inetAddress0);
      assertEquals("\"127.0.0.1\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character(' ');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(inet4Address0.isMCOrgLocal());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.URI("false");
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"false\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson("null", class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("gymwowZP^@s", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 8: gymwowZP^@s
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockFile mockFile0 = new MockFile("[LD<Y[rT|JT',nmz", "[LD<Y[rT|JT',nmz");
      URL uRL0 = mockFile0.toURL();
      String string0 = objectTypeAdapter0.toJson((Object) uRL0);
      assertEquals("\"file:/experiment/[LD<Y[rT|JT',nmz/[LD<Y[rT|JT',nmz\"", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$35$1", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: com.google.gson.internal.bind.TypeAdapters$35$1
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuffer stringBuffer0 = new StringBuffer("dayOfMonth");
      String string0 = objectTypeAdapter0.toJson((Object) stringBuffer0);
      assertEquals("\"dayOfMonth\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('I');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = objectTypeAdapter0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("\"192.168.1.42\"", class0);
      assertEquals("192.168.1.42", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonArray jsonArray0 = new JsonArray();
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Character character0 = Character.valueOf(',');
      String string0 = objectTypeAdapter0.toJson((Object) character0);
      assertEquals("\",\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      String string0 = objectTypeAdapter0.toJson((Object) gson0);
      StringReader stringReader0 = new StringReader(string0);
      TypeAdapter<Character> typeAdapter0 = TypeAdapters.CHARACTER;
      stringReader0.read();
      Class<Long> class0 = Long.TYPE;
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJson((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: generateNonExecutableJson
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      InetAddress inetAddress0 = gson0.fromJson("null", (Type) class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<Character> typeAdapter0 = TypeAdapters.CHARACTER;
      Class<Long> class0 = Long.TYPE;
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class0);
      Character character0 = Character.valueOf('@');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Character character1 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonPrimitive0);
      assertEquals('@', (char)character1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      URL uRL0 = gson0.fromJson("null", (Type) class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("sWrNZkmVa>8ZfU", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"sWrNZkmVa>8ZfU\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(3);
      String string0 = objectTypeAdapter0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("[a)G}eP^.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"a)G\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      Class<? super Integer> class1 = typeToken0.getRawType();
      URL uRL0 = gson0.fromJson("null", (Type) class1);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson("Expected a ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Expected\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      InetAddress inetAddress0 = gson0.fromJson("null", (Type) class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.TYPE;
      Character character0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("A!*{Oa", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"A!*\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      InetAddress inetAddress0 = gson0.fromJson("null", (Type) class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$2", class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character('}');
      jsonArray0.add(character0);
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Expecting: bitset number value (1, 0), Found: }
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$4", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.GERMANY;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = objectTypeAdapter0.toJson((Object) currency0);
      assertEquals("\"EUR\"", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger((-2732));
      String string0 = objectTypeAdapter0.toJson((Object) atomicInteger0);
      assertEquals("-2732", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("_", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"_\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      String string0 = objectTypeAdapter0.toJson((Object) atomicBoolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf("dRMVJ3nXOiZ+!<zeSP");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("false", atomicBoolean0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[9];
      String string0 = objectTypeAdapter0.toJson((Object) byteArray0[0]);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonObject jsonObject0 = new JsonObject();
      String string0 = objectTypeAdapter0.toJson((Object) jsonObject0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Short short0 = new Short((short)6);
      String string0 = objectTypeAdapter0.toJson((Object) short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Object> class0 = Object.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Object>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Calendar calendar0 = MockCalendar.getInstance();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) calendar0);
      String string0 = gson0.toJson(jsonElement0);
      assertNotNull(string0);
  }
}
