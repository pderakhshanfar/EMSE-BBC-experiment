/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 14:28:11 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.time.chrono.JapaneseDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Integer>) class1, (TypeAdapter<? super Integer>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      BitSet bitSet0 = new BitSet();
      bitSet0.set(10);
      String string0 = objectTypeAdapter0.toJson((Object) bitSet0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson("6[/SX", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("Rb)J(>Nke", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 5: Rb)J(>Nke
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('m');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"m\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      String string0 = gson0.toString();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"{serializeNulls:falsefactories:[Factory[typeHierarchy=com.google.gson.JsonElement,adapter=com.google.gson.internal.bind.TypeAdapters$29@17], com.google.gson.internal.bind.ObjectTypeAdapter$1@18, com.google.gson.internal.Excluder@19, Factory[type=java.lang.String,adapter=com.google.gson.internal.bind.TypeAdapters$17@1a], Factory[type=java.lang.Integer+int,adapter=com.google.gson.internal.bind.TypeAdapters$11@1b], Factory[type=java.lang.Boolean+boolean,adapter=com.google.gson.internal.bind.TypeAdapters$7@1c], Factory[type=java.lang.Byte+byte,adapter=com.google.gson.internal.bind.TypeAdapters$9@1d], Factory[type=java.lang.Short+short,adapter=com.google.gson.internal.bind.TypeAdapters$10@1e], Factory[type=java.lang.Long+long,adapter=com.google.gson.internal.bind.TypeAdapters$12@3], Factory[type=java.lang.Double+double,adapter=com.google.gson.Gson$2@4], Factory[type=java.lang.Float+float,adapter=com.google.gson.Gson$3@6], Factory[type=java.lang.Number,adapter=com.google.gson.internal.bind.TypeAdapters$15@1f], Factory[type=java.util.concurrent.atomic.AtomicInteger,adapter=com.google.gson.TypeAdapter$1@20], Factory[type=java.util.concurrent.atomic.AtomicBoolean,adapter=com.google.gson.TypeAdapter$1@21], Factory[type=java.util.concurrent.atomic.AtomicLong,adapter=com.google.gson.TypeAdapter$1@9], Factory[type=java.util.concurrent.atomic.AtomicLongArray,adapter=com.google.gson.TypeAdapter$1@c], Factory[type=java.util.concurrent.atomic.AtomicIntegerArray,adapter=com.google.gson.TypeAdapter$1@22], Factory[type=java.lang.Character+char,adapter=com.google.gson.internal.bind.TypeAdapters$16@23], Factory[type=java.lang.StringBuilder,adapter=com.google.gson.internal.bind.TypeAdapters$20@24], Factory[type=java.lang.StringBuffer,adapter=com.google.gson.internal.bind.TypeAdapters$21@25], Factory[type=java.math.BigDecimal,adapter=com.google.gson.internal.bind.TypeAdapters$18@f], Factory[type=java.math.BigInteger,adapter=com.google.gson.internal.bind.TypeAdapters$19@11], Factory[type=java.net.URL,adapter=com.google.gson.internal.bind.TypeAdapters$22@26], Factory[type=java.net.URI,adapter=com.google.gson.internal.bind.TypeAdapters$23@27], Factory[type=java.util.UUID,adapter=com.google.gson.internal.bind.TypeAdapters$25@28], Factory[type=java.util.Currency,adapter=com.google.gson.TypeAdapter$1@29], Factory[type=java.util.Locale,adapter=com.google.gson.internal.bind.TypeAdapters$28@2a], Factory[typeHierarchy=java.net.InetAddress,adapter=com.google.gson.internal.bind.TypeAdapters$24@2b], Factory[type=java.util.BitSet,adapter=com.google.gson.internal.bind.TypeAdapters$6@2c], com.google.gson.internal.bind.DateTypeAdapter$1@2d, Factory[type=java.util.Calendar+java.util.GregorianCalendar,adapter=com.google.gson.internal.bind.TypeAdapters$27@2e], com.google.gson.internal.bind.TimeTypeAdapter$1@2f, com.google.gson.internal.bind.SqlDateTypeAdapter$1@30, com.google.gson.internal.bind.TypeAdapters$26@31, com.google.gson.internal.bind.ArrayTypeAdapter$1@32, Factory[type=java.lang.Class,adapter=com.google.gson.internal.bind.TypeAdapters$5@33], com.google.gson.internal.bind.CollectionTypeAdapterFactory@12, com.google.gson.internal.bind.MapTypeAdapterFactory@13, com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory@14, com.google.gson.internal.bind.TypeAdapters$30@34, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory@15],instanceCreators:java.util.Collections$EmptyMap@0000000053}\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson(" at line ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"at\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super String>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_FACTORY;
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, false);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.ExclusionStrategy. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonObject jsonObject0 = new JsonObject();
      Float float0 = new Float(0.0F);
      jsonObject0.addProperty("D1", (Number) float0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Float float0 = new Float(1.0F);
      jsonArray0.add((Number) float0);
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = jsonPrimitive0.toString();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Character character0 = Character.valueOf('h');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      String string0 = jsonPrimitive0.toString();
      assertEquals("\"h\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((JsonElement) jsonNull0, (Appendable) stringWriter0);
      assertTrue(jsonNull0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Unterminated comment");
      gson0.toJson((JsonElement) null, (Appendable) stringBuffer0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      JsonSerializer<MockGregorianCalendar> jsonSerializer0 = (JsonSerializer<MockGregorianCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockGregorianCalendar> jsonDeserializer0 = (JsonDeserializer<MockGregorianCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<MockGregorianCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockGregorianCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      MockGregorianCalendar mockGregorianCalendar0 = treeTypeAdapter0.fromJson("[0]");
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      ArrayTypeAdapter<JsonArray> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonArray>(gson0, (TypeAdapter<JsonArray>) null, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("\"zh_CN\"");
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
      JsonObject jsonObject0 = new JsonObject();
      Float float0 = new Float(21.744499);
      jsonObject0.addProperty("zb*yz\"=@'EFwpM|", (Number) float0);
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = objectTypeAdapter0.toJson((Object) locale0);
      assertEquals("\"zh_CN\"", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("BEGIN_ARRAY", class0);
      assertEquals("begin_ARRAY", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson("Ol[j^UZ9JwG@|Gl", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("null", class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("BEGIN_A_RAY", class0);
      assertEquals("begin_A_RAY", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1612290052), (-1612290052), (-1612290052), (-1612290052), (-1612290052));
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Class<? super Calendar> class1 = typeToken0.getRawType();
      gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=74962287800734848,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2377430,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=123,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=25,SECOND=34,MILLISECOND=848,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) objectTypeAdapter0);
      Class<Calendar> class0 = Calendar.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $.gson
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson("null", class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("-Infinity", class0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = objectTypeAdapter0.toJson((Object) inetAddress0);
      assertEquals("\"127.0.0.1\"", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson("null", class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("b EP3x_K% Rit8BuS,", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aHttpURI;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uRI0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockFile mockFile0 = new MockFile("x!0Zv^Dp", "x!0Zv^Dp");
      URL uRL0 = mockFile0.toURL();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(uRL0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      URI uRI0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('h');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: h
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Unterminated comment");
      String string0 = objectTypeAdapter0.toJson((Object) stringBuffer0);
      assertEquals("\"Unterminated comment\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$7", class0);
      assertEquals(44, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = objectTypeAdapter0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson("Lbni!{", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Character character0 = new Character('B');
      String string0 = objectTypeAdapter0.toJson((Object) character0);
      assertEquals("\"B\"", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(";");
      Class<Character> class0 = Character.class;
      Character character0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals(';', (char)character0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("I]%");
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: I]%
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      URI uRI0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      int[] intArray0 = new int[1];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      String string0 = objectTypeAdapter0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson("[0,0,0,0,0,0,0,0,0,0,1]", class0);
      assertEquals("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("[qj%!w#leef3w#z]Z@;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"qj%!w\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Unterminated comment");
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Unterminated comment\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Unterminated comment");
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Unterminated comment\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("e]S^!N,", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Boolean> class0 = Boolean.TYPE;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) japaneseDate0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<Currency> class0 = Currency.class;
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.JAPAN;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"JPY\"", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger(3);
      String string0 = objectTypeAdapter0.toJson((Object) atomicInteger0);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      String string0 = objectTypeAdapter0.toJson((Object) atomicBoolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$35", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Byte byte0 = new Byte((byte) (-84));
      String string0 = objectTypeAdapter0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Short short0 = new Short((short) (-2919));
      String string0 = objectTypeAdapter0.toJson((Object) short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      ObjectConstructor<Calendar> objectConstructor0 = (ObjectConstructor<Calendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Calendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Calendar>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Calendar>) reflectiveTypeAdapterFactory_Adapter0);
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class1 = JsonPrimitive.class;
      TypeToken<JsonPrimitive> typeToken0 = TypeToken.get(class1);
      JsonSerializer<JsonPrimitive> jsonSerializer0 = (JsonSerializer<JsonPrimitive>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonPrimitive> jsonDeserializer0 = (JsonDeserializer<JsonPrimitive>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<JsonPrimitive> treeTypeAdapter0 = new TreeTypeAdapter<JsonPrimitive>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<JsonPrimitive>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = objectTypeAdapter0.toJson((Object) mockGregorianCalendar0);
      assertNotNull(string0);
  }
}
