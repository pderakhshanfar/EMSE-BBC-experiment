/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 02:11:22 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends MockGregorianCalendar>) class0, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      JsonSerializer<Calendar> jsonSerializer0 = (JsonSerializer<Calendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Calendar> jsonDeserializer0 = (JsonDeserializer<Calendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Calendar> class3 = Calendar.class;
      TypeToken<Calendar> typeToken1 = TypeToken.get(class3);
      TreeTypeAdapter<Calendar> treeTypeAdapter0 = new TreeTypeAdapter<Calendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) treeTypeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("EXb_", class0);
      assertEquals("exb", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("UCY fxnGnq?", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"UCY\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("f\"o@'lRl!6Fu", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 1: f\"o@'lRl!6Fu
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      String string0 = gson0.toJson((Object) atomicBoolean0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson("Hq^Q`", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Hq^Q`\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "\"<s", (Type) class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      try { 
        gson0.fromJson(jsonElement0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"<s\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Excluder excluder0 = gson0.excluder();
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson("8}68nm`r09=?e.cbe", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("^_)^dsCfG{HG~q");
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: ^_)^dsCfG{HG~q
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: short. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty(">fe^&B#.3C\nAdxFTv|", "tor<jpZ4kb VOV9)^BS");
      StringBuilder stringBuilder0 = new StringBuilder("tor<jpZ4kb VOV9)^BS");
      gson0.toJson((JsonElement) jsonObject0, (Appendable) stringBuilder0);
      assertEquals("tor<jpZ4kb VOV9)^BS{\"\\u003efe^\\u0026B#.3C\\nAdxFTv|\":\"tor\\u003cjpZ4kb VOV9)^BS\"}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("NaN");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonPrimitive0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      Integer integer0 = new Integer((-4586));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(integer0);
      gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) stringBuilder0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = Boolean.valueOf(string0);
      jsonArray0.add(boolean0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [false]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder("tor<jpZ4kb VOV9)^BS");
      gson0.toJson((JsonElement) null, (Appendable) stringBuilder0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<JsonObject> class0 = JsonObject.class;
      Character character0 = new Character('q');
      jsonObject0.addProperty("a=Arz,:)f:Jv2", character0);
      JsonObject jsonObject1 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertFalse(jsonObject1.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ENUM_FACTORY;
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      ArrayTypeAdapter<Double> arrayTypeAdapter0 = new ArrayTypeAdapter<Double>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<JsonArray> class1 = JsonArray.class;
      try { 
        gson0.fromJson(jsonElement0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("<");
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson("[0,0,0,0,0,0,0,0,0,0,0,0,0]", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree((Locale) null);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.CHINESE;
      String string0 = gson0.toJson((Object) locale0);
      assertEquals("\"zh\"", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson("S|2(GN_oh%,pVgq4", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 12 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("\"\"", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Locale locale0 = gson0.fromJson("null", class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson("nT)!<^<a3h_xod_,*", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 18 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(18);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 18);
      gson0.toJson((Object) null, (Type) class0, (Appendable) bufferedWriter0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string0 = gson0.toJson((Object) calendar0, (Type) class0);
      assertEquals("{\"year\":2014,\"month\":1,\"dayOfMonth\":14,\"hourOfDay\":20,\"minute\":21,\"second\":21}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson("null", class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.fromString("<a");
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("QYk", class0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"192.168.1.42\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson("null", class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson("l24F+9VV*+&^TB~U>o", class0);
      assertFalse(inet4Address0.isMCNodeLocal());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"ftp://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      gson0.toJson((Object) stringBuffer0);
      //  // Unstable assertion: assertEquals(3429, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("DIuY2,AeK,2", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("zvEw1W", class0);
      assertEquals("zvEw1W", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson("\"<8", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      MockCalendar mockCalendar0 = gson0.fromJson("null", (Type) class0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockPrintStream0);
      assertEquals("null", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('1');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"1\"", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<? super Character> class1 = typeToken0.getRawType();
      try { 
        gson0.fromJson("Numeric values must be finite, but was ", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Numeric
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<? super Character> class1 = typeToken0.getRawType();
      BitSet bitSet0 = gson0.fromJson("null", (Type) class1);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      try { 
        gson0.fromJson("h#qd", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Character character0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("yx5");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"yx5\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[6];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      String string0 = gson0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0,0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson("[0,0,0,0,0,0,0,0,0,0,0,0,0]", class0);
      assertEquals("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = gson0.fromJson("null", class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Gson gson0 = new Gson();
      MockCalendar mockCalendar0 = gson0.fromJson("null", (Type) class0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("UCY fxnGnq?", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"UCY\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      URL uRL0 = gson0.fromJson("null", (Type) class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("8d}>>@]lW0Fvm", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("UCY fxnGnq?", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Boolean> class0 = Boolean.TYPE;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[2];
      longArray0[0] = (-4128L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      TypeAdapter<BitSet> typeAdapter0 = TypeAdapters.BIT_SET;
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);
      BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson("[0,0,0,0,0,0,0,0,0,0,0,0,0]");
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<BitSet> typeAdapter0 = TypeAdapters.BIT_SET;
      Class<Character> class0 = Character.TYPE;
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);
      BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson("null");
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      TypeAdapter<BitSet> typeAdapter0 = TypeAdapters.BIT_SET;
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);
      BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJson("[1662,-777,57,1662,1662,1662]");
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("U%");
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"TWD\"", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(31);
      String string0 = gson0.toJson((Object) atomicInteger0);
      assertEquals("31", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-26));
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) byte0, (Type) class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = gson0.fromJson(jsonElement0, class1);
      assertEquals((-26L), atomicInteger0.longValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson("n)`x_{c3Nz}^/b\"", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Class<Object> class1 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Short>) class0, (TypeAdapter<? super Short>) typeAdapter0);
      Class<Long> class2 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class2);
      TypeAdapter<Long> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      TypeAdapter<BitSet> typeAdapter0 = TypeAdapters.BIT_SET;
      Class<BitSet> class2 = BitSet.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, class2, (TypeAdapter<? super BitSet>) typeAdapter0);
      TypeToken<Integer> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Integer> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      Short short0 = new Short((short)36);
      gson0.toJson((Object) short0, (Appendable) stringBuilder0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
      gson0.toJson((Object) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }
}
