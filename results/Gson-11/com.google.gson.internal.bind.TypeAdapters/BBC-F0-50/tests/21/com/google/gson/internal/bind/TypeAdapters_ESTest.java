/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 21:44:11 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      Class<UUID> class1 = UUID.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("]");
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"]\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("r`yio\"hQ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = new JsonArray();
      jsonArray0.add((JsonElement) jsonArray1);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [[]]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.ITALY;
      String string0 = gson0.toJson((Object) locale0);
      assertEquals("\"it_IT\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("sidM|r", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 4: sidM|r
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2323, 2323, 2323, 1404, 1404, 908);
      gson0.toJsonTree((Object) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2323,MONTH=2323,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2323,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1404,HOUR_OF_DAY=1404,MINUTE=1404,SECOND=908,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("&(", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"&(\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super InetAddress>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      URI uRI0 = MockURI.aFTPURI;
      gson0.toJson((Object) uRI0, (Appendable) stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      assertEquals("\"ftp://foo.bar\"", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson("NMaZ|_pua]pf\"-Vm}r?", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(10);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      assertEquals(10, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('1');
      jsonObject0.addProperty("1v,&E%@tS", character0);
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) jsonObject0);
      assertEquals("{\"1v,\\u0026E%@tS\":\"1\"}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson0.toJson((Object) jsonPrimitive0, (Appendable) stringBuffer0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("false", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-3324.444F));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) null, (Appendable) charArrayWriter0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class0);
      JsonSerializer<AtomicBoolean> jsonSerializer0 = (JsonSerializer<AtomicBoolean>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(any(java.util.concurrent.atomic.AtomicBoolean.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<AtomicBoolean> jsonDeserializer0 = (JsonDeserializer<AtomicBoolean>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<AtomicBoolean> treeTypeAdapter0 = new TreeTypeAdapter<AtomicBoolean>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      String string0 = treeTypeAdapter0.toJson(atomicBoolean0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BIT_SET_FACTORY;
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      jsonArray0.add("DW3-c5:@{$E_#cX'!");
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      MockCalendar mockCalendar0 = treeTypeAdapter0.fromJsonTree(jsonArray0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BIT_SET_FACTORY;
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      MockCalendar mockCalendar0 = treeTypeAdapter0.fromJsonTree(jsonArray0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      MockCalendar mockCalendar0 = treeTypeAdapter0.fromJsonTree(jsonNull0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<String> class0 = String.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<Character> class1 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class1);
      JsonSerializer<Character> jsonSerializer0 = (JsonSerializer<Character>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJson(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 269 path $.excluder.version
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      Short short0 = new Short((short)1679);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
      MockCalendar mockCalendar0 = treeTypeAdapter0.fromJsonTree(jsonPrimitive0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson("_vEk2*tR[(nKNK,(8$", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 10 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = gson0.toJson((Object) mockGregorianCalendar0, (Type) class0);
      assertEquals("{\"year\":2014,\"month\":1,\"dayOfMonth\":14,\"hourOfDay\":20,\"minute\":21,\"second\":21}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = new Character('9');
      jsonObject0.addProperty("com.google.gson.internal.ConstructorConstructor$6", character0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Character character0 = Character.valueOf('1');
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("minute", character0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = new Character('9');
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("hourOfDay", character0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Float float0 = new Float(768.3079351);
      jsonObject0.addProperty("dayOfMonth", (Number) float0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=768,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = new Character('9');
      jsonObject0.addProperty("month", character0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('5');
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("year", character0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = new Character('9');
      jsonObject0.addProperty("second", character0);
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=9,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      try { 
        gson0.fromJson("uy$ZISfz~g5Yp[ q`E", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 16 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson("null", class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson("it-IT", class0);
      assertFalse(inet4Address0.isMCOrgLocal());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      URL uRL0 = MockURL.getFtpExample();
      gson0.toJson((Object) uRL0, (Appendable) stringBuffer0);
      assertEquals(51, stringBuffer0.length());
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      URL uRL0 = gson0.fromJson("null", class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson("Vha", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Vha
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      gson0.toJson((Object) stringBuffer0, (Appendable) stringBuffer0);
      assertEquals("\"\"", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("null", class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("c", class0);
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0, (Appendable) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = gson0.fromJson("null", (Type) class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = gson0.fromJson("null", (Type) class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("T:tq23csui6J5", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('B');
      StringBuffer stringBuffer0 = new StringBuffer(15);
      gson0.toJson((Object) character0, (Appendable) stringBuffer0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("\"B\"", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("~,(:", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = gson0.fromJson("null", (Type) class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("com.google.gson.Gson$6", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: com.google.gson.Gson$6
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      Class<Long> class0 = Long.TYPE;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapter0);
      Float float0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      StringBuffer stringBuffer0 = gson0.fromJson("null", (Type) class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("jlZq8y,X1Cr2", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"jlZq8y\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      try { 
        gson0.fromJson("w", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"w\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.TYPE;
      Float float0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("74{H.s}kM", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("k0N}\"u!O_j8", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapter0);
      MockGregorianCalendar mockGregorianCalendar0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      BitSet bitSet0 = new BitSet();
      bitSet0.set(11);
      String string0 = gson0.toJson((Object) bitSet0);
      assertEquals("[0,0,0,0,0,0,0,0,0,0,0,1]", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$1");
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.FRANCE;
      Currency currency0 = Currency.getInstance(locale0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) currency0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(46);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicInteger0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("M$b@i(ITM", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"M$b@i(ITM\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("@OHi.cbZy");
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      Byte byte0 = new Byte((byte)11);
      gson0.toJson((Object) byte0, (Appendable) stringBuffer0);
      assertEquals(25, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      gson0.toJson((Object) inetAddress0, (Appendable) stringBuffer0);
      assertEquals(14, stringBuffer0.length());
      assertEquals("\"192.168.1.42\"", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)128);
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((Object) short0, (Appendable) stringWriter0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class0);
      JsonSerializer<AtomicBoolean> jsonSerializer0 = (JsonSerializer<AtomicBoolean>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicBoolean> jsonDeserializer0 = (JsonDeserializer<AtomicBoolean>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<AtomicBoolean> treeTypeAdapter0 = new TreeTypeAdapter<AtomicBoolean>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<AtomicBoolean>) treeTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BIT_SET_FACTORY;
      JsonSerializer<MockCalendar> jsonSerializer0 = (JsonSerializer<MockCalendar>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<MockCalendar> treeTypeAdapter0 = new TreeTypeAdapter<MockCalendar>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockCalendar>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }
}
