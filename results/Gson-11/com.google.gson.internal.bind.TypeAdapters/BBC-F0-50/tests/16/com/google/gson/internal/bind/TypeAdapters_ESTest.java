/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:43:06 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TimeTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.function.IntBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.toJsonTree(gson0);
      BitSet bitSet0 = new BitSet();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("_", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$22", class0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      MockUUID.randomUUID();
      JsonObject jsonObject0 = new JsonObject();
      Class<String> class0 = String.class;
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      Class<Calendar> class3 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class3);
      TypeAdapter<Calendar> typeAdapter0 = gson1.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[2];
      intArray0[0] = 2215;
      int int0 = 11;
      intArray0[1] = 11;
      excluder0.withModifiers(intArray0);
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder2 = excluder1.withVersion(0.0);
      excluder2.withModifiers(intArray0);
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder1.withExclusionStrategy(exclusionStrategy0, true, false);
      excluder0.withVersion((-1220.939737584247));
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean("w&_KCeMD6*vt");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Locale> class0 = Locale.class;
      gson0.fromJson((JsonElement) jsonNull0, class0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(342);
      objectTypeAdapter0.toJsonTree(atomicIntegerArray0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Random.setNextRandom(2309);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<String> class0 = String.class;
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      try { 
        gson0.fromJson((JsonElement) jsonArray1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("2xaN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson("true", class0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      Class<GregorianCalendar> class3 = GregorianCalendar.class;
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("2xaN");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<String> class0 = String.class;
      gson0.fromJson((JsonElement) jsonNull0, class0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Byte> class1 = Byte.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"2xaN\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Long> class0 = Long.TYPE;
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Class<Double> class2 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class2);
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder1.create(gson0, typeToken0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<Object>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Character> class0 = Character.TYPE;
      Gson gson1 = new Gson();
      gson1.fromJson(jsonReader0, (Type) class0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockURL.getFileExample();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree((Object) null);
      Class<StringBuilder> class0 = StringBuilder.class;
      gson0.fromJson(jsonElement0, class0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      Integer integer0 = new Integer((-486));
      objectTypeAdapter0.toJson((Object) integer0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter1);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URL uRL0 = MockURL.getFtpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      objectTypeAdapter0.toJsonTree(uRI0);
      Class<Locale> class0 = Locale.class;
      gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$23", class0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$22", class0);
      Class<InetAddress> class1 = InetAddress.class;
      StringReader stringReader0 = new StringReader("dY(iL{;yV2ij,w{+");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class1);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      gson0.fromJson("null", class0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("|", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 0: |
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson(jsonReader0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockGregorianCalendar>) objectTypeAdapter0);
      Class<StringBuffer> class1 = StringBuffer.class;
      gson0.fromJson("null", class1);
      URI uRI0 = MockURI.aFTPURI;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      Class<Long> class0 = Long.TYPE;
      Class<Currency> class1 = Currency.class;
      Class<Double> class2 = Double.class;
      TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<Double>) null);
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$36", class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("W['lZT;RB<)rxygex/", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Double> class1 = Double.class;
      JsonSerializer<Double> jsonSerializer0 = (JsonSerializer<Double>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'z");
      Class<Double> class2 = Double.class;
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<StringBuilder> class3 = StringBuilder.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'z");
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<StringBuilder> class0 = StringBuilder.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      Class<JsonObject> class0 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson((JsonElement) jsonArray1, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$3");
      Class<Calendar> class0 = Calendar.class;
      Class<Calendar> class1 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter");
      MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      typeAdapterRuntimeTypeWrapper0.toJson((Calendar) null);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      Class<GregorianCalendar> class3 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class3, (TypeAdapter<? super GregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URL uRL0 = MockURL.getFileExample();
      objectTypeAdapter0.toJsonTree(uRL0);
      JsonObject jsonObject0 = new JsonObject();
      Gson gson1 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      Class<Integer> class0 = Integer.TYPE;
      gson1.fromJson(jsonReader0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson1);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Short> class0 = Short.TYPE;
      gson0.fromJson((Reader) stringReader0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Character character0 = new Character('|');
      objectTypeAdapter0.toJsonTree(gson0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Class<AtomicBoolean> class3 = AtomicBoolean.class;
      Class<AtomicBoolean> class4 = AtomicBoolean.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends AtomicBoolean>) class4, (TypeAdapter<? super AtomicBoolean>) objectTypeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(428);
      BitSet bitSet0 = new BitSet(123);
      Integer integer0 = new Integer(91);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Class<Calendar> class1 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(123, "-mEiX6En4q+a");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      typeAdapterRuntimeTypeWrapper0.toJson(calendar0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockGregorianCalendar>) objectTypeAdapter0);
      Class<URI> class1 = URI.class;
      gson0.fromJson("-mEiX6En4q+a", class1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("-mEiX6En4q+a", true);
      long[] longArray0 = new long[5];
      longArray0[0] = (-787L);
      longArray0[1] = 0L;
      longArray0[2] = (-1122L);
      longArray0[3] = 0L;
      longArray0[4] = 1539L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      objectTypeAdapter0.toJson((Writer) mockFileWriter0, (Object) bitSet0);
      MockUUID.fromString("-mEiX6En4q+a");
      URI uRI0 = MockURI.aFTPURI;
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(uRI0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockGregorianCalendar>) objectTypeAdapter0);
      MockUUID.fromString("-mEiX6En4q+a");
      Class<StringBuffer> class1 = StringBuffer.class;
      try { 
        gson0.fromJson("EOCUnso>h)&,kd'vx", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringReader stringReader0 = new StringReader("Missing type parameter.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Character> class1 = Character.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Missing
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringReader stringReader0 = new StringReader("i");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Character> class0 = Character.TYPE;
      gson1.fromJson(jsonReader0, (Type) class0);
      Class<InetAddress> class1 = InetAddress.class;
      gson1.getAdapter(class1);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson1);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      TypeToken<JsonPrimitive> typeToken0 = TypeToken.get(class3);
      TypeAdapter<JsonPrimitive> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree((Object) null);
      Class<Short> class1 = Short.class;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter");
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Gson gson1 = new Gson();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringReader stringReader0 = new StringReader(" Bq.ra7'O=m");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson(jsonReader0, (Type) class0);
      Class<InetAddress> class1 = InetAddress.class;
      gson0.getAdapter(class1);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter((Gson) null);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject("com.google.gson.internal.bind.TypeAdapters$18");
      // Undeclared exception!
      try { 
        objectTypeAdapter1.fromJsonTree((JsonElement) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapters.newFactory(class1, class2, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockUUID.fromString("i");
      URI uRI0 = MockURI.aHttpURI;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      objectTypeAdapter0.toJsonTree(atomicBoolean0);
      System.setCurrentTimeMillis((-44L));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"dYiL\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      String string0 = "dYiL{;yV2ij,w{+";
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Integer> class1 = Integer.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"dYiL\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Double> class1 = Double.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      excluder1.disableInnerClassSerialization();
      excluder1.create(gson0, typeToken0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Double>) class1, (TypeAdapter<? super Double>) typeAdapterRuntimeTypeWrapper0);
      int int0 = (-2614);
      String string0 = "1 =lAwag#Ol tb}Rm_^";
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        gson0.fromJson("1 =lAwag#Ol tb}Rm_^", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      BitSet.valueOf(byteArray0);
      // Undeclared exception!
      try { 
        objectTypeAdapter0.toJsonTree(objectConstructor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.internal.ObjectConstructor. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(gson0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Locale.forLanguageTag("second");
      Class<Character> class1 = Character.class;
      Class<Character> class2 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class2);
      TypeAdapter<Character> typeAdapter0 = gson0.getDelegateAdapter(objectTypeAdapter0.FACTORY, typeToken0);
      TypeAdapters.newFactory(class1, typeAdapter0);
      Class<StringBuffer> class3 = StringBuffer.class;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      gson0.getAdapter(class0);
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(class1, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      JsonArray jsonArray0 = new JsonArray();
      Short short0 = new Short((short)1);
      Class<AtomicBoolean> class2 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class2);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      BitSet.valueOf(byteArray0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      Object object0 = new Object();
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      gson1.fromJson((JsonElement) jsonPrimitive0, class0);
      JsonObject jsonObject0 = new JsonObject();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("'uy");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class1 = Boolean.TYPE;
      try { 
        gson1.fromJson(jsonReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale.forLanguageTag("");
      Character character0 = new Character('i');
      objectTypeAdapter0.toJsonTree(character0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      Integer integer0 = new Integer(1648);
      objectTypeAdapter0.toJson((Writer) pipedWriter0, (Object) integer0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class0);
      gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      Excluder excluder0 = new Excluder();
      Class<Long> class1 = Long.class;
      MockFile mockFile0 = new MockFile("", "{FY%~0L#o/U");
      MockFile mockFile1 = new MockFile(mockFile0, "=d6!4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      TypeToken<Long> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      Excluder excluder0 = new Excluder();
      Class<Long> class1 = Long.class;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2415);
      MockFile mockFile0 = new MockFile("&nI;*9", "{FY%~0L#o/U");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      InetAddress inetAddress0 = MockInetAddress.getByName("{FY%~0L#o/U");
      gson0.toJson((Object) inetAddress0, (Appendable) mockPrintStream0);
      TypeToken<Long> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<Long> class2 = Long.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class2, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringWriter stringWriter0 = new StringWriter(0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Short> class1 = Short.class;
      TypeToken.get(class1);
      JsonArray jsonArray0 = new JsonArray();
      objectTypeAdapter0.toJsonTree("{l?3OsX4`");
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      objectTypeAdapter1.toJsonTree(inetAddress0);
      Class<StringBuffer> class2 = StringBuffer.class;
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeToken.get(class0);
      Class<Locale> class1 = Locale.class;
      TypeToken.get(class1);
      Class<Double> class2 = Double.class;
      TypeToken.get(class2);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("O|,NR,z:=t@*eEy{ctj");
      Class<Long> class3 = Long.class;
      TypeToken.get(class3);
      Class<URI> class4 = URI.class;
      TypeAdapter<URI> typeAdapter0 = gson0.getAdapter(class4);
      Class<URI> class5 = URI.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class4, class5, (TypeAdapter<? super URI>) typeAdapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.fromJsonTree(jsonPrimitive0);
      MockUUID.randomUUID();
      JsonObject jsonObject0 = new JsonObject();
      URL uRL0 = MockURL.getHttpExample();
      objectTypeAdapter0.toJsonTree(uRL0);
      Class<StringBuffer> class6 = StringBuffer.class;
      Class<StringBuffer> class7 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class6, class7, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger(60);
      objectTypeAdapter0.toJsonTree(atomicInteger0);
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      atomicInteger0.accumulateAndGet(60, intBinaryOperator0);
      URL uRL0 = MockURL.getFileExample();
      objectTypeAdapter0.toJsonTree(uRL0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(atomicInteger0);
      jsonPrimitive0.getAsCharacter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectTypeAdapter0.toJsonTree(jsonPrimitive0);
      Class<StringBuffer> class0 = StringBuffer.class;
      ObjectConstructor<StringBuffer> objectConstructor0 = (ObjectConstructor<StringBuffer>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<StringBuffer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<StringBuffer>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super StringBuffer>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringWriter stringWriter0 = new StringWriter(57);
      StringBuilder stringBuilder0 = new StringBuilder("zZj:y7(_$G9oA");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "zZj:y7(_$G9oA");
      stringWriter1.append('h');
      objectTypeAdapter0.toJson((Writer) stringWriter0, (Object) stringBuilder0);
      objectTypeAdapter0.toJsonTree(stringWriter0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        gson1.getDelegateAdapter(typeAdapterFactory0, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$30", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringWriter stringWriter0 = new StringWriter(0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Short> class1 = Short.class;
      TypeToken.get(class1);
      JsonArray jsonArray0 = new JsonArray();
      TypeToken<Short> typeToken0 = TypeToken.get(class1);
      typeToken0.toString();
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyShort() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      Short short0 = new Short((short)1);
      treeTypeAdapter0.toJson(short0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Short>) treeTypeAdapter0);
      Class<AtomicBoolean> class2 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken1 = TypeToken.get(class2);
      typeToken1.equals(typeAdapterFactory1);
      TypeAdapters.newFactory(typeToken1, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      BitSet.valueOf(byteArray0);
      JsonObject jsonObject0 = new JsonObject();
      objectTypeAdapter0.toJsonTree(jsonObject0);
      Class<StringBuffer> class3 = StringBuffer.class;
      Class<StringBuffer> class4 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class4, class3, (TypeAdapter<? super StringBuffer>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.get("com.,oogle.gson.internal.bind.TypeAdapters$19");
      gson0.toJson((JsonElement) jsonObject0);
      Class<MockCalendar> class0 = MockCalendar.class;
      Gson gson1 = new Gson();
      gson1.getAdapter(class0);
      Excluder excluder0 = new Excluder();
      gson1.excluder();
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson1);
      Class<StringBuffer> class1 = StringBuffer.class;
      Class<StringBuffer> class2 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class1, class2, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      Class<URL> class3 = URL.class;
      Class<URL> class4 = URL.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends URL>) class4, (TypeAdapter<? super URL>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URI uRI0 = MockURI.URI("com.google.gson.internal.ConstructorConstructor$8");
      objectTypeAdapter0.toJsonTree(uRI0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Class<Double> class1 = Double.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      Class<Long> class2 = Long.class;
      TypeToken.get(class2);
      Gson gson2 = new Gson();
      TypeAdapterRuntimeTypeWrapper<Long> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Long>(gson2, (TypeAdapter<Long>) null, class0);
      TypeToken<Long> typeToken0 = TypeToken.get(class2);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<Long>) null);
      Class<URI> class3 = URI.class;
      TypeAdapter<URI> typeAdapter0 = gson2.getAdapter(class3);
      Class<URI> class4 = URI.class;
      Long long0 = new Long(0L);
      typeAdapterRuntimeTypeWrapper0.toJson(long0);
      TypeAdapters.newFactory(class3, class4, (TypeAdapter<? super URI>) typeAdapter0);
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson1);
      MockUUID.randomUUID();
      ObjectTypeAdapter objectTypeAdapter2 = new ObjectTypeAdapter(gson2);
      // Undeclared exception!
      try { 
        objectTypeAdapter2.toJsonTree(typeAdapterRuntimeTypeWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonPrimitive. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Byte byte0 = new Byte((byte)107);
      objectTypeAdapter0.toJsonTree(byte0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson("", class0);
      Class<Double> class1 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      gson0.getAdapter(typeToken0);
      Class<Double> class2 = Double.TYPE;
      Class<Double> class3 = Double.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Double>) class3, (TypeAdapter<? super Double>) objectTypeAdapter0);
      // Undeclared exception!
      try { 
        gson1.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeToken.get(class1);
      Class<Locale> class2 = Locale.class;
      TypeToken.get(class2);
      Class<Double> class3 = Double.class;
      TypeToken.get(class3);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("O|,NR,z:=t@*eEy{ctj");
      Class<Long> class4 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class4);
      TypeAdapterRuntimeTypeWrapper<Long> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Long>(gson0, (TypeAdapter<Long>) null, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Long>) null);
      Class<URI> class5 = URI.class;
      TypeAdapter<URI> typeAdapter0 = gson0.getAdapter(class5);
      TypeAdapters.newFactory(class5, class5, (TypeAdapter<? super URI>) typeAdapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      UUID uUID0 = MockUUID.randomUUID();
      objectTypeAdapter0.toJsonTree(uUID0);
      Class<StringBuffer> class6 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class6, class6, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      gson0.excluder();
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeToken.get(class1);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("XzM_(`IWdX%)h <");
      Locale.forLanguageTag("XzM_(`IWdX%)h <");
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.toJsonTree("XzM_(`IWdX%)h <");
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.toJsonTree(gson0);
      Excluder excluder0 = Excluder.DEFAULT;
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class0);
      excluder0.create(gson0, typeToken0);
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2428);
      MockFile mockFile0 = new MockFile("", "com.google.gson.stream.MalformedJsonException");
      MockFile mockFile1 = new MockFile(mockFile0, "{l?3OsX4`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      gson0.toJson((Object) "{FY%~0L#o/U", (Appendable) mockPrintStream0);
      Class<Long> class2 = Long.class;
      TypeToken<Long> typeToken1 = TypeToken.get(class2);
      assertNotNull(typeToken1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuilder stringBuilder0 = new StringBuilder("zZj:y7(_$G9oA");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      StringWriter stringWriter2 = stringWriter1.append('h');
      objectTypeAdapter0.toJson((Writer) stringWriter2, (Object) stringWriter1);
      objectTypeAdapter0.toJsonTree(gson0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      TypeToken<String> typeToken0 = null;
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<InetAddress> class0 = InetAddress.class;
      gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      Excluder excluder0 = new Excluder();
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class1);
      excluder0.create(gson0, typeToken0);
      Class<StringBuffer> class2 = StringBuffer.class;
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      Class<Long> class4 = Long.class;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2428);
      String string0 = "\\u";
      MockFile mockFile0 = new MockFile("com.google.gson.internal.ConstructorConstructor$8", string0);
      MockFile mockFile1 = new MockFile(mockFile0, "jc");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Appendable) mockPrintStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.StringBuffer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_FACTORY;
      Class<StringBuffer> class1 = StringBuffer.class;
      Excluder excluder0 = new Excluder();
      Class<StringBuffer> class2 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken0);
      TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super StringBuffer>) null);
      Class<Long> class3 = Long.class;
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2428);
      MockFile mockFile0 = new MockFile("", "{FY%~0L#o/U");
      MockFile mockFile1 = new MockFile(mockFile0, "=d6!4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      gson0.toJson((Object) atomicIntegerArray0, (Appendable) mockPrintStream0);
      TypeToken<Long> typeToken1 = TypeToken.get(class3);
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Short short0 = new Short((short)2402);
      objectTypeAdapter0.toJsonTree(short0);
      Class<JsonPrimitive> class2 = JsonPrimitive.class;
      gson0.fromJson("", class2);
      Locale.forLanguageTag("");
      Class<Double> class3 = Double.class;
      Class<Double> class4 = Double.class;
      TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends Double>) class4, (TypeAdapter<? super Double>) objectTypeAdapter0);
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, false, true);
      excluder1.excludeFieldsWithoutExposeAnnotation();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson2);
      String string0 = "";
      Locale.forLanguageTag("");
      Short short0 = new Short((short) (-1340));
      objectTypeAdapter0.toJsonTree(short0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      ObjectConstructor<Calendar> objectConstructor0 = (ObjectConstructor<Calendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Calendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Calendar>(objectConstructor0, hashMap0);
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      Gson gson1 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson1);
      Locale.forLanguageTag("");
      AtomicInteger atomicInteger0 = new AtomicInteger((-3061));
      objectTypeAdapter0.toJsonTree(atomicInteger0);
      Class<GregorianCalendar> class3 = GregorianCalendar.class;
      Class<GregorianCalendar> class4 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<? extends GregorianCalendar>) class4, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.forLanguageTag("");
      objectTypeAdapter0.toJsonTree(locale0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Gson gson1 = new Gson();
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.ITALY;
      Currency currency0 = Currency.getInstance(locale0);
      objectTypeAdapter1.toJsonTree(currency0);
      Class<StringBuffer> class0 = StringBuffer.class;
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super StringBuffer>) objectTypeAdapter1);
      Class<Currency> class2 = Currency.class;
      Class<Currency> class3 = Currency.class;
      Class<Object> class4 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class4);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super Currency>) typeAdapter0);
      Class<Currency> class5 = Currency.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends Currency>) class5, (TypeAdapter<? super Currency>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URI uRI0 = MockURI.URI("com.google.gson.internal.ConstructorConstructor$8");
      objectTypeAdapter0.toJsonTree(uRI0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson("", class0);
      Class<Double> class1 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      TypeAdapter<Double> typeAdapter0 = gson1.getAdapter(typeToken0);
      Class<Double> class2 = Double.TYPE;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Double>) class2, (TypeAdapter<? super Double>) typeAdapter0);
      Class<Long> class3 = Long.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class3, (TypeAdapter<Long>) null);
      Class<Character> class4 = Character.class;
      TypeToken<Character> typeToken1 = TypeToken.get(class4);
      TypeAdapter<Character> typeAdapter1 = gson0.getAdapter(typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Gson gson1 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(3391);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      objectTypeAdapter0.toJson((Object) bitSet0);
      MockInetAddress.getLocalHost();
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson1);
      objectTypeAdapter1.toJson((Writer) stringWriter0, (Object) gson1);
      Class<StringBuffer> class0 = StringBuffer.class;
      Class<StringBuffer> class1 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      StringReader stringReader0 = new StringReader("dYiL{;yV2ij,w{+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class0);
      Class<InetAddress> class1 = InetAddress.class;
      gson0.getAdapter(class1);
      Excluder excluder0 = new Excluder();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      objectTypeAdapter0.toJsonTree(bitSet0);
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends GregorianCalendar>) class3, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      Class<Locale> class3 = Locale.class;
      TypeToken<Locale> typeToken1 = TypeToken.get(class3);
      TypeAdapter<Locale> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter1);
      Class<AtomicBoolean> class4 = AtomicBoolean.class;
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(class4, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Short> class5 = Short.class;
      TypeToken<Short> typeToken2 = TypeToken.get(class5);
      JsonArray jsonArray0 = new JsonArray();
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonArray0).when(jsonSerializer0).serialize(anyShort() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      typeToken2.toString();
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken2, typeAdapterFactory0);
      Short short0 = new Short((short)1);
      treeTypeAdapter0.toJson(short0);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<Short>) treeTypeAdapter0);
      Class<AtomicBoolean> class6 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken3 = TypeToken.get(class6);
      typeToken3.equals("[]");
      TypeAdapters.newFactory(typeToken3, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      objectTypeAdapter0.toJsonTree(bitSet0);
      Class<StringBuffer> class7 = StringBuffer.class;
      Class<StringBuffer> class8 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class7, class8, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.toJsonTree(gson0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      try { 
        gson0.fromJson("{l?3OsX4`", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 10 path $.l?3OsX4`
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Gson gson0 = new Gson();
      Class<MockCalendar> class1 = MockCalendar.class;
      Double double0 = new Double(1.0);
      StringBuilder stringBuilder0 = new StringBuilder("q=a(z.LH!#s<J=zOo");
      StringBuilder stringBuilder1 = stringBuilder0.insert(5, true);
      StringBuilder stringBuilder2 = stringBuilder1.insert(5, 'y');
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      stringBuilder3.insert(0, (Object) gson0);
      gson0.toJson((Object) double0, (Appendable) stringBuilder3);
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(gson0);
      objectTypeAdapter0.toJsonTree(jsonElement0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonObject jsonObject0 = new JsonObject();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      Random.setNextRandom(440);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      Class<Locale> class3 = Locale.class;
      TypeToken<Locale> typeToken1 = TypeToken.get(class3);
      TypeAdapter<Locale> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter1);
      Class<AtomicBoolean> class4 = AtomicBoolean.class;
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(class4, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Short> class5 = Short.class;
      TypeToken<Short> typeToken2 = TypeToken.get(class5);
      Boolean boolean0 = new Boolean((String) null);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) boolean0);
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonElement0).when(jsonSerializer0).serialize(anyShort() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      typeToken2.toString();
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken2, typeAdapterFactory0);
      Short short0 = new Short((short)1);
      treeTypeAdapter0.toJson(short0);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<Short>) treeTypeAdapter0);
      Class<AtomicBoolean> class6 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken3 = TypeToken.get(class6);
      typeToken3.equals("false");
      TypeAdapters.newFactory(typeToken3, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Integer> class7 = Integer.class;
      Excluder excluder0 = Excluder.DEFAULT;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)1;
      intArray0[8] = (int) (short)1;
      Excluder excluder3 = excluder2.withModifiers(intArray0);
      TypeToken<Integer> typeToken4 = TypeToken.get(class7);
      TypeAdapter<Integer> typeAdapter2 = excluder3.create(gson0, typeToken4);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class7, typeAdapter2);
      assertNotSame(typeAdapterFactory2, typeAdapterFactory1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeToken.get(class0);
      Class<Locale> class1 = Locale.class;
      TypeToken.get(class1);
      Class<Double> class2 = Double.class;
      TypeToken.get(class2);
      Gson gson1 = new Gson();
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("O|,NR,z:=t@*eEy{ctj");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(65279);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "O|,NR,z:=t@*eEy{ctj", 9, 9);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter1);
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter0);
      try { 
        gson0.fromJson("O|,NR,z:=t@*eEy{ctj", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class2, (TypeAdapter<? super GregorianCalendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      gson0.fromJson(jsonReader0, (Type) class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends GregorianCalendar>) class1, (TypeAdapter<? super GregorianCalendar>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder2 = excluder1.withVersion(1888.06477923);
      Gson gson0 = new Gson();
      Class<Float> class1 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class1);
      excluder2.create(gson0, typeToken0);
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Float>) null);
      Class<InetAddress> class2 = InetAddress.class;
      TypeToken<InetAddress> typeToken1 = TypeToken.get(class2);
      JsonDeserializer<InetAddress> jsonDeserializer0 = (JsonDeserializer<InetAddress>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson1 = new Gson();
      TreeTypeAdapter<InetAddress> treeTypeAdapter0 = new TreeTypeAdapter<InetAddress>((JsonSerializer<InetAddress>) null, jsonDeserializer0, gson1, typeToken1, excluder1);
      TypeAdapters.newFactory(typeToken1, (TypeAdapter<InetAddress>) treeTypeAdapter0);
      Class<Double> class3 = Double.class;
      Class<Double> class4 = Double.class;
      TypeToken.get(class4);
      Class<JsonPrimitive> class5 = JsonPrimitive.class;
      try { 
        gson1.fromJson("O|,NR,z:=t@*eEy{ctj", class5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      TypeToken.get(class0);
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      TreeTypeAdapter<InetAddress> treeTypeAdapter0 = new TreeTypeAdapter<InetAddress>((JsonSerializer<InetAddress>) null, (JsonDeserializer<InetAddress>) null, gson0, typeToken0, excluder0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<InetAddress>) treeTypeAdapter0);
      Class<Double> class2 = Double.class;
      TypeToken.get(class2);
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      try { 
        gson1.fromJson("O|,NR,z:=t@*eEy{ctj", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      Class<InetAddress> class1 = InetAddress.class;
      TypeAdapter<InetAddress> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapters.newFactory(class0, typeAdapter0);
      Class<StringBuffer> class2 = StringBuffer.class;
      Excluder excluder0 = new Excluder();
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class3);
      excluder0.create(gson0, typeToken0);
      TypeAdapters.newFactory(class2, class2, (TypeAdapter<? super StringBuffer>) null);
      Class<Long> class4 = Long.class;
      AtomicIntegerArray atomicIntegerArray0 = null;
      try {
        atomicIntegerArray0 = new AtomicIntegerArray((-3535));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.atomic.AtomicIntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Gson gson0 = new Gson();
      Class<MockCalendar> class1 = MockCalendar.class;
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      // Undeclared exception!
      try { 
        jsonArray1.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeToken.get(class0);
      Class<Locale> class1 = Locale.class;
      TypeToken.get(class1);
      Class<Double> class2 = Double.class;
      TypeToken.get(class2);
      Locale.forLanguageTag("iuJ6");
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      objectTypeAdapter0.toJsonTree(jsonNull0);
      Class<StringBuffer> class3 = StringBuffer.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.getAsJsonArray();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.get("com.google.gson.stream.JsonToken");
      gson0.toJson((JsonElement) null);
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends MockCalendar>) class0, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      Class<Long> class1 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class1);
      TypeAdapterRuntimeTypeWrapper<Long> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Long>(gson0, (TypeAdapter<Long>) null, class0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<Long>) typeAdapterRuntimeTypeWrapper0);
      Class<URI> class2 = URI.class;
      TypeAdapter<URI> typeAdapter1 = gson0.getAdapter(class2);
      TypeAdapters.newFactory(class2, class2, (TypeAdapter<? super URI>) typeAdapter1);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonArray jsonArray1 = new JsonArray();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonArray1, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super MockGregorianCalendar>) typeAdapter0);
      Class<Locale> class3 = Locale.class;
      TypeToken<Locale> typeToken1 = TypeToken.get(class3);
      TypeAdapter<Locale> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      TypeAdapters.newTypeHierarchyFactory(class3, typeAdapter1);
      Class<AtomicBoolean> class4 = AtomicBoolean.class;
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(class4, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Short> class5 = Short.class;
      TypeToken<Short> typeToken2 = TypeToken.get(class5);
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyShort() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      typeToken2.toString();
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken2, typeAdapterFactory0);
      Short short0 = new Short((short)1);
      treeTypeAdapter0.toJson(short0);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<Short>) treeTypeAdapter0);
      Class<AtomicBoolean> class6 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken3 = TypeToken.get(class6);
      typeToken3.equals("null");
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken3, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Integer> class7 = Integer.class;
      Excluder excluder0 = Excluder.DEFAULT;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)1;
      intArray0[8] = (int) (short)1;
      Excluder excluder3 = excluder2.withModifiers(intArray0);
      TypeToken<Integer> typeToken4 = TypeToken.get(class7);
      excluder3.create(gson0, typeToken4);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class7, (TypeAdapter<Integer>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = ArrayTypeAdapter.FACTORY;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<MockGregorianCalendar> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<JsonNull> class1 = JsonNull.class;
      JsonSerializer<JsonNull> jsonSerializer0 = (JsonSerializer<JsonNull>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonNull> jsonDeserializer0 = (JsonDeserializer<JsonNull>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<JsonNull> typeToken1 = TypeToken.get(class1);
      TreeTypeAdapter<JsonNull> treeTypeAdapter0 = new TreeTypeAdapter<JsonNull>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory1);
      TypeAdapters.newFactory(class1, (TypeAdapter<JsonNull>) treeTypeAdapter0);
      Class<UUID> class2 = UUID.class;
      Excluder excluder0 = gson0.excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, false, true);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1454);
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      Gson gson1 = new Gson();
      TypeToken<UUID> typeToken2 = TypeToken.get(class2);
      excluder2.create(gson1, typeToken2);
      TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<UUID>) null);
      Class<JsonObject> class3 = JsonObject.class;
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<JsonObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      TypeAdapter<Boolean> typeAdapter0 = TypeAdapters.BOOLEAN_AS_STRING;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<Short> class1 = Short.class;
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeToken<Short> typeToken0 = TypeToken.get(class1);
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, (Gson) null, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<Short>) treeTypeAdapter0);
      Class<URL> class2 = URL.class;
      Class<URL> class3 = URL.class;
      Gson gson0 = new Gson();
      Class<URL> class4 = URL.class;
      TypeToken<URL> typeToken1 = TypeToken.get(class4);
      TypeAdapter<URL> typeAdapter1 = gson0.getAdapter(typeToken1);
      TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super URL>) typeAdapter1);
      Class<JsonObject> class5 = JsonObject.class;
      Class<JsonObject> class6 = JsonObject.class;
      Class<Character> class7 = Character.class;
      TypeToken.get(class7);
      TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends JsonObject>) class6, (TypeAdapter<? super JsonObject>) null);
      Class<JsonPrimitive> class8 = JsonPrimitive.class;
      ObjectConstructor<JsonPrimitive> objectConstructor0 = (ObjectConstructor<JsonPrimitive>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<JsonPrimitive> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<JsonPrimitive>(objectConstructor0, hashMap0);
      TypeAdapters.newFactoryForMultipleTypes(class8, (Class<? extends JsonPrimitive>) class8, (TypeAdapter<? super JsonPrimitive>) reflectiveTypeAdapterFactory_Adapter0);
      Class<URL> class9 = URL.class;
      TypeAdapters.newTypeHierarchyFactory(class9, typeAdapter1);
      Class<Byte> class10 = Byte.class;
      Excluder excluder0 = new Excluder();
      TypeToken<Byte> typeToken2 = TypeToken.get(class10);
      excluder0.create((Gson) null, typeToken2);
      TypeAdapterRuntimeTypeWrapper<Byte> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Byte>((Gson) null, (TypeAdapter<Byte>) null, class2);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class10, (Class<? extends Byte>) class10, (TypeAdapter<? super Byte>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      objectTypeAdapter0.toJsonTree(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super StringBuffer>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Class<URI> class1 = URI.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      TypeToken<URI> typeToken0 = TypeToken.get(class1);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder0.create(gson0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super URI>) null);
      Class<JsonObject> class2 = JsonObject.class;
      Class<JsonObject> class3 = JsonObject.class;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>((ObjectConstructor<Object>) null, hashMap0);
      TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends JsonObject>) class3, (TypeAdapter<? super JsonObject>) reflectiveTypeAdapterFactory_Adapter0);
      Class<String> class4 = String.class;
      Gson gson1 = new Gson();
      TypeToken<String> typeToken1 = TypeToken.get(class4);
      excluder0.create(gson1, typeToken1);
      TypeAdapterRuntimeTypeWrapper<String> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<String>(gson0, (TypeAdapter<String>) null, class4);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class4, (TypeAdapter<String>) typeAdapterRuntimeTypeWrapper0);
      Class<Currency> class5 = Currency.class;
      Gson gson2 = new Gson();
      Class<Currency> class6 = Currency.class;
      TypeToken<Currency> typeToken2 = TypeToken.get(class6);
      TypeAdapter<Currency> typeAdapter0 = gson2.getDelegateAdapter(typeAdapterFactory1, typeToken2);
      TypeAdapters.newTypeHierarchyFactory(class5, typeAdapter0);
      Class<Short> class7 = Short.class;
      ObjectConstructor<Short> objectConstructor0 = (ObjectConstructor<Short>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<Short> reflectiveTypeAdapterFactory_Adapter1 = new ReflectiveTypeAdapterFactory.Adapter<Short>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(class7, (TypeAdapter<Short>) reflectiveTypeAdapterFactory_Adapter1);
      Class<Integer> class8 = Integer.class;
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class8, (TypeAdapter<Integer>) null);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<Calendar> class1 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends GregorianCalendar>) class0, (TypeAdapter<? super GregorianCalendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class0);
      ObjectConstructor<AtomicBoolean> objectConstructor0 = (ObjectConstructor<AtomicBoolean>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<AtomicBoolean>(objectConstructor0, hashMap0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<AtomicBoolean>) reflectiveTypeAdapterFactory_Adapter0);
      Class<Long> class1 = Long.class;
      ObjectConstructor<Object> objectConstructor1 = (ObjectConstructor<Object>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter1 = new ReflectiveTypeAdapterFactory.Adapter<Object>(objectConstructor1, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Long>) class1, (TypeAdapter<? super Long>) reflectiveTypeAdapterFactory_Adapter1);
      Class<Boolean> class2 = Boolean.class;
      Class<Boolean> class3 = Boolean.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends Boolean>) class3, (TypeAdapter<? super Boolean>) reflectiveTypeAdapterFactory_Adapter1);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Double>) null);
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      Class<Character> class1 = Character.class;
      TypeToken.get(class1);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      Class<Short> class2 = Short.class;
      Class<Short> class3 = Short.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      Gson gson0 = new Gson();
      ObjectConstructor<MockCalendar> objectConstructor0 = (ObjectConstructor<MockCalendar>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<MockCalendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<MockCalendar>(objectConstructor0, hashMap0);
      Class<MockCalendar> class2 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, reflectiveTypeAdapterFactory_Adapter0, class2);
      // Undeclared exception!
      try { 
        arrayTypeAdapter0.fromJson((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TimeTypeAdapter.FACTORY;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Locale> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapters.newFactory(class0, typeAdapter0);
      Class<Calendar> class1 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter1 = TypeAdapters.CALENDAR;
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter1, class0);
      TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<Calendar>) typeAdapterRuntimeTypeWrapper0);
      TypeToken<JsonNull> typeToken1 = null;
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<JsonNull>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
