/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:24:27 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      Class<Object> class1 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<?>) class0, (TypeAdapter<? super Object>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson("N!7uI", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"N!7uI\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("N\"}-f5ID=th[rz<)h", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("-DTJbldc3o8V/");
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertNull(uRI0.getHost());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Gson gson0 = new Gson();
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Character>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)3724);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(inet4Address0.isMCLinkLocal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson(string0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated object at line 1 column 32 path $.serializeNulls
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class0);
      Class<? super JsonNull> class1 = typeToken0.getRawType();
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$25", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      // Undeclared exception!
      try { 
        objectTypeAdapter0.toJson((Object) jsonSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3757, 3757, 3757, (-1093), (-1));
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class0);
      gson0.toJson(jsonElement0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3757,MONTH=3757,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3757,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1093,HOUR_OF_DAY=-1093,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = Float.valueOf(0.0F);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('P');
      jsonObject0.addProperty("}>+wUt$_@G^ns,t", character0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonObject0);
      assertTrue(jsonElement0.equals((Object)jsonObject0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Byte>) class0, (TypeAdapter<? super Byte>) null);
      Class<Character> class1 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class1);
      JsonSerializer<Character> jsonSerializer0 = (JsonSerializer<Character>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(anyChar() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      Gson gson0 = new Gson();
      TreeTypeAdapter<Character> treeTypeAdapter0 = new TreeTypeAdapter<Character>(jsonSerializer0, (JsonDeserializer<Character>) null, gson0, typeToken0, typeAdapterFactory0);
      Character character0 = new Character('J');
      String string0 = treeTypeAdapter0.toJson(character0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class0);
      Class<? super JsonNull> class1 = typeToken0.getRawType();
      try { 
        gson0.fromJson("[Vv=cg7w`Ua&bov", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated array at line 1 column 5 path $[1]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      TypeToken<Currency> typeToken0 = TypeToken.get(class0);
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<Currency> treeTypeAdapter0 = new TreeTypeAdapter<Currency>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder0);
      StringReader stringReader0 = new StringReader("[]");
      Currency currency0 = treeTypeAdapter0.fromJson((Reader) stringReader0);
      assertNull(currency0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.STRING_BUFFER_FACTORY;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Currency> treeTypeAdapter0 = new TreeTypeAdapter<Currency>(jsonSerializer0, jsonDeserializer0, gson0, (TypeToken<Currency>) null, typeAdapterFactory0);
      Currency currency0 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(currency0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      ObjectConstructor<Object> objectConstructor0 = (ObjectConstructor<Object>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super URL>) reflectiveTypeAdapterFactory_Adapter0);
      Boolean boolean0 = new Boolean(false);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) boolean0);
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Currency> treeTypeAdapter0 = new TreeTypeAdapter<Currency>(jsonSerializer0, jsonDeserializer0, gson0, (TypeToken<Currency>) null, typeAdapterFactory0);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TreeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(".hOzt1");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringReader0);
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      TreeTypeAdapter<Currency> treeTypeAdapter0 = new TreeTypeAdapter<Currency>(jsonSerializer0, jsonDeserializer0, gson0, (TypeToken<Currency>) null, typeAdapterFactory0);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TreeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuilder0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("null", class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("com.google.gson.FieldAttributes", class0);
      assertEquals("com.google.gson.fieldattributes", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class0);
      GregorianCalendar gregorianCalendar0 = gson0.fromJson(jsonElement0, class0);
      assertNotNull(gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      AtomicInteger atomicInteger0 = new AtomicInteger(2783);
      jsonObject0.addProperty("}>+wUt$_@G^ns,t", (Number) atomicInteger0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      try { 
        gson0.fromJson("m`QT:wzvs", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"127.0.0.1\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      InetAddress inetAddress0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aHttpURI;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      String string0 = objectTypeAdapter0.toJson((Object) uRI0);
      assertEquals("\"http://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter(8233);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      gson0.toJson((Object) null, (Type) class0, (Appendable) stringBuffer0);
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"http://www.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(".hOzt19@KR!");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: .hOzt19@KR!
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer("*");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<StringBuffer> typeAdapter0 = TypeAdapters.STRING_BUFFER;
      Class<Float> class0 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      StringBuffer stringBuffer0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonObject jsonObject0 = new JsonObject();
      Class<StringBuffer> class0 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken0 = TypeToken.get(class0);
      TypeAdapter<StringBuffer> typeAdapter0 = gson0.getDelegateAdapter(objectTypeAdapter0.FACTORY, typeToken0);
      TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, typeAdapter0, class0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonObject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson(".hOzt1", class0);
      assertEquals(".hOzt1", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("Interface", class0);
      assertEquals("Interface", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("null", class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf("^QSw4Ia");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Character character0 = new Character('6');
      String string0 = objectTypeAdapter0.toJson((Object) character0);
      assertEquals("\"6\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson(".hOzt19@KR!", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: .hOzt19@KR!
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Object object0 = gson0.fromJson("null", (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      try { 
        gson0.fromJson("5=gK-uAghG-@t>>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("java.util.BitSet", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java.util.BitSet\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(55);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      assertEquals(55, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Integer> class0 = Integer.class;
      Integer integer0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("java.util.BitSet");
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java.util.BitSet\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      Short short0 = gson0.fromJson("null", class0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      try { 
        gson0.fromJson(".hOzt1", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \".hOzt1\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      Byte byte0 = gson0.fromJson("null", class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson("1", class0);
      assertEquals((byte)1, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Boolean> class0 = Boolean.TYPE;
      Calendar calendar0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, (TypeAdapter<BitSet>) null, class0);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson(bitSet0);
      assertEquals("[0,0,1,0,1,1,1,1]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      TypeAdapter<BitSet> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, (Type) null);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((BitSet) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.GERMAN;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      TypeAdapterRuntimeTypeWrapper<AtomicIntegerArray> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<AtomicIntegerArray>(gson0, (TypeAdapter<AtomicIntegerArray>) null, class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      // Undeclared exception!
      try { 
        objectTypeAdapter0.toJson((Object) typeAdapterRuntimeTypeWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.util.concurrent.atomic.AtomicIntegerArray. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(".hOzt19@KR!");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.ITALY;
      Currency currency0 = Currency.getInstance(locale0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) currency0);
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger((-2582));
      String string0 = objectTypeAdapter0.toJson((Object) atomicInteger0);
      assertEquals("-2582", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"00000000-0100-4000-8200-000003000000\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder("Jx>");
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      gson0.toJson((Object) atomicBoolean0, (Appendable) stringBuilder0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-67));
      String string0 = gson0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Short short0 = new Short((short)17);
      String string0 = objectTypeAdapter0.toJson((Object) short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      TypeToken<Currency> typeToken0 = TypeToken.get(class0);
      JsonSerializer<Currency> jsonSerializer0 = (JsonSerializer<Currency>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Currency> treeTypeAdapter0 = new TreeTypeAdapter<Currency>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Currency>) treeTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<BitSet>) null);
      assertNotNull(typeAdapterFactory0);
  }
}
