/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 02:20:20 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.DateTypeAdapter;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(8);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "+F?; Xj$(VR`&S8)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +F?; Xj$(VR`&S8)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken.get(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aVKIKGx6pAqgmE I");
      gson0.toJson((Object) null, (Type) class0);
      try { 
        gson0.fromJson("j=OdXv", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class1);
      long[] longArray0 = new long[6];
      longArray0[0] = 4742L;
      longArray0[1] = 1395L;
      longArray0[2] = (-852L);
      gson0.toJson((Object) null, (Type) class0);
      longArray0[3] = 0L;
      longArray0[4] = (-2L);
      longArray0[5] = 1403L;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      // Undeclared exception!
      try { 
        TreeTypeAdapter.newFactory(typeToken0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken.get(class1);
      long[] longArray0 = new long[6];
      longArray0[0] = 4742L;
      longArray0[1] = 1395L;
      longArray0[2] = (-852L);
      gson0.toJson((Object) null, (Type) class0);
      longArray0[3] = 0L;
      longArray0[4] = (-2L);
      longArray0[5] = 1403L;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      long[] longArray1 = new long[6];
      BitSet.valueOf(longArray1);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeToken<String> typeToken0 = null;
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.FRANCE;
      gson0.toJsonTree((Object) locale0);
      Class<URI> class0 = URI.class;
      gson0.fromJson("null", class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URI_FACTORY;
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(72, 1662, 11, (-2321), 1662);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) typeAdapterFactory0);
      gson0.fromJson(jsonElement0, (Type) class0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory((TypeToken<String>) null, (TypeAdapter<String>) null);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Class<InetAddress> class1 = InetAddress.class;
      Gson gson0 = new Gson();
      Class<Long> class2 = Long.class;
      gson0.getAdapter(class2);
      Class<Long> class3 = Long.class;
      JsonElement jsonElement0 = null;
      Class<Object> class4 = Object.class;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = '8';
      charArray0[2] = 'o';
      charArray0[3] = 'C';
      charArray0[4] = 'O';
      charArray0[5] = 'p';
      charArray0[6] = '=';
      charArray0[7] = '[';
      charArray0[8] = 'j';
      pipedWriter0.write(charArray0);
      Class<StringBuilder> class5 = StringBuilder.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 8 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.PRC;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      Class<Locale> class0 = Locale.class;
      gson0.fromJson(jsonElement0, class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson("NULL", class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      try { 
        gson0.fromJson("| Blq!(5%aBNi8e2_", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockInetAddress.getLocalHost();
      Class<Byte> class0 = Byte.TYPE;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("0[,;?p,\"+#", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      MockInetAddress.getLocalHost();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuffer> class0 = StringBuffer.class;
      gson2.fromJson((JsonElement) jsonNull0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<String>) null, (TypeAdapter<String>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("be$e>q.AIkv5l{>", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 4: be$e>q.AIkv5l
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Calendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Calendar>((ObjectConstructor<Calendar>) null, hashMap0);
      Class<Calendar> class0 = Calendar.class;
      TypeAdapters.newFactory(class0, (TypeAdapter<Calendar>) reflectiveTypeAdapterFactory_Adapter0);
      Gson gson1 = new Gson();
      Class<URI> class1 = URI.class;
      try { 
        gson1.fromJson("h2+oW;<'w$", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      Class<Calendar> class1 = Calendar.class;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Calendar> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Calendar>((ObjectConstructor<Calendar>) null, hashMap0);
      TypeAdapters.newFactory(class1, (TypeAdapter<Calendar>) reflectiveTypeAdapterFactory_Adapter0);
      try { 
        gson0.fromJson("[O", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("{NJH", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
      Gson gson1 = new Gson();
      Class<Locale> class0 = Locale.class;
      gson1.fromJson(jsonElement0, class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      gson1.toJsonTree((Object) null, (Type) class0);
      TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      Class<JsonObject> class1 = JsonObject.class;
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) class1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonObject. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("Couldn't write ");
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuilder0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson(" VsD60d![Z ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"VsD60d!\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('q');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Locale> class0 = Locale.class;
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      gson0.toJsonTree((Object) jsonPrimitive0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      System.setCurrentTimeMillis(1014L);
      Class<String> class1 = String.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends String>) class1, (TypeAdapter<? super String>) typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Boolean> class0 = Boolean.class;
      gson0.fromJson("!<", class0);
      Class<String> class1 = String.class;
      try { 
        gson0.fromJson("CEZR-4  sP>$u", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 10 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URI_FACTORY;
      TypeToken.get(class0);
      Class<Byte> class1 = Byte.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      int int0 = 42;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(72, 72, 11, 42, 72);
      mockGregorianCalendar0.getWeekYear();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) mockGregorianCalendar0);
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $.lenient
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      gson0.fromJson("null", (Type) class0);
      try { 
        gson0.fromJson("s$p@]S", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: s$p@
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) calendar0);
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      Class<Short> class1 = Short.class;
      Gson gson1 = new Gson();
      gson1.getAdapter(class1);
      Class<Short> class2 = Short.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Short>) class2, (TypeAdapter<? super Short>) null);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class3);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson1, typeToken0, typeAdapterFactory0);
      treeTypeAdapter0.fromJsonTree(jsonElement0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      // Undeclared exception!
      try { 
        jsonArray1.getAsJsonPrimitive();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This is not a JSON Primitive.
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringReader stringReader0 = new StringReader(string0);
      Class<JsonArray> class0 = JsonArray.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated object at line 1 column 32 path $.serializeNulls
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      Random.setNextRandom((-2906));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1690);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Currency>) null);
      Class<Locale> class1 = Locale.class;
      Gson gson0 = new Gson();
      Class<String> class2 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class2);
      gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      String string0 = "hM42!-!:F\\%";
      // Undeclared exception!
      try { 
        gson0.fromJson("hM42!-!:F%", (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonObject0);
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Short> class1 = Short.class;
      Class<Short> class2 = Short.class;
      Class<Short> class3 = Short.class;
      TypeAdapter<Short> typeAdapter0 = gson0.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Short>) class2, (TypeAdapter<? super Short>) typeAdapter0);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      treeTypeAdapter0.fromJsonTree(jsonElement0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      treeTypeAdapter0.fromJsonTree(jsonElement0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)79;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      gson0.toJsonTree((Object) bitSet0);
      Class<String> class4 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class4);
      Class<String> class5 = String.class;
      TypeToken.get(class5);
      Class<String> class6 = String.class;
      TypeToken<String> typeToken2 = TypeToken.get(class6);
      TypeAdapter<String> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken2);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      gson0.toJson((Object) jsonObject0);
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      Class<Long> class0 = Long.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      JsonObject jsonObject0 = new JsonObject();
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      StringBuffer stringBuffer0 = new StringBuffer(233);
      URI uRI0 = MockURI.aFTPURI;
      gson0.toJsonTree((Object) uRI0);
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree((JsonElement) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      StringBuffer stringBuffer0 = new StringBuffer(233);
      URI uRI0 = MockURI.aFTPURI;
      gson0.toJsonTree((Object) uRI0);
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      BitSet bitSet0 = new BitSet();
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Class<String> class2 = String.class;
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(class2);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("j(-L=9*71.`VX");
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive("null");
      gson0.toJson((JsonElement) null);
      Class<Character> class0 = Character.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      Class<Byte> class2 = Byte.TYPE;
      gson0.fromJson("null", (Type) class1);
      Class<String> class3 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      Class<String> class4 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class4);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.UUID_FACTORY;
      Gson gson1 = new Gson();
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken1);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      StringBuffer stringBuffer0 = new StringBuffer(233);
      gson0.toJsonTree((Object) stringBuffer0);
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<URI> class0 = URI.class;
      JsonSerializer<URI> jsonSerializer0 = (JsonSerializer<URI>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<URI> jsonDeserializer0 = (JsonDeserializer<URI>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      TypeToken<URI> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URI_FACTORY;
      TreeTypeAdapter<URI> treeTypeAdapter0 = new TreeTypeAdapter<URI>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<URI>) treeTypeAdapter0);
      Class<StringBuilder> class1 = StringBuilder.class;
      TypeAdapter<StringBuilder> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newTypeHierarchyFactory(class1, typeAdapter0);
      Class<Byte> class2 = Byte.class;
      JsonSerializer<Object> jsonSerializer1 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer1 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson1 = new Gson();
      Class<Object> class3 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class3);
      TreeTypeAdapter<Object> treeTypeAdapter1 = new TreeTypeAdapter<Object>(jsonSerializer1, jsonDeserializer1, gson1, typeToken1, typeAdapterFactory1);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      treeTypeAdapter1.fromJsonTree(jsonNull0);
      TypeAdapters.newFactory(class2, class2, (TypeAdapter<? super Byte>) treeTypeAdapter1);
      System.setCurrentTimeMillis(10L);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<URI>) treeTypeAdapter0);
      Class<Integer> class4 = Integer.class;
      TypeToken<Integer> typeToken2 = TypeToken.get(class4);
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[3];
      intArray0[0] = 98;
      intArray0[1] = (-1412);
      intArray0[2] = (-646);
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      excluder1.create(gson0, typeToken2);
      TypeAdapterFactory typeAdapterFactory3 = TypeAdapters.newFactory(typeToken2, (TypeAdapter<Integer>) null);
      assertFalse(typeAdapterFactory3.equals((Object)typeAdapterFactory2));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6jdvY3;KR(cv`");
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Double> class1 = Double.TYPE;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      excluder0.create(gson0, typeToken0);
      ArrayTypeAdapter<Double> arrayTypeAdapter0 = new ArrayTypeAdapter<Double>(gson0, (TypeAdapter<Double>) null, class1);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson("[]", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<URL> class0 = URL.class;
      JsonArray jsonArray0 = new JsonArray();
      Class<StringBuffer> class1 = StringBuffer.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      gson0.toJsonTree((Object) locale0);
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      Class<String> class3 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class3);
      Short short0 = new Short((short)1687);
      // Undeclared exception!
      try { 
        TreeTypeAdapter.newFactoryWithMatchRawType(typeToken0, short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      gson0.toJsonTree((Object) locale0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      Class<StringBuffer> class2 = StringBuffer.class;
      ObjectConstructor<StringBuffer> objectConstructor0 = (ObjectConstructor<StringBuffer>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<StringBuffer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<StringBuffer>(objectConstructor0, hashMap0);
      Class<Long> class3 = Long.TYPE;
      TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, reflectiveTypeAdapterFactory_Adapter0, class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<StringBuffer>) typeAdapterRuntimeTypeWrapper0);
      TypeAdapter<String> typeAdapter0 = gson1.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("dG+^L");
      gson0.toJson((JsonElement) jsonPrimitive0);
      Class<Character> class0 = Character.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      Class<Byte> class2 = Byte.TYPE;
      try { 
        gson0.fromJson("dG+^L", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"dG+^L\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      String string0 = "com.google.gson.stream.JsonReader$1";
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("com.google.gson.stream.JsonReader$1", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.stream.JsonReader$1\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      gson0.toJson((Object) objectTypeAdapter0, (Type) class0);
      Class<Short> class1 = Short.class;
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Double> class2 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken0);
      Class<Double> class3 = Double.class;
      ArrayTypeAdapter<Double> arrayTypeAdapter0 = new ArrayTypeAdapter<Double>(gson0, (TypeAdapter<Double>) null, class3);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      gson0.fromJson(jsonElement0, class1);
      Gson gson1 = new Gson();
      Random.setNextRandom(3563);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.TIMESTAMP_FACTORY;
      Class<String> class4 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class4);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory((TypeToken<String>) null, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(3581);
      AtomicIntegerArray atomicIntegerArray1 = new AtomicIntegerArray(3581);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)8;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Class<BitSet> class1 = BitSet.class;
      gson0.fromJson(jsonElement0, class1);
      Gson gson1 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.URL_FACTORY;
      gson1.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.UUID_FACTORY;
      Gson gson2 = new Gson();
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory1, typeToken0);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1706);
      AtomicIntegerArray atomicIntegerArray1 = new AtomicIntegerArray(3582);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray1);
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Class<BitSet> class1 = BitSet.class;
      // Undeclared exception!
      gson0.fromJson(jsonElement0, class1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);
      Gson gson1 = new Gson();
      Class<String> class1 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      gson1.fromJson("null", class1);
      Class<JsonNull> class2 = JsonNull.class;
      gson0.fromJson((String) null, class2);
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CHARACTER_FACTORY;
      gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<BitSet> class3 = BitSet.class;
      try { 
        gson1.fromJson(jsonElement0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<String> class0 = String.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      JsonArray jsonArray0 = new JsonArray();
      Class<BitSet> class1 = BitSet.class;
      gson1.fromJson((JsonElement) jsonArray0, class1);
      Gson gson2 = new Gson();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) null);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<BitSet> class1 = BitSet.class;
      gson1.fromJson(jsonElement0, class1);
      Gson gson2 = new Gson();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Character> class0 = Character.TYPE;
      Gson gson1 = new Gson();
      Class<Integer> class1 = Integer.TYPE;
      String string0 = "com.google.gson.internal.bind.TypeAdapters$12";
      Class<Short> class2 = Short.TYPE;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$12", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$12\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      Gson gson1 = new Gson();
      Class<Integer> class2 = Integer.TYPE;
      String string0 = "r:T1dy#UBQN*zz2vWs,";
      try { 
        gson0.fromJson("r:T1dy#UBQN*zz2vWs,", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonObject0);
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<BitSet> class1 = BitSet.class;
      try { 
        gson0.fromJson(jsonElement0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1706);
      AtomicIntegerArray atomicIntegerArray1 = new AtomicIntegerArray(1706);
      Locale locale0 = Locale.JAPAN;
      Currency currency0 = Currency.getInstance(locale0);
      gson1.toJsonTree((Object) currency0);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = DateTypeAdapter.FACTORY;
      Gson gson2 = new Gson();
      TypeAdapter<String> typeAdapter0 = gson2.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<UUID> class0 = UUID.class;
      Gson gson2 = new Gson();
      Class<UUID> class1 = UUID.class;
      gson2.fromJson("null", class1);
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) jsonObject0);
      TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.UUID_FACTORY;
      Class<Short> class1 = Short.class;
      try { 
        gson0.fromJson(jsonElement0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Character> class0 = Character.TYPE;
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<Short> class2 = Short.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<UUID> class0 = UUID.class;
      gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$22", class0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = Boolean.FALSE;
      jsonArray0.add(boolean0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [false]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.toJson((JsonElement) null);
      Class<Float> class0 = Float.TYPE;
      gson0.fromJson("null", (Type) class0);
      int int0 = 3559;
      StringBuilder stringBuilder0 = new StringBuilder(3559);
      MockInetAddress.getByName("Q)\rzQ6r2*~ZO");
      Gson gson2 = new Gson();
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      StringBuffer stringBuffer0 = new StringBuffer("null");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      typeToken0.toString();
      Currency.getInstance(locale0);
      AtomicInteger atomicInteger0 = new AtomicInteger(2863);
      gson0.toJson((Object) atomicInteger0, (Appendable) stringBuilder0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      Gson gson3 = new Gson();
      // Undeclared exception!
      try { 
        TreeTypeAdapter.newFactoryWithMatchRawType(typeToken0, "Q)\rzQ6r2*~ZO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson1 = new Gson();
      gson1.fromJson("com.google.gson.internal.bind.TypeAdapters$4", class0);
      gson1.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      JsonObject jsonObject0 = new JsonObject();
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Class<Character> class2 = Character.class;
      try { 
        gson1.fromJson((JsonElement) jsonObject0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aFileURI;
      MockUUID.fromString("G;s");
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("G;s", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.toJson((JsonElement) null);
      Class<InetAddress> class0 = InetAddress.class;
      gson1.fromJson("null", class0);
      gson1.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      JsonObject jsonObject0 = new JsonObject();
      gson1.toJsonTree((Object) jsonObject0);
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Gson gson2 = new Gson();
      Class<Double> class2 = Double.TYPE;
      Class<Double> class3 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      Class<JsonPrimitive> class4 = JsonPrimitive.class;
      TypeToken<JsonPrimitive> typeToken1 = TypeToken.get(class4);
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      Gson gson3 = new Gson();
      excluder1.create(gson3, typeToken1);
      TypeAdapters.newFactory(typeToken1, (TypeAdapter<JsonPrimitive>) null);
      Class<Object> class5 = Object.class;
      TypeToken<Object> typeToken2 = TypeToken.get(class5);
      TypeAdapter<Object> typeAdapter0 = gson2.getAdapter(typeToken2);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken2, typeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Character> class0 = Character.TYPE;
      Gson gson1 = new Gson();
      Class<Integer> class1 = Integer.TYPE;
      gson1.fromJson("null", (Type) class0);
      StringBuilder stringBuilder1 = new StringBuilder(11);
      MockInetAddress.getByName("GYR@v[tJQ");
      Gson gson2 = new Gson();
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      StringBuffer stringBuffer0 = new StringBuffer("IGb<J}j_rxpa2O:");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Currency.getInstance(locale0);
      // Undeclared exception!
      try { 
        MockURI.create("GYR@v[tJQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: GYR@v[tJQ
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Character> class0 = Character.TYPE;
      Gson gson1 = new Gson();
      Class<Integer> class1 = Integer.TYPE;
      try { 
        gson1.fromJson("dG+^L", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"dG+^L\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-1.0));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      gson0.toJson((JsonElement) jsonPrimitive0);
      Gson gson1 = new Gson();
      gson1.toString();
      gson1.toJsonTree((Object) double0);
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Gson gson2 = new Gson();
      Class<Double> class1 = Double.TYPE;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      String string0 = "com.google.gson.internal.bind.TypeAdapters$10";
      jsonObject0.remove("com.google.gson.internal.bind.TypeAdapters$10");
      Class<URL> class0 = URL.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$10", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: com.google.gson.internal.bind.TypeAdapters$10
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuilder stringBuilder1 = new StringBuilder(6);
      MockInetAddress.getByName("");
      StringBuilder stringBuilder2 = new StringBuilder(2800);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      UUID uUID0 = MockUUID.randomUUID();
      gson0.toJson((Object) uUID0, (Type) class0, (Appendable) stringBuilder1);
      Class<Calendar> class1 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);
      Class<MockCalendar> class2 = MockCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends MockCalendar>) class2, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      Class<Byte> class3 = Byte.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, class3, (TypeAdapter<? super Byte>) objectTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Object> class0 = Object.class;
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      ObjectTypeAdapter objectTypeAdapter1 = new ObjectTypeAdapter(gson0);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) objectTypeAdapter1);
      Class<Character> class2 = Character.TYPE;
      try { 
        gson0.fromJson("dG+^L", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: dG+^L
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.remove("com.google.gson.internal.bind.TypeAdapters$10");
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      typeToken0.getType();
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonObject jsonObject0 = new JsonObject();
      String string0 = "com.google.gson.internal.bind.TypeAdapters$10";
      jsonObject0.remove("com.google.gson.internal.bind.TypeAdapters$10");
      Class<URL> class1 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class1);
      typeToken0.getType();
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(class0);
      Class<Float> class1 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class1);
      PipedReader pipedReader0 = new PipedReader(1667);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      String string0 = gson0.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1682);
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      gson0.toJsonTree((Object) uRL1);
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      Class<Double> class2 = Double.class;
      TypeToken.get(class2);
      Class<Double> class3 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class3);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      Class<URL> class4 = URL.class;
      TypeToken<URL> typeToken1 = TypeToken.get(class4);
      ObjectConstructor<URL> objectConstructor0 = (ObjectConstructor<URL>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<URL> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<URL>(objectConstructor0, hashMap0);
      reflectiveTypeAdapterFactory_Adapter0.nullSafe();
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, (TypeAdapter<URL>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 0L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '[';
      charArray0[2] = '|';
      charArray0[3] = '_';
      charArray0[4] = '<';
      stringBuilder2.append(charArray0);
      StringBuilder stringBuilder3 = new StringBuilder();
      stringBuilder1.insert(0, 0.0);
      Gson gson1 = new Gson();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      gson1.toJsonTree((Object) uRL0);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken.get(class1);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      Class<BitSet> class2 = BitSet.class;
      TypeAdapter<BitSet> typeAdapter1 = TypeAdapters.BIT_SET;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class2, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      gson0.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      StringBuffer stringBuffer0 = new StringBuffer("null");
      gson0.toJson((Object) null, (Appendable) stringBuffer0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ObjectConstructor<String> objectConstructor0 = (ObjectConstructor<String>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<String> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<String>(objectConstructor0, hashMap0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<String>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-16L);
      longArray0[1] = (-102L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      gson0.toJson(jsonElement0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken1, typeAdapter0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      Gson gson1 = new Gson();
      Class<String> class0 = String.class;
      gson0.toJsonTree((Object) "", (Type) class0);
      int int0 = 2800;
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      MockInetAddress.getByName("");
      int int1 = 12;
      StringBuilder stringBuilder1 = new StringBuilder(12);
      Gson gson2 = new Gson();
      Class<JsonNull> class1 = JsonNull.class;
      try { 
        gson2.fromJson("W`)0])3~0B2*u(C", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      Gson gson1 = new Gson();
      Class<String> class0 = String.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "", (Type) class0);
      gson1.toJson(jsonElement0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.remove("");
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson((JsonElement) jsonObject0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      System.setCurrentTimeMillis((-1L));
      Character character0 = new Character('P');
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      gson0.toJsonTree((Object) null, type0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("'");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      excluder1.withExclusionStrategy(exclusionStrategy0, false, false);
      Byte byte0 = new Byte((byte)12);
      gson0.toJson((Object) byte0, (Type) class0, (Appendable) stringBuilder0);
      Class<MockCalendar> class3 = MockCalendar.class;
      Class<Calendar> class4 = Calendar.class;
      gson1.getAdapter(class4);
      Class<MockCalendar> class5 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken1 = TypeToken.get(class5);
      TypeAdapter<MockCalendar> typeAdapter1 = gson1.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends MockCalendar>) class3, (TypeAdapter<? super MockCalendar>) typeAdapter1);
      Class<Long> class6 = Long.class;
      TypeToken<Long> typeToken2 = TypeToken.get(class6);
      TypeAdapter<Long> typeAdapter2 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken2);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(class6, typeAdapter2);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Byte byte0 = new Byte((byte) (-80));
      gson0.toJsonTree((Object) byte0);
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      excluder0.disableInnerClassSerialization();
      Class<Object> class1 = Object.class;
      TypeToken.get(class1);
      MockInetAddress.getByName("'");
      StringBuilder stringBuilder0 = new StringBuilder(447);
      gson0.toJson((Object) null, (Type) class1, (Appendable) stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Short short0 = new Short((short)8);
      gson0.toJson((Object) short0, (Appendable) stringBuffer0);
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory((TypeToken<Double>) null, (TypeAdapter<Double>) null);
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Short>) null);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<String> class0 = String.class;
      gson1.toJsonTree((Object) gson0);
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson1.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken.get(class1);
      gson1.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-102L);
      longArray0[2] = 1211L;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J3aE%");
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet.valueOf(longBuffer0);
      gson0.toJsonTree((Object) longBuffer0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      gson0.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      gson0.toJsonTree((Object) atomicIntegerArray0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      gson0.toJsonTree((Object) atomicBoolean0);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CLASS_FACTORY;
      gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      Class<InetAddress> class2 = InetAddress.class;
      TypeToken.get((Type) class0);
      TypeToken.get(class2);
      // Undeclared exception!
      try { 
        TypeToken.getParameterized(class1, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-16L);
      longArray0[1] = (-102L);
      longArray0[2] = 1211L;
      longArray0[3] = 0L;
      longArray0[4] = (-1041L);
      longArray0[5] = 1L;
      longArray0[6] = (-793L);
      LongBuffer.wrap(longArray0);
      JsonObject jsonObject0 = new JsonObject();
      Gson gson1 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(1707);
      gson1.toJson((Object) atomicBoolean0, (Type) class0, (Appendable) charBuffer0);
      Class<Calendar> class1 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);
      Class<MockCalendar> class2 = MockCalendar.class;
      Class<MockCalendar> class3 = MockCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends MockCalendar>) class3, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("com.google.gson.internal.bind.TypeAdapters$2");
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, 0.0);
      gson0.toJsonTree((Object) stringBuilder3);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      Class<InetAddress> class1 = InetAddress.class;
      TypeToken.get(class1);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      excluder0.create(gson0, typeToken0);
      Class<String> class2 = String.class;
      Class<MockCalendar> class3 = MockCalendar.class;
      excluder0.excludeClass(class3, true);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-102L);
      longArray0[2] = 1211L;
      longArray0[3] = 0L;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J3aE%");
      longArray0[4] = (-1041L);
      longArray0[5] = 1L;
      longArray0[6] = (-793L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      gson0.toJsonTree((Object) bitSet0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      TypeToken.get(class2);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      gson0.toString();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Gson gson1 = new Gson();
      Class<Double> class2 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1709);
      gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class1);
      Gson gson1 = new Gson();
      Class<UUID> class2 = UUID.class;
      TypeToken<UUID> typeToken2 = TypeToken.get(class2);
      Excluder excluder0 = new Excluder();
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, false, true);
      excluder1.create(gson1, typeToken2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken2, (TypeAdapter<UUID>) null);
      gson1.getDelegateAdapter(typeAdapterFactory0, typeToken1);
      Class<InetAddress> class3 = InetAddress.class;
      TypeToken.get(class3);
      TypeAdapter<String> typeAdapter0 = gson1.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, typeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(class0);
      Class<Float> class1 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, class1);
      Character character0 = new Character('`');
      typeAdapterRuntimeTypeWrapper0.toJson((Character) null);
      Class<Character> class2 = Character.class;
      Class<Character> class3 = Character.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class2, class3, (TypeAdapter<? super Character>) typeAdapter0);
      Class<Calendar> class4 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter1 = gson0.getAdapter(class4);
      Class<MockCalendar> class5 = MockCalendar.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends MockCalendar>) class5, (TypeAdapter<? super MockCalendar>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Class<Object> class1 = Object.class;
      Class<JsonObject> class2 = JsonObject.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<?>) class2, (TypeAdapter<? super Object>) typeAdapter0);
      MockInetAddress.getByName("'");
      StringBuilder stringBuilder0 = new StringBuilder(6);
      gson0.toJson((Object) "'", (Type) class0, (Appendable) stringBuilder0);
      Class<String> class3 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class3);
      Class<InetAddress> class4 = InetAddress.class;
      TypeToken.get(class4);
      TypeAdapter<String> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken1);
      assertNotNull(typeAdapter1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("'");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      Class<String> class2 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class2);
      StringBuffer stringBuffer0 = new StringBuffer("");
      gson0.toJson((Object) stringBuffer0, (Appendable) stringBuilder0);
      Class<InetAddress> class3 = InetAddress.class;
      TypeToken.get(class3);
      TypeAdapter<String> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken1);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken1, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.TYPE;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      excluder0.disableInnerClassSerialization();
      TypeToken.get(class0);
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) objectTypeAdapter0);
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      MockInetAddress.getByName("");
      StringBuilder stringBuilder1 = new StringBuilder(12);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("", "");
      gson1.toJson((Object) jsonObject0, (Type) class0, (Appendable) stringBuilder1);
      Class<MockCalendar> class2 = MockCalendar.class;
      Class<Calendar> class3 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson1.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends MockCalendar>) class2, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      MockInetAddress.getByName("");
      StringBuilder stringBuilder1 = new StringBuilder(12);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      gson1.toJson((Object) jsonObject0, (Type) class0, (Appendable) stringBuilder1);
      Class<MockCalendar> class2 = MockCalendar.class;
      Class<Calendar> class3 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter1 = gson1.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends MockCalendar>) class2, (TypeAdapter<? super MockCalendar>) typeAdapter1);
      assertNotSame(typeAdapterFactory1, typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      MockInetAddress.getByName("");
      StringBuilder stringBuilder1 = new StringBuilder(12);
      Gson gson1 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      gson1.toJson((Object) jsonObject0, (Type) class0, (Appendable) stringBuilder1);
      Class<String> class2 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class2);
      Class<InetAddress> class3 = InetAddress.class;
      TypeToken.get(class3);
      TypeAdapter<String> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken1, typeAdapter1);
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeToken<Short> typeToken2 = TypeToken.get(class1);
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, (JsonDeserializer<Short>) null, gson0, typeToken2, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<Short>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.class;
      Gson gson0 = new Gson();
      TypeAdapter<Character> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<Character> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Character>(gson0, typeAdapter0, (Type) null);
      Character character0 = new Character('x');
      typeAdapterRuntimeTypeWrapper0.toJson(character0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class1, (TypeAdapter<? super Character>) typeAdapterRuntimeTypeWrapper0);
      Class<MockCalendar> class2 = MockCalendar.class;
      Class<Calendar> class3 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter1 = gson0.getAdapter(class3);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class2, (Class<? extends MockCalendar>) class2, (TypeAdapter<? super MockCalendar>) typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = ObjectTypeAdapter.FACTORY;
      Class<Double> class0 = Double.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Double>) null);
      Class<InetAddress> class1 = InetAddress.class;
      Gson gson1 = new Gson();
      Class<MockCalendar> class2 = MockCalendar.class;
      gson1.fromJson((String) null, class2);
      Class<Object> class3 = Object.class;
      gson1.getAdapter(class3);
      try { 
        gson0.fromJson("FALSE", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a double but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      Gson gson1 = new Gson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.String. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      Class<Character> class2 = Character.class;
      Class<Currency> class3 = Currency.class;
      excluder0.excludeClass(class3, true);
      TypeToken<Character> typeToken1 = TypeToken.get(class2);
      excluder0.create(gson0, typeToken1);
      TypeAdapters.newFactory(class2, (TypeAdapter<Character>) null);
      Class<Character> class4 = Character.class;
      TypeAdapters.newFactory(class2, class4, (TypeAdapter<? super Character>) typeAdapter0);
      Class<StringBuffer> class5 = StringBuffer.class;
      TypeToken<StringBuffer> typeToken2 = TypeToken.get(class5);
      JsonSerializer<StringBuffer> jsonSerializer0 = (JsonSerializer<StringBuffer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<StringBuffer> jsonDeserializer0 = (JsonDeserializer<StringBuffer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.CURRENCY_FACTORY;
      TreeTypeAdapter<StringBuffer> treeTypeAdapter0 = new TreeTypeAdapter<StringBuffer>(jsonSerializer0, jsonDeserializer0, gson0, typeToken2, typeAdapterFactory1);
      TypeAdapterRuntimeTypeWrapper<StringBuffer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<StringBuffer>(gson0, treeTypeAdapter0, class1);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactory(typeToken2, (TypeAdapter<StringBuffer>) typeAdapterRuntimeTypeWrapper0);
      assertFalse(typeAdapterFactory2.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeToken.get(class0);
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      String string0 = "END_DOCUMENT";
      int int0 = (-1332);
      excluder0.disableInnerClassSerialization();
      gson0.toString();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Short short0 = new Short((short) (-1261));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((short) (-1261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      TypeAdapters.newFactoryForMultipleTypes(class0, (Class<?>) class1, (TypeAdapter<? super Object>) typeAdapter0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      StringBuilder stringBuilder0 = new StringBuilder(2800);
      gson0.toJson((Object) inetAddress0, (Type) class0, (Appendable) stringBuilder0);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken1 = TypeToken.get(class2);
      Gson gson1 = new Gson();
      excluder0.create(gson1, typeToken1);
      TypeAdapters.newTypeHierarchyFactory(class2, (TypeAdapter<MockGregorianCalendar>) null);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        gson1.getDelegateAdapter((TypeAdapterFactory) excluder1, (TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeToken<Locale> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      Class<Locale> class1 = Locale.class;
      TypeToken.getArray(class1);
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      typeAdapterRuntimeTypeWrapper0.nullSafe();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Locale>) typeAdapterRuntimeTypeWrapper0);
      Class<Locale> class2 = Locale.class;
      TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Locale>) class2, (TypeAdapter<? super Locale>) typeAdapterRuntimeTypeWrapper0);
      Class<Calendar> class3 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter1 = TypeAdapters.CALENDAR;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class3, typeAdapter1);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = ObjectTypeAdapter.FACTORY;
      Class<JsonObject> class1 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class1);
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      Class<JsonPrimitive> class2 = JsonPrimitive.class;
      JsonSerializer<JsonPrimitive> jsonSerializer0 = (JsonSerializer<JsonPrimitive>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonPrimitive> jsonDeserializer0 = (JsonDeserializer<JsonPrimitive>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<JsonPrimitive> class3 = JsonPrimitive.class;
      TypeToken<JsonPrimitive> typeToken1 = TypeToken.get(class3);
      TreeTypeAdapter<JsonPrimitive> treeTypeAdapter0 = new TreeTypeAdapter<JsonPrimitive>(jsonSerializer0, jsonDeserializer0, gson0, typeToken1, typeAdapterFactory1);
      TypeAdapters.newFactory(class2, (TypeAdapter<JsonPrimitive>) treeTypeAdapter0);
      Class<AtomicInteger> class4 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken2 = TypeToken.get(class4);
      JsonSerializer<AtomicInteger> jsonSerializer1 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicInteger> jsonDeserializer1 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson1 = new Gson();
      typeToken2.equals(class3);
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter1 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer1, jsonDeserializer1, gson1, typeToken2, typeAdapterFactory1);
      TypeAdapters.newFactory(typeToken2, (TypeAdapter<AtomicInteger>) treeTypeAdapter1);
      Class<Calendar> class5 = Calendar.class;
      Class<GregorianCalendar> class6 = GregorianCalendar.class;
      ObjectConstructor<Object> objectConstructor0 = (ObjectConstructor<Object>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap1 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>(hashMap0);
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>(objectConstructor0, hashMap1);
      TypeAdapterFactory typeAdapterFactory2 = TypeAdapters.newFactoryForMultipleTypes(class5, (Class<? extends Calendar>) class6, (TypeAdapter<? super Calendar>) reflectiveTypeAdapterFactory_Adapter0);
      TypeAdapters.newFactory(typeToken0, typeAdapter0);
      Class<Byte> class7 = Byte.class;
      Class<Byte> class8 = Byte.class;
      TypeAdapterFactory typeAdapterFactory3 = TypeAdapters.newFactoryForMultipleTypes(class7, (Class<? extends Byte>) class8, (TypeAdapter<? super Byte>) reflectiveTypeAdapterFactory_Adapter0);
      assertNotSame(typeAdapterFactory3, typeAdapterFactory2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Double>) null);
      Class<InetAddress> class1 = InetAddress.class;
      Gson gson0 = new Gson();
      Class<MockCalendar> class2 = MockCalendar.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("FALSE", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to invoke protected org.evosuite.runtime.mock.java.util.MockCalendar() with no args
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Locale>) null);
      Class<InetAddress> class1 = InetAddress.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super InetAddress>) objectTypeAdapter0);
      Class<Short> class2 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class2);
      Excluder excluder0 = gson0.excluder();
      excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder0.create(gson0, typeToken0);
      TypeAdapters.newFactory(typeToken0, (TypeAdapter<Short>) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        MockInetAddress.getByAddress("", (byte[]) null);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Double>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      Class<String> class2 = String.class;
      ObjectConstructor<String> objectConstructor0 = (ObjectConstructor<String>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<String> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<String>(objectConstructor0, hashMap0);
      ArrayTypeAdapter<String> arrayTypeAdapter0 = new ArrayTypeAdapter<String>(gson0, reflectiveTypeAdapterFactory_Adapter0, class1);
      TypeAdapters.newFactory(class2, class1, (TypeAdapter<? super String>) arrayTypeAdapter0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      TypeToken<UUID> typeToken0 = TypeToken.get(class0);
      TypeAdapter<UUID> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }
}
