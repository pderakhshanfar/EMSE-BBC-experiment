/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:28:52 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Integer> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Integer>) class1, (TypeAdapter<? super Integer>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("&lSC", class0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add("com.google.gson.internal.bind.TypeAdapters$26");
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$26\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("F`I[fJXAimw");
      Class<URI> class0 = URI.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 1: F`I
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypeAdapter<Character> typeAdapter0 = TypeAdapters.CHARACTER;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Character>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Gson gson0 = new Gson();
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>((JsonSerializer<Short>) null, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      Short short0 = new Short((short)34);
      JsonElement jsonElement0 = treeTypeAdapter0.toJsonTree(short0);
      Short short1 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(short1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<JsonArray> class0 = JsonArray.class;
      JsonArray jsonArray1 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertFalse(jsonArray1.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      StringReader stringReader0 = new StringReader("Zi!]]i03");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-1662));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(short0).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<Short> treeTypeAdapter0 = new TreeTypeAdapter<Short>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, (TypeAdapterFactory) null);
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Short short1 = treeTypeAdapter0.fromJsonTree(jsonPrimitive0);
      assertEquals((short) (-1662), (short)short1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson("&R1HNZKnM>", class0);
      assertFalse(inet4Address0.isMulticastAddress());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = gson0.toJson((Object) stringBuffer0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('N');
      jsonObject0.addProperty("]", character0);
      String string0 = gson0.toJson((Object) jsonObject0);
      assertEquals("{\"]\":\"N\"}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add("");
      String string0 = gson0.toJson((JsonElement) jsonArray0);
      assertEquals("[\"\"]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("gqYmx!b_zEz");
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("\"gqYmx!b_zEz\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Integer integer0 = new Integer(32);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(integer0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      String string0 = gson0.toJson((Object) locale0);
      assertEquals("\"zh_TW\"", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("LOWER_CASE_WITH_UNDERSCORES", class0);
      assertEquals("lower_CASE_WITH", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("\"\"", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("null", class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("\"zh_TW\"", class0);
      assertEquals("zh_TW", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1479), 11, 11, (-1479), 11);
      String string0 = gson0.toJson((Object) mockGregorianCalendar0, (Type) class0);
      assertEquals("{\"year\":1480,\"month\":9,\"dayOfMonth\":10,\"hourOfDay\":9,\"minute\":11,\"second\":0}", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.fromString("A^St$DYYVs65");
      String string0 = gson0.toJson((Object) uUID0);
      assertEquals("\"00000000-0100-4000-8200-000003000000\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      UUID uUID0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<UUID> class0 = UUID.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getByName("o");
      String string0 = gson0.toJson((Object) inetAddress0);
      assertEquals("\"200.42.42.0\"", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson("null", class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) uRI0);
      assertEquals("\"http://foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapter<String> typeAdapter0 = TypeAdapters.STRING;
      Class<String> class0 = String.class;
      ArrayTypeAdapter<String> arrayTypeAdapter0 = new ArrayTypeAdapter<String>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<URI> class1 = URI.class;
      URI uRI0 = gson0.fromJson(jsonElement0, class1);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = gson0.toJson((Object) uRL0);
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Byte byte0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("Expected");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: Expected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<StringBuffer> class0 = StringBuffer.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      String string0 = gson0.toJson((Object) stringBuilder0);
      assertEquals("\"\\u0000\"", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('m');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"m\"", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("j{bDk.>]|epvVKNQ");
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Character> class0 = Character.TYPE;
      Byte byte0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      StringReader stringReader0 = new StringReader("Factory[typeHierarchy=");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Factory
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Long> class0 = Long.class;
      Byte byte0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      StringReader stringReader0 = new StringReader("Expected");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Expected\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) atomicIntegerArray0);
      assertEquals("[0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      long[] longArray0 = new long[9];
      longArray0[0] = 1145L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson(jsonElement0, class0);
      assertEquals("[1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]", atomicIntegerArray0.toString());
      assertNotNull(atomicIntegerArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Integer integer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("Bu>r{!>gt  u`SWe?d");
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Bu>r\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      AtomicBoolean atomicBoolean0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(atomicBoolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.Streams$AppendableWriter");
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.Streams$AppendableWriter\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.TYPE;
      Locale locale0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("Expected");
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Expected\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      StringReader stringReader0 = new StringReader(string0);
      char[] charArray0 = new char[7];
      stringReader0.read(charArray0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 23 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Boolean> class0 = Boolean.TYPE;
      Byte byte0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      StringReader stringReader0 = new StringReader(string0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<BitSet> class0 = BitSet.class;
      TypeToken<BitSet> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      Locale locale0 = gson0.fromJson(jsonElement0, type0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("@F8+J9A?xm<4[JS][");
      Class<BitSet> class0 = BitSet.class;
      TypeToken<BitSet> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson((Reader) stringReader0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonSerializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonSerializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.TypeAdapter$1");
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = gson0.toJson((Object) currency0);
      assertEquals("\"TWD\"", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1747));
      String string0 = gson0.toJson((Object) atomicInteger0);
      assertEquals("-1747", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("h!)BT)PN%?b", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"h!)BT)PN%?b\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      String string0 = gson0.toJson((Object) atomicBoolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$4", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Character>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      Class<URI> class1 = URI.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends URI>) class1, (TypeAdapter<? super URI>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3343, "A5'0cPqEd+WocffiU");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      String string0 = gson0.toJson((Object) mockGregorianCalendar0);
      assertNotNull(string0);
  }
}
