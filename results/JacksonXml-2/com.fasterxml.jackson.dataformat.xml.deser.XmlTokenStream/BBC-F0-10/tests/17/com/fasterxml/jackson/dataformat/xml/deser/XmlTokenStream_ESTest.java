/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:28:49 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.NoSuchElementException;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.util.StreamReader2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, streamReader2Delegate0);
      xmlTokenStream0._nextLocalName = "";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._textValue = "";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text= repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, readerConfig0);
      xmlTokenStream0._namespaceURI = "] repeatElement=";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, "AVuj");
      xmlTokenStream0._repeatElement = 1;
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=1 wrapper=[null] repeatElement=1 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._attributeCount = 2;
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=2 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.skipEndElement();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=2 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._repeatElement = 6;
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, streamReader2Delegate0);
      xmlTokenStream0._nextLocalName = "`78&GoQS9wd<";
      xmlTokenStream0.skipEndElement();
      assertFalse(wstxDOMWrappingReader0.isStartElement());
      assertEquals(2, wstxDOMWrappingReader0.getEventType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._nextNamespaceURI = "";
      int int0 = xmlTokenStream0.next();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._nextAttributeIndex = (-1);
      xmlTokenStream0._currentState = 4;
      xmlTokenStream0.skipEndElement();
      assertFalse(wstxDOMWrappingReader0.isStartElement());
      assertTrue(wstxDOMWrappingReader0.isEndElement());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 6;
      xmlTokenStream0.convertToString();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 7;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._namespaceURI = "0ktp:![HT>";
      xmlTokenStream0.repeatStartElement();
      assertEquals(4, XmlTokenStream.XML_ATTRIBUTE_VALUE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 7;
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.skipEndElement();
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._textValue = "";
      String string0 = xmlTokenStream0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._namespaceURI = " wrapper=[";
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals(" wrapper=[", xmlTokenStream0.getNamespaceURI());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      iIOMetadataNode0.setAttributeNS("h$", "h$", "h$");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, readerConfig0);
      xmlTokenStream0.next();
      xmlTokenStream0.getLocalName();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(streamReader2Delegate0, object0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream1.skipEndElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._attributeCount = 2;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, readerConfig0);
      xmlTokenStream0._repeatElement = (-1589);
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: -1589
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, readerConfig0);
      xmlTokenStream0._attributeCount = 500;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream1.next();
      // Undeclared exception!
      try { 
        xmlTokenStream1.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to find a tag, instead reached end of input
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 3;
      int int0 = xmlTokenStream0.next();
      assertEquals(4, xmlTokenStream0.getCurrentToken());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._handleRepeatElement();
      xmlTokenStream0.skipEndElement();
      assertFalse(wstxDOMWrappingReader0.isStartElement());
      assertTrue(wstxDOMWrappingReader0.isEndElement());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "Expected END_ELEMENT, got event of type ");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      int[] intArray0 = new int[4];
      wstxDOMWrappingReader0.readElementAsIntArray(intArray0, 7, 7);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0._currentState = 4;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode0.insertBefore(node0, iIOMetadataNode1);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      streamReader2Delegate0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, object0);
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 7;
      xmlTokenStream0.skipEndElement();
      assertEquals(2, wstxDOMWrappingReader0.getEventType());
      assertTrue(wstxDOMWrappingReader0.isEndElement());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 6;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      iIOMetadataNode0.setAttributeNS("h$", "h$", "h$");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, readerConfig0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      int int0 = xmlTokenStream0.next();
      assertFalse(xmlTokenStream0.hasAttributes());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.convertToString();
      assertTrue(wstxDOMWrappingReader0.isStartElement());
      assertEquals(1, wstxDOMWrappingReader0.getEventType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.skipAttributes();
      assertEquals(5, XmlTokenStream.XML_TEXT);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      iIOMetadataNode0.setAttributeNS("'; have '", "", "");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, streamReader2Delegate0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(wstxDOMWrappingReader0.isStartElement());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      StringReader stringReader0 = new StringReader("org.codehaus.stax2.preserveLocation");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader("[u;1.", (Reader) stringReader0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.getTokenLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      String string0 = xmlTokenStream0.getText();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      String string0 = xmlTokenStream0.getLocalName();
      assertNotNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, streamReader2Delegate0);
      xmlTokenStream0.getCurrentLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.getXmlReader();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.close();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.closeCompletely();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReader2Delegate streamReader2Delegate0 = new StreamReader2Delegate(wstxDOMWrappingReader0);
      streamReader2Delegate0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReader2Delegate0, wstxDOMWrappingReader0);
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }
}
