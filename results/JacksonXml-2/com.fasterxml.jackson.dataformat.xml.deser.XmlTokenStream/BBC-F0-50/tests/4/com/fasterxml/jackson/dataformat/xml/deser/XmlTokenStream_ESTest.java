/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 07:22:16 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.sax.WstxSAXParser;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.NoSuchElementException;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.StreamFilter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.XMLStreamReader2;
import org.codehaus.stax2.ri.Stax2FilteredStreamReader;
import org.codehaus.stax2.ri.Stax2ReaderAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0._nextLocalName = "org.codehaus.stax2.closeInputSource";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= state= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=org.codehaus.stax2.closeInputSource)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0._nextNamespaceURI = "http://java.sun.com/xml/stream/properties/report-cdata-event";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= state= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=1 nextAttr#=0 name= state= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " wrapper=[");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      ElementWrapper elementWrapper0 = xmlTokenStream0._currentWrapper;
      ElementWrapper elementWrapper1 = elementWrapper0.getParent();
      xmlTokenStream0._currentWrapper = elementWrapper1;
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      
      xmlTokenStream0.skipEndElement();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=2 attr#=0 nextAttr#=0 name= text=null repeat?=2 wrapper=[null] repeatElement=2 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0.skipEndElement();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=2 attr#=0 nextAttr#=0 name= state= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstee=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstee=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstee=");
      xmlTokenStream0._textValue = "zstee=";
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstete=");
      xmlTokenStream0._nextNamespaceURI = "";
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstete=");
      xmlTokenStream0._repeatElement = 5;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 5
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i8+i!N@{Y\"^U");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "i8+i!N@{Y\"^U");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("com.ctc.wstx.cfg.ErrorConsts");
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0._nextLocalName = "org.codehaus.stax2.closeInputSource";
      xmlTokenStream0.skipEndElement();
      assertEquals(" state=", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0._nextNamespaceURI = "http://java.sun.com/xml/stream/properties/report-cdata-event";
      xmlTokenStream0.skipEndElement();
      assertEquals(" state=", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "G)m26.xxcazT2*O*&d");
      iIOMetadataNode0.setAttribute("G)m26.xxcazT2*O*&d", "G)m26.xxcazT2*O*&d");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.setAttribute("IgNc", "IgNc");
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 3
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "G)m26.xxcazT2*O*&d");
      iIOMetadataNode0.setAttribute("G)m26.xxcazT2*O*&d", "G)m26.xxcazT2*O*&d");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      xmlTokenStream0._nextAttributeIndex = 1000;
      xmlTokenStream0.next();
      xmlTokenStream0.skipEndElement();
      assertTrue(wstxDOMWrappingReader0.hasName());
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "org.codehaus.stax2.internNsUris");
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 3
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ">Ebm^pyl6!");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "4y&\"b");
      xmlTokenStream0._attributeCount = (-784);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      
      xmlTokenStream0.skipEndElement();
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._textValue = "org.codehaus.stax2.reportPrologWhitespace";
      String string0 = xmlTokenStream0.getText();
      assertEquals("org.codehaus.stax2.reportPrologWhitespace", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("rtate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "rtate=");
      iIOMetadataNode0.setAttribute("rtate=", "rtate=");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      String string0 = xmlTokenStream0.getText();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstee=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstee=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstee=");
      xmlTokenStream0._repeatElement = 3;
      assertEquals("", xmlTokenStream0.getNamespaceURI());
      
      int int0 = xmlTokenStream0.next();
      assertEquals(1, int0);
      
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " nextAttr#=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      ElementWrapper elementWrapper0 = xmlTokenStream0._currentWrapper;
      ElementWrapper elementWrapper1 = ElementWrapper.matchingWrapper(elementWrapper0, " nextAttr#=", " nextAttr#=");
      xmlTokenStream0._currentWrapper = elementWrapper1;
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.getNamespaceURI();
      assertEquals(" nextAttr#=", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PQD2hf=DHq^M0C5");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "f3W");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      xmlTokenStream0.repeatStartElement();
      int int0 = xmlTokenStream0._handleRepeatElement();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, (String) null);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "w-\"2 yvd^rHr`");
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(wstxDOMWrappingReader0, "zstete=");
      wstxDOMWrappingReader0.getElementAsBinary();
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream1.skipEndElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " wrapper=[");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._currentWrapper = null;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      iIOMetadataNode0.setAttribute("zstete=", "zstete=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0._attributeCount = 1000;
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 1; element <zstete=> has 1 attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(wstxDOMWrappingReader0, pipedInputStream0);
      xmlTokenStream1.skipEndElement();
      xmlTokenStream1.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " wrapper=[");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._currentWrapper = null;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      wstxDOMWrappingReader0.getElementAsBinary();
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to find a tag, instead reached end of input
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0._attributeCount = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 0
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XMLStreamReader2 xMLStreamReader2_0 = Stax2ReaderAdapter.wrapIfNecessary(streamReaderDelegate0);
      streamReaderDelegate0.setParent(xMLStreamReader2_0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("rtate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "rtate=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals("_%)F?!/", xmlTokenStream0.getLocalName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zntee=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zntee=");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstete=");
      xmlTokenStream0._repeatElement = (-10);
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: -10
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " wrapper=[");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      ElementWrapper elementWrapper0 = xmlTokenStream0._currentWrapper;
      ElementWrapper elementWrapper1 = elementWrapper0.getParent();
      xmlTokenStream0._currentWrapper = elementWrapper1;
      xmlTokenStream0.skipEndElement();
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ">Em^pyl6!");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      ElementWrapper elementWrapper0 = xmlTokenStream0._currentWrapper;
      ElementWrapper elementWrapper1 = ElementWrapper.matchingWrapper(elementWrapper0, ">Em^pyl6!", ">Em^pyl6!");
      xmlTokenStream0._currentWrapper = elementWrapper1;
      xmlTokenStream0.skipEndElement();
      int int0 = xmlTokenStream0.next();
      assertTrue(wstxDOMWrappingReader0.isEndElement());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i8+i!N@{Y\"^U");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "i8+i!N@{Y\"^U");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 500;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i8+i!N@{Y\"^U");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "i8+i!N@{Y\"^U");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._currentState = 500;
      xmlTokenStream0.skipEndElement();
      assertEquals(6, XmlTokenStream.XML_END);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, pipedInputStream0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      int int0 = xmlTokenStream0.next();
      assertTrue(wstxDOMWrappingReader0.hasName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zytBe4=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zytBe4=");
      iIOMetadataNode0.setAttribute("zytBe4=", "zytBe4=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(wstxDOMWrappingReader0, streamFilter0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(stax2FilteredStreamReader0, sequenceInputStream0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(3, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.convertToString();
      assertTrue(wstxDOMWrappingReader0.isStartElement());
      assertEquals(0, wstxDOMWrappingReader0.getDepth());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " stat=");
      iIOMetadataNode0.setAttribute(" stat=", " stat=");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, pipedInputStream0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "org.codehaus.stax2.internNsUris");
      xmlTokenStream0.next();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipAttributes();
      assertNull(xmlTokenStream0.getText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.repeatStartElement();
      assertNull(xmlTokenStream0.getText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      iIOMetadataNode0.setAttribute("_%)F?!/", "_%)F?!/");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "_%)F?!/");
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "W<");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxInputFactory0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.skipEndElement();
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(2, wstxDOMWrappingReader0.getEventType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, readerConfig0);
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "W<");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxInputFactory0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      xmlTokenStream0.skipEndElement();
      assertFalse(wstxDOMWrappingReader0.isStartElement());
      assertEquals(2, wstxDOMWrappingReader0.getEventType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      StringReader stringReader0 = new StringReader("org.codehaus.stax2.internNames");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader("", (Reader) stringReader0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, (String) null);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "w-\"2 yvd^rHr`");
      xmlTokenStream0.getTokenLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " stat=");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, pipedInputStream0);
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("rtate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "rtate=");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      String string0 = xmlTokenStream0.getText();
      assertNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "zstete=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "zstete=");
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertEquals("zstete=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("zstete=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, (String) null);
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "w-\"2 yvd^rHr`");
      xmlTokenStream0.getCurrentLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.getXmlReader();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0.close();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " stat=");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, pipedInputStream0);
      xmlTokenStream0.closeCompletely();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H-vQb)W+");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "H-vQb)W+");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }
}
