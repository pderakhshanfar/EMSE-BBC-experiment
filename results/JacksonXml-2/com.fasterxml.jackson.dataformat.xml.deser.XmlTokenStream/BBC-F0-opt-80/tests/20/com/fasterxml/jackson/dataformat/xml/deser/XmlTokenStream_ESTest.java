/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 10:43:52 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.io.BranchingReaderSource;
import com.ctc.wstx.io.StreamBootstrapper;
import com.ctc.wstx.io.SystemId;
import com.ctc.wstx.sr.TypedStreamReader;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.StringReader;
import java.net.URL;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, "\"!z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      URL uRL0 = MockURL.getHttpExample();
      SystemId systemId0 = SystemId.construct("/akFg}n\"M;[E", uRL0);
      StringReader stringReader0 = new StringReader("/akFg}n\"M;[E");
      BranchingReaderSource branchingReaderSource0 = new BranchingReaderSource(readerConfig0, "/akFg}n\"M;[E", systemId0, stringReader0, true);
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      byte[] byteArray0 = new byte[3];
      StreamBootstrapper streamBootstrapper0 = StreamBootstrapper.getInstance("org.codehaus.stax2.closeInputSource", systemId0, byteArray0, 1000, (int) (byte)0);
      TypedStreamReader typedStreamReader0 = TypedStreamReader.createStreamReader(branchingReaderSource0, wstxInputFactory0, readerConfig0, streamBootstrapper0, true);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(typedStreamReader0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }
}
