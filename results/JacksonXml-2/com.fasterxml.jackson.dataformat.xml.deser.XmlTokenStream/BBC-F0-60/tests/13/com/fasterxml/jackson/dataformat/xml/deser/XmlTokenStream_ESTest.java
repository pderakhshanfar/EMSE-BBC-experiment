/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:20:06 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PushbackInputStream;
import java.util.NoSuchElementException;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.StreamFilter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._nextLocalName = "org.codehaus.stax2.reportPrologWhitespace";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name=org.codehaus.stax2.internNames text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=org.codehaus.stax2.reportPrologWhitespace)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.internNames", "");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=3 attr#=1 nextAttr#=0 name=org.codehaus.stax2.internNames text= repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0._nextAttributeIndex = 100000;
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=100000 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.skipEndElement();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=2 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0._textValue = "org.codehaus.stax2.closeInputSource";
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0._repeatElement = 3;
      xmlTokenStream0._nextLocalName = "com.ctc.wstx.lazyParsing";
      int int0 = xmlTokenStream0.next();
      assertEquals(1, int0);
      assertEquals("com.ctc.wstx.lazyParsing", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0._repeatElement = 100000;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 100000
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      xmlTokenStream0._namespaceURI = "org.codehaus.stax2.internNames";
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0._nextLocalName = "Current state not START_ELEMENT, END_ELEMENT, ENTITY_REFERENCE, PROCESSING_INSTRUCTION or DTD";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0._nextNamespaceURI = "";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.reportPrologWhitespace", "7>Q@~/.nOVY1'Svgv");
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.reportPrologWhitespace", "r<GH", "s;?,m\"8@G");
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000, 9);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, pushbackInputStream0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 3
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0._nextAttributeIndex = 128;
      xmlTokenStream0.skipEndElement();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "org.codehaus.stax2.internNsUris");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0.next();
      xmlTokenStream0._nextAttributeIndex = (-1400);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index -1399; element <org.codehaus.stax2.internNames> has 1 attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.closeInputSource");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNsUris", "org.codehaus.stax2.internNames", "org.codehaus.stax2.preserveLocation");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0._nextLocalName = "org.codehaus.stax2.preserveLocation";
      xmlTokenStream0.next();
      String string0 = xmlTokenStream0.convertToString();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("=%qL", "vqt-gg35!*B.*j'", "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0._nextNamespaceURI = "";
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0._currentState = 0;
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 0
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0._attributeCount = (-2408);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0._repeatElement = (-2432);
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: -2432
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.reportPrologWhitespace", "7>Q@~/.nOVY1'Svgv");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      xmlTokenStream0.getText();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.internNames", "");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      xmlTokenStream0.getText();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.closeInputSource");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      xmlTokenStream0._namespaceURI = "t8)bRfV{l";
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals("t8)bRfV{l", xmlTokenStream0.getNamespaceURI());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "m");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals("m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      
      xmlTokenStream0._currentState = 0;
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      // Undeclared exception!
      xmlTokenStream0.skipEndElement();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, "(Token stream:");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream1.skipEndElement();
      xmlTokenStream0._handleRepeatElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0._repeatElement = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, "(Token stream:");
      xmlTokenStream1.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._currentWrapper = null;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to find a tag, instead reached end of input
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) streamReaderDelegate0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0._nextAttributeIndex = (-4016);
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index -4016; element <org.codehaus.stax2.internNames> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "(Token stream:");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._currentWrapper = null;
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("=%qL", "vqt-gg35!*B.*j'", "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertFalse(xmlTokenStream0.hasAttributes());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0._currentState = (-429);
      int int0 = xmlTokenStream0.next();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._handleRepeatElement();
      xmlTokenStream0.skipEndElement();
      assertEquals(5, XmlTokenStream.XML_TEXT);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.getConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "UUU8VUWIb|Byf~", "http://java.sun.com/xml/stream/properties/report-cdata-event");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      assertEquals("http://java.sun.com/xml/stream/properties/report-cdata-event", xmlTokenStream0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "0g");
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxInputFactory0);
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 0
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._repeatElement = 2;
      xmlTokenStream0.skipEndElement();
      assertNull(xmlTokenStream0.getText());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, xMLStreamReader0);
      xmlTokenStream0._repeatElement = 2;
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.skipEndElement();
      assertEquals(6, XmlTokenStream.XML_END);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = wstxInputFactory0.createPrivateConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, readerConfig0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      int int0 = xmlTokenStream0.next();
      assertEquals("org.codehaus.stax2.internNames", xmlTokenStream0.getLocalName());
      assertEquals(1, int0);
      assertEquals("", xmlTokenStream0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "jdi", "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "");
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      int int0 = xmlTokenStream0.next();
      assertEquals("jdi", xmlTokenStream0.getLocalName());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.reportPrologWhitespace", "7>Q@~/.nOVY1'Svgv");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      // Undeclared exception!
      try { 
        xmlTokenStream0.convertToString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0.convertToString();
      assertEquals(1, wstxDOMWrappingReader0.getEventType());
      assertTrue(wstxDOMWrappingReader0.isStartElement());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS("org.codehaus.stax2.internNames", "org.codehaus.stax2.internNames", "");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.skipAttributes();
      assertEquals(5, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      iIOMetadataNode0.setAttributeNS("", "org.codehaus.stax2.internNsUris", "COMMENT");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.next();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.skipAttributes();
      assertEquals(1, XmlTokenStream.XML_START_ELEMENT);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.repeatStartElement();
      assertEquals(2, XmlTokenStream.XML_END_ELEMENT);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.closeInputSource");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      iIOMetadataNode0.setAttributeNS(":5", "", (String) null);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "com.ctc.wstx.lazyParsing");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.getTokenLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      String string0 = xmlTokenStream0.getText();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "m");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      xmlTokenStream0.getCurrentLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.getXmlReader();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.close();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "");
      xmlTokenStream0.closeCompletely();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNames");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.internNames");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      wstxInputFactory0.createFilteredReader((XMLStreamReader) wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }
}
