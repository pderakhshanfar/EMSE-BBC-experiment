/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 15:59:11 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.NoSuchElementException;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.StreamFilter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.ri.Stax2FilteredStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      xmlTokenStream0._nextLocalName = "org.codehaus.stax2.closeInputSource";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=org.codehaus.stax2.closeInputSource)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("{-o%wgbGD{qq:*x,", "org.codehaus.stax2.propDtdOverride", "] repeatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.toString();
      assertEquals(3, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.repeatStartElement();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name=org.codehaus.stax2.closeInputSource text=null repeat?=1 wrapper=[Wrapper: ROOT, matching: org.codehaus.stax2.closeInputSource] repeatElement=1 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.toString();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0._textValue = "1j";
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0._nextLocalName = "";
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0._repeatElement = 1024;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 1024
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.internNsUris");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "em.rhhPCU`~", "_Z|X)Jy)}EGD>f");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      assertEquals("em.rhhPCU`~", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode1);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals("", xmlTokenStream0.getLocalName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://java.sun.com/xml/stream/properties/report-cdata-event");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
      xmlTokenStream0._namespaceURI = "com.ctc.wstx.lazyParsing";
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0._nextLocalName = "com.ctc.wstx.lazyParsing";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0._nextNamespaceURI = "org.codehaus.stax2.preserveLocation";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0._nextAttributeIndex = (-3700);
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index -3700; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      iIOMetadataNode0.setAttribute("org.codehaus.stax2.closeInputSource", "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.next();
      xmlTokenStream0._nextAttributeIndex = 1;
      xmlTokenStream0.next();
      xmlTokenStream0.skipEndElement();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "org.codehaus.stax2.propDtdOverride");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0._nextLocalName = "";
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(5, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "org.codehaus.stax2.propDtdOverride");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0._nextNamespaceURI = "com.ctc.wstx.lazyParsing";
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.nextTag();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, bufferedInputStream0);
      xmlTokenStream0._attributeCount = (int) (byte) (-93);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.getCurrentToken();
      assertFalse(xMLStreamReader0.isStartElement());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.internNsUris");
      xmlTokenStream0._repeatElement = (-3122);
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: -3122
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "] re>pealement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      String string0 = xmlTokenStream0.getText();
      assertEquals(1, xMLStreamReader0.getEventType());
      assertEquals("] re>pealement=", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "] re>peatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.getText();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0._repeatElement = 3;
      xmlTokenStream0.next();
      xmlTokenStream0.getNamespaceURI();
      assertEquals(1, xMLStreamReader0.getEventType());
      assertTrue(xMLStreamReader0.isStartElement());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "org.codehaus.stax2.closeInputSource", "org.codehaus.stax2.internNsUris");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.next();
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertFalse(xMLStreamReader0.isStartElement());
      assertEquals("org.codehaus.stax2.internNsUris", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.repeatStartElement();
      int int0 = xmlTokenStream0._handleRepeatElement();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      xmlTokenStream1.next();
      xmlTokenStream1.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(xMLStreamReader0, (StreamFilter) null);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(stax2FilteredStreamReader0, (Object) null);
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.ri.Stax2FilteredStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      iIOMetadataNode0.setAttribute("org.codehaus.stax2.closeInputSource", "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream1.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current event END_ELEMENT, needs to be START_ELEMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, xmlTokenStream0);
      xmlTokenStream1._attributeCount = 5;
      // Undeclared exception!
      try { 
        xmlTokenStream1.skipEndElement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <org.codehaus.stax2.closeInputSource> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, object0);
      XmlTokenStream xmlTokenStream2 = new XmlTokenStream(xMLStreamReader0, xmlTokenStream1);
      xmlTokenStream2.next();
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0._repeatElement = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.preserveLocation");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
      xmlTokenStream0._repeatElement = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.next();
      xmlTokenStream0.skipEndElement();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0._repeatElement = 3;
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "org.codehaus.stax2.closeInputSource", "org.codehaus.stax2.internNsUris");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xMLStreamReader0.getEventType());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 0
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream1 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream1.next();
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to find a tag, instead reached end of input
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = (WstxDOMWrappingReader)wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      wstxDOMWrappingReader0.nextTag();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, byteArrayInputStream0);
      xmlTokenStream0._currentState = 524288;
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      int int0 = xmlTokenStream0.next();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0._currentState = 12;
      int int0 = xmlTokenStream0.next();
      assertFalse(xMLStreamReader0.isStartElement());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 6
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "] re>peatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      int int0 = xmlTokenStream0.next();
      assertTrue(xMLStreamReader0.hasName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "org.codehaus.stax2.propDtdOverride");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "org.codehaus.stax2.propDtdOverride", "^C");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.reportPrologWhitespace");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.propDtdOverride");
      iIOMetadataNode0.setAttributeNS("=Lr", "org.codehaus.stax2.closeInputSource", "org.codehaus.stax2.internNames");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(xMLStreamReader0, streamFilter0);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(stax2FilteredStreamReader0, object0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      // Undeclared exception!
      try { 
        xmlTokenStream0.convertToString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = (WstxDOMWrappingReader)wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      wstxDOMWrappingReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0.convertToString();
      assertEquals(1, wstxDOMWrappingReader0.getEventType());
      assertEquals(0, wstxDOMWrappingReader0.getDepth());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("com.ctc.wstx.lazyParsing", "org.codehaus.stax2.propDtdOverride", "] re>peatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("{-o%wgbGD{qq:*x,", "org.codehaus.stax2.propDtdOverride", "] repeatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.next();
      xmlTokenStream0.skipAttributes();
      assertEquals("org.codehaus.stax2.propDtdOverride", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.skipAttributes();
      assertEquals("org.codehaus.stax2.closeInputSource", xmlTokenStream0.getLocalName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.repeatStartElement();
      assertEquals(3, XmlTokenStream.XML_ATTRIBUTE_NAME);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      iIOMetadataNode0.setAttributeNS("{-o%wgbGD{qq:*x,", "org.codehaus.stax2.propDtdOverride", "] repeatElement=");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
      xmlTokenStream0.next();
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(2, xMLStreamReader0.getEventType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      xmlTokenStream0.getTokenLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      String string0 = xmlTokenStream0.getText();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("com.ctc.wstx.lazyParsing");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertEquals("com.ctc.wstx.lazyParsing", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.getCurrentLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "org.codehaus.stax2.propDtdOverride");
      xmlTokenStream0.getXmlReader();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, dOMSource0);
      xmlTokenStream0.close();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, wstxInputFactory0);
      xmlTokenStream0.closeCompletely();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.codehaus.stax2.closeInputSource");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "org.codehaus.stax2.reportPrologWhitespace");
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
      xMLStreamReader0.nextTag();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, object0);
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
