/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:20:22 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.io.StreamBootstrapper;
import com.ctc.wstx.io.SystemId;
import com.ctc.wstx.sax.WstxSAXParser;
import com.ctc.wstx.stax.WstxInputFactory;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.Reader;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.XMLStreamReader2;
import org.codehaus.stax2.ri.Stax2ReaderAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      XMLStreamReader2 xMLStreamReader2_0 = Stax2ReaderAdapter.wrapIfNecessary(streamReaderDelegate0);
      streamReaderDelegate0.setParent(xMLStreamReader2_0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
      SystemId systemId0 = SystemId.construct("little");
      byte[] byteArray0 = new byte[3];
      StreamBootstrapper streamBootstrapper0 = StreamBootstrapper.getInstance("org.codehaus.stax2.internNames", systemId0, byteArray0, 0, (-1224));
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      Reader reader0 = streamBootstrapper0.bootstrapInput(readerConfig0, true, 0);
      XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader("J?E/%HN,&IO7sP", reader0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, "com.ctc.wstx.lazyParsing");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      WstxSAXParser wstxSAXParser0 = new WstxSAXParser();
      ReaderConfig readerConfig0 = wstxSAXParser0.getStaxConfig();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }
}
