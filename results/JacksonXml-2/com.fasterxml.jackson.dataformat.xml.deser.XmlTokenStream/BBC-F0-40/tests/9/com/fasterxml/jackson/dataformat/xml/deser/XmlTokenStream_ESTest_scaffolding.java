/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Mar 05 16:27:23 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class XmlTokenStream_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/experiment"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("file.encoding", "ANSI_X3.4-1968"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(XmlTokenStream_ESTest_scaffolding.class.getClassLoader() ,
      "com.ctc.wstx.util.TextBuffer",
      "com.ctc.wstx.sr.ValidatingStreamReader",
      "com.ctc.wstx.sr.CompactNsContext",
      "com.ctc.wstx.io.WstxInputData",
      "com.ctc.wstx.api.ReaderConfig",
      "com.ctc.wstx.cfg.ParsingErrorMsgs",
      "com.ctc.wstx.sr.NsDefaultProvider",
      "com.ctc.wstx.io.AsciiReader",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DecoderBase",
      "org.codehaus.stax2.DTDInfo",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntegerDecoder",
      "org.codehaus.stax2.validation.ValidationProblemHandler",
      "com.ctc.wstx.exc.WstxParsingException",
      "com.ctc.wstx.io.StreamBootstrapper",
      "com.ctc.wstx.util.DataUtil",
      "com.ctc.wstx.util.SymbolTable$Bucket",
      "com.ctc.wstx.util.BaseNsContext",
      "org.codehaus.stax2.validation.ValidationContext",
      "com.ctc.wstx.sr.TypedStreamReader",
      "org.codehaus.stax2.validation.XMLValidationProblem",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory",
      "com.ctc.wstx.io.BaseReader",
      "com.ctc.wstx.io.InputSourceFactory",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder",
      "com.ctc.wstx.io.UTF32Reader",
      "org.codehaus.stax2.validation.XMLValidationSchema",
      "org.codehaus.stax2.AttributeInfo",
      "com.ctc.wstx.io.ReaderBootstrapper",
      "com.ctc.wstx.util.SymbolTable",
      "com.ctc.wstx.sr.InputProblemReporter",
      "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder",
      "com.ctc.wstx.io.WstxInputSource",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DoubleArrayDecoder",
      "com.ctc.wstx.io.CharArraySource",
      "com.ctc.wstx.sr.BasicStreamReader",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntArrayDecoder",
      "org.codehaus.stax2.ri.typed.StringBase64Decoder",
      "org.codehaus.stax2.typed.TypedArrayDecoder",
      "org.codehaus.stax2.typed.TypedXMLStreamException",
      "org.codehaus.stax2.validation.DTDValidationSchema",
      "com.ctc.wstx.util.DefaultXmlSymbolTable",
      "org.codehaus.stax2.XMLStreamProperties",
      "com.ctc.wstx.io.BranchingReaderSource",
      "org.codehaus.stax2.validation.XMLValidator",
      "com.ctc.wstx.exc.WstxUnexpectedCharException",
      "com.ctc.wstx.util.StringVector",
      "org.codehaus.stax2.LocationInfo",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$QNameDecoder",
      "org.codehaus.stax2.XMLEventReader2",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$LongDecoder",
      "com.ctc.wstx.ent.IntEntity",
      "org.codehaus.stax2.typed.Base64Variant",
      "org.codehaus.stax2.ri.typed.Base64DecoderBase",
      "org.codehaus.stax2.XMLStreamReader2",
      "com.ctc.wstx.io.MergedStream",
      "com.ctc.wstx.dtd.DTDId",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatDecoder",
      "com.ctc.wstx.ent.EntityDecl",
      "org.codehaus.stax2.validation.ValidatorPair",
      "com.ctc.wstx.api.WstxInputProperties$ParsingMode",
      "com.ctc.wstx.exc.WstxIOException",
      "com.ctc.wstx.sr.StreamReaderImpl",
      "com.ctc.wstx.util.TextBuilder",
      "com.ctc.wstx.io.SystemId",
      "com.ctc.wstx.io.ReaderSource",
      "com.ctc.wstx.sr.AttributeCollector",
      "org.codehaus.stax2.ri.Stax2ReaderAdapter",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$LongArrayDecoder",
      "com.ctc.wstx.io.ISOLatinReader",
      "org.codehaus.stax2.ri.evt.BaseEventImpl",
      "com.ctc.wstx.api.WstxInputProperties",
      "org.codehaus.stax2.typed.TypedValueDecoder",
      "com.ctc.wstx.cfg.InputConfigFlags",
      "com.ctc.wstx.sr.ElemCallback",
      "org.codehaus.stax2.evt.XMLEvent2",
      "com.ctc.wstx.io.BaseInputSource",
      "com.ctc.wstx.sr.InputElementStack",
      "com.ctc.wstx.io.InputBootstrapper",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$BooleanDecoder",
      "com.ctc.wstx.dtd.DTDSubset",
      "org.codehaus.stax2.XMLInputFactory2",
      "com.ctc.wstx.io.UTF8Reader",
      "org.codehaus.stax2.typed.TypedXMLStreamReader",
      "com.ctc.wstx.util.TextBuffer$BufferReader",
      "com.ctc.wstx.exc.WstxException",
      "com.ctc.wstx.evt.WEntityDeclaration",
      "com.ctc.wstx.exc.WstxValidationException",
      "com.ctc.wstx.util.InternCache",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DoubleDecoder",
      "com.ctc.wstx.sr.ReaderCreator",
      "org.codehaus.stax2.XMLStreamLocation2",
      "com.ctc.wstx.sr.StreamScanner",
      "com.ctc.wstx.util.EmptyNamespaceContext",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DecimalDecoder",
      "com.ctc.wstx.api.CommonConfig",
      "org.codehaus.stax2.validation.XMLValidationException",
      "com.ctc.wstx.stax.WstxInputFactory",
      "com.ctc.wstx.exc.WstxEOFException",
      "org.codehaus.stax2.validation.Validatable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Enumeration", false, XmlTokenStream_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(XmlTokenStream_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream",
      "org.codehaus.stax2.XMLInputFactory2",
      "com.ctc.wstx.util.SymbolTable",
      "com.ctc.wstx.util.SymbolTable$Bucket",
      "com.ctc.wstx.util.DefaultXmlSymbolTable",
      "com.ctc.wstx.stax.WstxInputFactory",
      "com.ctc.wstx.util.DataUtil",
      "com.ctc.wstx.api.CommonConfig",
      "com.ctc.wstx.api.ReaderConfig",
      "com.ctc.wstx.api.WstxInputProperties$ParsingMode",
      "com.ctc.wstx.api.WstxInputProperties",
      "com.ctc.wstx.io.InputBootstrapper",
      "com.ctc.wstx.io.StreamBootstrapper",
      "com.ctc.wstx.io.BaseReader",
      "com.ctc.wstx.io.UTF8Reader",
      "com.ctc.wstx.io.InputSourceFactory",
      "com.ctc.wstx.io.WstxInputSource",
      "com.ctc.wstx.io.BaseInputSource",
      "com.ctc.wstx.io.ReaderSource",
      "com.ctc.wstx.io.BranchingReaderSource",
      "com.ctc.wstx.io.WstxInputData",
      "com.ctc.wstx.sr.StreamScanner",
      "com.ctc.wstx.sr.BasicStreamReader",
      "com.ctc.wstx.sr.TypedStreamReader",
      "com.ctc.wstx.sr.ValidatingStreamReader",
      "com.ctc.wstx.sr.InputElementStack",
      "com.ctc.wstx.util.StringVector",
      "com.ctc.wstx.util.InternCache",
      "com.ctc.wstx.sr.AttributeCollector",
      "com.ctc.wstx.util.TextBuilder",
      "com.ctc.wstx.util.TextBuffer",
      "com.ctc.wstx.io.SystemId",
      "com.ctc.wstx.io.DefaultInputResolver",
      "com.ctc.wstx.io.CharsetNames",
      "com.ctc.wstx.io.ReaderBootstrapper",
      "org.codehaus.stax2.ri.dom.DOMWrappingReader",
      "com.ctc.wstx.dom.WstxDOMWrappingReader",
      "org.codehaus.stax2.ri.Stax2Util$TextBuffer",
      "com.ctc.wstx.util.URLUtil",
      "com.ctc.wstx.exc.WstxException",
      "com.ctc.wstx.exc.WstxIOException",
      "com.ctc.wstx.sax.WstxSAXParser",
      "com.ctc.wstx.sax.WstxSAXParser$ResolverProxy",
      "org.codehaus.stax2.ri.Stax2EventReaderImpl",
      "com.ctc.wstx.evt.WstxEventReader",
      "com.ctc.wstx.sr.ElemCallback",
      "com.ctc.wstx.evt.DefaultEventAllocator",
      "com.ctc.wstx.dtd.DTDId",
      "com.ctc.wstx.io.MergedReader",
      "org.codehaus.stax2.ri.Stax2ReaderAdapter",
      "org.codehaus.stax2.util.StreamReader2Delegate",
      "org.codehaus.stax2.ri.Stax2FilteredStreamReader",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory",
      "org.codehaus.stax2.typed.TypedValueDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DecoderBase",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatDecoder",
      "com.ctc.wstx.cfg.ErrorConsts",
      "com.ctc.wstx.exc.WstxParsingException",
      "com.ctc.wstx.io.WstxInputLocation",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntDecoder",
      "org.codehaus.stax2.typed.TypedArrayDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntArrayDecoder",
      "com.ctc.wstx.io.BufferRecycler",
      "org.codehaus.stax2.typed.Base64Variant",
      "org.codehaus.stax2.typed.Base64Variants",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder",
      "org.codehaus.stax2.ri.evt.Stax2FilteredEventReader",
      "org.codehaus.stax2.ri.evt.Stax2EventReaderAdapter",
      "com.ctc.wstx.exc.WstxUnexpectedCharException",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$LongDecoder",
      "com.ctc.wstx.exc.WstxEOFException",
      "com.ctc.wstx.util.StringUtil",
      "com.ctc.wstx.util.BaseNsContext",
      "com.ctc.wstx.util.EmptyNamespaceContext",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DoubleDecoder",
      "com.ctc.wstx.api.WriterConfig",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DoubleArrayDecoder",
      "com.ctc.wstx.util.ExceptionUtil",
      "org.codehaus.stax2.validation.XMLValidationProblem",
      "org.codehaus.stax2.validation.XMLValidationException",
      "com.ctc.wstx.exc.WstxValidationException",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$IntegerDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$DecimalDecoder",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$LongArrayDecoder",
      "org.codehaus.stax2.XMLStreamLocation2$1",
      "org.codehaus.stax2.XMLStreamLocation2",
      "com.ctc.wstx.dtd.StructValidator",
      "com.ctc.wstx.dtd.EmptyValidator",
      "com.ctc.wstx.dtd.DTDElement",
      "com.ctc.wstx.dtd.ContentSpec",
      "com.ctc.wstx.dtd.SeqContentSpec",
      "com.ctc.wstx.dtd.ChoiceContentSpec",
      "com.ctc.wstx.util.PrefixedName",
      "com.ctc.wstx.dtd.TokenContentSpec",
      "com.ctc.wstx.dtd.SeqContentSpec$Validator",
      "org.codehaus.stax2.ri.Stax2LocationAdapter",
      "com.ctc.wstx.dtd.PrefixedNameSet",
      "com.ctc.wstx.dtd.SmallPrefixedNameSet",
      "com.ctc.wstx.dtd.TokenContentSpec$Validator",
      "com.ctc.wstx.dtd.DFAState",
      "org.codehaus.stax2.ri.Stax2WriterImpl",
      "com.ctc.wstx.sw.BaseStreamWriter",
      "com.ctc.wstx.sw.TypedStreamWriter",
      "com.ctc.wstx.sw.NonNsStreamWriter",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$QNameDecoder",
      "org.codehaus.stax2.ri.Stax2Util",
      "com.ctc.wstx.sw.BaseNsStreamWriter",
      "com.ctc.wstx.sw.RepairingNsStreamWriter",
      "com.ctc.wstx.sw.OutputElementBase",
      "com.ctc.wstx.sw.SimpleOutputElement",
      "com.ctc.wstx.compat.QNameCreator$Helper",
      "com.ctc.wstx.compat.QNameCreator",
      "org.codehaus.stax2.ri.dom.DOMWrappingWriter",
      "com.ctc.wstx.dom.WstxDOMWrappingWriter",
      "com.ctc.wstx.dtd.ModelNode",
      "com.ctc.wstx.dtd.ChoiceModel",
      "com.ctc.wstx.dtd.TokenModel",
      "com.ctc.wstx.dtd.ConcatModel",
      "com.ctc.wstx.dtd.DFAValidator",
      "com.ctc.wstx.dtd.DefaultAttrValue",
      "com.ctc.wstx.dtd.DTDAttribute",
      "com.ctc.wstx.dtd.DTDNmTokenAttr",
      "org.codehaus.stax2.ri.evt.BaseEventImpl",
      "org.codehaus.stax2.ri.evt.StartDocumentEventImpl",
      "org.codehaus.stax2.ri.typed.Base64DecoderBase",
      "org.codehaus.stax2.ri.typed.CharArrayBase64Decoder",
      "org.codehaus.stax2.ri.Stax2Util$ByteAggregator",
      "com.ctc.wstx.sw.XmlWriter",
      "com.ctc.wstx.sw.EncodingXmlWriter",
      "com.ctc.wstx.sw.ISOLatin1XmlWriter",
      "com.ctc.wstx.sw.AsciiXmlWriter",
      "com.ctc.wstx.sw.XmlWriterWrapper",
      "com.ctc.wstx.sw.XmlWriterWrapper$TextWrapper",
      "com.ctc.wstx.util.SimpleCache",
      "com.ctc.wstx.util.SimpleCache$LimitMap",
      "org.codehaus.stax2.ri.evt.NotationDeclarationEventImpl",
      "com.ctc.wstx.evt.WNotationDeclaration",
      "org.codehaus.stax2.ri.EmptyNamespaceContext",
      "org.codehaus.stax2.util.StreamWriterDelegate",
      "org.codehaus.stax2.util.StreamWriter2Delegate",
      "com.ctc.wstx.sr.CompactNsContext",
      "com.ctc.wstx.util.WordResolver",
      "com.ctc.wstx.util.WordResolver$Builder",
      "com.ctc.wstx.dtd.StarModel",
      "org.codehaus.stax2.ri.typed.ValueDecoderFactory$BooleanDecoder",
      "com.ctc.wstx.util.ArgUtil",
      "com.ctc.wstx.sax.SAXProperty",
      "com.ctc.wstx.evt.MergedNsContext",
      "org.codehaus.stax2.ri.typed.StringBase64Decoder",
      "org.codehaus.stax2.validation.XMLValidator",
      "org.codehaus.stax2.validation.ValidatorPair",
      "com.ctc.wstx.dom.DOMOutputElement",
      "com.ctc.wstx.sw.SimpleNsStreamWriter",
      "org.codehaus.stax2.ri.typed.ValueEncoderFactory",
      "org.codehaus.stax2.ri.typed.AsciiValueEncoder",
      "org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder"
    );
  }
}
