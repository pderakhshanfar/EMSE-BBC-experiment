/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 11:15:49 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.ent.IntEntity;
import com.ctc.wstx.io.WstxInputLocation;
import com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper;
import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.NoSuchElementException;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.StreamFilter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.ri.Stax2FilteredStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTokenStream_ESTest extends XmlTokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._nextNamespaceURI = "3r#c";
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= state= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.setAttribute(" sate=", "3tG");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.next();
      xmlTokenStream0.toString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "ste=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      IntEntity intEntity0 = IntEntity.create("ste=", "ste=");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, intEntity0);
      xmlTokenStream0._repeatElement = 4;
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=4 wrapper=[null] repeatElement=4 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0.next();
      String string0 = xmlTokenStream0.toString();
      assertEquals("(Token stream: state=2 attr#=0 nextAttr#=0 name= sate= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0._repeatElement = 500;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 500
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " Asati");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0._namespaceURI = "_b;>yo9Kya3N_7k<C.";
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 1
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("1**|KyJ]i16vh");
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      int int0 = xmlTokenStream0.next();
      assertEquals("1**|KyJ]i16vh", xmlTokenStream0.getLocalName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, streamReaderDelegate0);
      xmlTokenStream0._nextLocalName = "";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0._nextNamespaceURI = "Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but ";
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      iIOMetadataNode0.setAttribute("3tG", "3tG");
      iIOMetadataNode0.setAttribute("", " sate=");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected END_ELEMENT, got event of type 3
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      iIOMetadataNode0.setAttribute(" state=", " state=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      xmlTokenStream0._nextAttributeIndex = 34;
      xmlTokenStream0.skipEndElement();
      assertEquals(5, XmlTokenStream.XML_TEXT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.setAttribute(" sate=", " sate=");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0._nextNamespaceURI = " sate=";
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(5, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dataInputStream0);
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
      xmlTokenStream0._currentState = 1000;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 1000
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      iIOMetadataNode0.setAttribute(" state=", " state=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 3
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("stOate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "stOate=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0._attributeCount = (-116);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
      xmlTokenStream0._currentState = 1000;
      int int0 = xmlTokenStream0.getCurrentToken();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0._repeatElement = (-1771);
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: -1771
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
      xmlTokenStream0._textValue = " state=";
      String string0 = xmlTokenStream0.getText();
      assertNotNull(string0);
      assertEquals(" state=", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("# s;FateZ");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "# s;FateZ");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      iIOMetadataNode0.setAttribute("# s;FateZ", "# s;FateZ");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.getText();
      assertEquals(5, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",5Ob7M");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ",5Ob7M");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, ",5Ob7M", ",5Ob7M");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals(",5Ob7M", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "%");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "%");
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "Unrecognized property '");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "Unrecognized property '");
      xmlTokenStream0.repeatStartElement();
      int int0 = xmlTokenStream0._handleRepeatElement();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" stati=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " stati=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " stati=");
      wstxDOMWrappingReader0.nextTag();
      wstxDOMWrappingReader0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Can not call next() after receiving END_DOCUMENT
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " ADsati");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0._attributeCount = 1000;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" stati=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " stati=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      StreamFilter streamFilter0 = mock(StreamFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(streamFilter0).accept(any(javax.xml.stream.XMLStreamReader.class));
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(wstxDOMWrappingReader0, streamFilter0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(stax2FilteredStreamReader0, readerConfig0);
      // Undeclared exception!
      xmlTokenStream0.next();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      xmlTokenStream0.skipEndElement();
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to find a tag, instead reached end of input
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " giw");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      xmlTokenStream0._attributeCount = 524288;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal attribute index 0; element <null> has no attributes
         //
         verifyException("org.codehaus.stax2.ri.dom.DOMWrappingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      iIOMetadataNode0.setAttribute(" sate=", "ZpX*L19^Ep{;q/Cc,sx");
      wstxDOMWrappingReader0.next();
      Stax2FilteredStreamReader stax2FilteredStreamReader0 = new Stax2FilteredStreamReader(streamReaderDelegate0, (StreamFilter) null);
      WstxInputLocation wstxInputLocation0 = WstxInputLocation.getEmptyLocation();
      char[] charArray0 = new char[5];
      IntEntity intEntity0 = new IntEntity(wstxInputLocation0, "", (URL) null, charArray0, wstxInputLocation0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(stax2FilteredStreamReader0, intEntity0);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.convertToString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, streamReaderDelegate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream((XMLStreamReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ste=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "ste=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.setAttribute("ste=", "ste=");
      wstxDOMWrappingReader0.next();
      Object object0 = new Object();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, object0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertFalse(xmlTokenStream0.hasAttributes());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "ste=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      IntEntity intEntity0 = IntEntity.create("com.ctc.wstx.dtd.DTDEnumAttr", "ste=");
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, intEntity0);
      xmlTokenStream0.next();
      xmlTokenStream0.next();
      int int0 = xmlTokenStream0.next();
      assertEquals(6, xmlTokenStream0.getCurrentToken());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0._repeatElement = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ",5Ob7M");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, ",5Ob7M", ",5Ob7M");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      assertEquals(3, XmlTokenStream.XML_ATTRIBUTE_NAME);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, (Object) null);
      // Undeclared exception!
      try { 
        xmlTokenStream0._handleRepeatElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unrecognized type to repeat: 0
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
      xmlTokenStream0._repeatElement = 1;
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipEndElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0._currentState = 500;
      int int0 = xmlTokenStream0.next();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0._currentState = 500;
      int int0 = xmlTokenStream0.next();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ") not vali hirst_haracter of j name");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      iIOMetadataNode0.setAttribute(") not vali hirst_haracter of j name", ") not vali hirst_haracter of j name");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, ") not vali hirst_haracter of j name");
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      int int0 = xmlTokenStream0.next();
      assertEquals("", xmlTokenStream0.getLocalName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      iIOMetadataNode0.setAttribute("3tG", "3tG");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "", (String) null);
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" s;FateZ");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " s;FateZ");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      iIOMetadataNode0.setAttribute(" s;FateZ", " s;FateZ");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.next();
      wstxDOMWrappingReader0.getElementAsBinary();
      xmlTokenStream0.convertToString();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      xmlTokenStream0.convertToString();
      assertEquals(1, wstxDOMWrappingReader0.getEventType());
      assertEquals(0, wstxDOMWrappingReader0.getDepth());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      iIOMetadataNode0.setAttribute("", "");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      xmlTokenStream0.convertToString();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      iIOMetadataNode0.setAttribute(" state=", " state=");
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      xmlTokenStream0.next();
      xmlTokenStream0.skipAttributes();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.skipAttributes();
      assertEquals(6, XmlTokenStream.XML_END);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("null default attribute value");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "null default attribute value");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
      xmlTokenStream0.repeatStartElement();
      xmlTokenStream0.repeatStartElement();
      assertFalse(xmlTokenStream0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.repeatStartElement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      iIOMetadataNode0.setAttribute(" sate=", "3tG");
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" sate=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " sate=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dOMSource0);
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, (Object) null);
      xmlTokenStream0.next();
      boolean boolean0 = xmlTokenStream0.hasAttributes();
      assertEquals(2, xmlTokenStream0.getCurrentToken());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, ",5Ob7M");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, ",5Ob7M", ",5Ob7M");
      xmlTokenStream0._currentWrapper = elementWrapper0;
      xmlTokenStream0.skipEndElement();
      xmlTokenStream0.skipEndElement();
      assertEquals(1, wstxDOMWrappingReader0.getDepth());
      assertFalse(wstxDOMWrappingReader0.isStartElement());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, "");
      xmlTokenStream0.next();
      // Undeclared exception!
      try { 
        xmlTokenStream0.skipAttributes();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      XmlTokenStream xmlTokenStream0 = null;
      try {
        xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("# s;FateZ");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "# s;FateZ");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.getTokenLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("# s;FateZ");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "# s;FateZ");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      String string0 = xmlTokenStream0.getText();
      assertNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
      String string0 = xmlTokenStream0.getLocalName();
      assertEquals(" state=", string0);
      assertNotNull(string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("# s;FateZ");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, "# s;FateZ");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, wstxDOMWrappingReader0);
      xmlTokenStream0.getCurrentLocation();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, (Object) null);
      xmlTokenStream0.getXmlReader();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate(wstxDOMWrappingReader0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(streamReaderDelegate0, (Object) null);
      xmlTokenStream0.close();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, dataInputStream0);
      xmlTokenStream0.closeCompletely();
      assertEquals(1, xmlTokenStream0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" state=");
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, " state=");
      ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.next();
      XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, " state=");
      String string0 = xmlTokenStream0.getNamespaceURI();
      assertEquals("", string0);
      assertEquals(1, xmlTokenStream0.getCurrentToken());
      assertNotNull(string0);
  }
}
