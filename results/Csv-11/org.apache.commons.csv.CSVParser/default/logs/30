* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.csv.CSVParser
* Starting Client-0
* Connecting to master process on port 3523
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-11/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 424
* Using seed 2693385369
* Starting evolution
* Initial Number of Goals in DynaMOSA = 150 / 424
[MASTER] 23:34:17.333 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 23:34:17.334 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Map<K, V> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 602s and 531 generations, 184699 statements, best individual has fitness: 124.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 103
* Number of covered goals: 89
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 74%
* Total number of goals: 80
* Number of covered goals: 59
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 90
* Number of covered goals: 58
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 45
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 13
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 74%
* Total number of goals: 80
* Number of covered goals: 59
* Generated 37 tests with total length 165
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 41%
* Compiling and checking tests
[MASTER] 23:43:59.697 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_28_1627602239519/org/apache/commons/csv/CSVParser_28_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_28_1627602239519/org/apache/commons/csv/CSVParser_28_tmp__ESTest_scaffolding.java]]
[MASTER] 23:43:59.698 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-11/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-11/target/classes
[MASTER] 23:43:59.698 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-11/target/classes
[MASTER] 23:43:59.705 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method getRecords in class org.apache.commons.csv.CSVParser cannot be applied to given types;
  required: T
  found: java.util.Collection<java.lang.String>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Collection<java.lang.String>
    upper bound(s): java.util.Collection<org.apache.commons.csv.CSVRecord>: 35
[MASTER] 23:43:59.705 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 23:43:59.721 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_28_1627602239519/org/apache/commons/csv/CSVParser_28_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 23:43:59 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.io.StringReader;
11: import java.util.Collection;
12: import java.util.LinkedList;
13: import java.util.List;
14: import java.util.Locale;
15: import org.apache.commons.csv.CSVFormat;
16: import org.apache.commons.csv.CSVParser;
17: import org.apache.commons.csv.CSVRecord;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class CSVParser_28_tmp__ESTest extends CSVParser_28_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       StringReader stringReader0 = new StringReader("u>5L!@|\")K/Mv'.");
28:       CSVFormat cSVFormat0 = CSVFormat.EXCEL;
29:       CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
30:       LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
31:       cSVParser0.getRecords(linkedList0);
32:       LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
33:       stringReader0.reset();
34:       List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
35:       cSVParser0.getRecords((Collection<String>) list0);
36:       long long0 = cSVParser0.getCurrentLineNumber();
37:       assertEquals(1L, long0);
38:   }
39: }
RegularFileObject[/tmp/EvoSuite_28_1627602239519/org/apache/commons/csv/CSVParser_28_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 23:43:59 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class CSVParser_28_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
76:     java.lang.System.setProperty("user.dir", "/experiment"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVParser_28_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.csv.Token",
82:       "org.apache.commons.csv.CSVRecord",
83:       "org.apache.commons.csv.Constants",
84:       "org.apache.commons.csv.Assertions",
85:       "org.apache.commons.csv.CSVParser$2",
86:       "org.apache.commons.csv.CSVParser$1",
87:       "org.apache.commons.csv.CSVFormat",
88:       "org.apache.commons.csv.Quote",
89:       "org.apache.commons.csv.Lexer",
90:       "org.apache.commons.csv.CSVParser",
91:       "org.apache.commons.csv.Token$Type",
92:       "org.apache.commons.csv.CSVPrinter",
93:       "org.apache.commons.csv.ExtendedBufferedReader"
94:     );
95:   } 
96: 
97:   private static void resetClasses() {
98:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVParser_28_tmp__ESTest_scaffolding.class.getClassLoader()); 
99: 
100:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
101:       "org.apache.commons.csv.CSVParser",
102:       "org.apache.commons.csv.CSVParser$1",
103:       "org.apache.commons.csv.Token$Type",
104:       "org.apache.commons.csv.CSVParser$2",
105:       "org.apache.commons.csv.Constants",
106:       "org.apache.commons.csv.CSVFormat",
107:       "org.apache.commons.csv.Assertions",
108:       "org.apache.commons.csv.Token",
109:       "org.apache.commons.csv.Lexer",
110:       "org.apache.commons.csv.ExtendedBufferedReader",
111:       "org.apache.commons.csv.CSVRecord",
112:       "org.apache.commons.csv.CSVPrinter",
113:       "org.apache.commons.csv.CSVPrinter$1",
114:       "org.apache.commons.csv.Quote"
115:     );
116:   }
117: }

[MASTER] 23:43:59.722 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
StringReader stringReader0 = new StringReader("u>5L!@|\")K/Mv'.");
CSVFormat cSVFormat0 = CSVFormat.EXCEL;
CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
cSVParser0.getRecords(linkedList0);
LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
stringReader0.reset();
List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
cSVParser0.getRecords((Collection<String>) list0);
long long0 = cSVParser0.getCurrentLineNumber();
assertEquals(1L, long0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 14
* Writing tests to file
* Writing JUnit test case 'CSVParser_ESTest' to results/Csv-11/org.apache.commons.csv.CSVParser/default/tests/30
* Done!

* Computation finished
