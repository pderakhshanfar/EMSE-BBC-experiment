/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:54:21 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("22^:=e(xaFR@N'`", "5%g:wR1");
      File file0 = MockFile.createTempFile("The quoteChar character and the delimiter cannot be the same ('", "a>w`b<{eq>", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      CSVParser cSVParser0 = CSVParser.parse(":4:tki-r?[vV*51bza", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      CSVParser cSVParser0 = CSVParser.parse(":4:tki-r?[v*51bza", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVParser cSVParser1 = CSVParser.parse(";,biy*vq }@gb", cSVFormat0);
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      CSVParser cSVParser0 = CSVParser.parse(":4:tki-r?[vV*51bza", cSVFormat1);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVParser0.nextRecord();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4?\"|K1";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("|", cSVFormat2);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(9);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
      cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.ExtendedBufferedReader", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":4:TKi-R?[V*514Za");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('V');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVParser cSVParser0 = CSVParser.parse("#!+rAX-L", cSVFormat4);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("dPnYA_y&", cSVFormat0);
      cSVParser0.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dPnYA_y&");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%7cxG}mHh;|p";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1738);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0#7@7nBo.uh}y,");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0#7@7nBo.uh}y,";
      stringArray0[2] = "Iz";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("Iz", cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat1);
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat1);
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      cSVParser0.close();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat1);
      CSVParser.parse("E{Ss-d|", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H?eXy32yS");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%7cxG}mHh;|p";
      stringArray0[1] = "0#7@7no.uh},";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("%7cxG}mHh;|p", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      File file0 = MockFile.createTempFile("@b'=?oV>eaL", "");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("reader", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader(4);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      File file0 = MockFile.createTempFile("IwuSrUG5,^vN!+", "W_l%gJ<H5{<zc`kX");
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Z');
      CSVParser cSVParser1 = CSVParser.parse("/;/1fe1c*o}fmJhh", cSVFormat2);
      cSVFormat0.withCommentStart('Z');
      cSVParser1.isClosed();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "0#7@7nBo.uh}y,";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      CSVParser cSVParser0 = CSVParser.parse("P_%!C,/nD,y", cSVFormat0);
      CSVParser cSVParser1 = CSVParser.parse("No more CSV records available", cSVFormat0);
      cSVParser1.isClosed();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyHeaders(true);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("X", cSVFormat1);
      cSVParser0.getHeaderMap();
      Map<String, Integer> map0 = new HashMap<String, Integer>();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getCurrentLineNumber();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.getRecords();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.nextRecord();
      linkedList0.add((CSVRecord) null);
      cSVParser0.getRecords(linkedList0);
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList1);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("/N\"4Xnk_ZPe[", cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat2.withCommentStart('C');
      cSVFormat2.withDelimiter('L');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("2yXS", cSVFormat2);
      cSVParser1.getRecords();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("X", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('A');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      CSVParser.parse("X", cSVFormat2);
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("X", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('A');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      CSVParser.parse("", cSVFormat1);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("Xt", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
      cSVParser0.getHeaderMap();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVParser0.close();
      CSVParser.parse(") EOF reached before encapsulated token finished", cSVFormat2);
      StringReader stringReader0 = new StringReader(") EOF reached before encapsulated token finished");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0);
      List<CSVRecord> list0 = cSVParser1.getRecords();
      assertFalse(list0.contains(cSVRecord0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("Xt", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('L');
      cSVFormat2.withDelimiter('(');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("Xt", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('L');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.getRecordNumber();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'p';
      charArray0[2] = '';
      charArray0[3] = '&';
      charArray0[4] = 'Q';
      charArray0[5] = '6';
      charArray0[6] = 'o';
      charArray0[7] = 'l';
      charArray0[8] = 's';
      pipedReader0.read(charArray0, 0, 0);
      pipedWriter0.close();
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
      
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("W~;", cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      cSVParser0.getRecordNumber();
      cSVParser0.getCurrentLineNumber();
      MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        Charset.forName("Mapping for %s not found, expected one of %s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mapping for %s not found, expected one of %s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, (Charset) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser.parse("", cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("pI[", "pI[", 0, "?hZfAG69K*~\"/-n", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('[');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "0#7@7nBo.uh}y,";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("0#7@7nBo.uh}y,", cSVFormat0);
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.setReadable(false, false);
      mockFile1.setExecutable(false, false);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      try { 
        CSVParser.parse((File) mockFile1, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse("", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("Xt", cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('L');
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("Xt", cSVFormat2);
      cSVParser1.getRecords();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "2sF*?X.{o.E*k";
      char char0 = '!';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("2sF*?X.{o.E*k", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteChar('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('!')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
