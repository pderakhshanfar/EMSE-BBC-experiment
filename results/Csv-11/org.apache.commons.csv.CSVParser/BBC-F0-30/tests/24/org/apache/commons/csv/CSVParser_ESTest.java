/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:56:31 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('y');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("y@", cSVFormat2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";SKGcTm";
      stringArray0[1] = "t(Z>?O&?XW)@7).|";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "6~![}0i";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Character character0 = Character.valueOf('T');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('d');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader(":GPF|{MesP1raX9\" a");
      PipedReader pipedReader0 = new PipedReader(110);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = "out";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("out");
      StringReader stringReader0 = new StringReader("out");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser.parse("lFYtMvJJRoa*^fy", cSVFormat1);
      try { 
        CSVParser.parse("\"x?iLEy{|J7(y35;0", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("o]>?F\"iZ#T,E'<");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat1);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "a?[qP:+G=%[kB4p";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("(@kpa1K", cSVFormat0);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("a?[qP:+G=%[kB4p", cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
      
      cSVParser0.getCurrentLineNumber();
      CSVRecord cSVRecord0 = cSVParser1.nextRecord();
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = "EOF";
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat1);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("(eader:");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("I", "I", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecordNumber();
      CSVParser cSVParser1 = CSVParser.parse("EOF", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.nextRecord();
      linkedList0.add((CSVRecord) null);
      cSVParser1.getRecords(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("EOF", cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('w');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Header:");
      StringReader stringReader0 = new StringReader("*E5nM");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      Character character0 = Character.valueOf('1');
      cSVFormat3.withEscape(character0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.iterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVFormat2.toString();
      cSVParser0.isClosed();
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('i');
      CSVParser cSVParser1 = CSVParser.parse("Delimiter=<\t> Escape=<> QuoteChar=<w> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      assertEquals(2L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("\r\n");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      stringReader0.read();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyHeaders(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\" in ";
      cSVFormat3.withHeader(stringArray0);
      String string0 = "u@";
      PipedReader pipedReader0 = new PipedReader(4);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyHeaders(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\" in ";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withDelimiter('u');
      StringReader stringReader0 = new StringReader("u@");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.iterator();
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("d[*'H]pa\"");
      File file0 = MockFile.createTempFile("mIC.VT8y", "mIC.VT8y", (File) mockFile0);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyHeaders(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\" in ";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withDelimiter('u');
      StringReader stringReader0 = new StringReader("u@");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.iterator();
      cSVParser0.getRecords();
      long long0 = cSVParser0.getCurrentLineNumber();
      long long1 = cSVParser0.getCurrentLineNumber();
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "M<0N{smK";
      URL uRL1 = MockURL.URL(uRL0, "M<0N{smK");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      CSVParser.parse("S8;sA-nqwMO~>Yl", cSVFormat0);
      cSVParser0.getHeaderMap();
      File file0 = MockFile.createTempFile("COMMENT", "org.apache.commons.csv.CSVFormat");
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat0);
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "format");
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL1, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("w,V}c", cSVFormat0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVParser0.isClosed();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("US\"xG}Ti@_+0RT-Gpz", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat0.withQuoteChar('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("US\"xG}Ti@_+0RT-Gpz");
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("US\"xG}Ti@_+0RT-Gpz", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser0.getRecordNumber();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.getHeaderMap();
      cSVParser0.close();
      assertNotSame(cSVParser0, cSVParser1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('x');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpected Quote value: ");
      StringReader stringReader0 = new StringReader("Unexpected Quote value: ");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("org.apache.commons.csv.CSVPrinter", cSVFormat3);
      cSVParser0.spliterator();
      long long0 = cSVParser1.getRecordNumber();
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("kZI7'2z@f>\u0002B_^n");
      CSVParser.parse("org.apache.commons.csv.Lexer", cSVFormat4);
      cSVParser1.getHeaderMap();
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser2.getRecords();
      long long1 = cSVParser0.getCurrentLineNumber();
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuoteChar('@');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("EOF", cSVFormat1);
      cSVParser1.getRecords(linkedList0);
      cSVParser1.spliterator();
      cSVParser0.close();
      cSVParser1.getRecordNumber();
      CSVParser cSVParser2 = CSVParser.parse("EOF", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser2.forEach(consumer0);
      cSVParser2.getHeaderMap();
      assertEquals(1L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("US\"xG}Ti@_+0RT-Gpz", cSVFormat0);
      cSVParser0.getHeaderMap();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("US\"xG}Ti@_+0RT-Gpz");
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("US\"xG}Ti@_+0RT-Gpz", cSVFormat2);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser0.getRecordNumber();
      CSVParser.parse("", cSVFormat1);
      cSVParser1.getHeaderMap();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('x');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      StringReader stringReader0 = new StringReader("Unexpected Quote value: ");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("org.apache.commons.csv.CSVPrinter", cSVFormat2);
      cSVParser1.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser0.getRecordNumber();
      CSVParser cSVParser2 = CSVParser.parse("org.apache.commons.csv.CSVPrinter", cSVFormat1);
      Map<String, Integer> map0 = cSVParser2.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "_R$0";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(']');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('0');
      cSVFormat2.withQuoteChar('0');
      CSVParser cSVParser0 = CSVParser.parse("_R$0", cSVFormat3);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.getRecords(linkedList0);
      cSVFormat3.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVFormat3.withSkipHeaderRecord(true);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withQuoteChar('o');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)107;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      pipedWriter0.append((CharSequence) charBuffer1);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat1);
      cSVParser1.getRecordNumber();
      List<CSVRecord> list0 = cSVParser1.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Unexpected Quote value: ";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withQuoteChar('O');
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser1.nextRecord();
      cSVFormat1.withQuoteChar('u');
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      cSVFormat0.withCommentStart(')');
      Character character0 = new Character(')');
      cSVFormat0.withCommentStart(character0);
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("B49[Pi@x))vK", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[2] = "B49[Pi@x))vK";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      cSVParser0.isClosed();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withQuoteChar('o');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)107;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      cSVFormat0.withCommentStart('o');
      cSVFormat2.withCommentStart('j');
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      pipedWriter0.append((CharSequence) charBuffer1);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "iX_v/";
      MockFile mockFile0 = new MockFile("iX_v/");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuoteChar('@');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.isClosed();
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withQuoteChar('O');
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser1.nextRecord();
      cSVFormat1.withQuoteChar('u');
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      linkedList0.clone();
      cSVParser0.isClosed();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      try { 
        cSVParser1.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('y');
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "y@";
      objectArray0[2] = (Object) "y@";
      cSVFormat3.withQuoteChar('g');
      cSVFormat0.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("y@", cSVFormat3);
      cSVParser0.iterator();
      cSVParser0.getRecordNumber();
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      // Undeclared exception!
      try { 
        cSVFormat2.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      cSVFormat0.withCommentStart(')');
      Character character0 = new Character(')');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("B49[Pi@x))vK", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[2] = "B49[Pi@x))vK";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVParser0.nextRecord();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 0L);
      linkedList0.add(cSVRecord0);
      cSVParser0.getRecords(linkedList0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", "(A\"h&ux9vAipb`R'6", 102, "B49[Pi@x))vK", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "B49[Pi@x))vK", uRLStreamHandler1);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withQuoteChar('O');
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser1.nextRecord();
      cSVFormat1.withQuoteChar('u');
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.isClosed();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser0.getRecordNumber();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("US\"xG}Ti@_+0RT-Gpz", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.spliterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "US\"xG}Ti@_+0RT-Gpz";
      stringArray0[1] = "US\"xG}Ti@_+0RT-Gpz";
      stringArray0[2] = "US\"xG}Ti@_+0RT-Gpz";
      stringArray0[3] = "US\"xG}Ti@_+0RT-Gpz";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "US\"xG}Ti@_+0RT-Gpz", 2265L);
      linkedList0.addLast(cSVRecord0);
      cSVParser0.getRecords(linkedList0);
      MockFile mockFile0 = new MockFile("US\"xG}Ti@_+0RT-Gpz", "~du`,");
      // Undeclared exception!
      try { 
        Charset.forName("US\"xG}Ti@_+0RT-Gpz");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // US\"xG}Ti@_+0RT-Gpz
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('.');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyHeaders(false);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      cSVParser0.iterator();
      CSVParser.parse("gEJlht3wUC)Ep8L&R", cSVFormat1);
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser$1", "");
      MockFile mockFile0 = new MockFile(file0, "org.apache.commons.csv.CSVParser$1");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = null;
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, (Charset) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }
}
