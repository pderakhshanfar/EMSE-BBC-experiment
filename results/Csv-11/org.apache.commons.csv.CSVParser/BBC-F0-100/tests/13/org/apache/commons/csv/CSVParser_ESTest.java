/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:07:32 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(';');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVParser cSVParser0 = CSVParser.parse(";FzmA>>@t,CCgix)", cSVFormat2);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(';');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVParser cSVParser0 = CSVParser.parse(";FzmA>>@t,CCgix)", cSVFormat2);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser.parse("r mapping as sp", cSVFormat0);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      pipedWriter0.close();
      cSVFormat0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat2);
      // Undeclared exception!
      try { 
        pipedWriter0.write("caD9Blx", 9, 933);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("6. t+{f", cSVFormat0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Je{4?", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Je{4?");
      CSVParser cSVParser0 = CSVParser.parse("Je{4?", cSVFormat1);
      cSVParser0.nextRecord();
      Character.valueOf('u');
      CSVParser cSVParser1 = CSVParser.parse("Je{4?", cSVFormat0);
      cSVParser0.close();
      assertNotSame(cSVParser0, cSVParser1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "}`7g?>";
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\" in ");
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.Assertions", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.nextRecord();
      try { 
        MockURL.URL("\" in ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: \" in 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "\" in ";
      Character character0 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("fB*-8>");
      CSVParser cSVParser0 = CSVParser.parse("5{=AR3#YM", cSVFormat2);
      cSVFormat1.withQuoteChar('5');
      cSVParser0.nextRecord();
      try { 
        MockURL.URL("org.apache.commons.csv.assertions");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: org.apache.commons.csv.assertions
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("uj`2A", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader(3);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("Je{4?", cSVFormat0);
      File file0 = MockFile.createTempFile("UOMrgaMj>&zq`8;2", "K[");
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("WrU,Iiq@jv2l}Z/");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("WrU,Iiq@jv2l}Z/", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("file", cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4UK`1U~4zc");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.newFormat('^');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CSVParser cSVParser0 = CSVParser.parse("4UK`1U~4zc", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}`7g?>";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("file", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      pipedReader0.ready();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]Kh";
      stringArray0[1] = "url";
      stringArray0[2] = "";
      stringArray0[3] = "No more CSV records available";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = CSVParser.parse("EORECORD", cSVFormat2);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("No more CSV records available", "]Kh");
      String string0 = "EXd";
      String string1 = "(c|mI0?E:6%\"@{";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "]Kh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.close();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      Character character0 = Character.valueOf('c');
      cSVFormat2.withQuoteChar(character0);
      cSVFormat3.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("RmX? dYG3mflP\"eVmJ", cSVFormat3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("RmX? dYG3mflP\"eVmJ");
      cSVFormat0.print(mockPrintWriter1);
      cSVParser0.getRecordNumber();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
      
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockURI.resolve(uRI1, uRI0);
      MockURI.toURL(uRI0);
      CSVParser cSVParser1 = CSVParser.parse("RmX? dYG3mflP\"eVmJ", cSVFormat3);
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('z');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      pipedWriter0.close();
      cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withQuoteChar((Character) null);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.close();
      String string0 = "RmX? dYG3mflP\"eV\\mJ";
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      Character character0 = Character.valueOf('c');
      cSVFormat2.withQuoteChar(character0);
      cSVFormat3.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      cSVParser0.getHeaderMap();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("RmX? dYG3mflP\"eVmJ", "RmX? dYG3mflP\"eVmJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // RmX? dYG3mflP\"eVmJ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}`7g?>";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('z');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      cSVFormat1.withHeader(stringArray0);
      cSVFormat3.withQuoteChar((Character) null);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      cSVFormat0.print(pipedWriter0);
      cSVParser0.getRecordNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.getRecords();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withSkipHeaderRecord(false);
      pipedWriter0.close();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "caD9Blx";
      stringArray0[1] = "file";
      stringArray0[2] = "RmX? dYG3mflP\"eVmJ";
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      String[] stringArray1 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray1);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      pipedWriter0.close();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "caD9Blx";
      stringArray0[1] = "file";
      stringArray0[2] = "RmX? dYG3mflP\"eVmJ";
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.getRecordNumber();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      CSVParser cSVParser1 = CSVParser.parse("caD9Blx", cSVFormat0);
      cSVParser1.getRecords(linkedList0);
      cSVParser1.close();
      CSVParser cSVParser2 = CSVParser.parse("caD9Blx", cSVFormat2);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("}`7g?>", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      CSVParser.parse("]ch,vBj", cSVFormat1);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Je{4?", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.newFormat('[');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.getRecordNumber();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("}`7g?>", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.isClosed();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[}`7g?>]", cSVRecord0.toString());
      
      CSVParser.parse("}`7g?>", cSVFormat1);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
      
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Je{4?", cSVFormat0);
      cSVParser0.getRecords();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("}`7g?>", cSVFormat1);
      cSVParser0.getHeaderMap();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.contains(cSVRecord0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.isClosed();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = CSVParser.parse("}`7g?>", cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('s');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withSkipHeaderRecord(false);
      pipedWriter0.close();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "caD9Blx";
      stringArray0[1] = "file";
      stringArray0[2] = "RmX? dYG3mflP\"eVmJ";
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      String[] stringArray1 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray1);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      cSVFormat2.print(pipedWriter0);
      cSVParser0.getRecordNumber();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(603);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      cSVParser0.getHeaderMap();
      Quote quote1 = Quote.ALL;
      cSVFormat2.withQuotePolicy(quote1);
      cSVParser0.getCurrentLineNumber();
      String string0 = "Q(;CwgW[l";
      File file0 = MockFile.createTempFile("Q(;CwgW[l", "dt-q<v09icg7_uo");
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charset0.encode(charBuffer0);
      CSVParser.parse(file0, charset0, cSVFormat2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dt-q<v09icg7_uo";
      stringArray0[1] = "reader";
      stringArray0[2] = "dt-q<v09icg7_uo";
      stringArray0[3] = "dt-q<v09icg7_uo";
      stringArray0[4] = "The escape character cannot be a line break";
      stringArray0[5] = "Q(;CwgW[l";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'dt-q<v09icg7_uo' in [dt-q<v09icg7_uo, reader, dt-q<v09icg7_uo, dt-q<v09icg7_uo, The escape character cannot be a line break, Q(;CwgW[l]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}`7g?>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}`7g?>";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate name: \"", cSVFormat0);
      cSVFormat0.parse(stringReader0);
      cSVParser0.nextRecord();
      String string0 = "%>$GQCx";
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("1zo&,L TK", (String) null, 0, "charset", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('}');
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat1.withNullString("]coX7lgwrYU7qDB1E");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('d');
      PipedReader pipedReader0 = new PipedReader(13);
      pipedReader0.markSupported();
      cSVFormat4.parse(pipedReader0);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vZPoTI2rRM !q$(Zi", "|X]-wQ1/E");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      mockFile0.setWritable(true, true);
      cSVFormat0.toString();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('!');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("M9D erg[ ;Y$Vc4VL;s", cSVFormat3);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }
}
