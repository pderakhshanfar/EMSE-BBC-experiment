/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:52:34 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "url");
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.close();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('T');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate entry: '", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('T');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVParser cSVParser0 = CSVParser.parse("The header contains a duplicate entry: '", cSVFormat1);
      Character character1 = Character.valueOf('T');
      cSVFormat1.withCommentStart(character1);
      CSVParser cSVParser1 = CSVParser.parse("The header contains a duplicate entry: '", cSVFormat0);
      cSVParser1.iterator();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = " B6cT+:NI F>([4!U#";
      stringArray0[1] = "i>i5O";
      stringArray0[2] = "B%t[/\u0003/F`";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("i>i5O", cSVFormat2);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      Character character0 = new Character(')');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("fyli-u{ea}@/h", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("No more CSV records available", cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "> quotechar=<\"> nullstring=<!,>guhwh=z?dke}~> recordseparator=<";
      stringArray0[1] = "}LvIp`G<9UC";
      stringArray0[2] = "\" in ";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("Ltsk/x", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Ltsk/x]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "> quotechar=<\"> nullstring=<!,>guhwh=z?dke}~> recordseparator=<";
      stringArray0[1] = "}LvIp`G<9UC";
      stringArray0[2] = "\" in ";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("file");
      cSVFormat1.withCommentStart(character0);
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVParser0.close();
      CSVParser.parse("out", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "> quotechar=<\"> nullstring=<!,>guhwh=z?dke}~> recordseparator=<";
      stringArray0[1] = "}LvIp`G<9UC";
      stringArray0[2] = "\" in ";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      String string0 = "file";
      StringReader stringReader0 = new StringReader("file");
      cSVFormat1.withCommentStart(character0);
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      cSVParser0.close();
      String string1 = ">j pij`3nw/lnmyp";
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "\" in ";
      CSVParser cSVParser0 = CSVParser.parse("\" in ", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      File file0 = MockFile.createTempFile("jy7fd,,/", "dq?4:>f,");
      MockFile mockFile0 = new MockFile(file0, "dq?4:>f,");
      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\\');
      PipedReader pipedReader0 = new PipedReader(815);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.toString();
      cSVFormat1.toString();
      pipedReader0.close();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> NullString=<!,>guHwh=Z?DkE}~> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      CSVParser cSVParser1 = CSVParser.parse("string", cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "url");
      CSVParser cSVParser0 = CSVParser.parse("Jy7Fd,,/", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      CSVParser.parse("Jy7Fd,,/", cSVFormat1);
      CSVParser.parse("Jy7Fd,,/", cSVFormat0);
      MockFile mockFile0 = new MockFile("h52W8");
      MockFile mockFile1 = new MockFile(mockFile0, "\u2028");
      URL uRL0 = mockFile1.toURL();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.toString();
      cSVFormat1.toString();
      pipedReader0.close();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> NullString=<!,>guHwh=Z?DkE}~> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      cSVParser0.close();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('^');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      CSVParser.parse("", cSVFormat0);
      CSVParser.parse("", cSVFormat1);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('^');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.close();
      cSVFormat0.withDelimiter('w');
      CSVParser.parse("", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Jy7Fd,,/");
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat2.toString();
      pipedReader0.close();
      CSVParser cSVParser1 = CSVParser.parse("Jy7Fd,,/", cSVFormat2);
      cSVParser1.getRecords();
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      cSVParser0.isClosed();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('^');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("RecordSeparator=<", cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser0.getCurrentLineNumber();
      cSVParser1.getRecords((LinkedList<CSVRecord>) null);
      CSVRecord cSVRecord0 = cSVParser1.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat1.toString();
      PipedReader pipedReader1 = new PipedReader(2485);
      pipedReader1.close();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser cSVParser1 = CSVParser.parse("]", cSVFormat2);
      cSVParser1.getRecords();
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("t@5^oX\"B=h2@v=D", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      Character character0 = new Character('X');
      CSVParser cSVParser1 = CSVParser.parse("jy7fd,,/", cSVFormat0);
      cSVParser0.getRecords();
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVParser1.isClosed();
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.nextRecord();
      Iterator<CSVRecord> iterator1 = cSVParser0.iterator();
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat2.toString();
      pipedReader0.close();
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      CSVParser cSVParser1 = CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> NullString=<!,>guHwh=Z?DkE}~> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat3);
      cSVParser1.getHeaderMap();
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("The comment start and the escape character cannot be the same ('");
      File file0 = MockFile.createTempFile("Jy7Fd,,/", "Jy7Fd,,/", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse(file0, charset0, cSVFormat3);
      assertNotSame(cSVParser2, cSVParser1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("t@5^oX\"B=h2@v=D", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      CSVParser cSVParser1 = CSVParser.parse("jy7fd,,/", cSVFormat0);
      CSVParser cSVParser2 = CSVParser.parse("t@5^oX\"B=h2@v=D", cSVFormat0);
      cSVParser2.nextRecord();
      cSVParser1.nextRecord();
      cSVParser2.getCurrentLineNumber();
      CSVRecord cSVRecord0 = cSVParser1.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat2.toString();
      pipedReader0.close();
      CSVParser cSVParser1 = CSVParser.parse("Jy7Fd,,/", cSVFormat2);
      cSVParser1.getRecords();
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      cSVParser0.isClosed();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat4.withCommentStart('<');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      cSVFormat0.withDelimiter('^');
      PipedReader pipedReader0 = new PipedReader(938);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVFormat0.toString();
      pipedReader0.close();
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat0);
      cSVParser1.getRecords();
      cSVParser0.iterator();
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      cSVParser0.isClosed();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.getHeaderMap();
      cSVFormat0.toString();
      pipedReader0.close();
      CSVParser cSVParser1 = CSVParser.parse("ogcDRE0`Z<z`", cSVFormat1);
      cSVParser1.getRecords();
      MockURL.getHttpExample();
      cSVParser1.isClosed();
      cSVParser0.isClosed();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      cSVFormat0.withDelimiter('^');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVFormat0.withCommentStart('u');
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat0);
      cSVParser1.isClosed();
      CSVParser cSVParser2 = CSVParser.parse("", cSVFormat0);
      long long0 = cSVParser2.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('t');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('K');
      charset0.aliases();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyHeaders(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("t@5^oX\"B=h2@v=D", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      Character character0 = new Character('X');
      cSVFormat0.withEscape(character0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      cSVParser0.iterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "P!(7$mBd'Bu~>\"H";
      stringArray0[1] = "";
      stringArray0[2] = "t@5^oX\"B=h2@v=D";
      stringArray0[3] = "t@5^oX\"B=h2@v=D";
      stringArray0[4] = "";
      stringArray0[5] = "t@5^oX\"B=h2@v=D";
      stringArray0[6] = "t@5^oX\"B=h2@v=D";
      stringArray0[7] = "t@5^oX\"B=h2@v=D";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "P!(7$mBd'Bu~>\"H", 480L);
      linkedList0.add(cSVRecord0);
      cSVParser0.getRecords(linkedList0);
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse("org.apache.commons.csv.CSVRecord", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentStart('\\');
      pipedWriter0.write("Jy7Fd,,/");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!,>guHwh=Z?DkE}~");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.getHeaderMap();
      cSVFormat0.toString();
      pipedReader0.close();
      CSVParser.parse("!,>guHwh=Z?DkE}~", cSVFormat0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.withDelimiter('');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = null;
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList1);
      boolean boolean0 = false;
      cSVFormat0.withIgnoreEmptyLines(false);
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.toString();
      cSVParser0.getCurrentLineNumber();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('\'');
      cSVFormat0.withCommentStart(character0);
      CSVParser.parse("", cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser.parse("", cSVFormat1);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Lh");
      File file0 = MockFile.createTempFile("IVj'", "Lh", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "-TXX.V\\F%PM";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      CSVParser cSVParser0 = CSVParser.parse("-TXX.VF%PM", cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("P");
      MockFile mockFile1 = new MockFile(mockFile0, "P");
      // Undeclared exception!
      try { 
        Charset.forName("-TXX.VF%PM");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -TXX.VF%PM
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "]";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = '\'';
      cSVFormat0.withCommentStart('\'');
      cSVFormat0.withDelimiter('\'');
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.getRecordNumber();
      try { 
        MockURL.URL("]");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: ]
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      cSVFormat0.withDelimiter('^');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.close();
      CSVParser.parse("", cSVFormat0);
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat0);
      assertNotSame(cSVParser1, cSVParser0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "7&Splh*tmrZU:[6e`";
      StringReader stringReader0 = new StringReader("7&Splh*tmrZU:[6e`");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.mark(0);
      stringReader0.ready();
      stringReader0.read();
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
