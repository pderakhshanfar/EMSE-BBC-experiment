/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:35:02 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      Character character0 = Character.valueOf(':');
      cSVFormat1.withCommentStart(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withQuoteChar('n');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVParser cSVParser0 = CSVParser.parse("o,%@+&`99@`PNd#", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      Character.valueOf(':');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tq");
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#a/");
      cSVFormat2.withQuoteChar(':');
      CSVParser cSVParser0 = CSVParser.parse("o,%@+&`99@`PNd#", cSVFormat1);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      Character character0 = Character.valueOf(':');
      cSVFormat1.withCommentStart(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.withQuoteChar(':');
      CSVParser cSVParser0 = CSVParser.parse("o,%@+&`99@`PNd#", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[7];
      cSVFormat0.withQuoteChar('C');
      stringArray0[0] = "vv_w96d???-y4+wy";
      stringArray0[1] = "*FM4z";
      stringArray0[2] = "$-";
      stringArray0[3] = "\"\"!$P6DC-xO%e=7r";
      stringArray0[4] = "E4I,W8S{'{73a";
      stringArray0[5] = "=)*x/fs.";
      stringArray0[6] = ";2LcAx]8FE";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withNullString("CommentStart=<");
      CSVParser cSVParser0 = CSVParser.parse("*FM4z", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('>');
      Character.valueOf('a');
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat2);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertTrue(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withQuoteChar('Z');
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      // Undeclared exception!
      try { 
        CSVParser.parse("55`/v(`>u#", cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("F'5rh-", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('<');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      File file0 = MockFile.createTempFile("CSVParser has been closed", "u^'+t.r85j#b8)");
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CSVParser has been closed");
      CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(32);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      Character character0 = Character.valueOf('*');
      cSVFormat1.withCommentStart(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.withQuoteChar('*');
      CSVParser cSVParser0 = CSVParser.parse("o,%@+&`99@`PNd#", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertTrue(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withQuoteChar('Z');
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat2);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*9Oy{<,T4fO+";
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat1.withQuoteChar('=');
      CSVParser cSVParser0 = CSVParser.parse("*9Oy{<,T4fO+", cSVFormat2);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*9 y{,kiTYYO+";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = CSVParser.parse("*9 y{,kiTYYO+", cSVFormat2);
      CSVParser.parse("*9 y{,kiTYYO+", cSVFormat2);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      char char0 = '*';
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat0.withQuoteChar('(');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      Quote quote0 = Quote.ALL;
      cSVFormat3.withQuotePolicy(quote0);
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat3);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(">", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ">";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\"%-w\"N<>1zpa4c", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (line 1) invalid char between encapsulated token and delimiter
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("C3!wAq0 A}&8]ix.RA", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getHeaderMap();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVParser.parse("", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("Q", cSVFormat0);
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      MockURL.getFtpExample();
      Charset.defaultCharset();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.getRecordNumber();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("N-)s/haILkK", cSVFormat0);
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("<Q", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      assertFalse(linkedList0.contains(cSVRecord0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("%A3", "%A3");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(true);
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.getRecordNumber();
      cSVFormat1.withDelimiter('P');
      CSVParser cSVParser1 = CSVParser.parse("%A3", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.close();
      cSVParser1.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("%A3", "%A3");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(true);
      Character character0 = Character.valueOf('*');
      cSVFormat2.withQuoteChar(character0);
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat2);
      cSVParser0.getRecordNumber();
      cSVFormat1.withDelimiter('P');
      CSVParser.parse(file0, charset0, cSVFormat1);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList2 = new LinkedList<CSVRecord>();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('1');
      Character character0 = new Character('1');
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("(fi=\"C[@'%($3?2&K{", cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVParser0.getRecords();
      objectArray0[0] = (Object) cSVFormat1;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.getRecords();
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList2 = new LinkedList<CSVRecord>();
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader(398);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat2);
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("charset", cSVFormat0);
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      cSVParser0.getCurrentLineNumber();
      // Undeclared exception!
      try { 
        linkedList1.subList(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('1');
      Character character0 = new Character('1');
      cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVFormat1.format(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("]H(~&:,", cSVFormat2);
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "CSVParser has been closed");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      LinkedList<CSVRecord> linkedList1 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList1);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      cSVFormat0.format(objectArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.nextRecord();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("CSVParser has been closed");
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVParser cSVParser0 = CSVParser.parse("4oa7F5~.LJUY", cSVFormat0);
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat0);
      cSVParser1.getRecords(linkedList0);
      cSVParser1.close();
      cSVParser1.close();
      cSVParser0.getCurrentLineNumber();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[4oa7F5~.LJ, Y]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withDelimiter('1');
      Character character0 = new Character('1');
      cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("(fi=\"C[@'%($3?2&K{", cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVParser0.getRecords();
      objectArray0[0] = (Object) cSVFormat1;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVFormat1.format(objectArray0);
      cSVParser0.spliterator();
      cSVParser0.iterator();
      int int0 = (-1398);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('1');
      Character character0 = new Character('1');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("(fi=\"C[@'%($3?2&K{", cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVParser0.getRecords();
      objectArray0[0] = (Object) cSVFormat1;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVFormat1.format(objectArray0);
      cSVParser0.spliterator();
      cSVParser0.iterator();
      CSVParser.parse("]H(~&:,", cSVFormat2);
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "CSVParser has been closed");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, "OxGJApK", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL2, (Charset) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]qX");
      stringReader0.skip((-833L));
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('e');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Quote quote0 = Quote.ALL;
      stringReader0.ready();
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVFormat1.withCommentStart('w');
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("]qX", "]qX");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      cSVFormat2.withIgnoreEmptyLines(true);
      charArray0[1] = 'w';
      charArray0[2] = 'e';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-1), (-3867));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('u');
      cSVFormat1.withCommentStart(character0);
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ssC6.");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*9Oy{<,T4fO+";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('f');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('^');
      CSVParser cSVParser0 = CSVParser.parse("*9Oy{<,T4fO+", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.Lexer");
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('A');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = ';';
      pipedWriter0.write(charArray0);
      cSVFormat2.withDelimiter('@');
      cSVParser0.getRecordNumber();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("", cSVFormat0);
      CSVParser.parse("", cSVFormat0);
      URI uRI0 = MockURI.create("");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('z');
      Character character1 = Character.valueOf('h');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character1);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
