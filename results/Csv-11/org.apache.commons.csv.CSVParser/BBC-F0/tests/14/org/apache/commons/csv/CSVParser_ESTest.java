/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:22:32 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Hj\n", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n~";
      stringArray0[1] = "No more CSV records available";
      stringArray0[2] = "f?]X\"tGm:";
      stringArray0[3] = "2r";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("n~", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=X!AfF|lfV7";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("Q/.s|t<", cSVFormat2);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("4P$h/.<a ;,,iDGt@", cSVFormat1);
      MockFile mockFile0 = new MockFile("lqlU");
      File file0 = MockFile.createTempFile("Unexpected Token type: ", "Unexpected Token type: ", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser1.close();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("u|`nkSl");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray1);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=X!\\fF|lfV7";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse(".3qN{:\u0000a-CL'ID+R/", cSVFormat1);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("Delimiter=<", "P0lkRxCI#");
      File file0 = MockFile.createTempFile("ro?;&|'U", "=X!\\fF|lfV7", (File) mockFile0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('4');
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      try { 
        CSVParser.parse("\"b+=Wpm}sm=.W", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=X!\\fFulfV7");
      PrintStream printStream0 = mockPrintStream0.append('U');
      cSVFormat0.print(printStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=X!\\fFulfV7");
      CSVParser cSVParser0 = CSVParser.parse("=X!\\fFulfV7", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("h|vc)|S=qty_a7", cSVFormat1);
      assertNotSame(cSVParser1, cSVParser0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('\'');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('.');
      Character character0 = Character.valueOf(')');
      cSVFormat3.withQuoteChar(character0);
      CSVParser cSVParser0 = CSVParser.parse(" SurroundingSpaces:ignored", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=X!\\fFulfV7");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVParser cSVParser0 = CSVParser.parse("=X!\\fFulfV7", cSVFormat3);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=X!\\fFulfV7");
      CSVParser cSVParser0 = CSVParser.parse("The comment start character cannot be a line break", cSVFormat1);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=X!\\fFulfV7";
      cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("J:4Xo4Y3\".*JkFm", cSVFormat0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser$2");
      File file0 = MockFile.createTempFile("J:4Xo4Y3\".*JkFm", "org.apache.commons.csv.CSVParser$2", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse(file0, charset0, cSVFormat0);
      cSVParser0.getHeaderMap();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("4YwLSd;$zXrQ?|u@L", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("=X!\\fFulfV7", cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('a');
      CSVParser.parse("=X!\\fFulfV7", cSVFormat3);
      cSVParser0.nextRecord();
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("4YwLSd;$zXrQ?|u@L", cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!\\fFulfV7", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      CSVParser cSVParser1 = CSVParser.parse("=X!\\fFulfV7", cSVFormat0);
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!\\fFulfV7", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      // Undeclared exception!
      try { 
        cSVFormat0.withRecordSeparator('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Record separator can only by CR, LF or CRLF
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString(";'{n{!}Nb#xK&,HgP+D");
      CSVParser cSVParser0 = CSVParser.parse(";'{n{!}Nb#xK&,HgP+D", cSVFormat0);
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      // Undeclared exception!
      try { 
        cSVFormat0.withRecordSeparator('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Record separator can only by CR, LF or CRLF
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(";'{n{!}Nb#xK&,HgP+D", cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVParser cSVParser1 = CSVParser.parse(";'{n{!}Nb#xK&,HgP+D", cSVFormat1);
      cSVParser1.getRecords();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("#jTF,!af9Kx)N!>~", cSVFormat0);
      cSVParser0.getHeaderMap();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser cSVParser1 = CSVParser.parse("#jTF,!af9Kx)N!>~", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords();
      cSVParser0.close();
      cSVParser1.getRecordNumber();
      cSVParser1.iterator();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      cSVParser0.nextRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVParser.parse("org.apache.commons.csv.CSVParser$2", cSVFormat2);
      cSVParser0.nextRecord();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader(2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = '`';
      try { 
        pipedReader1.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      cSVParser0.getHeaderMap();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser cSVParser1 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(')');
      cSVFormat2.withEscape('_');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVParser cSVParser0 = CSVParser.parse("\"`p]ik", cSVFormat2);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      cSVParser0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVParser cSVParser1 = CSVParser.parse("=X!^fFulfV7", cSVFormat1);
      cSVParser1.getHeaderMap();
      cSVParser0.isClosed();
      try { 
        MockURL.URL("5}I{FAD_%ePo!`kTJ", "=X!^fFulfV7", "5}I{FAD_%ePo!`kTJ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 5}i{fad_%epo!`ktj
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " [";
      stringArray0[1] = "dsm7k";
      stringArray0[2] = "LbG0aP=gI~IP[6";
      stringArray0[3] = "";
      stringArray0[4] = "ldj";
      stringArray0[5] = " SkipHeaderRecord:";
      stringArray0[6] = "8zeG2ye)pyN";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withCommentStart(')');
      cSVFormat1.withEscape('X');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(";'{n{!}Nb#xK&,HgP+D", cSVFormat0);
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      cSVParser0.getHeaderMap();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser cSVParser1 = CSVParser.parse("=X!^fFulfV7", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.getRecords();
      boolean boolean0 = cSVParser1.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=X!^fFulfV7", cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(92);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(')');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('_');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("C]TS2LmF)C;OG']={KA", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.getRecords();
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(";'{n{!}Nb#xK&,HgP+D", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("*p5A");
      MockFile mockFile1 = new MockFile(mockFile0, "J[|k7Lua-<r");
      URL uRL0 = mockFile1.toURL();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withCommentStart('\"');
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat3);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(')');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('_');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.iterator();
      cSVFormat0.withIgnoreEmptyHeaders(true);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      Character character0 = Character.valueOf('m');
      cSVFormat0.withQuoteChar(character0);
      stringReader0.close();
      int int0 = 0;
      linkedList0.add((CSVRecord) null);
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('s');
      cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, (Charset) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0WK\"y1qx(jYEOqs8)%", "0WK\"y1qx(jYEOqs8)%");
      MockFile.createTempFile("0WK\"y1qx(jYEOqs8)%", "0WK\"y1qx(jYEOqs8)%");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      char char0 = '\"';
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\"');
      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "AWIq+H";
      File file0 = MockFile.createTempFile("AWIq+H", "AWIq+H");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\\');
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('s');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.isClosed();
      // Undeclared exception!
      try { 
        MockURL.URL("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }
}
