/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:24:56 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.close();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      pipedWriter0.close();
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedWriter0;
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      mockFile0.setReadable(true, false);
      mockFile0.toURL();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat2);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      mockFile0.toURL();
      cSVParser0.getCurrentLineNumber();
      // Undeclared exception!
      try { 
        Charset.forName("[!Pe]tFN,:?C|_:o;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [!Pe]tFN,:?C|_:o;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      Character character0 = new Character('k');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedWriter0;
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      mockFile0.setReadable(true, false);
      mockFile0.toURL();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      mockFile0.toURL();
      // Undeclared exception!
      try { 
        Charset.forName("[!Pe]tFN,:?C|_:o;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [!Pe]tFN,:?C|_:o;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      try { 
        CSVParser.parse("\" in ", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("(linzp ", cSVFormat1);
      File file0 = MockFile.createTempFile("(linzp ", "(linzp ");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(file0, charset0, cSVFormat1);
      assertFalse(cSVParser1.equals((Object)cSVParser0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser.parse(".7lrC`", cSVFormat1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7s}";
      stringArray0[1] = ") invalid parse sequence";
      stringArray0[2] = "~$V";
      stringArray0[3] = "D.UYb<pO*iP4P";
      Character character0 = Character.valueOf('6');
      cSVFormat0.withCommentStart(character0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "MN@\"SP@");
      stringArray0[4] = "i";
      stringArray0[5] = "7Q[i72ehCen$B~";
      stringArray0[6] = "?ekq!I)L/@d4,V";
      stringArray0[7] = ">l~6)}ui/_etc";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse(">l~6)}ui/_etc", cSVFormat1);
      cSVParser0.nextRecord();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("?ekq!I)L/@d4,V");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        CSVParser.parse("format", cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("RXPEPt6),`[x$)$jb6E", cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("#MAK?#rY=;_9", cSVFormat1);
      // Undeclared exception!
      try { 
        cSVParser0.forEach((Consumer<? super CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVPrinter$1", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVFormat0.withSkipHeaderRecord(true);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      cSVFormat0.print(mockFileWriter0);
      cSVParser0.forEach(consumer0);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.nextRecord();
      cSVParser0.getRecords(linkedList0);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat0);
      cSVParser0.getRecords();
      CSVParser cSVParser1 = CSVParser.parse("The comment start character and the delimiter cannot be the same ('", cSVFormat1);
      cSVParser1.getRecords();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Vg#g!UR20");
      LinkedList<CSVRecord> linkedList0 = cSVParser1.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Unexpected Token type: ";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat";
      stringArray0[3] = "?ekq!I)L/@d4,V";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('B');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyHeaders(false);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.Token$Type");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(line ";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.iterator();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader1);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser1 = CSVParser.parse("$p=E", cSVFormat3);
      cSVParser0.iterator();
      cSVParser0.close();
      CSVParser cSVParser2 = CSVParser.parse("EORECORD", cSVFormat1);
      assertFalse(cSVParser2.equals((Object)cSVParser1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf(':');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Character character1 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      cSVFormat2.withCommentStart(':');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(':');
      CSVParser cSVParser0 = CSVParser.parse("P#m)J!lR1i", cSVFormat3);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecords();
      Character.valueOf('p');
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Character character1 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('(');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CCOEm{G|3";
      stringArray0[1] = "org.apache.commons.csv.Lexer";
      stringArray0[2] = "W3>@qHs/W>";
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      cSVParser0.iterator();
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Character character1 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('(');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CCOEm{G|3";
      stringArray0[1] = "org.apache.commons.csv.Lexer";
      stringArray0[2] = "W3>@qHs/W>";
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("SIzR!e", cSVFormat2);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      CSVParser cSVParser1 = cSVFormat2.parse(pipedReader0);
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Character character1 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('(');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CCOEm{G|3";
      stringArray0[1] = "org.apache.commons.csv.Lexer";
      stringArray0[2] = "W3>@qHs/W>";
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat4.parse(pipedReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVParser0.isClosed();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[url]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Character character0 = new Character('+');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      Character character1 = Character.valueOf('-');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat1.format(objectArray0);
      MockFile mockFile0 = new MockFile("$2BE[B<[Kh&I");
      mockFile0.toURL();
      CSVParser.parse("", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat2 = null;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, charset0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('S');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat3);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      CSVParser cSVParser1 = cSVFormat0.parse(pipedReader0);
      cSVParser1.getHeaderMap();
      MockFile mockFile0 = new MockFile((String) null, "");
      File file0 = MockFile.createTempFile("(line ", "(line ", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      CSVParser cSVParser2 = CSVParser.parse(file0, charset0, cSVFormat3);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser", cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.getRecordNumber();
      List<CSVRecord> list0 = cSVParser0.getRecords();
      Collection<CSVRecord> collection0 = cSVParser0.getRecords((Collection<CSVRecord>) list0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>(collection0);
      cSVParser0.getRecords(linkedList0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('S');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.iterator();
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      CSVParser cSVParser1 = cSVFormat0.parse(pipedReader0);
      Map<String, Integer> map0 = cSVParser1.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreEmptyHeaders(false);
      CSVParser cSVParser0 = CSVParser.parse("ua", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "jYAPDdEWpE&";
      stringArray0[1] = "(line ";
      stringArray0[2] = "(line ";
      stringArray0[3] = "(line ";
      stringArray0[4] = "org.apache.commons.csv.ExtendedBufferedReader";
      stringArray0[5] = "(line ";
      stringArray0[6] = "jYAPDdEWpE&";
      stringArray0[7] = "(line ";
      stringArray0[8] = "(line ";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1);
      cSVParser0.getHeaderMap();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "(line ", 0L);
      cSVParser0.spliterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      linkedList0.add(cSVRecord0);
      cSVFormat0.withEscape('T');
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      CSVParser cSVParser1 = CSVParser.parse("(line ", cSVFormat0);
      assertFalse(cSVParser1.equals((Object)cSVParser0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jYAPDdEWpE&";
      stringArray0[1] = "jYAPDdEWpE&";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "jYAPDdEWpE&", 256L);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.spliterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.nextRecord();
      linkedList0.add((CSVRecord) null);
      cSVFormat0.withEscape('/');
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.csv.CSVParser";
      stringArray0[1] = "d>R?%0(3TwcuFy3E";
      stringArray0[2] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[3] = "org.apache.commons.csv.CSVParser";
      cSVFormat1.format(stringArray0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser");
      URL uRL0 = mockFile0.toURL();
      CSVParser cSVParser0 = CSVParser.parse("java.lang.String@0000000005,java.lang.String@0000000006,java.lang.String@0000000007,java.lang.String@0000000005,,,,", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecordNumber();
      CSVParser cSVParser1 = CSVParser.parse("The header contains a duplicate entry: '", cSVFormat2);
      cSVParser1.getRecordNumber();
      cSVParser1.getHeaderMap();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser1.getCurrentLineNumber();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      cSVFormat1.withIgnoreEmptyLines(false);
      Character.valueOf('S');
      cSVFormat0.toString();
      CSVParser.parse("(line ", cSVFormat1);
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) pipedWriter0;
      cSVFormat1.format(objectArray0);
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      mockFile0.toURL();
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,java.io.PipedWriter@0000000005", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Charset.forName("[!Pe]tFN,:?C|_:o;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [!Pe]tFN,:?C|_:o;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      cSVParser0.getCurrentLineNumber();
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser1.close();
      assertFalse(cSVParser1.equals((Object)cSVParser0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVParser cSVParser0 = CSVParser.parse("~xwz~BO!^T[ij", cSVFormat0);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("~xwz~BO!^T[ij");
      File file0 = MockFile.createTempFile("~xwz~BO!^T[ij", "~xwz~BO!^T[ij", (File) mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = new Character('u');
      cSVFormat1.withCommentStart(character0);
      Character character1 = Character.valueOf('u');
      cSVFormat1.withEscape(character1);
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      cSVFormat0.withIgnoreEmptyHeaders(true);
      Character.valueOf('n');
      Character character0 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3392);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line ");
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      MockFile mockFile0 = new MockFile("(line ");
      mockFile0.toURL();
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader1, cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "url";
      stringArray0[1] = "url";
      stringArray0[2] = "url";
      stringArray0[3] = "url";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, 534L);
      StringReader stringReader0 = new StringReader("Ys;0@YI- %");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.spliterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      linkedList0.add(cSVRecord0);
      cSVFormat0.withEscape('~');
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      cSVParser0.getHeaderMap();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "url";
      stringArray0[1] = "#S=iOx,;j8GuO";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jYAPDdEWpE&", 256L);
      cSVParser0.spliterator();
      cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('W');
      CSVParser cSVParser1 = CSVParser.parse("#S=iOx,;j8GuO", cSVFormat2);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser1.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser1.getHeaderMap();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, (-1203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "url";
      stringArray0[1] = "#S=iOx,;j8GuO";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jYAPDdEWpE&", 256L);
      cSVParser0.spliterator();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      linkedList0.add(cSVRecord0);
      cSVFormat0.withEscape('T');
      cSVParser0.getRecords(linkedList0);
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVParser cSVParser0 = CSVParser.parse("~xwz~BO!^T[ij", cSVFormat0);
      cSVParser0.isClosed();
      MockFile mockFile0 = new MockFile("~xwz~BO!^T[ij");
      File file0 = MockFile.createTempFile("~xwz~BO!^T[ij", "~xwz~BO!^T[ij", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "~xwz~BO!^T[ij");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      try { 
        CSVParser.parse((File) mockFile1, (Charset) null, cSVFormat1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("url", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("j/Pa?cD^d^");
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      cSVFormat3.withEscape('?');
      CSVParser cSVParser0 = CSVParser.parse("j/Pa?cD^d^", cSVFormat3);
      cSVParser0.spliterator();
      cSVParser0.getHeaderMap();
      MockFile mockFile0 = new MockFile("j/Pa?cD^d^");
      // Undeclared exception!
      try { 
        Charset.forName("Unexpected Quote value: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Unexpected Quote value: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyHeaders(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVParser cSVParser0 = CSVParser.parse("j;xAhl", cSVFormat3);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }
}
