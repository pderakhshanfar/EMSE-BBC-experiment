/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(885, 0, (-1217), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(420);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(540, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(318, "                                                                                                                                                                                                                                                                                                                              ");
      assertEquals("                                                                                                                                                                                                                                                                                                                              ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "y'RO$~<LZ/Swlfs4");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(1576, 0, 0, false, false, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 36, 885, false, false, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(520, (-1924), 19, false, false);
      assertEquals("\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C\uF87C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1607 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -121 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(48614, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-863), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -863 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1261), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1261 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(868, 868, 868, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, 1576, 6, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(621L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 520, 520, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1022, (-1782), 1022, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2544, (-1), (-1), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2608), (-1359), 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2608 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1820L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      String string0 = RandomStringUtils.random(4457, 0, (int) (byte)22, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(128, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2868, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1622, (-1740), 0, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4243), (-4243), 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4243 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1228), 234, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (String) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(948, 56192, 948, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(941, 56179, 941, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2285, 57343, 2285, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 1050, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1213);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(588, (-1339), 1213, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomNumeric(22);
      assertEquals("6666666666666666666666", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(4536);
      String string0 = RandomStringUtils.randomAlphanumeric(4536);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(22);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(2868);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(648);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), Integer.MAX_VALUE, 985, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(5);
      assertEquals("     ", string0);
  }
}
