/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:37:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(721);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphanumeric(2324);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1799);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'K';
      String string0 = RandomStringUtils.random(721, 1, 721, true, true, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 0, 3880, true, true, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 227, 424, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -303 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2382 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1070 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(714, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-580), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -580 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 2923, 2923, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1084, (-5945), 1247, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1685, 1685, 1685, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, (-2896), 32, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 57343, 57343, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(723, 56320, 723, false, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-80), 1, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -80 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2705 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-229), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -229 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(46325);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(985, (-1120), (-2705), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0\uFBA0", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46325, 46325, (-4527), true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2705));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(626, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2705));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(626, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2705));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(626, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 22, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(1210L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2656), (-1434), 123, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2656 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1163), (-1163), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1120), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1120 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (String) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(145, 55296, 145, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (-2896), 32, false, false);
      assertNotNull(string0);
      assertEquals("\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0\uF4B0", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2705));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(37, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '9';
      // Undeclared exception!
      RandomStringUtils.random(46325, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertNotNull(string0);
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(550, 0, (-2167), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2705));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(37, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4401, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2431);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -391 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
