/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:49:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(596, 0, (-3225), true, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1767), 0, (-1779), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1767 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-964));
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(15, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      String string0 = RandomStringUtils.random(664, 0, 664, true, true, charArray0);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 33, 33, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(33);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2061 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -349 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(359);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1404), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1404 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, true, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1257), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1257 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56214, (String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1085), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1085 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(24, (-986), 2565, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1127, 56192, 56192, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2078), 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1313), 127, (-1313), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1313 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(981, 981, 981, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -396 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(596, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1788L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2507, (-1409), (-517), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-986));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1935, 49860, 1, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2451, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2451, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2711, 0, 14, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-6615), 19, 50, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6615 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 1256, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(9, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, (-517), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(31, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56339, (-517), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(2507, (-517), 2507, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56339, 56339, (-1651), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(998, 1639, 998, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667\u0667", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom((-1089));
      String string0 = RandomStringUtils.randomAlphanumeric(1336);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(516, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(33, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "%");
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3239 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.random(5682);
      // Undeclared exception!
      RandomStringUtils.random(5682);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1336);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1012, 55296, 55296, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(9);
      assertEquals("         ", string0);
  }
}
