/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:48:18 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1614, 0, (-506), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertNotNull(string0);
      assertEquals("222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3072);
      String string0 = RandomStringUtils.randomAlphanumeric(2595);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, (-3526), true, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1937);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1947 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56160);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1643 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -680 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1788));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1788 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1379), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1379 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1856, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(888, 888, 888, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(36198, 1281, (-1662), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, (-1598), (-1598), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56200, (-293), 2055, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2156, (-2032), (-2037), true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1432, 32, 32, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-351), 1340, 1522, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -351 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2809, 2809, 2809, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2068));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2068 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(341);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(341, 3072, 36215, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56192);
      MockRandom mockRandom0 = new MockRandom(341);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1186, (-4407), 56192, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1692), 563, 2653, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1692 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1543L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(495, 706, 36232, false, false);
      assertNotNull(string0);
      assertEquals("\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2\u02C2", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(27, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, (String) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56177);
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 23, 57343, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(37, 55296, 37, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56177, 56320, 56177, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56177);
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(341, 57343, 56320, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6\uE3A6", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, (-781), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56177);
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(24, 25, 56177, false, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("222222222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3072);
      String string0 = RandomStringUtils.randomAlphabetic(3685);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4588);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(1614, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1401, 4873, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "K=P~7Y4R|D{");
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2399), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2399 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2595);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3685);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 36194, 17, false, false, (char[]) null);
      assertEquals("\u8D62", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
