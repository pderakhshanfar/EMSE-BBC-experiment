/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:53:44 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 1210;
      String string0 = RandomStringUtils.random(1210);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1210, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      org.evosuite.runtime.Random.setNextRandom(387);
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(662);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEqualsstring2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 56319;
      int int1 = 0;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string0 = RandomStringUtils.random(127, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(3, charArray0.length);
      
      String string1 = RandomStringUtils.random(38);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string1);
      
      String string2 = RandomStringUtils.random(2, "v");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("vv", string2);
      
      org.evosuite.runtime.Random.setNextRandom(127);
      String string3 = RandomStringUtils.randomAscii(0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAlphabetic(35);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(3485, (char[]) null);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(3485, 56191, (-1109), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2239, 57343, 37, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt((-2584));
      assertEquals(1, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(3522, 56191, (-1109), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = ':';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt((-2584));
      assertEquals(0, int0);
      
      String string1 = RandomStringUtils.random(3522, 56191, (-1109), false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56191);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2240, 57343, 37, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -763 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(37, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int0 = 2666;
      boolean boolean0 = false;
      int int1 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 39, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      // Undeclared exception!
      RandomStringUtils.random(7, 55296, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(46204, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(3522);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = (-1294);
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(3522, (-970), (-342), true, true, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(3522, (-342), 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 289;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 0, 289, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      String string0 = RandomStringUtils.random(0, 3482, 0, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(3482);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(30, 0, 57343, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(4, 0, (-1575), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(3522, (char[]) null);
      assertNotNull(string0);
      
      int int0 = 46347;
      MockRandom mockRandom0 = new MockRandom((-766L));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0L);
      int int1 = 56192;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 46347, true, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[1];
      long long1 = mockRandom0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      String string0 = RandomStringUtils.random(127, 127, 1, false, false);
      assertNotNull(string0);
      assertEquals("\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081\u0081", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1348);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'r';
      charArray0[0] = '\\';
      String string0 = RandomStringUtils.random(9, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertNotNull(string0);
      assertEquals("                                                                                                                           ", string0);
      
      String string1 = RandomStringUtils.random(123);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'm';
      // Undeclared exception!
      RandomStringUtils.random(123, false, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[0] = '4';
      charArray0[2] = 'U';
      charArray0[3] = '^';
      charArray0[4] = '~';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'4', '\u0000', 'U', '^', '~'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0, 0, 127);
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string2 = RandomStringUtils.random(127, 0, 1, true, true, charArray0, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'4', '\u0000', 'U', '^', '~'}, charArray0);
      assertNotNull(string2);
      assertEquals("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string2);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = '4';
      charArray0[2] = 'U';
      charArray0[3] = '^';
      charArray0[4] = '~';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(187, (-775), (-775), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'r';
      charArray0[3] = '\\';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(1155);
      String string0 = RandomStringUtils.random(1155, (-1), 56320, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'>', 'G', 'r', '\\'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      
      String string1 = RandomStringUtils.random(9, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1979);
      org.evosuite.runtime.Random.setNextRandom((-1979));
      int int1 = 1191;
      int int2 = 2439;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'G';
      charArray0[2] = '(';
      charArray0[3] = 's';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1191, 2439, (-1979), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 5352;
      org.evosuite.runtime.Random.setNextRandom(5352);
      int int1 = 2223;
      String string0 = RandomStringUtils.randomAlphanumeric(2223);
      assertNotNull(string0);
      
      int int2 = (-2164);
      org.evosuite.runtime.Random.setNextRandom((-2164));
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2223);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1);
      int int1 = 56320;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'r';
      charArray0[3] = '\\';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'r';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertNotNull(string0);
      assertEquals("                                                                                                                           ", string0);
      
      String string1 = RandomStringUtils.random(123);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      int int0 = 2028;
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'm';
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(37550, "I&Ef5/");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, false, false);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = 1;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = 'Q';
      // Undeclared exception!
      RandomStringUtils.random(47514, 1, 0, false, false, charArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1155;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'r';
      charArray0[3] = '\\';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      mockRandom0.setSeed(1155);
      String string0 = RandomStringUtils.random(1155, (-1), 56320, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'>', 'G', 'r', '\\'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[4];
      int int1 = 56192;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 954, 954, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertNotNull(string0);
      assertEquals("                                                                                                                           ", string0);
      
      String string1 = RandomStringUtils.random(123);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'm';
      String string2 = RandomStringUtils.random(2351, " is less than 0.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(125, 11, 11, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      int int0 = 1;
      String string0 = RandomStringUtils.random(0, 0, 1, true, true, charArray0);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1280), 57343, 127, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1280 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = '4';
      charArray0[2] = 'U';
      charArray0[3] = '^';
      charArray0[4] = '~';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'t', '4', 'U', '^', '~'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string2 = RandomStringUtils.random(127, 0, 1, true, true, charArray0, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'t', '4', 'U', '^', '~'}, charArray0);
      assertNotNull(string2);
      assertEquals("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string2);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-342);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -342 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 332;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(332, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'c';
      charArray0[2] = 'N';
      charArray0[3] = 'Z';
      charArray0[4] = 'M';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-823), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -823 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-6483);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-6483), ":]g0H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6483 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1241;
      int int1 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1241, (-1), 1241, true, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1967);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1967 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-3023);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3023), (-8), (-3023), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3023 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 't';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      charArray0[4] = 'A';
      charArray0[5] = '0';
      charArray0[6] = '<';
      charArray0[7] = 'k';
      String string1 = RandomStringUtils.random(0, 32, 32, true, true, charArray0, (Random) null);
      assertArrayEquals(new char[] {'*', 't', 'z', 'e', 'A', '0', '<', 'k'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(618, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(618, false, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(957, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int0 = 1;
      String string1 = RandomStringUtils.random(1, "C6Zkv8:FWXLl@[ ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C", string1);
      
      String string2 = RandomStringUtils.random(1, "QF&dFe");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Q", string2);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(977);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 4845;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4845);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
      RandomStringUtils.random(0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, false, false);
      RandomStringUtils.random(0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '?';
      charArray0[4] = 'n';
      charArray0[5] = 'Z';
      charArray0[6] = ';';
      charArray0[7] = '4';
      MockRandom mockRandom0 = new MockRandom((-481L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1027, 447, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1, 1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '.';
      charArray0[2] = 'C';
      charArray0[3] = '>';
      charArray0[4] = 'a';
      charArray0[5] = '[';
      RandomStringUtils.random(0, (-1), 56320, false, false, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3359 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'w';
      RandomStringUtils.random(1, 1, 0, false, false, charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'C';
      charArray1[1] = 'w';
      charArray1[2] = 'C';
      charArray1[3] = '!';
      charArray1[4] = 'C';
      RandomStringUtils.random(0, charArray1);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-3630);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '/';
      charArray0[2] = 'c';
      charArray0[3] = '4';
      charArray0[4] = 'b';
      charArray0[5] = 'K';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3630), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3630 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.randomAscii(123);
      String string0 = RandomStringUtils.random(123);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'm';
      charArray0[2] = '`';
      charArray0[3] = 'n';
      String string1 = RandomStringUtils.random(2028, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, (-3240), (-3240), false, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'X';
      charArray0[2] = ' ';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'F';
      charArray0[6] = 'M';
      String string0 = RandomStringUtils.random(0, 0, (-510), false, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '0';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, charArray0);
      int int1 = (-3025);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3025), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3025 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
      boolean boolean0 = true;
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      int int0 = 0;
      RandomStringUtils.random(0, false, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1643 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '\"';
      charArray0[2] = 'b';
      charArray0[3] = 'M';
      charArray0[4] = '=';
      charArray0[5] = 'K';
      charArray0[6] = ' ';
      charArray0[7] = 'e';
      charArray0[8] = 'c';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, "T&-<hZ21rI5");
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(829);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.random(1);
      int int0 = 398;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(398);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1155;
      int int1 = 56320;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'r';
      charArray0[3] = '\\';
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.setSeed(1155);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1155, (-1), 56320, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1468 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = (-2731);
      boolean boolean0 = false;
      RandomStringUtils.random(0, (-2731), (-2731), false, false);
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1849 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
