/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:38:50 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(1109);
      String string0 = RandomStringUtils.randomNumeric(1109);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(781);
      String string0 = RandomStringUtils.randomAlphanumeric(679);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-2086));
      String string0 = RandomStringUtils.randomAlphabetic(14);
      assertNotNull(string0);
      assertEquals("tttttttttttttt", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(1832, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(2139, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      String string0 = RandomStringUtils.random(1872, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2509 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(49919);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(965);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -185 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(28);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2182 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1231, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-591), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -591 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3093), " is less than 0.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3093 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, (-1860), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(387, 15, 1891, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2051, 2051, 2051, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1288, 127, 1288, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3842), 0, 57343, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3842 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1917, 3130, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(22, 56319, 7, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1159), (-66), (-1159), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1159 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-317), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -317 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(143L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(984, (-5155), 56320, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD\uEBDD", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(768);
      assertNotNull(mockRandom0);
      
      Random.setNextRandom((-1261));
      String string0 = RandomStringUtils.random(768, 1962, 4, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97\u0C97", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(143L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1244, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(143L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1244, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-910), (-910), 23, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -910 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 1288, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(124, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(743, 55296, (-5155), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1483, 57343, 38, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      String string0 = RandomStringUtils.random(24, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("222222222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(768, (-1261), 4, true, false);
      assertEquals("\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13\uFB13", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1109);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(143L);
      // Undeclared exception!
      RandomStringUtils.random(1244, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "y!P^QOycB&Y[Pl");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4293, 1144, 1144, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2346 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(127);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(614, 1030, 1030, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1698);
      assertNotNull(string0);
  }
}
