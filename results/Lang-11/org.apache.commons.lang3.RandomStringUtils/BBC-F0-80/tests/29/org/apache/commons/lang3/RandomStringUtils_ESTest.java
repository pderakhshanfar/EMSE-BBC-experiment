/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:59:59 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, (-1339), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(56191);
      String string0 = RandomStringUtils.randomAlphabetic(2625);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "[DL9r");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(127, 0, 127, false, false, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, (-2003), 0, true, true, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1686 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3229 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1481 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-147), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -147 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1691, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2407, 2407, 56191, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5880, 5880, (-2349), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom((-392L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3547, (-1), (-11), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-232), (-232), 46, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -232 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1996, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-979), (-979), (-979), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -979 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2997, 2997, 2997, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -497 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(127, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 1431, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(36, 2924, 36, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C\u0B6C", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1277, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1028, 0, 8, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-110), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(28, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1431, 56192, 1431, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1431, 56188, 1431, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(38, 56320, 38, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1852L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(798, (-1339), 798, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 57278, 3069, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertNotNull(string0);
      assertEquals("222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-1897));
      String string0 = RandomStringUtils.randomAlphanumeric(35);
      assertNotNull(string0);
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2951, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(2173L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3628);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2468), (-26), 3, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2468 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1560), (-1560), false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(18);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(1407);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(35);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2625);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1990, 1990, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1407);
      assertNotNull(string0);
  }
}
