/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:28:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(759);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-565));
      String string0 = RandomStringUtils.randomAlphanumeric(199);
      assertEquals("3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      String string0 = RandomStringUtils.random(15, 0, 0, false, true, charArray0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("666666666666666", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 57343, (-1834), false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(895);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3054 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1410);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -421 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(15, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(586, 586, 586, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(11, (-2769), (-1975), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1688), 2740, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1688 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, (-135), (-1), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1741, 56158, 56158, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3116), (-1), 21, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3116 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 605, 605, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-855), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -855 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 26, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(823);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(386, (-332), (-1069), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4\uFEB4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(823);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(816, 0, (-2639), false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 123, 123, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-565), 199, 199, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -565 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1623, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46324, (String) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(13, 56319, (-2369), false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55296);
      // Undeclared exception!
      RandomStringUtils.random(5, 55296, 1553, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(178, (-1060), (-2369), true, true);
      assertEquals("\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC\uFBDC", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(39, 56320, 3458, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1780, 1780, 1, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(37);
      String string0 = RandomStringUtils.randomAlphabetic(2);
      assertEquals("EE", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(823);
      // Undeclared exception!
      RandomStringUtils.random(2, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(15, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1748, 1748, 1748, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2236 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(2020);
      String string1 = RandomStringUtils.random(2020, string0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1179 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
