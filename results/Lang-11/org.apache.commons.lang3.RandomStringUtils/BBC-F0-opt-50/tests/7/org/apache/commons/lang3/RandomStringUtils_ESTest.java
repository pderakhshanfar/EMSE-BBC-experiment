/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:17:18 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-172));
      String string0 = RandomStringUtils.randomAlphabetic(36);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(17, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(36, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-508), 1, false, false);
      assertEquals("\uFE04", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-565), 2223, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1499);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -408 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, " is less than 0.");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(4998);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(4998);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2941 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -238 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -789 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2362), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2362 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5971), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5971 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1357, 36201, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1830, (-1), 1026, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2054, 917, 32, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1756), 2524, 2524, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1756 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4132, 6, 6, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(19, 56191, 2328, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1766L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(951, 1035, (-1), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B\u040B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3200, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3200, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1066, 0, 2451, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 216, 0, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 34, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(127, true, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "\u0000\u0000\u0000\u0000\u0000");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(3200, 56191, 2077, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom(56161);
      // Undeclared exception!
      RandomStringUtils.random(3001);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(7, 57343, 55296, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1576);
      // Undeclared exception!
      RandomStringUtils.random(56319, 3, 1576, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(39, (-238), 1026, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12\uFF12", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(4261);
      String string0 = RandomStringUtils.randomAlphanumeric(4448);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(33, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(413, 0, (-772), true, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) (byte)36, (int) (byte)0, (-105), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(270, 1133, 1133, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -830 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(3001);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(4448);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(36);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(6, 56320, (-4023), false, false, (char[]) null);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii((byte)0);
      assertEquals("", string0);
  }
}
