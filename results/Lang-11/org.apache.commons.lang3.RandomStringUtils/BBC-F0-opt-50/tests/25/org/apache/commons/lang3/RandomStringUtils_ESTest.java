/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:39:22 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(414);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(847, 0, (-892), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(2310);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomAlphanumeric(2240);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(419);
      String string0 = RandomStringUtils.randomAlphabetic(3775);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(6, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      String string0 = RandomStringUtils.random(1699, 0, 1699, true, true, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'k', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = RandomStringUtils.random(0, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'k', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 312, 0, false, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(414, (-854), (-182), false, false);
      assertNotNull(string0);
      assertEquals("\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA\uFCAA", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -458 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(46211);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -662 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1663 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(598);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1163 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1615), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1615 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 37, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(761, 761, 3201, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2306L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(21, 21, 21, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1219), (-1219), 362, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1219 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, (-925), (-925), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(939, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1446), (-1446), (-1446), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1446 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2032 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-937), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -937 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 56192, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      RandomStringUtils.random(419, 57316, 107, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[9];
      mockRandom0.nextFloat();
      mockRandom0.nextFloat();
      charArray0[8] = '7';
      String string0 = RandomStringUtils.random(6, 6, 358, true, true, charArray0, (Random) mockRandom0);
      assertEquals("777777", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(6, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(6, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(17, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 0, 3579, false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 6, 46197, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(567, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(134, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(137, 55296, (-92), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57343);
      // Undeclared exception!
      RandomStringUtils.random(111, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      String string0 = RandomStringUtils.random(419, 57343, 107, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57343);
      String string0 = RandomStringUtils.random(128, false, false);
      assertEquals("\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF\uD87F\uDFFF", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(6, 419, 6, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u01A3\u01A3\u01A3\u01A3\u01A3\u01A3", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(1699, 0, 1699, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(215L);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 46230, 46230, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2456), 0, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2456 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2310);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(18);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
