/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(267);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-41));
      String string0 = RandomStringUtils.randomAlphanumeric(3036);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(1, 1, 1120, false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(999, (-2107), 55296, false, false);
      assertNotNull(string0);
      assertEquals("\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5\uF7C5", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(2158);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1856 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55332);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -973 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(46214, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(32, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-830), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -830 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "PT");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(29, 128, 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(999, 999, 999, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 656, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2218), 919, 1229, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2218 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(304, 304, 304, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1976, 56319, 55296, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1503, (-348), (-348), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(1660, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(769, 1635, (-744), false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663\u0663", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2554, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2554, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-435), 1, (-435), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -435 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 2775, (-2784), false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(6, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-67), (-1096), 280, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -67 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3074), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3074 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4366), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4366 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(37, "n");
      assertNotNull(string0);
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(212, 56192, Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(659, 56163, 1493, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56320, (-129), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(123, (-744), 1874, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18\uFD18", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(46344);
      String string0 = RandomStringUtils.randomNumeric(128);
      assertNotNull(string0);
      assertEquals("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom((-797));
      String string0 = RandomStringUtils.randomAlphabetic(5);
      assertNotNull(string0);
      assertEquals("eeeee", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2554, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(239);
      // Undeclared exception!
      RandomStringUtils.random(239, 0, (-1), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(128);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3036);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(5);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 128, 127, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2634 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
