/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:12:42 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(38, 0, (-1352), false, false, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomAlphanumeric(2459);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(328);
      String string0 = RandomStringUtils.randomAlphabetic(31);
      assertNotNull(string0);
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, " is less than 0.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, (-1), 969, true, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 289, 289, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2071 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -20 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-4717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4717 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom(56320);
      // Undeclared exception!
      RandomStringUtils.random(1, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2634, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1092, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1563, 1563, 0, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1499, 56319, 56319, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-118), false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2115), 2358, (-939), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2115 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 2053, 1, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6604, 6604, 6604, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-519), (-519), (-519), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -519 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2473, (-1), (-1), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(6605);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(6605);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5291 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1502);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(29, 56172, 2468, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(38, (-79), (int) (byte)68, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1\uFFB1", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1115L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(3, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1115L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'p';
      String string0 = RandomStringUtils.random(3, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("ppp", string0);
      assertArrayEquals(new char[] {'\u0000', 'p', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(5, 50, 40, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("22222", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1563, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1575, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1563, 0, 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1115L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(3, 0, 56191, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-6937), 0, (-1958), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6937 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(3757, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1502);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(29, 56192, 2468, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(43, 55296, 2327, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1005, 56320, (-2957), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(20);
      String string0 = RandomStringUtils.randomNumeric(20);
      assertEquals("44444444444444444444", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(649, (-1378), (-118), true, true);
      assertEquals("\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1115L));
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(3, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1530, 57343, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46382, "\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E\uFA9E");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(20);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2459);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(763);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(33);
      assertEquals("                                 ", string0);
  }
}
