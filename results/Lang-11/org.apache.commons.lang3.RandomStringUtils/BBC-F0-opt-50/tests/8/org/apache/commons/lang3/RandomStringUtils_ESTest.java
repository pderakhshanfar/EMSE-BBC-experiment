/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:18:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(14);
      assertEquals("              ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(2113);
      String string0 = RandomStringUtils.randomAlphanumeric(2113);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(2113);
      String string0 = RandomStringUtils.random(505, false, true);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = '4';
      String string0 = RandomStringUtils.random(1, 5, 1357, false, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '4', '\u0000', '\u0000'}, charArray0);
      assertEquals("4", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, (-428), 0, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(669, (-890), (-3316), true, true);
      assertEquals("\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86\uFC86", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-348));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -348 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -890 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -441 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(32);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-566), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -566 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(836, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1789), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1789 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-251), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -251 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 2558, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 2383, 127, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1831), 0, 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1831 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1022, (-229), (-348), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(49, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2616), (-1), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2616 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2756, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4231 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(2319, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46236, 0, (-2035), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 3672, 56319, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2351, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2351, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2351, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, 3927, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, (-1688), (-3213), true, true, charArray0, (java.util.Random) null);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 9, 56320, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(2558, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1246, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "!");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6L);
      // Undeclared exception!
      RandomStringUtils.random(478, 56192, 9, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(17, 56140, 17, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 21, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(27);
      String string0 = RandomStringUtils.random(2558, (-1), 16, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 123, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom(2747);
      String string0 = RandomStringUtils.randomNumeric(2747);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphabetic(6);
      assertEquals("EEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(46206, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1357, 874, (-2920), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2747);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(18);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2113);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2458 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 3, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
