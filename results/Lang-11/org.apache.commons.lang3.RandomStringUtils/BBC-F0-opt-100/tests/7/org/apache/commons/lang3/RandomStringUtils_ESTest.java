/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, (-626), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(4416);
      String string0 = RandomStringUtils.randomAlphabetic(4416);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1729, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(2609);
      String string0 = RandomStringUtils.random(2609, 2609, (-1937), true, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, 20, 20, false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(272, 272, 0, true, true);
      assertNotNull(string0);
      assertEquals("\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110\u0110", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-166), 3089, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(767);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -467 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -223 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1770 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(56192);
      // Undeclared exception!
      RandomStringUtils.random(1, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-273), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -273 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "*4,|xo`TvWiO)'XrK=[");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 22, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1729, (-2103), 1, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(30, 1944, 1944, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-735), 909, (-735), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -735 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(77, (-1614), 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 56191, 56191, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 7, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(767, (-2641), (-2641), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -105 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(32, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4527, 4413, 4527, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '0';
      String string0 = RandomStringUtils.random(1, 0, 2225, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1915, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1688, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 2225, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 81, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom((-423L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2657), 0, (-1), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2657 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-3672), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-626), (-626), (-626), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -626 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(41, 56192, (-2700), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4413, 55296, 4413, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1097, 56320, 1097, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(965, (-166), (-1608), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A\uFF5A", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom((-21));
      String string0 = RandomStringUtils.randomNumeric(32);
      assertNotNull(string0);
      assertEquals("55555555555555555555555555555555", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-4347));
      String string0 = RandomStringUtils.randomAlphanumeric(1352);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      RandomStringUtils.random(39, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(3547, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(4416, "_");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2447 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46195);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1352);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4416);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertEquals("                                                                                                                           ", string0);
  }
}
