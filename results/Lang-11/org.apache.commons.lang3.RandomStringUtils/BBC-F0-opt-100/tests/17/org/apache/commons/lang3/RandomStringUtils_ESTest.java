/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:25:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      String string0 = RandomStringUtils.randomAlphanumeric(45);
      assertNotNull(string0);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(3044, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(2252);
      String string0 = RandomStringUtils.random(2252, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Bou/o{-0GOQMV~x<d2");
      assertNotNull(string0);
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2234);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[7];
      charArray0[2] = 'Z';
      String string0 = RandomStringUtils.random(2234, 0, 41, true, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 1, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(714, 714, (-1913), true, true);
      assertNotNull(string0);
      assertEquals("\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA\u02CA", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 178, 771, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(1074);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-4648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4648 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2214 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -499 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2260), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2260 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(771);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(42, 3041, 42, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1545);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2522, 2522, 2522, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2878), 0, 0, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2878 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1409, 2784, 1409, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3135, 3135, 3135, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-129), (-1), (-129), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -129 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -806 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(25337, 25337, 2234, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '5';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 3880, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("5", string0);
      assertArrayEquals(new char[] {'\u0000', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(20, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1695, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(15377, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(673L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1703), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2551L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(42, 178, (-1964), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(645, (-851), (-851), false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom((-2504));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2669), (-2504), (-2504), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2669 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2252, true, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(25337, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-910), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -910 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3696, 56319, 26, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(31);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(31, 55296, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(9, 57343, (-1766), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, (-3704), (-2463), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF188", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(4884);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(2252);
      String string0 = RandomStringUtils.randomAlphabetic(2252);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      String string0 = RandomStringUtils.random(1695, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "org.apache.commons.lang3.RandomStringUtils");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4884);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(45);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2252);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[19];
      // Undeclared exception!
      RandomStringUtils.random(15377, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2252);
      assertNotNull(string0);
  }
}
