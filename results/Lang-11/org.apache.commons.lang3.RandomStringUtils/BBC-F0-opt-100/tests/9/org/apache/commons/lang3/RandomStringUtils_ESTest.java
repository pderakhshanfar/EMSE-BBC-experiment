/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:40 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1468, 0, (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-679));
      String string0 = RandomStringUtils.randomAlphanumeric(31);
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(2037);
      String string0 = RandomStringUtils.randomAlphabetic(2037);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1028, 3550, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1921);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56213);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2818 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -138 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2724 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-495), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -495 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46200, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) (byte) (-14), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -14 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "nlED03,m");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(3105L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(558, 558, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(493L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) '*', (-679), (-679), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 817, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1973), 1, 1, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1973 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1943, (-2893), 508, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1626, 1626, 1626, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(924, (-1563), 2, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5\uF9E5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3), 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-3682), 1, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(42, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(3550, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2147483632), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2147483632 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Requested random string length ");
      assertEquals("R", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56305, 56305, 571, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(5629, 56186, 2, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56331, 56331, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, (-508), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '2';
      MockRandom mockRandom0 = new MockRandom(1);
      String string0 = RandomStringUtils.random(2, 2, 1, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("22", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(479, (-973), 46202, true, false);
      assertEquals("\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33\uFC33", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1052, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 0, 7, true, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5480, 1, Integer.MAX_VALUE, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1638), (-1285), (-1285), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1638 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(5654);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2037);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1, 1, (-406), false, false, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
