/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:32:19 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(4);
      assertNotNull(string0);
      assertEquals("2222", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(20);
      String string0 = RandomStringUtils.randomAlphanumeric(20);
      assertNotNull(string0);
      assertEquals("44444444444444444444", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(946);
      String string0 = RandomStringUtils.randomAlphabetic(946);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "gMB7");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1422, 2126, 1422, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(2126);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1422, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3771 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -653 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(46211, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-573), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -573 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2229, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2288), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2288 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(705, 705, 0, true, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3586, 262, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(1170L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1057, 1057, 1057, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 41534, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3105, 3105, 2407, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1724), 274, 56192, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1724 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(983, 983, 983, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2610 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(843, 56319, 594, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47384, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4155, (-426), 4155, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)33, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(18, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(56192);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(128, 0, (-1724), false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, (-1), 11, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-823));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-823), (-823), 123, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -823 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 3944, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1057, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(33, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, (String) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46225, 56192, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46344, 56191, 4674, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 4674, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(26, 57343, 41534, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 47368, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '2';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(35, 1, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("22222222222222222222222222222222222", string0);
      assertArrayEquals(new char[] {'\u0000', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1550L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(705, 705, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1\u02C1", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(685, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(20);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2126);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-4467), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
