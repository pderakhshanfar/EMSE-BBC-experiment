/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:36:59 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-1906);
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 46195;
      // Undeclared exception!
      RandomStringUtils.random(46195);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[7];
      RandomStringUtils.random(2461, charArray0);
      RandomStringUtils.randomAscii(0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1909, 1, 378, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(2554, (String) null);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2554, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 56192;
      int int1 = 46200;
      // Undeclared exception!
      RandomStringUtils.random(46200, ".}@z`l+6DE");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(147, 56320, (-1245), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomStringUtils.random(147, (-1278), 2226, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2226);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '7';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAscii(0);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, 0, (-1), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 127;
      RandomStringUtils.random(127, 1990, 1130, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(147);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'I';
      charArray0[2] = 'V';
      charArray0[3] = 'w';
      charArray0[4] = '4';
      charArray0[5] = '@';
      charArray0[6] = '%';
      RandomStringUtils.random(0, charArray0);
      int int0 = 1204;
      RandomStringUtils.randomAscii(28);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(15, 23);
      RandomStringUtils.random(1, 1204, 0, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1204);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.random(1, 0, 0, false, false);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 1990;
      RandomStringUtils.random(1, 0, 1990, false, false, charArray0, (Random) mockRandom1);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.randomAscii(1050);
      org.evosuite.runtime.Random.setNextRandom(1050);
      RandomStringUtils.randomAscii(33);
      RandomStringUtils.randomAlphanumeric(33);
      RandomStringUtils.randomAlphanumeric(33);
      // Undeclared exception!
      RandomStringUtils.random(33, 33, (-2931), false, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1050;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(56192, (-120), 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'q';
      charArray0[2] = '2';
      RandomStringUtils.random(127, charArray0);
      RandomStringUtils.randomAscii(1204);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomStringUtils.random(127, 1, 1157, false, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1225 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils.random(1130, (char[]) null);
      RandomStringUtils.randomAscii(1204);
      int int0 = (-1225);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(475, 147, 1, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1225 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.random(0, "B#$f");
      RandomStringUtils.randomAscii(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -358 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringUtils.random(1, 0, 0, false, false);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils.randomAscii(123);
      org.evosuite.runtime.Random.setNextRandom(46228);
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '6';
      charArray0[2] = 'Z';
      charArray0[3] = 'w';
      charArray0[4] = '\'';
      charArray0[5] = 'F';
      charArray0[6] = ',';
      charArray0[7] = '_';
      charArray0[8] = '~';
      // Undeclared exception!
      RandomStringUtils.random(46228, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils.random(0, false, true);
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'u';
      charArray0[2] = 'T';
      charArray0[3] = '3';
      charArray0[4] = '/';
      charArray0[5] = 'g';
      charArray0[6] = 'T';
      charArray0[7] = '@';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(0);
      char[] charArray1 = new char[2];
      charArray1[0] = '@';
      charArray1[1] = '3';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((-1L), (long) 0);
      RandomStringUtils.random(0, 1, 0, false, false, charArray1, (Random) mockRandom0);
      RandomStringUtils.randomNumeric(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'q';
      charArray0[2] = '2';
      RandomStringUtils.random(127, charArray0);
      RandomStringUtils.randomAscii(1204);
      int int0 = (-1225);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(127, 1, 1157, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils.random(3227);
      RandomStringUtils.random(1, (char[]) null);
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[2] = '7';
      charArray0[3] = 'e';
      charArray0[4] = '\"';
      charArray0[5] = 'q';
      // Undeclared exception!
      RandomStringUtils.random(3227, 1, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils.random(3227);
      RandomStringUtils.random(1, (char[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom(62L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3227, (-1), (-1), false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'q';
      charArray0[2] = '2';
      RandomStringUtils.random(127, charArray0);
      RandomStringUtils.randomAscii(1204);
      int int0 = (-1225);
      int int1 = 475;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1204, (-1225), 475, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2542;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2542);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'R';
      charArray0[2] = '<';
      charArray0[3] = 'J';
      charArray0[4] = 'U';
      charArray0[5] = 'Y';
      charArray0[6] = ';';
      charArray0[7] = '}';
      charArray0[8] = '>';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1900), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1900 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3448;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(3448, false, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = 3317;
      RandomStringUtils.random(0, 193, 3317, false, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -84 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0);
      RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'g';
      MockRandom mockRandom0 = new MockRandom((-3563L));
      mockRandom0.nextFloat();
      RandomStringUtils.random(0, 0, 1620, false, true, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(1021, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-1974);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1974 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2959;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(2959, true, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils.random(1913, false, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'a';
      charArray0[2] = 'c';
      charArray0[3] = '8';
      charArray0[4] = '#';
      charArray0[5] = '-';
      charArray0[6] = '[';
      MockRandom mockRandom0 = new MockRandom((-237));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-205), 1913, (-237), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -205 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomStringUtils.random(1, 1, 0, false, false);
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'X';
      charArray0[2] = '(';
      charArray0[3] = 'W';
      charArray0[4] = 'O';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2840 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-2001);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2001 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1;
      int int1 = 1231;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1231, 1231, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '1';
      charArray0[2] = 'b';
      charArray0[3] = 'w';
      RandomStringUtils.random(0, 0, (-1), false, false, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1785), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1785 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils.randomAscii(3483);
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'n';
      charArray0[2] = '9';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3483, 3483, 3483, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      MockRandom mockRandom0 = new MockRandom(1852L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3121, 3121, 3121, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1157;
      RandomStringUtils.random(1157, "DG5'");
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1157);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2639, 2639, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 483;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1173, 0, 483, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, 0, (-1496), true, true);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '=';
      charArray0[3] = '0';
      charArray0[4] = 'i';
      RandomStringUtils.random(0, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1122, 0, 474, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils.randomAscii(4382);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils.random(162);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'g';
      charArray0[2] = '\"';
      charArray0[3] = 'L';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(162, 162, 162, true, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-598);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-598), "7~PHSQ,k[A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -598 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 3227;
      RandomStringUtils.random(3227);
      char[] charArray0 = null;
      RandomStringUtils.random(1, (char[]) null);
      int int1 = 0;
      boolean boolean0 = false;
      char[] charArray1 = new char[6];
      charArray1[0] = 'G';
      charArray1[1] = 'x';
      charArray1[2] = '7';
      charArray1[3] = 'e';
      charArray1[4] = '\"';
      charArray1[5] = 'q';
      RandomStringUtils.random(3227, 1, 0, true, false, charArray1);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1, 1, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 123;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(123);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-2996);
      int int1 = 2836;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'M';
      charArray0[2] = ',';
      charArray0[3] = '#';
      charArray0[4] = ')';
      charArray0[5] = 'O';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2996), (-2996), 2836, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2996 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3027), 2878, (-3027), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3027 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils.random(0, false, true);
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'u';
      charArray0[2] = 'T';
      charArray0[3] = '3';
      charArray0[4] = '/';
      charArray0[5] = 'g';
      charArray0[6] = 'T';
      charArray0[7] = '@';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray1 = new char[2];
      charArray1[0] = '@';
      charArray1[1] = '3';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 1, 0, false, false, charArray1, (Random) mockRandom0);
      assertEquals("", string0);
  }
}
