/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:28:39 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-3326);
      int int1 = 50121;
      // Undeclared exception!
      RandomStringUtils.random(50121, 56192, 3, false, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.random(4657, (-3326), 3, false, false);
      RandomStringUtils.random(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      MockRandom mockRandom0 = new MockRandom(0);
      RandomStringUtils.random(37, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1718);
      RandomStringUtils.randomAlphabetic(2422);
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = '[';
      charArray0[3] = '2';
      charArray0[4] = '\\';
      charArray0[5] = 'q';
      charArray0[6] = 'p';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1718, 1718, (-1332), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3436
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 55293;
      int int1 = 1687;
      // Undeclared exception!
      RandomStringUtils.random(55293, "P[t'K9!v!@<WF<6]j");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-3784);
      RandomStringUtils.random(1687, "P[t'K9!v!@<WF<6]j");
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 1;
      mockRandom0.nextGaussian();
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, 3391, 42, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom((-1264L));
      mockRandom3.nextFloat();
      MockRandom mockRandom4 = new MockRandom();
      mockRandom4.nextDouble();
      mockRandom4.doubles();
      MockRandom mockRandom5 = new MockRandom();
      mockRandom5.nextInt();
      MockRandom mockRandom6 = new MockRandom();
      int int0 = 36;
      // Undeclared exception!
      RandomStringUtils.random(345, 36, 2577, true, true, (char[]) null, (Random) mockRandom5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextFloat();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.doubles();
      mockRandom1.nextInt();
      int int0 = (-156);
      boolean boolean0 = true;
      MockRandom mockRandom3 = new MockRandom();
      int int1 = 594;
      // Undeclared exception!
      RandomStringUtils.random(3422, 128, 594, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2237;
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom1.doubles();
      mockRandom1.nextInt();
      boolean boolean0 = true;
      MockRandom mockRandom2 = new MockRandom();
      String string0 = RandomStringUtils.random(2237, (-156), 1, true, true, (char[]) null, (Random) mockRandom2);
      int int1 = (-118);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-118), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -118 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = '\'';
      charArray0[2] = 'P';
      charArray0[3] = 'n';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (-2212), false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-1);
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      mockRandom0.nextInt();
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'J';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56191, 1, 57343, false, false, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      MockRandom mockRandom1 = new MockRandom(2219);
      mockRandom1.nextInt();
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2219, 0, 2219, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1061;
      char char0 = 'b';
      char char1 = 'C';
      char char2 = 't';
      char char3 = 'x';
      int int1 = 56320;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1061, 56320, 2327, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'f';
      charArray0[2] = 'X';
      charArray0[3] = '<';
      charArray0[4] = 'b';
      charArray0[5] = 'C';
      charArray0[6] = 't';
      charArray0[7] = 'x';
      RandomStringUtils.random(0, 0, 2490, false, false, charArray0);
      RandomStringUtils.random(0, 0, (-683), false, false, charArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.nextInt(127);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3665, 12, 12, false, true, charArray1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2310 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2490;
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'f';
      charArray0[2] = 'X';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      mockRandom0.nextInt();
      RandomStringUtils.random(2490, 1, (-2845), false, false, charArray0, (Random) mockRandom0);
      int int1 = 1;
      RandomStringUtils.random(41, (String) null);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(26);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(2252, (-660), 15, true, false);
      int int0 = (-2390);
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      mockRandom0.nextInt();
      RandomStringUtils.random(0, (-1174), (-2390), false, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(55296);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1529;
      char[] charArray0 = new char[9];
      charArray0[1] = 'q';
      charArray0[2] = 'V';
      charArray0[3] = '4';
      RandomStringUtils.randomAscii(1529);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1529, 1529, 1, false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = (-1174);
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.doubles();
      mockRandom0.nextInt();
      RandomStringUtils.random(0, (-1174), (-2390), false, true, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(1, (String) null);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45300, (-1), 1, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      char char0 = ' ';
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-4240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4240 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, "Cu!O_[A");
      assertNotNull(string0);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      
      String string1 = RandomStringUtils.random(0, "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '6';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = '2';
      charArray0[5] = '9';
      charArray0[6] = 'V';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 1219, (-2802), false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1219
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(32);
      assertNotNull(string0);
      assertEquals("                                ", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'm';
      charArray0[2] = '<';
      charArray0[3] = 'N';
      charArray0[4] = '(';
      charArray0[5] = '#';
      charArray0[6] = 'P';
      charArray0[7] = 'B';
      String string1 = RandomStringUtils.random(32, 0, 0, true, true, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'q', 'm', '<', 'N', '(', '#', 'P', 'B'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertNotNull(string0);
      assertEquals("<", string0);
      
      int int1 = 1;
      String string1 = RandomStringUtils.random(1, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("o", string1);
      
      String string2 = RandomStringUtils.random(1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000", string2);
      
      int int2 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '_';
      charArray0[2] = 'j';
      charArray0[3] = '.';
      charArray0[4] = 's';
      charArray0[5] = '9';
      charArray0[6] = '<';
      charArray0[7] = 'W';
      charArray0[8] = '=';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2015), (-2015), (-2015), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2015 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int1 = 0;
      int int2 = (-2390);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int3 = mockRandom0.nextInt();
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      String string2 = RandomStringUtils.random(0, (-1174), (-2390), false, true, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'-', 'U'}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 56192;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(56192, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'z';
      String string0 = RandomStringUtils.random(123, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'H', 'z'}, charArray0);
      assertNotNull(string0);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "M5EKo):_DhI'RO@gK0");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'v';
      charArray0[2] = 't';
      charArray0[3] = '~';
      charArray0[4] = 'B';
      charArray0[5] = 'k';
      charArray0[6] = '@';
      charArray0[7] = 's';
      charArray0[8] = ':';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'A', 'v', 't', '~', 'B', 'k', '@', 's', ':'}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      MockRandom mockRandom0 = new MockRandom((-1186));
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(0, (-3447), (-1186), true, true, charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'A', 'v', 't', '~', 'B', 'k', '@', 's', ':'}, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1186), 123, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 55296;
      int int1 = (-2227);
      int int2 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(55296, (-2227), 0, false, false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = ')';
      charArray0[2] = ';';
      charArray0[3] = 'G';
      charArray0[4] = 'S';
      String string0 = RandomStringUtils.random(0, (-2604), (-2890), true, true, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'K', ')', ';', 'G', 'S'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1;
      int int1 = (-82);
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-82), false, true);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 202;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      charArray0[2] = 'G';
      charArray0[3] = 'V';
      charArray0[4] = 'W';
      charArray0[5] = '(';
      MockRandom mockRandom0 = new MockRandom((-2311L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.2F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1585), 202, 202, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1585 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 3481;
      String string0 = RandomStringUtils.randomAscii(3481);
      assertNotNull(string0);
      
      int int1 = (-4112);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '@';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3481, 3481, (-4112), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3481
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-569);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-569), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -569 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2327, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 't';
      charArray0[2] = 'Y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-587), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -587 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'Z';
      charArray0[2] = '.';
      charArray0[3] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(579, 579, (-507), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 579
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-89);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -89 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'f';
      charArray0[2] = 'X';
      charArray0[3] = '<';
      charArray0[4] = 'b';
      charArray0[5] = 'C';
      charArray0[6] = 't';
      charArray0[7] = 'x';
      String string0 = RandomStringUtils.random(0, 0, 2490, false, false, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'=', 'f', 'X', '<', 'b', 'C', 't', 'x'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, (-683), false, false, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'=', 'f', 'X', '<', 'b', 'C', 't', 'x'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1285), 2490, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1285
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 56320, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 128;
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string0 = RandomStringUtils.random(128, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int1 = (-2492);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2492), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2492 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3784 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 923;
      RandomStringUtils.random(0, 0, 923, true, true);
      RandomStringUtils.randomAscii(0);
      int int1 = 740;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(740);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'q';
      charArray0[2] = 'V';
      charArray0[3] = '4';
      charArray0[4] = '0';
      charArray0[5] = 'F';
      charArray0[6] = 'D';
      charArray0[7] = 'F';
      charArray0[8] = '<';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(697, 1529, 1529, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1942;
      RandomStringUtils.random(1942);
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1942, 1942, 1942, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      int int1 = Integer.MAX_VALUE;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, Integer.MAX_VALUE, Integer.MAX_VALUE, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, false, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-758));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -758 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-4358);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4358), (-4358), (-4358), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4358 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
