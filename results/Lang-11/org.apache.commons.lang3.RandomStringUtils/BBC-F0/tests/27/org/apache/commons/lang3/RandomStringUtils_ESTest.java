/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:37:23 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(25);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(25, 56320, 38, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(40);
      mockRandom0.nextDouble();
      mockRandom0.nextGaussian();
      RandomStringUtils.random(40, 56320, 38, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(531, 55296, 531, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-823), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-2436));
      RandomStringUtils.randomAlphabetic(127);
      RandomStringUtils.randomNumeric(0);
      org.evosuite.runtime.Random.setNextRandom((-2436));
      org.evosuite.runtime.Random.setNextRandom(0);
      RandomStringUtils.random(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(3716L);
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.randomAscii(160);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[7];
      charArray0[5] = 'M';
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(25L);
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 416);
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-839), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '4';
      charArray0[2] = 'W';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 1);
      // Undeclared exception!
      RandomStringUtils.random(56319, 1, 56319, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.randomAscii(416);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = ' ';
      charArray0[2] = '`';
      charArray0[3] = '9';
      charArray0[4] = '}';
      charArray0[5] = 'l';
      charArray0[6] = '7';
      charArray0[7] = 'X';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 30, 38, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 4;
      // Undeclared exception!
      RandomStringUtils.random(209, 56320, 4, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      mockRandom0.nextDouble();
      RandomStringUtils.random(1, (-839), 0, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 56192);
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 56192, false, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1529;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 2168;
      boolean boolean0 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1529, (-2626), 2168, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(128);
      RandomStringUtils.randomAlphanumeric(128);
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, false, false);
      RandomStringUtils.randomNumeric(0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, (-1008), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      RandomStringUtils.random(1628, 0, 1, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      // Undeclared exception!
      RandomStringUtils.random(19, 56183, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(19, 19, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, "B'");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '\\';
      charArray0[2] = '.';
      charArray0[3] = 'Q';
      charArray0[4] = 'b';
      charArray0[5] = 'q';
      charArray0[6] = 'p';
      charArray0[7] = 'v';
      charArray0[8] = 'n';
      MockRandom mockRandom1 = new MockRandom(0L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 1, 56192, false, false, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 0;
      char char0 = ' ';
      int int2 = 1;
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      char char1 = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(8, 57343, 20, false, false);
      assertNotNull(string1);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(21, 32, 56320, false, false);
      assertNotNull(string2);
      assertEquals("                     ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = ' ';
      charArray0[2] = 'M';
      charArray0[3] = 'F';
      charArray0[4] = 'v';
      charArray0[5] = 'M';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("M", string1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'M', ' ', 'M', 'F', 'v', 'M', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(1111, (-899), (-561), true, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 19, 0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(391, 32, 857, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                       ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char char0 = 'r';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      int int0 = 23;
      int int1 = (-1);
      boolean boolean0 = true;
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1), 56320, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = ' ';
      charArray0[2] = 'M';
      charArray0[3] = 'F';
      charArray0[4] = 'v';
      charArray0[5] = 'M';
      charArray0[6] = 'X';
      String string1 = RandomStringUtils.random(5, 0, 0, false, false, charArray0);
      assertNotNull(string1);
      assertEquals("MMMMM", string1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'M', ' ', 'M', 'F', 'v', 'M', 'X'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, "MMMMM");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(128, 0, 992, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string3);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string3);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'M', ' ', 'M', 'F', 'v', 'M', 'X'}, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'p';
      charArray0[2] = 'u';
      charArray0[3] = 'w';
      charArray0[4] = '*';
      charArray0[5] = 'i';
      charArray0[6] = 'w';
      String string0 = RandomStringUtils.random(11, charArray0);
      assertNotNull(string0);
      assertEquals("UUUUUUUUUUU", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'U', 'p', 'u', 'w', '*', 'i', 'w'}, charArray0);
      
      String string1 = RandomStringUtils.random(18, "9!SFq?Zx");
      assertNotNull(string1);
      assertEquals("999999999999999999", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(42);
      assertNotNull(string2);
      assertEquals("                                          ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(42, false, false);
      assertNotNull(string3);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      org.evosuite.runtime.Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'r';
      charArray0[2] = 'S';
      charArray0[3] = ';';
      MockRandom mockRandom0 = new MockRandom('S');
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1111, 1377, 1377, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, 5, 5, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1092;
      int int1 = 30;
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1092, 30, 5735, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '|';
      charArray0[2] = '<';
      charArray0[3] = '+';
      charArray0[4] = '\"';
      charArray0[5] = 'f';
      charArray0[6] = 'H';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(165, 165, 165, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = ':';
      charArray0[2] = 'y';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = ' ';
      charArray0[6] = '&';
      String string3 = RandomStringUtils.random(0, 0, (-417), true, false, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'&', ':', 'y', '&', '&', ' ', '&'}, charArray0);
      
      int int1 = (-1318);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(72, (-966), (-1), false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -966
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.random(19, 56192, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = ' ';
      charArray0[2] = 'M';
      charArray0[3] = 'F';
      charArray0[4] = 'v';
      charArray0[5] = 'M';
      charArray0[6] = 'X';
      String string1 = RandomStringUtils.random(5, 0, 0, false, false, charArray0);
      assertNotNull(string1);
      assertEquals("MMMMM", string1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'M', ' ', 'M', 'F', 'v', 'M', 'X'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, "MMMMM");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string3 = RandomStringUtils.random(0, (-1), 56191, false, false, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'M', ' ', 'M', 'F', 'v', 'M', 'X'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(5, (String) null);
      assertNotNull(string4);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(797, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(643, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -161 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1089;
      String string0 = RandomStringUtils.random(1089);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1089);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = (-1197);
      int int2 = 269;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1197), 269, 1089, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1197 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1358;
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'W';
      String string0 = RandomStringUtils.random(1358, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', 'W'}, charArray0);
      
      String string1 = RandomStringUtils.random(1358, string0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', 'W'}, charArray0);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = 0;
      boolean boolean0 = false;
      String string2 = RandomStringUtils.random(0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = (-899);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -899 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 127;
      String string0 = RandomStringUtils.random(127, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int1 = (-992);
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, (-992), (-299), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = true;
      String string3 = RandomStringUtils.random(127, 232, 800, true, true);
      assertNotNull(string3);
      assertEquals("\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8\u00E8", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = RandomStringUtils.random(0, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      int int2 = (-1612);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1612), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1612 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(253, "Hz'M7A$+");
      assertNotNull(string0);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(57343);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 2466;
      // Undeclared exception!
      RandomStringUtils.random(2466, true, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '(';
      charArray0[2] = 'Y';
      charArray0[3] = '0';
      charArray0[4] = 'c';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2460), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2460 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'N';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', 'N'}, charArray0);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = 0;
      boolean boolean0 = true;
      String string4 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', 'N'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -85 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-2475);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2475), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2475 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "Requested random string length ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      charArray0[2] = '+';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'8', 'X', '+'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      int int1 = (-745);
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'e';
      String string0 = RandomStringUtils.random(0, 0, (-745), false, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'e'}, charArray0);
      
      int int2 = 1911;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1911);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1493), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1493 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = '`';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 2118, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'u', 'p', 'p', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5097, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 228;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(228);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-548);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-548));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -548 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      charArray0[2] = 'L';
      charArray0[3] = 'F';
      charArray0[4] = 'R';
      charArray0[5] = 'k';
      String string2 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', 'k', 'L', 'F', 'R', 'k'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2322 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = '>';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1211), (-1211), 0, false, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1211 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 146, (-1447), true, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -65 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils.random(3994);
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2483, 3994, 2483, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3994
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[2];
      char char0 = '\"';
      charArray0[0] = '\"';
      char char1 = 'c';
      charArray0[1] = 'c';
      RandomStringUtils.random(127, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '0';
      charArray0[2] = '_';
      charArray0[3] = 'N';
      charArray0[4] = '|';
      charArray0[5] = '\\';
      charArray0[6] = '=';
      charArray0[7] = 'Z';
      charArray0[8] = 'j';
      String string0 = RandomStringUtils.random(0, 128, 0, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils.random(0);
      int int0 = (-412);
      int int1 = 56191;
      int int2 = (-1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }
}
