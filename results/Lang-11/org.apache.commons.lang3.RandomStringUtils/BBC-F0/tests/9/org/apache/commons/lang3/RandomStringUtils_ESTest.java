/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:29:10 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '\\';
      charArray0[2] = 'v';
      charArray0[3] = 'G';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(23, (-2916), 29, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(29);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(1051, 57343, 1389, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(23, (-2916), 29, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C\uF49C", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-181), 23, (-548), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -181 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(125, (-1), 647, false, false);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(1470, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2443L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = null;
      int int0 = (-1882);
      String string0 = RandomStringUtils.random(19, 71, (-1882), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("GGGGGGGGGGGGGGGGGGG", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1882), 12, 71, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1882 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 2369, (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(1, 1, (-831), false, false);
      assertEquals("\u0001", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2371), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2371 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 2824L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(31, 0, (-573), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom(2342);
      assertNotNull(mockRandom0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '?';
      charArray1[1] = '?';
      charArray1[2] = '?';
      charArray1[3] = '?';
      charArray1[4] = '?';
      charArray1[5] = '?';
      charArray1[6] = '?';
      charArray1[7] = '?';
      charArray1[8] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2342, 0, (-2995), false, false, charArray1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom(2342);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(32, 2342);
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(1470, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '?';
      charArray1[1] = '?';
      charArray1[2] = '$';
      charArray1[3] = '?';
      charArray1[4] = '?';
      charArray1[5] = '?';
      charArray1[6] = '?';
      charArray1[7] = '?';
      // Undeclared exception!
      RandomStringUtils.random(2342, 1, 1470, false, true, charArray1, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-884), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -884 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(24, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1889, 1889, 1889, false, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1774);
      String string0 = RandomStringUtils.randomAlphanumeric(1766);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -388 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '&';
      charArray0[3] = '8';
      charArray0[4] = ';';
      charArray0[5] = '\'';
      LongStream longStream0 = mockRandom0.longs((long) (-573), 2824L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      charArray0[6] = '?';
      charArray0[7] = 'A';
      String string0 = RandomStringUtils.random(31, 0, (-573), true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'8', '8', '&', '8', ';', '\'', '?', 'A'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("8888888888888888888888888888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom(2342);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(32, 2342);
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(1470, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2342, 1470, (-1), false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1766);
      // Undeclared exception!
      RandomStringUtils.random(36222, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = 'Z';
      charArray0[2] = 'o';
      charArray0[3] = 'Q';
      charArray0[4] = 'E';
      charArray0[5] = '7';
      charArray0[6] = '\\';
      charArray0[7] = 'b';
      charArray0[8] = 'P';
      String string0 = RandomStringUtils.random(2, charArray0);
      assertArrayEquals(new char[] {'!', 'Z', 'o', 'Q', 'E', '7', '\\', 'b', 'P'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("!!", string0);
      assertNotNull(string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'c';
      charArray1[1] = '4';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2342, (-1817), 55296, true, true, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1817
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = (-232);
      int int1 = (-182);
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '2';
      charArray0[2] = 'B';
      charArray0[3] = 'e';
      charArray0[4] = 'a';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0L);
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1L), 0, (-1438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(138, 138, 138, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      MockRandom mockRandom0 = new MockRandom(2342);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1470, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, (String) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1682);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1682));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1682 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = '~';
      charArray0[2] = 'Q';
      charArray0[3] = ' ';
      charArray0[4] = 'J';
      charArray0[5] = 'o';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2231, 2231, 760, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2231
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-460);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -460 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = '\'';
      charArray0[3] = 'A';
      charArray0[4] = '\\';
      charArray0[5] = '5';
      MockRandom mockRandom0 = new MockRandom(2342);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2556, 0, 2342, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'?', ';', '\'', 'A', '\\', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-3104);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3104), "0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3104 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 90, 0, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(90, 0, 0, false, true, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '&';
      charArray0[2] = '|';
      RandomStringUtils.random(833, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(833, 1081, 1081, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-2029);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2029), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2029 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(347);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = 708;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(708);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-842);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -842 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1915;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1915);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2471 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      mockRandom0.setSeed(0);
      mockRandom0.setSeed((-1L));
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = 0.0;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'h';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2431), 0, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2431 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1373;
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'B';
      charArray0[2] = '';
      charArray0[3] = 'm';
      charArray0[4] = 'G';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      int int1 = (-1684);
      IntStream intStream0 = mockRandom0.ints((-1684), 1552);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1373, 1373, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1373
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '%';
      charArray0[2] = 'u';
      charArray0[3] = 't';
      charArray0[4] = 'r';
      charArray0[5] = '^';
      charArray0[6] = 'l';
      charArray0[7] = '0';
      charArray0[8] = 'z';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'.', '%', 'u', 't', 'r', '^', 'l', '0', 'z'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1579);
      char[] charArray0 = new char[7];
      char char0 = '~';
      charArray0[0] = '~';
      char char1 = 'b';
      charArray0[1] = 'b';
      char char2 = 'E';
      charArray0[2] = 'E';
      char char3 = '$';
      charArray0[3] = '$';
      charArray0[4] = '0';
      charArray0[5] = 'L';
      charArray0[6] = 'y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1579), (-1579), (-1579), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1579 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'n';
      charArray0[2] = 'H';
      charArray0[3] = 'J';
      charArray0[4] = 'S';
      charArray0[5] = 'j';
      charArray0[6] = '\\';
      charArray0[7] = 's';
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) null);
      assertArrayEquals(new char[] {'G', 'n', 'H', 'J', 'S', 'j', '\\', 's'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -481 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 56192;
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = ')';
      charArray0[2] = 'F';
      charArray0[3] = 't';
      charArray0[4] = 'T';
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 123;
      int int1 = 123;
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'U';
      charArray0[2] = 'k';
      charArray0[3] = '2';
      charArray0[4] = 'i';
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 123, 123, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'U';
      charArray0[2] = '\'';
      charArray0[3] = '^';
      RandomStringUtils.random(0, 3143, 0, false, false, charArray0);
      RandomStringUtils.random(3143, "T9z9EB");
      MockRandom mockRandom0 = new MockRandom(3143);
      RandomStringUtils.random(0, (-195), 0, false, false, charArray0, (Random) mockRandom0);
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }
}
