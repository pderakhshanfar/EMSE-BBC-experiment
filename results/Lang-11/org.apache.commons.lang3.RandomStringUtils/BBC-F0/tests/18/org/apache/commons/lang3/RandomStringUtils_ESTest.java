/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:32:46 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1100L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2698, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(2698);
      org.evosuite.runtime.Random.setNextRandom((-4142));
      String string1 = RandomStringUtils.randomAlphabetic(2698);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2664, 56192, 23, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 29;
      String string0 = RandomStringUtils.random(29, "The chars array must not be empty");
      assertNotNull(string0);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string0);
      
      int int1 = 57343;
      int int2 = 56191;
      int int3 = 4615;
      // Undeclared exception!
      RandomStringUtils.random(57343, 56191, 4615, false, false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(33);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(1233, 1233, 33, true, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom((-1100L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(1233, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = 'D';
      charArray0[4] = '4';
      charArray0[5] = '_';
      charArray0[6] = '7';
      charArray0[7] = ')';
      charArray0[8] = 'y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2715, 0, (-1634), false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1453, 56320, 3758, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-3079));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, "|^\"-Q`");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(33, (-1603), (-3079), true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD\uF9BD", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1921, (-1501), 1921, true, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '`';
      charArray0[2] = 'Y';
      charArray0[3] = '5';
      charArray0[4] = '{';
      String string1 = RandomStringUtils.random(1921, charArray0);
      assertNotNull(string1);
      assertEquals(5, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'9', '`', 'Y', '5', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(33);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(1233, 1233, 33, true, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom((-1100L));
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(2698, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(33);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(1233, 1233, 33, true, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom((-507L));
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, 0, 26, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(11, 11, 11, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'G';
      charArray0[3] = '?';
      charArray0[4] = '5';
      charArray0[5] = 'c';
      charArray0[6] = '$';
      charArray0[7] = '-';
      charArray0[8] = 'H';
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-257), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -257 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'B';
      String string1 = RandomStringUtils.random(2480, charArray0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {']', 'B'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(4043, 0, 2615, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'e';
      String string0 = RandomStringUtils.random(1847, 0, 0, false, true, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'9', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(684);
      assertNotNull(string0);
      assertEqualsstring0);
      
      int int0 = 127;
      int int1 = 56192;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'C';
      charArray0[2] = 'Z';
      charArray0[3] = 'i';
      charArray0[4] = 'J';
      charArray0[5] = ';';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'r';
      charArray0[2] = 'f';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-686), 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -685
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("/", string1);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 127;
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'D';
      String string0 = RandomStringUtils.random(0, 127, 56192, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'D'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric('D');
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'C';
      int int0 = (-2580);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3106), (-2580), 2603, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3106 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3843);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3265;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = 1000;
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int2 = mockRandom0.nextInt();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1000, 3265, 1000, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3267
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "(<j4.VKuJb");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 2784;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(2784, true, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(1413, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      
      int int1 = (-2685);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2685 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1690, 1690, 1690, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2847 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'C';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(189, 189, 189, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(684);
      assertNotNull(string0);
      assertEqualsstring0);
      
      int int0 = 56192;
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 684, 56192, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'x';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'x'}, charArray0);
      
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'x'}, charArray0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom((-951L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 0, (double) 0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      String string1 = RandomStringUtils.random(0, 164, 164, false, true, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      String string2 = RandomStringUtils.random(164, charArray0);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                    ", string2);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {' '}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-996), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -996 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.random(1438);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = '\"';
      charArray0[2] = 'e';
      charArray0[3] = '^';
      charArray0[4] = 'J';
      charArray0[5] = 'W';
      charArray0[6] = 'w';
      charArray0[7] = '@';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1438, 32, 1438, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-3797);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3797 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(958);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'V';
      charArray0[2] = ';';
      charArray0[3] = 'l';
      charArray0[4] = 'O';
      charArray0[5] = '[';
      charArray0[6] = 'L';
      charArray0[7] = ';';
      String string2 = RandomStringUtils.random(1, charArray0);
      assertNotNull(string2);
      assertEquals("F", string2);
      assertEquals(8, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'F', 'V', ';', 'l', 'O', '[', 'L', ';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1082, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(2586, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'D';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      charArray0[5] = ' ';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(69, " OE)?*");
      assertNotNull(string0);
      assertEquals("                                                                     ", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 1, 0, true, true, (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '5';
      charArray0[2] = 'F';
      charArray0[3] = 'i';
      String string0 = RandomStringUtils.random(3693, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'K', '5', 'F', 'i'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string1 = RandomStringUtils.random(3693, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'K', '5', 'F', 'i'}, charArray0);
      
      int int0 = (-1240);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1240), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1240 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-2426);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2426 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1367);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1367 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = '1';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int1 = mockRandom0.nextInt((-2525));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      mockRandom0.setSeed((-2525));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1624), 277, 1, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1624 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-807), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -807 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = '{';
      charArray0[2] = 'm';
      charArray0[3] = 'I';
      charArray0[4] = 'O';
      charArray0[5] = 'a';
      charArray0[6] = '{';
      charArray0[7] = '&';
      charArray0[8] = '=';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'L', '{', 'm', 'I', 'O', 'a', '{', '&', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'k';
      charArray0[2] = 'n';
      charArray0[3] = '9';
      charArray0[4] = ':';
      charArray0[5] = 'E';
      charArray0[6] = 'A';
      charArray0[7] = '/';
      charArray0[8] = 'd';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2266;
      int int1 = (-1653);
      // Undeclared exception!
      RandomStringUtils.random(2266, 2266, (-1653), true, true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1488);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1488 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 780;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(780);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "H>mpOf_96Mp%a%-U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1513);
      RandomStringUtils.random(0, (-1513), (-1513), false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(123);
  }
}
