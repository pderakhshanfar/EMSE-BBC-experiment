/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:31:55 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 75;
      MockRandom mockRandom0 = new MockRandom(75);
      RandomStringUtils.random(0);
      mockRandom0.longs();
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 75, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 75;
      MockRandom mockRandom0 = new MockRandom(75);
      char[] charArray0 = null;
      RandomStringUtils.random(75, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(0);
      int int1 = 56191;
      mockRandom0.longs();
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-392), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 100;
      MockRandom mockRandom0 = new MockRandom(100);
      // Undeclared exception!
      RandomStringUtils.random(100, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(27, 56320, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 75;
      MockRandom mockRandom0 = new MockRandom(75);
      int int1 = 51;
      // Undeclared exception!
      RandomStringUtils.random(331, 0, (-615), true, false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(17, 56191, 17, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 8;
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'e';
      charArray0[2] = 'i';
      charArray0[3] = 'E';
      charArray0[4] = 'y';
      charArray0[5] = '8';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(8, (-2647), (-2647), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 31, false, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(48978, "aI;#DR3DYlk2BV");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(75);
      RandomStringUtils.random(75, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(14, (-1721), 75, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(2740, (-2647), (-686), false, false);
      MockRandom mockRandom0 = new MockRandom((-686));
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = 'V';
      charArray0[2] = '0';
      charArray0[3] = '2';
      charArray0[4] = 'b';
      charArray0[5] = 'R';
      charArray0[6] = 'I';
      RandomStringUtils.random(1759, 2, 25, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3678;
      int int1 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2114);
      RandomStringUtils.random(1, 2114, (-1805), true, true, (char[]) null);
      RandomStringUtils.random(127, (-710), 2114, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2114;
      // Undeclared exception!
      RandomStringUtils.random(1, (-1805), 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 654;
      RandomStringUtils.random(654);
      int int1 = 597;
      boolean boolean0 = false;
      RandomStringUtils.random(597, 654, 597, false, false);
      int int2 = 1280;
      RandomStringUtils.random(1280, "M&-H%'");
      RandomStringUtils.randomAscii(597);
      int int3 = 34;
      int int4 = 1;
      int int5 = 9;
      boolean boolean1 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(34, 1, 9, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2740;
      RandomStringUtils.random(2740, "03^W[");
      // Undeclared exception!
      RandomStringUtils.random(16, (-2647), (-2086), true, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2114);
      RandomStringUtils.random(1, 2114, (-1805), true, true, (char[]) null);
      RandomStringUtils.random(127, (-710), 2114, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2488), 42, (-1086), true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2488 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(715);
      MockRandom mockRandom0 = new MockRandom(1828);
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1516, 39, 1516, true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(715);
      MockRandom mockRandom0 = new MockRandom(1828);
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(1828, (-683), 3868, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'I';
      charArray0[2] = ' ';
      charArray0[3] = 'd';
      charArray0[4] = 'q';
      charArray0[5] = '\'';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 19, 19, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = ')';
      charArray0[2] = '+';
      charArray0[3] = 'q';
      charArray0[4] = 'G';
      charArray0[5] = 'k';
      MockRandom mockRandom0 = new MockRandom((-1031L));
      // Undeclared exception!
      RandomStringUtils.random(3678, 0, 56320, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      RandomStringUtils.random(1, 1, 3678, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(715);
      MockRandom mockRandom0 = new MockRandom(1828);
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(1828, 715, (-813), true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(715);
      MockRandom mockRandom0 = new MockRandom(1828);
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, 1495, Integer.MAX_VALUE, true, false, charArray0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils.random(2654);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'n';
      charArray0[2] = 'u';
      // Undeclared exception!
      RandomStringUtils.random(2638, 2638, 1206, true, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = ')';
      charArray0[2] = '+';
      charArray0[3] = 'q';
      charArray0[4] = 'G';
      charArray0[5] = 'k';
      MockRandom mockRandom0 = new MockRandom((-1031L));
      // Undeclared exception!
      RandomStringUtils.random(3678, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      charArray0[3] = 'J';
      charArray0[4] = 'F';
      charArray0[5] = '1';
      MockRandom mockRandom0 = new MockRandom(56319);
      char[] charArray1 = new char[8];
      charArray1[0] = '1';
      charArray1[1] = '1';
      charArray1[2] = '$';
      charArray1[3] = 'J';
      charArray1[4] = '1';
      charArray1[5] = '1';
      charArray1[6] = '1';
      charArray1[7] = 'F';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-166), (-166), false, false, charArray1, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1799);
      org.evosuite.runtime.Random.setNextRandom((-1799));
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'L';
      charArray0[2] = 'B';
      charArray0[3] = 'L';
      charArray0[4] = '\\';
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1799), 1, (-1799), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1799 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(126);
      int int0 = 56319;
      int int1 = 1;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '`';
      charArray0[3] = 'J';
      charArray0[4] = '@';
      charArray0[0] = '1';
      // Undeclared exception!
      RandomStringUtils.randomNumeric(126);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomStringUtils.random(2654);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'n';
      charArray0[2] = 'u';
      charArray0[3] = '5';
      charArray0[4] = 'h';
      charArray0[5] = '3';
      charArray0[6] = 'k';
      charArray0[7] = '9';
      charArray0[8] = 'x';
      RandomStringUtils.random(957, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -488 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(0);
      int int1 = 56319;
      RandomStringUtils.random(0, 0, 56319, true, true);
      int int2 = 0;
      RandomStringUtils.random(0, 56319, 56319, true, true);
      int int3 = (-134);
      int int4 = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '<';
      charArray0[3] = ']';
      charArray0[4] = 'L';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-134), 0, 56319, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -134 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils.random(0, true, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = ')';
      charArray0[2] = '+';
      charArray0[3] = 'q';
      charArray0[4] = 'G';
      charArray0[5] = 'k';
      MockRandom mockRandom0 = new MockRandom((-1031L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1503, (-1), 3678, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 463;
      boolean boolean0 = false;
      boolean boolean1 = false;
      RandomStringUtils.random(463, false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'd';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '~';
      charArray0[5] = 'I';
      MockRandom mockRandom0 = new MockRandom(463);
      RandomStringUtils.random(0, 786, (-699), false, true, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(0, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2835, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = null;
      RandomStringUtils.random(1, (char[]) null);
      int int1 = 0;
      int int2 = (-1055);
      boolean boolean0 = false;
      RandomStringUtils.random(0, (-1055), 2114, false, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2114);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 629;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(629, 629, 629, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      int int1 = 128;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(128);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[0];
      RandomStringUtils.random(0, (-973), 0, true, true, charArray0, (Random) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-3025);
      char[] charArray0 = new char[3];
      char char0 = '#';
      charArray0[0] = '#';
      char char1 = '!';
      charArray0[1] = '!';
      char char2 = 'h';
      charArray0[2] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3025), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3025 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-3320);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3320), (-3320), (-3320), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3320 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, "");
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'd';
      charArray0[2] = '#';
      charArray0[3] = '.';
      charArray0[4] = 'w';
      charArray0[5] = '$';
      charArray0[6] = ']';
      RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '1';
      charArray0[2] = '`';
      charArray0[3] = 'J';
      charArray0[4] = '@';
      charArray0[5] = '1';
      MockRandom mockRandom0 = new MockRandom(56319);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 56319, 1, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 162;
      RandomStringUtils.random(162, false, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(162);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 3559;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3559);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1846);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1846 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "<l8Y]");
      int int1 = 0;
      RandomStringUtils.random(0, 0, 0, false, false);
      // Undeclared exception!
      RandomStringUtils.random(556, true, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '_';
      charArray0[2] = '&';
      charArray0[3] = 'x';
      charArray0[4] = 'a';
      charArray0[5] = '0';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(455, 455, (-759), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '\'';
      charArray0[2] = 'i';
      charArray0[3] = 'T';
      charArray0[4] = ',';
      charArray0[5] = 'V';
      charArray0[6] = 'O';
      charArray0[7] = '<';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-3842);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3842 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-333);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -333 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '6';
      charArray0[2] = 'Y';
      charArray0[3] = '}';
      charArray0[4] = 'F';
      charArray0[5] = '$';
      RandomStringUtils.random(0, (-3835), (-915), false, false, charArray0, (Random) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2698);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '^';
      charArray0[2] = '>';
      charArray0[3] = 'L';
      charArray0[4] = '[';
      charArray0[5] = 'U';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-278);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -278 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(715);
      int int0 = 1828;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1828);
  }
}
