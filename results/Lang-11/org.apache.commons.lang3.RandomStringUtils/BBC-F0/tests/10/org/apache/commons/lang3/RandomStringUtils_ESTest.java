/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:30:01 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.randomAscii(39);
      RandomStringUtils.randomAscii(39);
      Random.setNextRandom(39);
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 56320;
      MockRandom mockRandom0 = new MockRandom((-914L));
      mockRandom0.nextDouble();
      mockRandom0.doubles();
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(39);
      RandomStringUtils.random(40, 55296, 1809, false, false, (char[]) null, (java.util.Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(39, "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2362L);
      // Undeclared exception!
      RandomStringUtils.random(3421, 56315, (-1222), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 69;
      Random.setNextRandom(69);
      RandomStringUtils.randomAlphabetic(69);
      RandomStringUtils.randomAlphabetic(69);
      RandomStringUtils.random(69);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2263));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2263 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, (String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = null;
      int int0 = 1283;
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 1283, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.doubles();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 't';
      charArray0[2] = 'o';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      // Undeclared exception!
      RandomStringUtils.random(770, 0, 0, false, true, charArray0, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-3230);
      char[] charArray0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(43, 1093, 56192, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-895);
      String string0 = RandomStringUtils.random(0, (-895), 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3006;
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'L';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3006, 29, 3006, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'x';
      charArray0[2] = 'Y';
      charArray0[3] = 'o';
      charArray0[4] = '&';
      charArray0[5] = ',';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(696, 0, (-1015), true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'q', 'x', 'Y', 'o', '&', ','}, charArray0);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1903, 35, 1903, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 383;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(2475, "~ruAnyi&Bf");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2475);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ')';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2067, 40, 1820, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2067;
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      int int1 = (-1301);
      // Undeclared exception!
      RandomStringUtils.random(1511, 34, (-1301), true, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = '7';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'y', 'g', '7'}, charArray0);
      assertEquals("y", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(473, 1, 56319, false, false, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'y', 'g', '7'}, charArray0);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(11);
      assertEquals("           ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(11);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1);
      assertEquals("\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = '7';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'y', 'g', '7'}, charArray0);
      assertEquals("y", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1067, 1, 1067, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'y', 'g', '7'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3006, (-3230), 1093, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(1851, (char[]) null);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      RandomStringUtils.random(1851, 1851, 32, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '%';
      charArray0[3] = ')';
      charArray0[4] = '~';
      charArray0[5] = '4';
      charArray0[6] = '%';
      charArray0[7] = '?';
      // Undeclared exception!
      RandomStringUtils.random(3055, 0, 127, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3006);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 40, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(793, " is less than 0.");
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1547L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1008, 1008, 127, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1440);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1440 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'X';
      charArray0[2] = '6';
      charArray0[3] = 's';
      charArray0[4] = 'W';
      charArray0[5] = '>';
      charArray0[6] = '=';
      charArray0[7] = 'f';
      charArray0[8] = 'z';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3109), (-3109), (-3109), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3109 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 128;
      int int1 = 56191;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 56191, 56191, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'q';
      charArray0[2] = '7';
      charArray0[3] = 'L';
      charArray0[4] = 'N';
      charArray0[5] = '';
      charArray0[6] = ' ';
      MockRandom mockRandom0 = new MockRandom((-1527L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(332, 12, 332, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1, 0, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-147);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -147 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = 'X';
      charArray0[2] = '(';
      charArray0[3] = '4';
      charArray0[4] = 'O';
      charArray0[5] = 'a';
      charArray0[6] = '6';
      charArray0[7] = ')';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'?', 'X', '(', '4', 'O', 'a', '6', ')'}, charArray0);
      assertEquals("?", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '4';
      charArray0[2] = 's';
      charArray0[3] = ']';
      charArray0[4] = '[';
      charArray0[5] = 'T';
      charArray0[6] = '+';
      charArray0[7] = '&';
      String string0 = RandomStringUtils.random(4778, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'F', '4', 's', ']', '[', 'T', '+', '&'}, charArray0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-579);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-579));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -579 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '';
      charArray0[3] = 'P';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 1;
      int int2 = (-2659);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2659), (-2659), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ')';
      charArray0[2] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2067, 2067, 2067, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 469;
      String string2 = RandomStringUtils.random(469, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(469, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 383;
      int int1 = 2475;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(383, 2475, 383, false, false);
      assertEquals("\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(383, "\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB");
      assertEquals("\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB\u09AB", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(2475);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(2475, "~ruAnyi&Bf");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(383);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-500);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-500), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -500 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(941);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 763;
      RandomStringUtils.randomAscii(763);
      int int1 = 1148;
      RandomStringUtils.randomAscii(1148);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1148, true, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-499), (-499), (-853), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -499 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -384 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      char[] charArray0 = null;
      RandomStringUtils.random(0, (char[]) null);
      RandomStringUtils.random(0, "");
      RandomStringUtils.random(0);
      RandomStringUtils.randomNumeric(0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(172, 172, 172, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '!';
      charArray0[2] = 'M';
      charArray0[3] = 'u';
      charArray0[4] = '<';
      RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      int int1 = (-941);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-941), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -941 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-3997);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3997), "Requested random string length ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3997 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
