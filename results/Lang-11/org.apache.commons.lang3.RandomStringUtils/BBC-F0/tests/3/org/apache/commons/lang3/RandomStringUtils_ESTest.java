/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:27:21 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(36);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(36, 56320, 2448, false, false);
      assertNotNull(string1);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom(36);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string2 = RandomStringUtils.random((int) '[');
      assertNotNull(string2);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 36;
      String string0 = RandomStringUtils.random(36);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int1 = 2448;
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 2448, false, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, 3637, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string2 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)32;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)0;
      mockRandom0.nextBytes(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray1);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(21);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2543, 56191, 2448, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(101);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      org.evosuite.runtime.Random.setNextRandom(39);
      org.evosuite.runtime.Random.setNextRandom((-1636));
      String string1 = RandomStringUtils.randomAlphabetic(193);
      assertNotNull(string1);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAlphanumeric(1041);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -130 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1089, 1089, 3637, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1089);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(16);
      assertNotNull(string1);
      assertEquals("                ", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 2722, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 8;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(8, (-1520), (-1520), false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'E';
      charArray0[2] = 'W';
      charArray0[3] = 'E';
      charArray0[4] = 'W';
      charArray0[5] = 'E';
      charArray0[6] = 'W';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(423, 0, (-1481), true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(489, 1215, 0, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF\u04BF", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(423, 44, (-2657), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string0 = RandomStringUtils.randomAscii('h');
      assertNotNull(string0);
      assertEquals("                                                                                                        ", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 56191;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(3289, 9, 56191, true, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string0 = RandomStringUtils.randomAscii('h');
      assertNotNull(string0);
      assertEquals("                                                                                                        ", string0);
      
      String string1 = RandomStringUtils.random(35, (-185), 56191, true, true);
      assertNotNull(string1);
      assertEquals("\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47\uFF47", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '\'';
      charArray0[2] = 'P';
      charArray0[3] = 'B';
      charArray0[4] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-1018);
      org.evosuite.runtime.Random.setNextRandom((-1018));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1018), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1018 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '\'';
      charArray0[2] = 'T';
      int int0 = 17;
      String string0 = RandomStringUtils.random((int) '\'');
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1458 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 360, 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(2);
      assertNotNull(string0);
      assertEquals("\u0000\u0000", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '`';
      charArray0[2] = 'D';
      charArray0[3] = '4';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(2448, (-871), (-4324), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(23, 2448, 27, true, false, (char[]) null);
      assertNotNull(string2);
      assertEquals("\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990\u0990", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 36;
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2577, 36, 2577, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-1236);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1236), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1236 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '\'';
      charArray0[2] = 'T';
      charArray0[3] = 'B';
      charArray0[4] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 45311, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(489, (-1), 489, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(423, 0, 0, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(502);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = ';';
      charArray0[2] = 'B';
      charArray0[3] = ':';
      charArray0[4] = 'K';
      String string2 = RandomStringUtils.random(0, 0, 3481, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'v', ';', 'B', ':', 'K'}, charArray0);
      
      String string3 = RandomStringUtils.random(3481, "d4#]zwxfr");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(2, false, false);
      assertNotNull(string4);
      assertEquals("\u0000\u0000", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '8';
      charArray0[3] = 'i';
      charArray0[4] = 'U';
      charArray0[5] = 'A';
      charArray0[6] = 'U';
      charArray0[7] = 'U';
      charArray0[8] = 'U';
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, (-1412), 0, true, true, charArray0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = RandomStringUtils.random(0, 1, 1, true, true, charArray0);
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, (-1412), 2745, false, true, charArray0, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = 'j';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(90, (-3242), (-3242), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string3 = RandomStringUtils.random(0, 0, 503, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(503);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(502);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(502, "CiBQ{|kcl[w{X&uCK");
      assertNotNull(string2);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(502);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "zf-+jO%=f|&jn46.ocV";
      // Undeclared exception!
      RandomStringUtils.random(55296, "zf-+jO%=f|&jn46.ocV");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '\'';
      charArray0[2] = 'T';
      charArray0[3] = 'B';
      charArray0[4] = 'y';
      charArray0[5] = 'R';
      charArray0[6] = 'K';
      charArray0[7] = 'j';
      charArray0[8] = '3';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4340, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 123;
      String string0 = RandomStringUtils.randomAscii(123);
      assertNotNull(string0);
      assertEquals("                                                                                                                           ", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(123, "y(,v[ny0");
      assertNotNull(string1);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2511 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = ']';
      charArray0[4] = 'f';
      charArray0[5] = 'o';
      charArray0[6] = 'f';
      charArray0[7] = '4';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertEquals(8, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'8', 'X', '@', ']', 'f', 'o', 'f', '4'}, charArray0);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1605 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1786);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-265);
      String string0 = "";
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-265), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -265 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = (-234);
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-234), (-234), (-234), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -234 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 210, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -806 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 978;
      // Undeclared exception!
      RandomStringUtils.random(978, false, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 's';
      charArray0[2] = '=';
      charArray0[3] = '&';
      charArray0[4] = '.';
      charArray0[5] = 'h';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2798, 2798, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "Requested random string length ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'u'}, charArray0);
      
      String string2 = RandomStringUtils.random(0, false, true);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.randomAscii(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1284), (-1284), (-2426), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1284 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2177;
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = null;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextLong();
      mockRandom0.nextInt();
      mockRandom0.nextBoolean();
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2177, 2052, 2052, false, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'z';
      charArray0[2] = '1';
      charArray0[3] = '@';
      charArray0[4] = '=';
      charArray0[5] = '7';
      charArray0[6] = '^';
      charArray0[7] = '-';
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-123), 465, 465, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -123 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils.random(1, (char[]) null);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -599 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'i';
      charArray0[2] = 'Z';
      charArray0[3] = 'J';
      charArray0[4] = '<';
      charArray0[5] = 'K';
      charArray0[6] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1228), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1228 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-87);
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      charArray0[2] = '^';
      charArray0[3] = 'D';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = '8';
      charArray0[7] = '3';
      charArray0[8] = 'T';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-87), (-87), (-87), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -87 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-5714);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-5714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5714 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
