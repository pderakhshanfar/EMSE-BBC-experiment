/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:35:47 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "");
      int int1 = 128;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'O';
      charArray0[2] = '6';
      charArray0[3] = '=';
      RandomStringUtils.random(128, 0, 0, false, false, charArray0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, true, true);
      int int2 = 1726;
      RandomStringUtils.random(1726, 0, 1132, false, false, charArray0);
      int int3 = 634;
      int int4 = 703;
      boolean boolean0 = false;
      boolean boolean1 = true;
      MockRandom mockRandom0 = new MockRandom(634);
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 128, (long) 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(178L);
      // Undeclared exception!
      RandomStringUtils.random(1523, 56192, 20, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1054);
      RandomStringUtils.random(1054);
      RandomStringUtils.randomAlphabetic(1054);
      RandomStringUtils.random(1054, "YEBj");
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '#';
      charArray0[2] = ';';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      charArray0[5] = '0';
      RandomStringUtils.random(25, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      org.evosuite.runtime.Random.setNextRandom(1054);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.randomAscii(1427);
      RandomStringUtils.randomAscii(206);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(0, false, false);
      org.evosuite.runtime.Random.setNextRandom(206);
      RandomStringUtils.randomNumeric(283);
      org.evosuite.runtime.Random.setNextRandom(1427);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.random(1, (-5831), 1, false, false, (char[]) null);
      RandomStringUtils.randomAscii(1561);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(1, 38);
      mockRandom0.nextBoolean();
      mockRandom0.doubles((long) 1);
      RandomStringUtils.random(38, (-1), 28, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(28);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1427;
      RandomStringUtils.randomAscii(1427);
      RandomStringUtils.random(1427);
      RandomStringUtils.random(206);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      // Undeclared exception!
      RandomStringUtils.random(206, 0, (-1062), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-851L));
      // Undeclared exception!
      RandomStringUtils.random(56320, " is less than 0.");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.randomAscii(1399);
      MockRandom mockRandom0 = new MockRandom(206);
      int int0 = 34;
      RandomStringUtils.random(34, 1399, 56164, true, true);
      int int1 = 769;
      // Undeclared exception!
      RandomStringUtils.random(56164, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 55296, 55296, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(1, " is less than 0.");
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      int int1 = 31;
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'I';
      charArray0[2] = '|';
      charArray0[3] = 'c';
      charArray0[4] = '8';
      charArray0[5] = '>';
      charArray0[6] = '7';
      charArray0[7] = 't';
      RandomStringUtils.random(1, 1, 31, false, false, charArray0);
      int int2 = (-556);
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-556), 10, (-556), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -556 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'a';
      charArray0[4] = 'U';
      charArray0[5] = 'Q';
      charArray0[6] = '{';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(1201, 1, 45, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'a';
      charArray0[4] = '$';
      charArray0[5] = 'Q';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, 1, 3103, true, true, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(1, "Q");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(9742);
      int int0 = 1;
      boolean boolean0 = true;
      int int1 = 1542;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 1542, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(955);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(955, 955, 955, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      RandomStringUtils.random(2496, 2037, 2496, true, false);
      MockRandom mockRandom0 = new MockRandom((-480L));
      mockRandom0.nextLong();
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = 'V';
      charArray0[2] = '8';
      charArray0[3] = 'B';
      charArray0[4] = '/';
      charArray0[5] = 'V';
      charArray0[6] = 'B';
      charArray0[7] = 'd';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45, 1390, 2259, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1427);
      RandomStringUtils.randomAscii(206);
      RandomStringUtils.random(1427);
      RandomStringUtils.random(206, string0);
      char[] charArray0 = new char[2];
      char char0 = '}';
      charArray0[0] = '}';
      char char1 = 'u';
      charArray0[1] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      mockRandom0.ints((-3521), (-702));
      mockRandom0.setSeed(547);
      mockRandom0.doubles((long) 547);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1487, 2374, 1289, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils.random(1276, 2037, 2496, false, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = '^';
      charArray0[3] = 'd';
      charArray0[4] = 'V';
      MockRandom mockRandom0 = new MockRandom(0L);
      RandomStringUtils.random(2496, 0, 2037, false, false, charArray0, (Random) mockRandom0);
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1427;
      RandomStringUtils.randomAscii(1427);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'N';
      charArray0[2] = '[';
      charArray0[3] = '\"';
      charArray0[4] = 'a';
      charArray0[5] = 'Z';
      charArray0[6] = '%';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(27, 27, 1427, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(1656L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'C';
      charArray0[2] = 'c';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, 4294, (-1346), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1427;
      String string0 = RandomStringUtils.randomAscii(1427);
      RandomStringUtils.randomAscii(206);
      RandomStringUtils.random(1427);
      RandomStringUtils.random(206, string0);
      RandomStringUtils.random(206, false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      RandomStringUtils.random(0, 206, 206, true, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(206, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, 7365, 25, true, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[2] = 'Q';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(29, (-965), (-3000), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils.randomAscii(32);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(18, false, false);
      RandomStringUtils.random(629, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      RandomStringUtils.random(32, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomStringUtils.random(0, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = ')';
      charArray0[2] = '(';
      charArray0[3] = 'T';
      charArray0[4] = '|';
      charArray0[5] = ':';
      charArray0[6] = '\'';
      charArray0[7] = ',';
      charArray0[8] = 'D';
      RandomStringUtils.random(0, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'Z';
      charArray0[2] = 'A';
      charArray0[3] = '^';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-479), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'Y';
      charArray0[2] = '`';
      RandomStringUtils.random(1, charArray0);
      RandomStringUtils.random(0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "w'?6m !G|K,e} ");
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3189 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3538;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(3538, false, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, false, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils.random(0, 2100, 1, false, false);
      boolean boolean0 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'w';
      RandomStringUtils.random(0, (-417), 0, false, false, charArray0);
      RandomStringUtils.random(0, "G7CA}<mW");
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'y';
      charArray0[2] = 'e';
      charArray0[3] = 'u';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-688), (-688), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1060;
      int int1 = (-1);
      int int2 = (-197);
      RandomStringUtils.random(1060, (-1), (-197), false, false);
      int int3 = 45;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(45);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '_';
      charArray0[2] = 'G';
      charArray0[3] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3162), (-3429), (-3162), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3162 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(0, 0, 0, false, true);
      RandomStringUtils.randomAscii(0);
      int int1 = 0;
      RandomStringUtils.randomAscii(0);
      int int2 = 56191;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56191);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1682);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1682), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1682 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1749 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils.randomAscii(7860);
      int int0 = 0;
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, true, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(7860, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils.random(1276, 2037, 2496, false, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = '^';
      charArray0[3] = 'd';
      charArray0[4] = 'V';
      MockRandom mockRandom0 = new MockRandom(0L);
      RandomStringUtils.random(2496, 0, 2037, false, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2465), 1163, 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2465 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      int int0 = 0;
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, "");
      int int1 = 57343;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -831 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2046), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2046 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1427);
      RandomStringUtils.randomAscii(206);
      RandomStringUtils.random(1427);
      RandomStringUtils.random(206, string0);
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((-3521), (-702));
      mockRandom0.setSeed(547);
      mockRandom0.doubles((long) 547);
      // Undeclared exception!
      RandomStringUtils.random(1427, 0, 547, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils.random(3706, (String) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 5760;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(5760);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      int int0 = 0;
      RandomStringUtils.random(0, "=)@E@d@");
      int int1 = 0;
      int int2 = (-1542);
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = '-';
      charArray0[2] = '(';
      charArray0[3] = '|';
      charArray0[4] = ']';
      charArray0[5] = 'R';
      charArray0[6] = ';';
      charArray0[7] = '$';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 0, (-1249.492013159748), (-1249.492013159748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2143;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2143);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1200;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1200);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-3604);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3604), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3604 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
