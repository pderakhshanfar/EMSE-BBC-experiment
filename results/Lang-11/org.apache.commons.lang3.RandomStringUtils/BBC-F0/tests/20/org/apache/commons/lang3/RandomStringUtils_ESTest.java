/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:33:36 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextBoolean();
      char[] charArray0 = null;
      int int0 = 56191;
      int int1 = 2799;
      // Undeclared exception!
      RandomStringUtils.random(127, 56191, 2799, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.random(1);
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'u';
      charArray0[2] = '!';
      charArray0[3] = '\\';
      charArray0[4] = 'o';
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(9, 56320, 9, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.nextInt();
      RandomStringUtils.random(10, 56320, 10, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(0, "|63EEo");
      RandomStringUtils.random(21, "smWZ");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2779);
      RandomStringUtils.randomAlphanumeric(2779);
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = '/';
      charArray0[2] = '%';
      charArray0[3] = '\'';
      charArray0[4] = '5';
      charArray0[5] = 'a';
      charArray0[6] = '\"';
      charArray0[7] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2779, 3617, 3617, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 10;
      int int1 = 0;
      int int2 = (-2769);
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '\'';
      charArray0[2] = '2';
      charArray0[3] = '>';
      charArray0[4] = ')';
      charArray0[5] = '4';
      charArray0[6] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(10, 0, (-2769), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2816L));
      mockRandom0.nextBoolean();
      RandomStringUtils.random(334, (-1982), 334, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(23, "Pj/G1%:wHM");
      // Undeclared exception!
      RandomStringUtils.random(36204, 36204, (-640), false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2816L));
      mockRandom0.nextBoolean();
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 16, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray1 = new char[1];
      charArray1[0] = '1';
      RandomStringUtils.random(2139, 0, 2139, false, true, charArray1, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3321);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3321);
      MockRandom mockRandom1 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(8, 56192, 127, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 55296;
      int int1 = 15;
      // Undeclared exception!
      RandomStringUtils.random(27, 55296, 15, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-772));
      RandomStringUtils.random(1, (-772), 22, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.randomAscii(22);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'T';
      charArray0[2] = 'z';
      charArray0[3] = 'T';
      charArray0[4] = '1';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = '1';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(23, (-1160), 0, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1049, 56293, 1049, false, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 762;
      // Undeclared exception!
      RandomStringUtils.random(585, 56333, 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 685;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(685, 2562, 2562, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      char[] charArray0 = new char[4];
      int int0 = 18;
      // Undeclared exception!
      RandomStringUtils.random(18, (int) (byte)0, (int) (byte)1, true, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(2562);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(3321, (-2278), 56192, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3321, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'A';
      String string0 = RandomStringUtils.random(1, (int) (byte)0, (int) (byte)93, true, true, charArray0, (Random) mockRandom0);
      assertEquals("A", string0);
      assertArrayEquals(new char[] {']', 'T', 'T', 'A'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric((byte)0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 56333;
      int int1 = 762;
      // Undeclared exception!
      RandomStringUtils.random(56333);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 4524;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(4524, (char[]) null);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(4524);
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(4524, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = (-789);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-789), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -789 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      RandomStringUtils.random(685, charArray0);
      int int0 = 21;
      boolean boolean0 = false;
      RandomStringUtils.random(21, false, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4006);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-1);
      int int2 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'X';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2017), (-1), 0, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2017 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(2562, "9");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 56333;
      int int1 = 762;
      // Undeclared exception!
      RandomStringUtils.random(56333, 56333, 762, false, false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = 'z';
      charArray0[4] = '&';
      charArray0[5] = ']';
      charArray0[6] = ']';
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2562, 2562, 2562, true, true, charArray0, (Random) mockRandom1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-4566);
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2165, (-4566), (-228), true, true, charArray0, (Random) mockRandom1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'T';
      charArray0[2] = ']';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 0L, 1L);
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      IntStream intStream0 = mockRandom1.ints(616L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(intStream0);
      
      int int0 = 56320;
      String string0 = RandomStringUtils.random(3321, 0, 56320, false, false, charArray0, (Random) mockRandom1);
      assertArrayEquals(new char[] {'1', 'T', ']', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56320);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2562, 1, 2562, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 56319;
      String string0 = ":S";
      // Undeclared exception!
      RandomStringUtils.random(56319, ":S");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '7';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-1758), 1340.4);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1758), (-608), 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1758 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2562, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = (-2852);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2852 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '$';
      charArray0[2] = 'M';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-737), false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'i', '$', 'M'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      
      int int0 = 6415;
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, 6415, 0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.random(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = (-239);
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '_';
      charArray1[1] = '{';
      charArray1[2] = 'N';
      charArray1[3] = 'H';
      charArray1[4] = 'h';
      charArray1[5] = '}';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-239), charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -239 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 56319;
      int int1 = 773;
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 773, false, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-806);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -806 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'v';
      charArray0[0] = 'v';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      long long1 = mockRandom0.nextLong();
      assertEquals(2L, long1);
      assertFalse(long1 == long0);
      
      String string0 = RandomStringUtils.random(0, (-4566), 2165, true, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-4566), 1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, 1, (-1), false, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'T';
      charArray0[2] = ']';
      charArray0[3] = 'z';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3321, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1', 'T', ']', 'z'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2056 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = 138;
      int int2 = 2649;
      boolean boolean0 = true;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom(2649);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(2546L, 2546L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-2419);
      int int1 = (-1537);
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2419), (-2419), (-1537), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2419 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'W';
      charArray0[2] = '(';
      charArray0[3] = 'Y';
      charArray0[4] = 'm';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'D', 'W', '(', 'Y', 'm'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -668 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-942), "WIHKUp1\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -942 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-4522);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-4522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4522 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 55296;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '^';
      charArray0[2] = 'C';
      charArray0[3] = '1';
      charArray0[4] = 'X';
      charArray0[5] = 'C';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 1, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 3359;
      String string0 = RandomStringUtils.randomAscii(3359);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '+';
      String string1 = RandomStringUtils.random(3359, charArray0);
      assertArrayEquals(new char[] {'D', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 1316;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1316, 603, 603, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-859);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -859 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '%';
      charArray0[2] = 'w';
      charArray0[3] = 'T';
      charArray0[4] = '1';
      charArray0[5] = '=';
      charArray0[6] = 'a';
      charArray0[7] = '2';
      charArray0[8] = 'P';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'8', '%', 'w', 'T', '1', '=', 'a', '2', 'P'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '/';
      charArray0[2] = 'p';
      charArray0[3] = 'T';
      charArray0[4] = '2';
      charArray0[5] = 'g';
      charArray0[6] = 'a';
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'c', '/', 'p', 'T', '2', 'g', 'a'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 2331, 2331, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = '\'';
      charArray0[2] = 'b';
      charArray0[3] = 'V';
      charArray0[4] = '@';
      charArray0[5] = '-';
      charArray0[6] = 'f';
      charArray0[7] = '>';
      charArray0[8] = 'S';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'q', '\'', 'b', 'V', '@', '-', 'f', '>', 'S'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 1;
      String string2 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1851), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1851 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-1514);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1514 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(743);
  }
}
