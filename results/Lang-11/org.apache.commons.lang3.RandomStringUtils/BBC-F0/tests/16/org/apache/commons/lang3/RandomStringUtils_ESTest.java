/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:32:11 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 55296, (-2423), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(22, 56319, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(15, 56191, 859, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-63);
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random((int) (byte)59, (int) (byte) (-63), 127, false, false, (char[]) null, (Random) mockRandom1);
      assertEquals("\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2\uFFC2", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'V';
      charArray0[2] = 'N';
      charArray0[3] = 'k';
      charArray0[4] = 'p';
      charArray0[5] = '(';
      charArray0[6] = 'q';
      charArray0[7] = '(';
      charArray0[8] = '_';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 7, (-474), true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 56319, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 56191, 15, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2897;
      String string0 = RandomStringUtils.random(2897, "oCe6~Cn ");
      assertNotNull(string0);
      
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(55296, (int) (byte)50, 0, false, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "O<(($b!Nh8NzSp3Un");
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte) (-63);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, (int) (byte)0, (-524), false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'x';
      charArray0[0] = 'x';
      char char1 = '\"';
      charArray0[1] = '\"';
      char char2 = ' ';
      charArray0[2] = ' ';
      // Undeclared exception!
      RandomStringUtils.random(36346, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 20, 20, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 56319;
      int int1 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 56191, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "oCe6~Cn ");
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      org.evosuite.runtime.Random.setNextRandom(3865);
      String string1 = RandomStringUtils.random(127, false, false);
      assertEquals("\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      org.evosuite.runtime.Random.setNextRandom((-4182));
      // Undeclared exception!
      RandomStringUtils.random(56319, "oCe6~Cn ");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "oCe6~Cn ");
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2544L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)116;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'F';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      String string1 = RandomStringUtils.random((int) (byte)116, (int) (byte)0, (int) (byte)50, true, false, charArray0, (Random) mockRandom0);
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'F', 'R', 'R'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "oCe6~Cn ");
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      MockRandom mockRandom0 = new MockRandom((byte)50);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)50, 0L, 2774L);
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(0L);
      byte[] byteArray0 = new byte[1];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string1 = RandomStringUtils.random((int) 'C', (-1775), 0, true, true);
      assertEquals("\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912\uF912", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "oCe6~Cn ");
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'K';
      org.evosuite.runtime.Random.setNextRandom(3865);
      String string1 = RandomStringUtils.random(127, false, false);
      assertEquals("\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19\u0F19", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      org.evosuite.runtime.Random.setNextRandom((-4182));
      // Undeclared exception!
      RandomStringUtils.random(37, (-1160), 57343, true, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom((-808));
      String string1 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("p", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      org.evosuite.runtime.Random.setNextRandom(1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) (byte)1, (-4212), (-1), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      int int1 = (-808);
      org.evosuite.runtime.Random.setNextRandom((-808));
      String string1 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("p", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      org.evosuite.runtime.Random.setNextRandom(1);
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'i';
      charArray0[2] = 'P';
      charArray0[3] = '$';
      charArray0[4] = '+';
      charArray0[5] = 'L';
      charArray0[6] = ')';
      charArray0[7] = 'Y';
      charArray0[8] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 2418, (-808), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-320);
      int int1 = 22;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-320), 1, 22, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -320 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1391L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = (-1);
      boolean boolean0 = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'g';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = 'g';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, (-1), (-1), false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom((byte)0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      mockRandom1.nextBytes(byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(5, byteArray0.length);
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      String string0 = RandomStringUtils.random(3353, 3353, (int) (byte)0, true, true, (char[]) null, (Random) mockRandom2);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotNull(string0);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      String string1 = RandomStringUtils.randomNumeric((byte)0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(1847, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      int int1 = (-808);
      org.evosuite.runtime.Random.setNextRandom((-808));
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1673 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'b';
      charArray0[2] = 'f';
      charArray0[3] = 'U';
      charArray0[4] = 'O';
      charArray0[5] = '@';
      charArray0[6] = '7';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'i', 'b', 'f', 'U', 'O', '@', '7'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string2 = RandomStringUtils.random((int) 'O');
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string6 = RandomStringUtils.random(2172, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string6);
      assertArrayEquals(new char[] {'i', 'b', 'f', 'U', 'O', '@', '7'}, charArray0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(7, charArray0.length);
      
      String string7 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertArrayEquals(new char[] {'i', 'b', 'f', 'U', 'O', '@', '7'}, charArray0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "oCe6~Cn ");
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'R';
      MockRandom mockRandom0 = new MockRandom((byte)59);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)50;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(3865, 0, (int) (byte)0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string0 = RandomStringUtils.random(828, 828, (-1436), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E\u033E", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1436), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1436 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      charArray0[2] = '<';
      charArray0[3] = 'f';
      charArray0[4] = '-';
      charArray0[5] = 'p';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("P", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'P', 'F', '<', 'f', '-', 'p'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = RandomStringUtils.random(1, 1, 0, true, true, charArray0);
      assertEquals("F", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'P', 'F', '<', 'f', '-', 'p'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 2936;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2936, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'g';
      charArray0[2] = 'f';
      MockRandom mockRandom0 = new MockRandom(3269L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2897, 2897, (-1151), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2897
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 123;
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      char char0 = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'G';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 56319, 1686, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56319
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56320);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2631 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'b';
      charArray0[2] = 'f';
      charArray0[3] = 'U';
      charArray0[4] = 'O';
      charArray0[5] = '@';
      charArray0[6] = '7';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'i', 'b', 'f', 'U', 'O', '@', '7'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1436);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(828, 828, (-1436), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-602);
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'i';
      charArray0[2] = 'A';
      charArray0[3] = 'F';
      charArray0[4] = 'k';
      charArray0[5] = 'h';
      charArray0[6] = 'r';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-602), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -602 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 756;
      String string1 = "'7}qn(AV~fb.";
      String string2 = RandomStringUtils.random(756, "'7}qn(AV~fb.");
      assertEqualsstring2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      RandomStringUtils.random(654, false, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, true, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'n';
      charArray0[2] = '%';
      charArray0[3] = '5';
      charArray0[4] = 'T';
      charArray0[5] = '+';
      String string4 = RandomStringUtils.random(0, (-896), 56320, true, true, charArray0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'J', 'n', '%', '5', 'T', '+'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '}';
      charArray0[2] = '!';
      charArray0[3] = 'a';
      charArray0[4] = 'P';
      charArray0[5] = '8';
      charArray0[6] = '>';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2098), 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2098 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 729;
      String string0 = RandomStringUtils.randomAscii(729);
      assertEqualsstring0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(729, (-630), (-630), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 56192;
      int int1 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'S';
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1787);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1787), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1787 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1937L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-1386), 1937L);
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(0, (-1386), 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2338);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-2507);
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = '?';
      charArray0[2] = 'F';
      charArray0[3] = 'Q';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2507), (-2507), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2507 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(448, true, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'w';
      charArray0[2] = 'a';
      charArray0[3] = 'i';
      charArray0[4] = ',';
      charArray0[5] = '[';
      charArray0[6] = 'g';
      charArray0[7] = 'y';
      MockRandom mockRandom0 = new MockRandom((-763));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-763), (-763), (-763), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -763 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "w;K}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'E';
      charArray0[2] = '@';
      String string1 = RandomStringUtils.random(634, charArray0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'J', 'E', '@'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1912);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 2327;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2327);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-2739);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2739 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 127;
      RandomStringUtils.random(127, "oCe6~Cn ");
      int int1 = 3865;
      int int2 = 127;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'R';
      charArray0[2] = 'T';
      charArray0[3] = '@';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, (double) 3865, (double) 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.randomAscii(220);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(220);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'b';
      charArray0[2] = '}';
      charArray0[3] = 'j';
      charArray0[4] = 'b';
      RandomStringUtils.random(0, 56320, 0, true, true, charArray0);
      int int1 = (-1135);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1135 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
