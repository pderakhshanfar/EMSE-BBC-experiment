/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:27:43 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'O';
      charArray0[2] = '%';
      charArray0[3] = '8';
      charArray0[4] = 'e';
      charArray0[5] = '*';
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      RandomStringUtils.random(967, "wGxl!) i=0*2GLK}");
      org.evosuite.runtime.Random.setNextRandom(967);
      RandomStringUtils.randomAlphabetic(967);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextInt();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      MockRandom mockRandom4 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(967, 56192, 967, false, false, (char[]) null, (Random) mockRandom4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      RandomStringUtils.random(967, 0, 0, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(15, 55311, 45, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 56191;
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      // Undeclared exception!
      RandomStringUtils.random((int) '}', 56191, (int) '}', false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.random(1);
      // Undeclared exception!
      RandomStringUtils.random(46235, (-3282), 1367, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 24;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(56183, 56183, 24, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56183, (-234), 1, false, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      RandomStringUtils.random(967, 32, 24, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(967, 0, (-121), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(967, (-15), 24, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[1] = '\\';
      // Undeclared exception!
      RandomStringUtils.random(443, (-1), 24, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils.randomAscii(123);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      RandomStringUtils.random(1639, 0, 1642, true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1642, 16, 123, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(967, 0, 24, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(32);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomAscii(123);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                           ", string1);
      
      String string2 = RandomStringUtils.random(1639, (char[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(123);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 56320, (-1668), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1539), 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "qz;owB~^-XLZ");
      assertNotNull(string0);
      assertEquals("q", string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, (-2429.7), 6089.697453993141);
      assertNotNull(doubleStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = '(';
      charArray0[6] = 'i';
      charArray0[7] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 56191, 1, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '_';
      charArray0[2] = '\'';
      // Undeclared exception!
      RandomStringUtils.random(56192, (-967), 1, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(898L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(898L, (double) 1, (double) 898L);
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles(364L, 316.8, 2123.022);
      assertNotSame(doubleStream1, doubleStream0);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotNull(doubleStream1);
      
      String string0 = RandomStringUtils.random(1, 1, 550, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(36178, "8noY4v:d");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(1297, 46153, 36175, true, true);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = 'a';
      // Undeclared exception!
      RandomStringUtils.random(1432, 1, 1297, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 46161;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(46153, 46161, 46165, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'F';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(1479, "4gx|0|U&2Ecf%N");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(970, 970, 1479, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA\u03CA", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2123);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      String string1 = RandomStringUtils.random(2123, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string2 = RandomStringUtils.random(0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.random(2123, true, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1440L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2176, 167, 0, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2144, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1, 2775, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '2';
      charArray0[2] = 'v';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2908, (-2048), (-2048), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(229);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '~';
      charArray0[2] = 't';
      charArray0[3] = '$';
      charArray0[4] = '.';
      charArray0[5] = '\'';
      charArray0[6] = 'l';
      charArray0[7] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(724, 56191, 960, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 32;
      String string0 = RandomStringUtils.random(32);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.random(0, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(32, 0, 32, true, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1, "qz;owB~^-XLZ");
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'p';
      charArray0[2] = 'M';
      charArray0[3] = 'G';
      charArray0[4] = 'F';
      charArray0[5] = '?';
      String string1 = RandomStringUtils.random(1, 0, 4054, false, false, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertEquals("@", string1);
      assertArrayEquals(new char[] {'@', 'p', 'M', 'G', 'F', '?'}, charArray0);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(4054, "qz;owB~^-XLZ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\u0000", string4);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2110, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4419), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4419 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'l';
      charArray0[2] = '=';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-243), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -243 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-4094);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4094), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4094 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '=';
      charArray0[2] = 'I';
      charArray0[3] = '';
      charArray0[4] = '\"';
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-368);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-368), (-599), 0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -368 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(56319);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(0, 0, 56319, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(866, 4179, 2238, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = ']';
      charArray0[4] = 'E';
      charArray0[5] = 'd';
      String string4 = RandomStringUtils.random(0, 0, 191, true, true, charArray0);
      assertNotNull(string4);
      assertEquals(6, charArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'P', 'G', '-', ']', 'E', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(127);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                               ", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-151), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -151 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 127;
      String string0 = RandomStringUtils.random(127);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int1 = 2871;
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(2871, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'c';
      charArray0[2] = 'V';
      charArray0[3] = '3';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2038), (-1), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2038 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1708);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'o';
      charArray0[2] = '@';
      charArray0[3] = 'J';
      charArray0[4] = ' ';
      charArray0[5] = 'v';
      charArray0[6] = ';';
      charArray0[7] = '7';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'b', 'o', '@', 'J', ' ', 'v', ';', '7'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4737, 4737, 4737, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "|eh6w!5/6J{d]=4");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1467 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 127;
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'J';
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'`', 'J'}, charArray0);
      
      boolean boolean1 = false;
      boolean boolean2 = false;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-314);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -314 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 's';
      charArray0[2] = '_';
      charArray0[3] = 'K';
      charArray0[4] = 'T';
      charArray0[5] = 'i';
      charArray0[6] = '^';
      String string0 = RandomStringUtils.random(0, (-3164), 32, true, true, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'Z', 's', '_', 'K', 'T', 'i', '^'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3164 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, "+y=ziY\"W_VV");
      assertNotNull(string0);
      assertEquals("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string0);
      
      String string1 = RandomStringUtils.random(0, 128, 1, false, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2003;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2003);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'a';
      charArray0[2] = 'C';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = '_';
      charArray0[6] = 'l';
      RandomStringUtils.random(1256, charArray0);
      int int0 = 0;
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      int int1 = 3517;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3517);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils.randomAscii(3187);
      int int0 = (-4141);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-4141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4141 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-324);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-324), "The chars array must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -324 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "?eHZ^N}wp");
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -802 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 2899;
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '2';
      charArray0[2] = '3';
      MockRandom mockRandom0 = new MockRandom(2899);
      mockRandom0.ints();
      mockRandom0.nextInt();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2899, 2899, 2899, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
