/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:27:27 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56191;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      int int1 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(1336, 56191, 1336, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 56320;
      String string0 = RandomStringUtils.random(1336, 56191, 1336, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(46355, 1336, 1783, true, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = false;
      char[] charArray0 = null;
      int int0 = 56320;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 56191, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3402;
      int int1 = 56191;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(47, 56191, 3402, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (-1357), 56191, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(42, 56191, 1, false, false);
      assertNotNull(string0);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(824, 1, (-1), true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char char0 = 'C';
      char char1 = 'k';
      char char2 = '#';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      IntStream intStream0 = mockRandom0.ints(897L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(1371, "0");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      IntStream intStream0 = mockRandom0.ints(897L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 10;
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'm';
      charArray0[5] = '#';
      charArray0[6] = 'C';
      charArray0[7] = 'k';
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, (-605), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(597);
      assertNotNull(string0);
      assertEqualsstring0);
      
      org.evosuite.runtime.Random.setNextRandom((-1249));
      String string1 = RandomStringUtils.randomAlphabetic(36);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string1);
      
      int int0 = 985;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2701), 985, (-1334), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2701 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '8';
      charArray0[1] = 'H';
      charArray0[4] = 'k';
      charArray0[5] = '#';
      charArray0[7] = 'I';
      MockRandom mockRandom0 = new MockRandom(932L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(1);
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals(21, charArray0.length);
      assertNotNull(string0);
      assertEquals("8", string0);
      
      String string1 = RandomStringUtils.randomAscii('I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                         ", string1);
      
      String string2 = RandomStringUtils.random((int) 'I');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      
      String string3 = RandomStringUtils.random(1, 1, 0, true, false, charArray0, (Random) mockRandom0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(21, charArray0.length);
      assertNotNull(string3);
      assertEquals("H", string3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      IntStream intStream0 = mockRandom1.ints(0L);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = '_';
      // Undeclared exception!
      RandomStringUtils.random(32, 0, 57343, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(1848, 105, 1848, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      char char0 = '8';
      charArray0[0] = '8';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char char1 = '[';
      char char2 = 'm';
      int int0 = 18;
      // Undeclared exception!
      RandomStringUtils.random(32, 1, 18, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(2260, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(2260);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2260, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'z';
      charArray0[2] = 'Z';
      charArray0[3] = '?';
      charArray0[4] = 'k';
      charArray0[5] = 'T';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 55296, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(58, 2058, (-1376), true, true, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A\u080A", string0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1016), (-1016), true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      IntStream intStream0 = mockRandom0.ints(932L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 56191;
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '#';
      charArray0[3] = 'k';
      charArray0[4] = 'C';
      charArray0[5] = '#';
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 10, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2778));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2778 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-1696);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1696 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 56191;
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 's';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 1876, 1876, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(18, 1, 183, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'H';
      charArray0[4] = 'k';
      charArray0[5] = '#';
      charArray0[6] = 'U';
      charArray0[7] = 'I';
      MockRandom mockRandom0 = new MockRandom(932L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(1);
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'8', 'H', '\u0000', '\u0000', 'k', '#', 'U', 'I'}, charArray0);
      assertEquals("8", string0);
      
      String string1 = RandomStringUtils.randomAscii('I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                         ", string1);
      
      String string2 = RandomStringUtils.random((int) 'I');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '4';
      charArray0[2] = 'S';
      charArray0[3] = '?';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = '?';
      charArray0[7] = 'S';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1848, (-1), (-1), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-1086), 1, false, false);
      assertNotNull(string0);
      assertEquals("\uFBC2", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2212), (-2212), 656, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2212 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1133;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1537, 1537, 1133, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1537
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-592), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -592 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 57343;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(57343, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAscii(31);
      assertNotNull(string0);
      assertEquals("                               ", string0);
      
      String string1 = RandomStringUtils.random(230, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 58;
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((-1391L), 1L);
      assertNotNull(longStream0);
      
      int int2 = 56319;
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints(2080, 56319);
      assertNotNull(intStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertNotSame(longStream1, longStream0);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(58, 58, 0, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(750);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-634);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -634 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.random(2089, 1876, 56191, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 32;
      String string0 = RandomStringUtils.random(32, "yk$?}fmiJ+e:l)cE");
      assertNotNull(string0);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string0);
      
      int int1 = 0;
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, 32, 1885, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int2 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(55296);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'i';
      charArray0[2] = '.';
      charArray0[3] = 'L';
      charArray0[4] = ';';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-223);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -223 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int2 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191, "[5*9dVno8E|{.Y>r]");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1146);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1146 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 69;
      // Undeclared exception!
      RandomStringUtils.random(69, true, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = '0';
      String string3 = RandomStringUtils.random(0, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'Z', '0'}, charArray0);
      assertEquals("", string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string4 = RandomStringUtils.random(0, "");
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(638);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = ';';
      charArray0[2] = '.';
      charArray0[3] = 'M';
      charArray0[4] = '/';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'J', ';', '.', 'M', '/'}, charArray0);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'J', ';', '.', 'M', '/'}, charArray0);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string5 = RandomStringUtils.random(0, 1484, 555, false, false, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'J', ';', '.', 'M', '/'}, charArray0);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = RandomStringUtils.random(0, false, false);
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = RandomStringUtils.random(4387, charArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals(5, charArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new char[] {'J', ';', '.', 'M', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 128;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = ')';
      charArray0[2] = 'E';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'M', ')', 'E'}, charArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'v';
      charArray0[2] = '6';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'>', 'v', '6'}, charArray0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 56320;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1133;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1537, 1537, 1133, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-2909);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2909 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'H';
      charArray0[2] = 'C';
      charArray0[3] = ')';
      charArray0[4] = 'k';
      charArray0[5] = '#';
      charArray0[6] = 'U';
      charArray0[7] = 'I';
      MockRandom mockRandom0 = new MockRandom(932L);
      mockRandom0.setSeed(1);
      mockRandom0.ints(0L);
      mockRandom0.longs();
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1408), 1, 1, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1408 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-1555);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1555), (-1555), (-1555), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1555 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = false;
      RandomStringUtils.random(0, false, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(869, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.random(0, false, true);
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '6';
      charArray0[2] = 'n';
      charArray0[3] = '`';
      charArray0[4] = 'P';
      charArray0[5] = 'T';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1374), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1374 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(0);
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = 'j';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 1, 1, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }
}
