/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:36:03 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(8);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(8, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(1, (char[]) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0000", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(2544, (-2047), 2544, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string5 = RandomStringUtils.random(2544, (-2047), 2544, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(1);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("\u0000", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(39);
      String string0 = RandomStringUtils.randomAscii(18);
      assertEquals("GGGGGGGGGGGGGGGGGG", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'W';
      charArray0[2] = 'T';
      charArray0[3] = 'c';
      String string1 = RandomStringUtils.random(18, charArray0);
      assertArrayEquals(new char[] {'I', 'W', 'T', 'c'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cccccccccccccccccc", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(18);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("GGGGGGGGGGGGGGGGGG", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string5 = RandomStringUtils.random(2544, (-2047), 2544, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1825);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(31);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string4 = RandomStringUtils.random(1398, 2565, (-638), true, true, (char[]) null, (Random) mockRandom0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(31);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom((-100L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = 41;
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(41, 0, 0, true, false, charArray0, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191, "s[p9pG(7`q/3b+WNv");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 759;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(759, 57343, 759, false, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '5';
      charArray0[2] = '{';
      charArray0[3] = '8';
      charArray0[4] = 'p';
      charArray0[5] = '5';
      String string5 = RandomStringUtils.random(1332, (-143), 31, true, true);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int1 = 38;
      String string1 = RandomStringUtils.random(127);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = false;
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, (-454), 16, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(31);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 5, 3543, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'K';
      charArray0[2] = '$';
      String string0 = RandomStringUtils.random(353, 1, 353, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'#', 'K', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -436 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int1 = 38;
      String string1 = RandomStringUtils.random(38);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      boolean boolean0 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 38, 38, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = null;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-204), (-1), 0, true, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -204 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'r';
      charArray0[2] = '>';
      charArray0[3] = 'M';
      charArray0[4] = '`';
      charArray0[5] = '$';
      String string0 = RandomStringUtils.random(1, 1, (-2711), false, false, charArray0);
      assertArrayEquals(new char[] {'E', 'r', '>', 'M', '`', '$'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("r", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(36, (-1), 56192, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(38);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(38, 1, 37, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(31);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      String string5 = RandomStringUtils.random(0, false, false);
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      assertFalse(randomStringUtils1.equals((Object)randomStringUtils0));
      assertNotNull(randomStringUtils1);
      
      MockRandom mockRandom0 = new MockRandom(31);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3192, 1039, 1039, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      String string0 = RandomStringUtils.random(0, 0, 56192, false, false, charArray0, (Random) null);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, (-1), false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1192);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1192), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1192 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-204);
      boolean boolean0 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2071), (-204), 0, true, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2071 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "q8c^(q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(0, true, true);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = (-1338);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1338), (-1338), (-337), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1338 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '+';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1722);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1722), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1722 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(1069, "!5'lSggE,ThPeybR%");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1069, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '7';
      charArray0[2] = 'D';
      charArray0[3] = 'F';
      charArray0[4] = 'b';
      charArray0[5] = '>';
      charArray0[6] = '-';
      charArray0[7] = 'w';
      charArray0[8] = '>';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1069, (-1982), 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'a';
      charArray0[2] = 'C';
      charArray0[3] = 'f';
      charArray0[4] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(363, (-2777), (-702), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '_';
      charArray0[2] = '?';
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'A', '_', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-799);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -799 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1083;
      String string0 = RandomStringUtils.random(1083, "`}(zD1fu%OOy<q}");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1083);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 56192;
      int int1 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      Random random0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 0, 57343, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(894);
      assertEqualsstring0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '!';
      charArray0[2] = '1';
      charArray0[3] = 'v';
      MockRandom mockRandom0 = new MockRandom((-2978L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(894, 894, (-1171), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '%';
      charArray0[2] = '';
      charArray0[3] = 'c';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'8', '%', '', 'c'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56191);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      MockRandom mockRandom0 = new MockRandom((-1559));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-3019));
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = (-643);
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      int int1 = mockRandom0.nextInt((-643));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1559), (-1559), (-3019), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1559 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'p';
      charArray0[2] = 'W';
      charArray0[3] = 'R';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'2', 'p', 'W', 'R'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        mockRandom0.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '5';
      charArray0[2] = '{';
      charArray0[3] = '8';
      charArray0[4] = 'p';
      charArray0[5] = '5';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string5 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'}', '5', '{', '8', 'p', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(127, 4541, 0, false, false);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD\u11BD", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1110), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1110 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(746, (-1), 1, false, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 56320, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -435 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2019, false, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 3886;
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '`';
      charArray0[2] = '~';
      charArray0[3] = 'Y';
      charArray0[4] = 'H';
      charArray0[5] = '.';
      String string0 = RandomStringUtils.random(3886, charArray0);
      assertArrayEquals(new char[] {'E', '`', '~', 'Y', 'H', '.'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3886);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(3886);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomNumeric(0);
      int int1 = 1850;
      RandomStringUtils.random(1850);
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2263);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      int int1 = (-2585);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2585 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3608;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3608, 3608, 3608, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-742);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-742), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -742 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
