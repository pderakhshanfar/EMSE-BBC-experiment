/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:36:00 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.random(704, 57343, 704, false, false);
      RandomStringUtils.random(704);
      int int0 = 1947;
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-4);
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.ints();
      // Undeclared exception!
      RandomStringUtils.random(1947, 56319, 1947, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 681;
      int int1 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(681, 57343, 681, false, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.random(704, 57343, 704, false, false);
      RandomStringUtils.random(704);
      RandomStringUtils.random(1872, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3205, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.random(704, 57343, 704, false, false);
      RandomStringUtils.random(704);
      MockRandom mockRandom0 = new MockRandom(57343);
      RandomStringUtils.random(1872, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
      RandomStringUtils.random(1130, "_yKT?");
      mockRandom0.nextBoolean();
      RandomStringUtils.random(24, 57343, 704, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1130);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 704;
      RandomStringUtils.random(704, 57343, 704, false, false);
      RandomStringUtils.random(704);
      MockRandom mockRandom0 = new MockRandom(57343);
      RandomStringUtils.random(1872, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
      int int1 = 1947;
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1947, 56319, 1947, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(1750);
      MockRandom mockRandom0 = new MockRandom(551L);
      mockRandom0.ints((long) 0, 0, 1750);
      // Undeclared exception!
      RandomStringUtils.random(38, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(1750);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-1394);
      // Undeclared exception!
      RandomStringUtils.random(1645, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 56192;
      org.evosuite.runtime.Random.setNextRandom(56192);
      char[] charArray0 = null;
      int int1 = 37;
      RandomStringUtils.randomAlphanumeric(37);
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(24);
      RandomStringUtils.random(24);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(3754, (-1561), 25, false, false, (char[]) null, (Random) mockRandom0);
      mockRandom0.nextLong();
      MockRandom mockRandom1 = new MockRandom(2859L);
      mockRandom1.nextFloat();
      RandomStringUtils.random(25);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 56192;
      org.evosuite.runtime.Random.setNextRandom(56192);
      // Undeclared exception!
      RandomStringUtils.random(42, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1194;
      boolean boolean0 = false;
      int int1 = 57343;
      RandomStringUtils.random(704, 57343, 704, false, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2294 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(24, "#XN\"<F5N-$\"Hs X}&[");
      org.evosuite.runtime.Random.setNextRandom(24);
      RandomStringUtils.random(4, (String) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      mockRandom0.doubles((-54.0), 0.0);
      RandomStringUtils.random(1, 55, 1, true, true, (char[]) null, (Random) mockRandom0);
      mockRandom0.nextLong();
      MockRandom mockRandom1 = new MockRandom((-1621L));
      mockRandom1.nextFloat();
      RandomStringUtils.random(123);
      RandomStringUtils.random(1, "7");
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1151 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 24;
      org.evosuite.runtime.Random.setNextRandom(24);
      RandomStringUtils.random(1, (char[]) null);
      RandomStringUtils.randomAscii(1);
      RandomStringUtils.randomNumeric(3246);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3246);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils.random(0, 1194, 0, false, false);
      RandomStringUtils.random(128);
      MockRandom mockRandom0 = new MockRandom((-937L));
      String string0 = RandomStringUtils.random(2618, 1194, 2618, false, false, (char[]) null, (Random) mockRandom0);
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      RandomStringUtils.random(2618);
      RandomStringUtils.random(1194, string0);
      // Undeclared exception!
      RandomStringUtils.random(1219, 128, (-1250), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints((long) 0);
      RandomStringUtils.random(24, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(0, false, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.randomAscii(1);
      MockRandom mockRandom0 = new MockRandom(1951L);
      mockRandom0.doubles();
      MockRandom mockRandom1 = new MockRandom(0L);
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'O';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = 'O';
      // Undeclared exception!
      RandomStringUtils.random(1533, 1, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils.random(0, 1194, 0, false, false);
      RandomStringUtils.random(128);
      MockRandom mockRandom0 = new MockRandom((-937L));
      String string0 = RandomStringUtils.random(2913, 1194, 2913, false, false, (char[]) null, (Random) mockRandom0);
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      String string1 = RandomStringUtils.random(2913);
      RandomStringUtils.random(1194, string0);
      RandomStringUtils.random(128);
      // Undeclared exception!
      RandomStringUtils.random(56319, string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 17;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 17, 17, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils.random(24, "#XN\"<F5N-$\"Hs X}&[");
      org.evosuite.runtime.Random.setNextRandom(24);
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(24);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(24, 24, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      RandomStringUtils.random(0, 0, 0, true, false);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0, (char[]) null);
      RandomStringUtils.randomAscii(1293);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3070, (-638), 1451, false, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(0, 1180, 0, false, false);
      RandomStringUtils.random(128);
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.ints((long) 128);
      RandomStringUtils.random(1180, 0, (-1930), false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(719, false, false);
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0);
      mockRandom0.nextInt();
      int int0 = 3237;
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '}';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      charArray0[8] = '\"';
      RandomStringUtils.random(0, 0, 3237, true, true, charArray0, (Random) mockRandom0);
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(3237, 0, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils.randomAscii(1);
      MockRandom mockRandom0 = new MockRandom(1951L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = 'O';
      charArray0[5] = ')';
      RandomStringUtils.random(1533, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = ')';
      charArray0[2] = 'v';
      MockRandom mockRandom0 = new MockRandom(1951L);
      RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(1, 0, (-1703), false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = 1194;
      boolean boolean0 = false;
      RandomStringUtils.random(0, 1194, 0, false, false);
      RandomStringUtils.random(128);
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-937L));
      RandomStringUtils.random(2618, 1194, 2618, false, false, (char[]) null, (Random) mockRandom0);
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      RandomStringUtils.random(2618);
      char[] charArray1 = new char[1];
      mockRandom0.longs(1L);
      mockRandom0.nextInt();
      charArray1[0] = '\"';
      RandomStringUtils.random(0, 1194, 0, false, false, charArray1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 2618, 1194, false, true, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2621
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-68);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -68 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'Z';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 56319, (-1), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56319
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3301 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      RandomStringUtils.random(0, 0, 0, true, false, charArray0, (Random) null);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, 2669, 0, false, false);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAscii(0);
      int int1 = (-1207);
      int int2 = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = ';';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1207), 2669, 1, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1207 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'c';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, true, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4911), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4911 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 726;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(726);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-888);
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[0];
      RandomStringUtils.random(0, (-888), (-888), false, true, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-888), 123, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '\\';
      charArray0[2] = ')';
      charArray0[3] = 'y';
      charArray0[4] = '8';
      charArray0[5] = 'T';
      charArray0[6] = '3';
      charArray0[7] = 'n';
      charArray0[8] = 'F';
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2698), (-2698), (-1), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2698 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomStringUtils.random(341, false, false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      int int1 = (-946);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -946 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-433);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-433), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -433 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-257);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -257 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, true, false);
      int int0 = 540;
      // Undeclared exception!
      RandomStringUtils.random(540, true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1134;
      int int1 = (-1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      RandomStringUtils.random(1134, 1134, (-1), true, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      charArray0[2] = 'm';
      charArray0[3] = 'v';
      charArray0[4] = 'M';
      charArray0[5] = 'G';
      charArray0[6] = ']';
      charArray0[7] = ')';
      charArray0[8] = 'M';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, (-1), 55296, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'o';
      charArray0[2] = '2';
      charArray0[3] = ')';
      charArray0[4] = 's';
      charArray0[5] = '-';
      charArray0[6] = '\'';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 833;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, (-2379), 833, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '?';
      charArray0[2] = '(';
      charArray0[3] = 'R';
      charArray0[4] = 'n';
      charArray0[5] = '>';
      charArray0[6] = '6';
      charArray0[7] = '|';
      charArray0[8] = '^';
      RandomStringUtils.random(1096, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'N';
      charArray0[2] = '3';
      charArray0[3] = ')';
      charArray0[4] = 'k';
      charArray0[5] = '';
      charArray0[6] = 'y';
      charArray0[7] = '7';
      charArray0[8] = '@';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(385, 385, 385, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils.random(0, 0, 0, true, false);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, "");
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int2 = 0;
      RandomStringUtils.random(0, (char[]) null);
      int int3 = 1293;
      RandomStringUtils.randomAscii(1293);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(714);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 32;
      int int1 = (-4665);
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(32, 32, (-4665), true, false);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "");
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 127;
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'C';
      charArray0[4] = '`';
      charArray0[5] = 'k';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-849);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -849 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1988;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1988, true, false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-371);
      int int1 = (-1263);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-371), (-371), (-1263), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -371 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
