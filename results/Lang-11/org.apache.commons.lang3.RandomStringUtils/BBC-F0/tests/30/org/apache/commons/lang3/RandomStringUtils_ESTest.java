/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:38:29 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.random(1, "eL]K~FO}awj!XVNr/");
      MockRandom mockRandom0 = new MockRandom(2036L);
      mockRandom0.nextGaussian();
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      RandomStringUtils.random(4660, (-76), 4, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(37, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.random(6);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'E';
      charArray0[2] = '~';
      charArray0[3] = 'B';
      RandomStringUtils.random(6, 0, 3781, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.random(128, (-2010), 128, false, false);
      RandomStringUtils.random(128, "<lFUh`~,o;b$t");
      org.evosuite.runtime.Random.setNextRandom(128);
      org.evosuite.runtime.Random.setNextRandom((-2010));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.random(421, 2727, 421, false, false);
      org.evosuite.runtime.Random.setNextRandom(930);
      RandomStringUtils.randomNumeric(32);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(7, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.nextFloat();
      RandomStringUtils.random(1, 1, (-1025), true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1025 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, false, true);
      RandomStringUtils.randomAscii(127);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      mockRandom0.nextGaussian();
      int int0 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(19, (-1), (-1534), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 585;
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, false, true);
      RandomStringUtils.randomAscii(127);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '`';
      charArray0[2] = 'E';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[0] = 'U';
      charArray0[6] = 'd';
      // Undeclared exception!
      RandomStringUtils.random(1982, 0, 1982, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.random(585);
      int int0 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(0, true, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int1 = 56320;
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = 'U';
      charArray0[6] = '~';
      charArray0[7] = 'U';
      charArray0[8] = ':';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(585);
      RandomStringUtils.random(32, 32, (-31), false, false);
      char[] charArray0 = new char[7];
      charArray0[2] = '~';
      charArray0[4] = 'U';
      charArray0[5] = ':';
      char[] charArray1 = new char[1];
      charArray1[0] = '~';
      RandomStringUtils.random(585, charArray1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, 0, 0, false, true, charArray1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(127);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'U';
      RandomStringUtils.random(2213, 0, (-986), false, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2158);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = 't';
      charArray0[2] = ')';
      charArray0[3] = 'p';
      charArray0[4] = 'Z';
      charArray0[5] = 'S';
      charArray0[6] = 'v';
      MockRandom mockRandom0 = new MockRandom();
      org.evosuite.runtime.Random.setNextRandom(35);
      RandomStringUtils.randomAlphabetic(35);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, false, true);
      RandomStringUtils.randomAscii(127);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '`';
      charArray0[2] = 'E';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'U';
      charArray0[6] = 'd';
      RandomStringUtils.random(1982, 0, 1982, false, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(585);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[2] = '~';
      charArray0[4] = 'U';
      charArray0[5] = ':';
      RandomStringUtils.random(0, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      char[] charArray1 = new char[1];
      charArray1[0] = '~';
      RandomStringUtils.random(585, charArray1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, 0, 0, false, true, charArray1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57327);
      RandomStringUtils.randomAlphanumeric(25);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-3569), (-1), false, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.random(585);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[2] = '~';
      charArray0[4] = 'U';
      charArray0[5] = ':';
      RandomStringUtils.random(0, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      int int0 = 232;
      char[] charArray1 = new char[1];
      charArray1[0] = '~';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-471), Integer.MAX_VALUE, (-471), false, false, charArray1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -471 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 46360;
      // Undeclared exception!
      RandomStringUtils.randomAscii(46360);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, 1, 0, false, true, charArray0);
      RandomStringUtils.random(0, 0, (-1895), false, false, charArray0);
      RandomStringUtils.random(1, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.doubles(0L);
      mockRandom0.ints();
      org.evosuite.runtime.Random.setNextRandom((-564));
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      RandomStringUtils.random(1, (-564), 394, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'Q';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'D';
      charArray0[5] = '#';
      RandomStringUtils.random(0, (String) null);
      RandomStringUtils.random(8, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1897);
      mockRandom0.ints();
      int int0 = 1446;
      int int1 = 35;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(884, 1446, 35, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.ints();
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3754, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'Q';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'D';
      charArray0[5] = '#';
      charArray0[6] = 'y';
      charArray0[7] = '!';
      charArray0[8] = 's';
      MockRandom mockRandom0 = new MockRandom(0L);
      RandomStringUtils.randomAlphabetic(0);
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(56320, "}[qXwDHs=NIDTwNWWF");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, 1, 0, false, true, charArray0);
      RandomStringUtils.random(0, 0, (-1895), false, false, charArray0);
      RandomStringUtils.random(1, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints();
      int int1 = (-69);
      int int2 = (-4258);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, (-69), (-4258), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '1';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'Z';
      charArray0[5] = '7';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1972 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'w';
      charArray0[2] = 'o';
      charArray0[3] = 'b';
      charArray0[4] = '\'';
      charArray0[5] = 's';
      charArray0[6] = '1';
      charArray0[7] = ';';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2673), 56192, 56192, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2673 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'Q';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'D';
      charArray0[5] = '#';
      charArray0[6] = 'y';
      charArray0[7] = '!';
      charArray0[8] = 's';
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.ints();
      RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      RandomStringUtils.random(0, 0, 51, true, false, charArray0, (Random) mockRandom0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 2673, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 153;
      RandomStringUtils.randomAscii(153);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 585;
      RandomStringUtils.random(585);
      int int1 = 0;
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'n';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = 'U';
      charArray0[5] = ':';
      charArray0[6] = '-';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(585, (-864), 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils.random(436, "\"6k(QxJ");
      RandomStringUtils.randomAscii(436);
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, false, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'D';
      charArray0[2] = '>';
      charArray0[3] = '/';
      charArray0[4] = 'D';
      charArray0[5] = 'o';
      charArray0[6] = 'T';
      charArray0[7] = '{';
      charArray0[8] = 'B';
      RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      RandomStringUtils.random(3427, (char[]) null);
      int int0 = (-3835);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3835), 0, (-3835), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3835 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '5';
      charArray0[2] = 'T';
      charArray0[3] = 'b';
      charArray0[4] = 'M';
      charArray0[5] = 'A';
      RandomStringUtils.random(0, 0, (-3690), false, true, charArray0);
      RandomStringUtils.random(0, "");
      int int1 = 517;
      RandomStringUtils.randomAscii(517);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3690 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-3531);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3531 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 366;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(366, false, true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(0, 0, 0, true, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      int int1 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, "qK{3UVcsG6so{y");
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray1 = new char[1];
      charArray1[0] = '4';
      RandomStringUtils.random(2410, charArray1);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 957;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '@';
      charArray0[2] = '~';
      charArray0[3] = '{';
      RandomStringUtils.random(957, charArray0);
      boolean boolean0 = false;
      RandomStringUtils.random(957, false, false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(957, 957, 957, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = false;
      RandomStringUtils.random(0, 56192, (-1), false, false);
      int int0 = 32;
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      char char0 = 'W';
      charArray0[1] = 'W';
      char char1 = 'p';
      charArray0[2] = 'p';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 56319, 56319, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      RandomStringUtils.random(0, 0, 0, false, false);
      int int2 = 947;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(947, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 127;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, 5627, 55296, true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'o';
      charArray0[2] = 'J';
      RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'J';
      charArray1[1] = 'o';
      charArray1[2] = 'o';
      charArray1[3] = 'X';
      charArray1[4] = 'J';
      charArray1[5] = 'o';
      charArray1[6] = 'o';
      RandomStringUtils.random(701, charArray1);
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(701);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-2570);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2570), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2570 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1394), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1394 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(570);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-2883);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2883 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      int int1 = (-397);
      int int2 = 757;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-397), 757, 757, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -397 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1486);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 384;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(384);
  }
}
