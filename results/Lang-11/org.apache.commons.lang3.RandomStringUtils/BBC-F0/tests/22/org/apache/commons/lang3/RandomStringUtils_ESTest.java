/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:35:20 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(40, 56320, (-690), false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1745, "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 40;
      boolean boolean0 = false;
      int int1 = 56307;
      int int2 = (-690);
      // Undeclared exception!
      RandomStringUtils.random(40, 56307, (-690), false, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.random(40, 56320, (-690), false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1628, "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -690 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(40, 56320, (-690), false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2953);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      String string1 = RandomStringUtils.random(51, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string1);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, "org.apache.commons.lang3.RandomStringUtils");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(13, "The chars arry must not Ce empty");
      assertEquals("TTTTTTTTTTTTT", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(25, "TTTTTTTTTTTTT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTT", string1);
      assertNotNull(string1);
      
      org.evosuite.runtime.Random.setNextRandom(25);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      int int0 = 41;
      String string2 = RandomStringUtils.randomAlphanumeric(25);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9999999999999999999999999", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomNumeric(25);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9999999999999999999999999", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(109);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(692L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, (-5124), (-5124), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(13, "The Whars arry must not Ce empty");
      assertEquals("TTTTTTTTTTTTT", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(25, "TTTTTTTTTTTTT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTT", string1);
      assertNotNull(string1);
      
      org.evosuite.runtime.Random.setNextRandom(25);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      String string2 = RandomStringUtils.randomAlphanumeric(25);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9999999999999999999999999", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(109, (-352), (-19), true, true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9\uFEB9", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom(2812);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt(2812);
      assertEquals(0, int0);
      
      int int1 = 22;
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int2 = 2326;
      String string2 = RandomStringUtils.random(22, (-115), 2326, true, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(633);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEqualsstring3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1849 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(13, "The Whars arry must not Ce empty");
      assertEquals("TTTTTTTTTTTTT", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(22, "The Whars arry must not Ce empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTT", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(160, 160, 160, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(22);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                      ", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 2977;
      int int1 = mockRandom0.nextInt(2977);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = false;
      int int2 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(55296, 2977, 56192, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(1542L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(958, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(12, 33, 33, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 34;
      String string0 = RandomStringUtils.random(34, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int1 = mockRandom0.nextInt(10);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      IntStream intStream1 = mockRandom0.ints((long) 0);
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      
      boolean boolean0 = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 12, 2812, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom(2812);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt(2812);
      assertEquals(0, int0);
      
      int int1 = 2352;
      String string2 = RandomStringUtils.random(22, (-115), 2352, true, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D\uFF8D", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(22);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1128);
      String string0 = RandomStringUtils.random(1128, true, true);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(21);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DDDDDDDDDDDDDDDDDDDDD", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-748), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -748 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, false, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = 32;
      String string3 = RandomStringUtils.random(32, (char[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(13, false, false);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      int int1 = 2615;
      // Undeclared exception!
      RandomStringUtils.random(17, (-39), 2615, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt(2812);
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(2812, 0, (-115), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, true, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(32, false, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(13, false, false);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(17, (-51), 2615, true, false, (char[]) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD\uFFCD", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 32, 2615, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2587;
      int int1 = 1847;
      String string0 = RandomStringUtils.random(2587, 2587, 1847, true, true);
      assertNotNull(string0);
      
      int int2 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 1;
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      int int1 = 1;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 1, false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 122;
      String string1 = RandomStringUtils.random(122);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      String string2 = "g$=-$";
      String string3 = RandomStringUtils.random(122, "g$=-$");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string3);
      assertNotNull(string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'f';
      charArray0[2] = '<';
      charArray0[3] = '1';
      charArray0[4] = 'f';
      charArray0[5] = 'k';
      charArray0[6] = '2';
      MockRandom mockRandom0 = new MockRandom(122);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(122, (-1669), 1450, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1669
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 's';
      charArray0[2] = 'l';
      String string0 = RandomStringUtils.random(0, 0, 1333, true, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'x', 's', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = false;
      String string1 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1333);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = 32;
      int int2 = 1;
      int int3 = 1;
      boolean boolean2 = true;
      boolean boolean3 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1L), 0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'b';
      charArray0[2] = 'm';
      charArray0[3] = 'V';
      charArray0[4] = '!';
      charArray0[5] = 'g';
      charArray0[6] = 'w';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'3', 'b', 'm', 'V', '!', 'g', 'w'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      
      int int0 = 123;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(123);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 127;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = '.';
      charArray0[3] = '>';
      String string0 = RandomStringUtils.random(0, 127, 0, false, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'~', 'P', '.', '>'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3671);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(";", string0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      int int1 = 2417;
      String string1 = RandomStringUtils.random(2417, ";");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "Gj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = ';';
      String string1 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'t', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'t', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'o';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'I', 'o'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 0, 1, false, true);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      
      Random random0 = null;
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) null);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "");
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAscii(1962);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0);
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = 0;
      String string6 = RandomStringUtils.random(0, charArray0);
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.randomNumeric(0);
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = 1;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1962, 1962, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3262), (-717), (-3262), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3262 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1574 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-592), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -592 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2478;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2478);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 56191;
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '6';
      charArray0[2] = 't';
      charArray0[3] = '3';
      charArray0[4] = '?';
      charArray0[5] = '';
      charArray0[6] = 'f';
      charArray0[7] = 'I';
      charArray0[8] = '>';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-742);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -742 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'O';
      charArray0[2] = '&';
      charArray0[3] = ',';
      charArray0[4] = '@';
      charArray0[5] = 'P';
      charArray0[6] = 'z';
      charArray0[7] = 'Q';
      charArray0[8] = '/';
      String string3 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string3);
      assertArrayEquals(new char[] {'E', 'O', '&', ',', '@', 'P', 'z', 'Q', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      int int1 = 123;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(123, false, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1847;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(2587, 2587, 1847, true, true);
      assertNotNull(string0);
      
      int int1 = 0;
      int int2 = 1;
      boolean boolean1 = false;
      String string1 = RandomStringUtils.random(0, 1, 0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2798 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3204), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3204 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1084);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1084 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 1520;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, 0, 1520, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int3 = 1963;
      int int4 = 1272;
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '+';
      charArray0[2] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1963, 1963, 1272, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1963
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2198;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(2198, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2198, true, false);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-423);
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '[';
      charArray0[2] = 'a';
      charArray0[3] = 'c';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-423), (-956), 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -423 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }
}
