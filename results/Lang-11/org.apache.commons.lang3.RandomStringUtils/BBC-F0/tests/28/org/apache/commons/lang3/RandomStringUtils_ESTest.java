/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:37:15 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(29, 56319, 1517, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      int int0 = 56319;
      RandomStringUtils.random(28, 56319, 1517, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(1517, "\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1333;
      int int1 = 56180;
      // Undeclared exception!
      RandomStringUtils.random(1333, 56180, 25, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1314, 56180, 25, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(25);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = ')';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1605, 0, 0, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(823L);
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(2429, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      int int0 = 25;
      // Undeclared exception!
      RandomStringUtils.random(18, 56192, 25, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(849L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47361, 57343, 56319, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(12, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = 43;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(29, 43, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(23);
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'c';
      mockRandom0.setSeed(1);
      charArray0[2] = ';';
      charArray0[3] = '0';
      charArray0[4] = ',';
      charArray0[5] = 'W';
      String string0 = RandomStringUtils.random(43, 0, 1, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'0', 'c', ';', '0', ',', 'W'}, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals("0000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(12, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, ")g^0xX>{Ol-G");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'X';
      String string0 = RandomStringUtils.random(32, 0, 231, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(194, 0, (-2249), false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt((-99));
      assertEquals(1, int0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(123, (-170), 1784, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58\uFF58", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(2958, (char[]) null);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2958, 33, 3389, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string0 = RandomStringUtils.random(30, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(30, "]o~S}");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      
      String string2 = RandomStringUtils.random(30, (-675), 32, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D\uFD5D", string2);
      
      String string3 = RandomStringUtils.random(32, 30, 1678, false, false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E", string3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(194, 123, (-557), true, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'X';
      MockRandom mockRandom0 = new MockRandom((-1790L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(194, 123, 33, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(32);
      assertNotNull(string0);
      assertEquals("                                ", string0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, (-304), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3227, 32, 3831, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 45313, 45313, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '\'';
      charArray0[2] = 'v';
      charArray0[3] = '2';
      RandomStringUtils.random(857, 0, 0, true, true, charArray0);
      RandomStringUtils.random(197, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2958, (-249), (-249), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1719;
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = 'n';
      charArray0[2] = '^';
      charArray0[3] = 'q';
      charArray0[4] = '0';
      charArray0[5] = '+';
      charArray0[6] = 'E';
      charArray0[7] = '{';
      MockRandom mockRandom0 = new MockRandom(23);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(144);
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, (-1.0), 0.0);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1719, 23, 144, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(14, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'Z';
      charArray0[2] = '^';
      charArray0[3] = '?';
      charArray0[4] = 'j';
      charArray0[5] = 'c';
      charArray0[6] = ' ';
      charArray0[7] = ';';
      charArray0[8] = 'D';
      String string1 = RandomStringUtils.random(14, charArray0);
      assertArrayEquals(new char[] {'O', 'Z', '^', '?', 'j', 'c', ' ', ';', 'D'}, charArray0);
      assertNotNull(string1);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OOOOOOOOOOOOOO", string1);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = 'O';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 14, 14, false, true, charArray1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(4445);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, false, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'y';
      charArray0[2] = '}';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4445, 56192, 4445, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56192
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'X';
      charArray0[2] = 'T';
      charArray0[3] = 'r';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32, 1, 57343, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'y', 'X', 'T', 'r', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 1370;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1370, 1370, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 4445;
      String string0 = RandomStringUtils.random(4445);
      assertNotNull(string0);
      
      int int1 = 0;
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(0, false, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = 0;
      boolean boolean1 = false;
      String string2 = RandomStringUtils.random(0, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int3 = 0;
      int int4 = 0;
      boolean boolean2 = false;
      boolean boolean3 = false;
      char[] charArray0 = new char[0];
      String string3 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, false, false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(562, true, false);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '&';
      charArray0[2] = 'G';
      charArray0[3] = '6';
      charArray0[4] = 'J';
      charArray0[5] = 'W';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'}', '&', 'G', '6', 'J', 'W'}, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1539);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -885 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '3';
      charArray0[2] = 's';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "q");
      assertNotNull(string0);
      assertEquals("q", string0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RandomStringUtils.random(857, "ULE");
      RandomStringUtils.random(857, (String) null);
      RandomStringUtils.random(857, "i6?");
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(32, 529);
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 32, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'v';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1895, 1895, 1895, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -920 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.randomAscii(1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-2508);
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2508), (-2508), (-2508), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2508 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'p';
      charArray0[0] = 'p';
      char char1 = 'J';
      charArray0[1] = 'J';
      char char2 = 'q';
      charArray0[2] = 'q';
      char char3 = '*';
      charArray0[3] = '*';
      charArray0[4] = 'I';
      charArray0[5] = 'x';
      charArray0[6] = 'w';
      char char4 = 'N';
      charArray0[7] = 'N';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'p', 'J', 'q', '*', 'I', 'x', 'w', 'N'}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'p', 'J', 'q', '*', 'I', 'x', 'w', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals(8, charArray0.length);
      assertEquals("", string1);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2958;
      int int1 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2958, 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = (-402);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -402 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 562;
      String string0 = RandomStringUtils.randomAscii(562);
      assertNotNull(string0);
      assertEqualsstring0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1736);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '^';
      charArray0[2] = 'C';
      charArray0[3] = '_';
      charArray0[4] = '1';
      charArray0[5] = '3';
      charArray0[6] = 'w';
      charArray0[7] = 'M';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-2109), 90, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'~', '^', 'C', '_', '1', '3', 'w', 'M'}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 56191;
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      String string0 = RandomStringUtils.random(0, 0, 56191, true, true, charArray0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = (-3000);
      String string2 = RandomStringUtils.random(0, (-1), (-3000), true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3000 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-351);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -351 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils.random(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = 'O';
      charArray0[2] = 's';
      charArray0[3] = '~';
      charArray0[4] = 'P';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-167), (-167), (-1), true, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -167 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'u';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.random(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-592), (-592), (-592), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -592 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomAlphabetic(0);
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      RandomStringUtils.random(1, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2287), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2287 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
