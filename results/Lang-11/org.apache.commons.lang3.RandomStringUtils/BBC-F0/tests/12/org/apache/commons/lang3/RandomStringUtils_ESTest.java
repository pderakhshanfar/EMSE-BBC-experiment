/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:31:09 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(308);
      // Undeclared exception!
      RandomStringUtils.random(56220, 56220, 308, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.random(14);
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(86);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[4];
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = 'F';
      // Undeclared exception!
      RandomStringUtils.random(1, 0, Integer.MAX_VALUE, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(36);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(10, 56191, (-1182), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.random(1, false, false);
      RandomStringUtils.random(1, 44, (-3260), false, false, (char[]) null);
      RandomStringUtils.random(8);
      RandomStringUtils.randomAscii(8);
      org.evosuite.runtime.Random.setNextRandom(44);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(1L, (-1.0), 306.8);
      RandomStringUtils.random(1, (-1002), 44, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      charArray0[2] = '1';
      charArray0[4] = '0';
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(39, 0, 0, false, false, charArray0, (Random) mockRandom1);
      RandomStringUtils.random(0);
      RandomStringUtils.random(39, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'o';
      charArray0[2] = 's';
      charArray0[3] = '<';
      charArray0[4] = 'c';
      charArray0[5] = 'n';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(57343, "3");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 39;
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt();
      mockRandom0.ints();
      mockRandom1.longs();
      char[] charArray0 = new char[3];
      charArray0[0] = '\u001E';
      charArray0[1] = 'B';
      charArray0[2] = '\u001E';
      RandomStringUtils.random(39, 0, 39, true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints((long) 39);
      mockRandom0.longs();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = '1';
      RandomStringUtils.random(39, 0, 39, true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils.randomAscii(264);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '[';
      charArray0[2] = 'w';
      charArray0[3] = '&';
      charArray0[4] = 'O';
      MockRandom mockRandom0 = new MockRandom((-5755));
      RandomStringUtils.random(3848, 0, (-5755), false, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(115);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '~';
      charArray0[2] = 'x';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, (-866), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 264;
      RandomStringUtils.randomAscii(264);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2126 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(36);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      // Undeclared exception!
      RandomStringUtils.random(904, 0, 36, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(36);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'U';
      charArray0[2] = '1';
      charArray0[3] = 't';
      charArray0[4] = '0';
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints(356L);
      RandomStringUtils.random(39, 0, 0, false, false, charArray0, (Random) mockRandom1);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = ':';
      charArray0[7] = ':';
      RandomStringUtils.random(19, charArray0);
      int int0 = (-3153);
      RandomStringUtils.random(625, (-3153), 43, false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(625, "MMMMMMMMMMMMMMMMMMM");
      RandomStringUtils.random(1666, false, false);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(418);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(36);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'U';
      charArray0[2] = '1';
      charArray0[3] = 't';
      charArray0[4] = '0';
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints(356L);
      // Undeclared exception!
      RandomStringUtils.random(39, 0, 0, false, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '@';
      charArray0[2] = 'X';
      charArray0[3] = '>';
      charArray0[4] = '>';
      RandomStringUtils.random(418, charArray0);
      boolean boolean0 = true;
      RandomStringUtils.random(418, 418, (-3153), true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3153), (-3153), 418, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3153 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils.randomAscii(264);
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '$';
      charArray0[2] = 'r';
      charArray0[3] = '@';
      charArray0[4] = '$';
      charArray0[5] = '[';
      charArray0[6] = 't';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(264, 264, 264, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(968, 13, (-704), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '=';
      charArray0[2] = '/';
      charArray0[3] = ':';
      charArray0[4] = 'G';
      RandomStringUtils.randomAscii(1230);
      RandomStringUtils.randomAscii(0);
      int int0 = 442;
      RandomStringUtils.random(442);
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(56319, false, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      RandomStringUtils.random(1764, charArray0);
      int int0 = (-3153);
      boolean boolean0 = true;
      int int1 = 29;
      // Undeclared exception!
      RandomStringUtils.random(29, (-3153), (-1443), true, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 57343;
      int int1 = (-1959);
      int int2 = 1;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(57343, (-1959), 1, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '@';
      charArray0[2] = 'X';
      charArray0[3] = '>';
      charArray0[4] = '>';
      RandomStringUtils.random(418, charArray0);
      boolean boolean0 = true;
      RandomStringUtils.random(418, 418, (-3153), true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(3920, (String) null);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2\u01A2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils.randomAscii(2539);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2539, 2539, 2539, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1429 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomStringUtils.random(0, false, true);
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = '(';
      charArray0[3] = 'L';
      charArray0[4] = '0';
      charArray0[5] = 'f';
      charArray0[6] = 'Z';
      charArray0[7] = 't';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(968, 1517, (-2308), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils.random(0, (char[]) null);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, 0, 0, true, false);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 716;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(716, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 937;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(937, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 128;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(128);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, true, true);
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'k';
      charArray0[2] = 'r';
      charArray0[3] = 'K';
      charArray0[4] = 'G';
      charArray0[5] = 'I';
      MockRandom mockRandom0 = new MockRandom((-1448L));
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1289L), (-1448L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 127;
      boolean boolean0 = false;
      RandomStringUtils.random(127, false, false);
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      int int0 = 730;
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'y';
      charArray0[2] = 'j';
      charArray0[3] = 'D';
      charArray0[4] = '^';
      charArray0[5] = ' ';
      charArray0[6] = 'H';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1036), 657, 730, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1036 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-3648);
      int int1 = (-1908);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3648), (-1908), (-1908), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3648 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      charArray0[3] = 'b';
      charArray0[4] = 'e';
      charArray0[5] = '[';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(0, 458, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils.random(0, "5");
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      RandomStringUtils.random(2530, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAscii(0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'f';
      charArray1[1] = '8';
      charArray1[2] = '}';
      RandomStringUtils.random(0, charArray1);
      // Undeclared exception!
      RandomStringUtils.random(2530, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 3644;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3644);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '6';
      charArray0[2] = '3';
      charArray0[3] = 'O';
      charArray0[4] = '6';
      charArray0[5] = 'n';
      charArray0[6] = '9';
      charArray0[7] = 'D';
      charArray0[8] = 'r';
      RandomStringUtils.random(1078, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      RandomStringUtils.random(0, (-336), 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAscii(0);
      boolean boolean0 = false;
      RandomStringUtils.random(0, false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0, false, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1716;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1716, 1716, 1716, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 2102;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2102);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(2490, true, false);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '=';
      charArray0[2] = '/';
      charArray0[3] = ':';
      charArray0[4] = '=';
      charArray0[5] = 'S';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, "");
      boolean boolean0 = false;
      RandomStringUtils.random(0, 0, 0, false, true);
      int int1 = 0;
      int int2 = 3654;
      boolean boolean1 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '0';
      charArray0[2] = 'Q';
      charArray0[3] = ',';
      MockRandom mockRandom0 = new MockRandom((-2394L));
      mockRandom0.nextLong();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.ints(0L);
      mockRandom0.longs((-2394L), (-2369L));
      // Undeclared exception!
      try { 
        mockRandom0.ints(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }
}
