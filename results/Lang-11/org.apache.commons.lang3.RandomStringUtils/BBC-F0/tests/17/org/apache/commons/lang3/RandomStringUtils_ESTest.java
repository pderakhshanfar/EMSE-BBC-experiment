/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:32:22 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      Random.setNextRandom(8);
      // Undeclared exception!
      RandomStringUtils.random(56320, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2348L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-1765.15185225745), (double) 0);
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 548, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = ',';
      charArray0[2] = 'p';
      charArray0[3] = '=';
      charArray0[4] = '\\';
      charArray0[5] = ']';
      charArray0[6] = ']';
      charArray0[7] = 'p';
      charArray0[8] = 'E';
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(449);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ", string0);
      
      Random.setNextRandom(41);
      String string1 = RandomStringUtils.randomAlphanumeric(41);
      assertNotNull(string1);
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2852);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2852, 1901, 2852, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2852, 56191, 2852, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2852, 4290, (-122), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      LongStream longStream0 = mockRandom0.longs((-1838L), 618L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string1 = RandomStringUtils.random(4290, (-122), 2852, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-122), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -122 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      mockRandom0.setSeed((byte) (-62));
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)76;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      String string0 = RandomStringUtils.random(1, 0, (-1366), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0002", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2852);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1901, 2852, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u076D", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 2852, false, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2852);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, 951.299035640662, (double) 2852);
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(1, 1901, 2852, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u076D", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2852, 18, (-1437), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(334, false, false);
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(334, 56192, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 46209;
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = ',';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46232, 46232, 46209, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 7;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(14, 0, 1, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2852);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1901, 2852, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u076D", string0);
      
      LongStream longStream0 = mockRandom0.longs((long) 2852, 2943L);
      assertNotNull(longStream0);
      
      String string1 = RandomStringUtils.random(18, 3431, 1116, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 1233, 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = false;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(14, (-1085), 1, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'A';
      charArray0[2] = 'n';
      charArray0[3] = 'w';
      String string0 = RandomStringUtils.random(1, 1, 33, true, true, charArray0);
      assertNotNull(string0);
      assertEquals("A", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'a', 'A', 'n', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2852);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1901, 2852, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u076D", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string1 = RandomStringUtils.random(1, 2852, 1720, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("\u0B24", string1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      int int1 = 2852;
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      char char0 = '2';
      charArray0[1] = '2';
      char char1 = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'T';
      charArray0[4] = 'Y';
      charArray0[5] = '^';
      char char2 = '_';
      charArray0[6] = '_';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 2852, 2852, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '7';
      charArray0[2] = ')';
      char char0 = '';
      charArray0[3] = '';
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) 'f', "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '}';
      charArray0[2] = 'B';
      MockRandom mockRandom0 = new MockRandom(2601L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 9;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 9, 140, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(1, (-2407), 1, false, false);
      assertNotNull(string2);
      assertEquals("\uF699", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2407 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      MockRandom mockRandom0 = new MockRandom(2601L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(0, (-1755), 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = 1752;
      String string3 = RandomStringUtils.random(1752, charArray0);
      assertNotNull(string3);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      String string4 = RandomStringUtils.random((int) '3', false, false);
      assertNotNull(string4);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = (-1953);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1953), 1752, 1207, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1953 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-522);
      MockRandom mockRandom0 = new MockRandom((-522));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2869), (-522), 2185, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2869 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 76;
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(76, 0, 76, true, false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1373;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'E';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1617, 1373, 1617, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(0, true, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -550 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '\"';
      charArray0[2] = 'F';
      charArray0[3] = 'R';
      charArray0[4] = 'q';
      charArray0[5] = '2';
      String string0 = RandomStringUtils.random(0, 3259, 2217, false, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'b', '\"', 'F', 'R', 'q', '2'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-850);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -850 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1521 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      boolean boolean0 = false;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, (-1), 4513, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int2 = 2744;
      String string2 = RandomStringUtils.randomAscii(2744);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(867);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 140;
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '}';
      charArray0[2] = 'B';
      charArray0[3] = '~';
      charArray0[4] = ';';
      charArray0[5] = 'n';
      charArray0[6] = 'O';
      String string0 = RandomStringUtils.random(140, charArray0);
      assertNotNull(string0);
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'d', '}', 'B', '~', ';', 'n', 'O'}, charArray0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(140, "#a");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -522 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 248;
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(248, 248, 248, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 834;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(834, 834, 834, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56319);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (-4815), 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = (-1300);
      int int2 = 0;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1300), 0, (-1300), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1300 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-618);
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '\"';
      charArray0[2] = 'T';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-443), (-618), 0, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -443 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3509), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3509 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '7';
      charArray0[2] = ')';
      charArray0[3] = '';
      charArray0[4] = 'N';
      charArray0[5] = 'g';
      charArray0[6] = '2';
      charArray0[7] = '7';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'f', '7', ')', '', 'N', 'g', '2', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1318);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1318 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-77), (-77), (-77), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -77 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-2110);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2110), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2110 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(128, true, false);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils.randomAscii(2359);
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = '$';
      charArray0[5] = 'G';
      charArray0[6] = 'B';
      charArray0[7] = '{';
      charArray0[8] = 'k';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-691), 1631, (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -691 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'z';
      charArray0[2] = 'a';
      charArray0[3] = 'S';
      charArray0[4] = 'e';
      charArray0[5] = '>';
      charArray0[6] = 'J';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(67);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }
}
