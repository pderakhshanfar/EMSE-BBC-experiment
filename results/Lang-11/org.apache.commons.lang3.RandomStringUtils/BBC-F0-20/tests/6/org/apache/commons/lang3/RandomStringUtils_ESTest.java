/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:46:36 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1019;
      Random.setNextRandom(1019);
      String string0 = RandomStringUtils.random(1019, "<4uoDtk");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1019);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(1019, "wg,8.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.randomNumeric(1019);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.randomAlphanumeric(1019);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -161 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 11, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      DoubleStream doubleStream2 = mockRandom0.doubles();
      assertNotNull(doubleStream2);
      assertFalse(doubleStream2.equals((Object)doubleStream0));
      assertFalse(doubleStream2.equals((Object)doubleStream1));
      assertNotSame(doubleStream2, doubleStream0);
      assertNotSame(doubleStream2, doubleStream1);
      
      int int0 = 2569;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(2569, 55296, 1355, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(1, 57343, 29, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uE000", string0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 5, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1942;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1942, 0, (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 56319;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(17, 55299, 56319, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(2753L);
      assertNotNull(mockRandom0);
      
      int int0 = 3799;
      String string0 = RandomStringUtils.random(3799, 3799, 2209, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2209);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int1 = 2038;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(2038, 2038, 2209, true, true, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(18, 55299, 56319, false, false);
      assertNotNull(string0);
      assertEquals("\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00\uD803\uDC00", string0);
      
      int int0 = (-121);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, (-121), (-121), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)32;
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-106);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '9';
      charArray0[2] = '{';
      charArray0[3] = 'P';
      charArray0[4] = 'Y';
      charArray0[5] = 'o';
      String string0 = RandomStringUtils.random((int) (byte)32, (int) (byte)0, (int) (byte)0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'-', '9', '{', 'P', 'Y', 'o'}, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
      
      String string1 = RandomStringUtils.random((int) (byte)32, (int) (byte)1, 27, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'-', '9', '{', 'P', 'Y', 'o'}, charArray0);
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1942);
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(0L);
      String string0 = RandomStringUtils.random(656, 57343, 4, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1942, "Xe(ffK)ZQ;Rqh");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1942, 56321, 123, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string0 = RandomStringUtils.random(1942, (-377), (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1942, 0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1942, "Xe(ffK)ZQ;Rqh");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1942, 56319, 123, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1942;
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      IntStream intStream0 = mockRandom0.ints((long) 1942);
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (byte) (-1), (double) 1942);
      assertNotNull(doubleStream0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 29, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.2, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      String string0 = RandomStringUtils.random(1507, (-1060), 809, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.randomAscii(3142);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Random.setNextRandom(41);
      String string2 = RandomStringUtils.randomAlphanumeric(809);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'u';
      charArray0[3] = '.';
      charArray0[4] = 'h';
      // Undeclared exception!
      RandomStringUtils.random(978, 0, 361, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(2584, 1785, (-1), true, true, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random(1928, (-413), (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0001", string1);
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random(1928, (-434), (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(37, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(179);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(37, (-1), 179, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = 'o';
      charArray1[2] = 'd';
      charArray1[3] = 'o';
      charArray1[4] = 'T';
      String string0 = RandomStringUtils.random(1, charArray1);
      assertArrayEquals(new char[] {'A', 'o', 'd', 'o', 'T'}, charArray1);
      assertNotNull(string0);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals("A", string0);
      assertNotSame(charArray1, charArray0);
      
      String string1 = RandomStringUtils.random(888, 888, 2135, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378\u0378", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-7);
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320, (String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints(2630L);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(32, (-3156), 832, true, true, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'X';
      charArray0[4] = '&';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1137, 31, 31, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Random.setNextRandom(34);
      String string0 = RandomStringUtils.randomAlphabetic(37);
      assertNotNull(string0);
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      String string0 = RandomStringUtils.random(32, charArray0);
      assertArrayEquals(new char[] {'d', 'd'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("dddddddddddddddddddddddddddddddd", string0);
      
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[0] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      String string0 = RandomStringUtils.random(1, 0, (-1490), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0002", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = 566;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, 566, (-1810), true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(566);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      int int2 = 949;
      boolean boolean1 = false;
      String string2 = RandomStringUtils.random(949, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      
      String string3 = RandomStringUtils.random(0, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(949);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'T', 'A', 'A', 'o', 'd', 'd'}, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertEquals("T", string0);
      
      String string1 = RandomStringUtils.random(1, (-1), 888, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFFFF", string1);
      
      MockRandom mockRandom0 = new MockRandom((-4157L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      int int0 = 19;
      int int1 = (-2026);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 19, (-2026), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = ' ';
      charArray0[6] = 'A';
      charArray0[7] = '';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'l', 'g', 'j', 'j', '$', ' ', 'A', ''}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("l", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      String string1 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '&';
      charArray0[2] = 'u';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'m', '&', 'u'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertEquals("m", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(802, 1669, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = ' ';
      charArray0[6] = 'A';
      charArray0[7] = '';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'l', 'g', 'j', 'j', '$', ' ', 'A', ''}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("l", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string2 = RandomStringUtils.random(1, (-1), 1, true, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'l', 'g', 'j', 'j', '$', ' ', 'A', ''}, charArray0);
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("l", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      charArray0[1] = '|';
      String string1 = RandomStringUtils.random(32, 0, 32, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'X', '|'}, charArray0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("||||||||||||||||||||||||||||||||", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2040));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2040 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'F';
      charArray0[2] = '2';
      charArray0[3] = '^';
      charArray0[4] = '(';
      charArray0[5] = 't';
      charArray0[6] = 'm';
      charArray0[7] = '\'';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(21, (-1182), (-1182), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(127);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'X';
      charArray0[2] = '-';
      charArray0[3] = '5';
      charArray0[4] = ':';
      charArray0[5] = 'w';
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(2388);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "6J%-rzAxL8DTAbg4P");
      assertNotNull(string0);
      assertEquals("6", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = '^';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      String string1 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'T', 'A', '^', 'o', 'd', 'd'}, charArray0);
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      int int0 = 123;
      // Undeclared exception!
      RandomStringUtils.random(1, (-1), 888, false, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-596);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -596 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-482);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -482 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = ' ';
      charArray0[6] = 'A';
      charArray0[7] = '';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'l', 'g', 'j', 'j', '$', ' ', 'A', ''}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("l", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      int int0 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(1, (-1), 1, true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "6J%-rzAxL8DTAbg4P");
      assertNotNull(string0);
      assertEquals("6", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = '^';
      charArray0[3] = 'o';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      String string1 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'T', 'A', '^', 'o', 'd', 'd'}, charArray0);
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      boolean boolean0 = false;
      String string2 = RandomStringUtils.random(1, 1, (-1), false, false, charArray0);
      assertArrayEquals(new char[] {'T', 'A', '^', 'o', 'd', 'd'}, charArray0);
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("A", string2);
      
      int int0 = 551;
      String string3 = RandomStringUtils.random(551);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1726), 551, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1726 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1011);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1011));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1011 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1884;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '\\';
      charArray0[2] = '6';
      charArray0[3] = 'd';
      String string0 = RandomStringUtils.random(0, 1884, 0, false, true, charArray0);
      assertArrayEquals(new char[] {'_', '\\', '6', 'd'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      
      int int1 = (-3717);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3717 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "'XO/|ad2M}y;j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = ';';
      charArray0[2] = 'S';
      charArray0[3] = '-';
      charArray0[4] = 'V';
      charArray0[5] = '';
      String string2 = RandomStringUtils.random(0, 0, 57343, false, false, charArray0);
      assertArrayEquals(new char[] {'=', ';', 'S', '-', 'V', ''}, charArray0);
      assertNotNull(string2);
      assertEquals(6, charArray0.length);
      assertEquals("", string2);
      
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2598L));
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(0, 0, 0, false, true, charArray1, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(string3);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals("", string3);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1989), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1989 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = '+';
      charArray0[2] = 'b';
      MockRandom mockRandom0 = new MockRandom(3582);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(3582);
      String string0 = RandomStringUtils.random(0, 0, 3582, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'k', '+', 'b'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1020);
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '(';
      charArray0[2] = '|';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1020), (-1020), 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1020 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = 2932;
      boolean boolean0 = false;
      boolean boolean1 = false;
      RandomStringUtils.random(2932, false, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2772);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      int int1 = 1618;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1618, 0, 0, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.random(0, true, false);
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(56191);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'q';
      charArray0[4] = '$';
      charArray0[5] = 'd';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(1, 1072, 1, true, false);
      RandomStringUtils.randomAlphanumeric(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = 'q';
      charArray0[2] = 'I';
      charArray0[3] = '`';
      charArray0[4] = '6';
      charArray0[5] = '0';
      charArray0[6] = 'c';
      charArray0[7] = '!';
      charArray0[8] = '~';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2845), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2845 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 672;
      RandomStringUtils.random(672);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(672);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 211;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(211, 128, 128, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '&';
      charArray0[2] = 'u';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("m", string0);
      
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      String string1 = RandomStringUtils.random(1, 2643, (-4382), false, false);
      assertEquals("\u0A53", string1);
      
      RandomStringUtils.random(0);
      String string2 = RandomStringUtils.random(0);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.random(1640, true, false);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-940);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -940 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = false;
      RandomStringUtils.random(0, false, false);
      RandomStringUtils.randomAscii(0);
      int int0 = 0;
      RandomStringUtils.random(0, "");
      RandomStringUtils.random(0, "");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1282), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1282 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1040), 0, (-1040), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1040 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 852;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(852, 852, 852, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1335), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1335 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
