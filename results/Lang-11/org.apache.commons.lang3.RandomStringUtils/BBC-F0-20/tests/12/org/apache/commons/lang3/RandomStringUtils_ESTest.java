/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:49:42 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.longs(134L);
      mockRandom0.ints(134L, (-1285), (-1));
      // Undeclared exception!
      RandomStringUtils.random(57343, 56319, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 16;
      org.evosuite.runtime.Random.setNextRandom(16);
      RandomStringUtils.randomNumeric(16);
      RandomStringUtils.randomAlphanumeric(127);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 995;
      org.evosuite.runtime.Random.setNextRandom(995);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'Z';
      charArray0[2] = '~';
      charArray0[3] = 'z';
      RandomStringUtils.random(995, charArray0);
      RandomStringUtils.randomAlphabetic(789);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(789, Integer.MAX_VALUE, 789, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      charArray0[2] = '$';
      String string0 = RandomStringUtils.random(4761, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'I', 'R', '$'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 55296, 28, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(6, 56163, (-1249), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uDB63\uDC00\uDB63\uDC00\uDB63\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(56163);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(783, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, 3615, 56192, false, false, (char[]) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      org.evosuite.runtime.Random.setNextRandom(72);
      // Undeclared exception!
      RandomStringUtils.random(783, 56320, 3615, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 800;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(800, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 123;
      int int1 = 800;
      String string1 = RandomStringUtils.random(800, 800, 123, false, false, (char[]) null);
      assertEquals("\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320\u0320", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(123, 3615, 56192, false, false, (char[]) null);
      assertEquals("\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      org.evosuite.runtime.Random.setNextRandom(72);
      String string3 = RandomStringUtils.randomAlphanumeric(3615);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(24, 2419, (-1532), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(24, 56192, 800, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '7';
      charArray0[2] = ' ';
      charArray0[3] = 'u';
      charArray0[4] = 'H';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 9, true, true, charArray0, (Random) mockRandom0);
      assertEquals("7", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'/', '7', ' ', 'u', 'H'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1745));
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(57343);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(800, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(123, 3615, 56192, false, false, (char[]) null);
      assertEquals("\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F\u0E1F", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      org.evosuite.runtime.Random.setNextRandom(72);
      String string4 = RandomStringUtils.random(800, 56320, 3615, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48\uD848\uDC48", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(800, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1;
      int int1 = 65209;
      // Undeclared exception!
      RandomStringUtils.random(65209, "Ws3kIcuH5V|");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'f';
      charArray0[2] = '>';
      charArray0[3] = 'G';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0.0, 284.57);
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      mockRandom0.setSeed(0L);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'k', 'f', '>', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(6, 0, 0, false, false, charArray0);
      assertEquals("kkkkkk", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'k', 'f', '>', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
      RandomStringUtils.random(2, 2, (-1786), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(24, "FwT{kp\"/!rRGPFT:9L");
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFF", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints(4895L);
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(24, (-1792), 800, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901\uF901", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2112);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints(0L);
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      assertNotSame(intStream1, intStream0);
      
      String string2 = RandomStringUtils.random(800, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1708);
      assertNotNull(string0);
      
      int int0 = (-2650);
      int int1 = (-389);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -389 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(37, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(800);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2386L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(26, (-1), 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(579);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'x';
      charArray0[4] = 'K';
      charArray0[5] = '`';
      charArray0[6] = 'K';
      charArray0[7] = '+';
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(800, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(123, 2664, 56192, false, false, (char[]) null);
      assertEquals("\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68\u0A68", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      org.evosuite.runtime.Random.setNextRandom(72);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(706, 0, (-305), false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(706);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1291, 1291, 55296, false, false, charArray0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 2;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(2, 123, 800, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(2550, (String) null);
      assertNotNull(string0);
      
      int int0 = 46212;
      int int1 = (-335);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -335 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3339;
      String string0 = RandomStringUtils.random(3339, "ul{,UDQk4*>lpe>b");
      assertNotNull(string0);
      
      int int1 = 46212;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(46212);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'z';
      charArray0[2] = 'E';
      charArray0[3] = 'm';
      charArray0[4] = 'k';
      charArray0[5] = '3';
      charArray0[6] = '.';
      charArray0[7] = 'c';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4007, 4007, 1, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[21];
      charArray0[0] = '`';
      charArray0[1] = 'c';
      charArray0[2] = 'K';
      charArray0[3] = '+';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(21, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(286, 1291, 286, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(2958, 2300, 2958, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2958);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "%yN=+'zMAZ.3");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'x';
      charArray0[4] = 'K';
      charArray0[5] = '`';
      charArray0[6] = 'K';
      charArray0[7] = '+';
      charArray0[8] = '+';
      // Undeclared exception!
      RandomStringUtils.random(123, 0, 123, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'c';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'c';
      charArray1[1] = '1';
      charArray1[2] = ']';
      charArray1[3] = 'p';
      charArray1[4] = '1';
      charArray1[5] = ']';
      charArray1[6] = 'j';
      charArray1[7] = 'e';
      charArray1[8] = 'j';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1291, (-300), 745, true, false, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 56320;
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '^';
      Random random0 = null;
      String string1 = RandomStringUtils.random(0, 56320, 56320, true, true, charArray0, (Random) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'B', '^'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int1 = 708;
      int int2 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(708, 0, 56320, false, true);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3339);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '.';
      charArray0[2] = 'D';
      charArray0[3] = '{';
      charArray0[4] = '1';
      charArray0[5] = '[';
      charArray0[6] = 'n';
      charArray0[7] = '%';
      charArray0[8] = 'X';
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'c';
      charArray0[2] = 'K';
      charArray0[3] = '+';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1291, 1291, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'f';
      charArray0[2] = '>';
      charArray0[3] = 'G';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0.0, 284.57);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(0L);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'k', 'f', '>', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'q';
      charArray0[2] = '-';
      charArray0[3] = '(';
      charArray0[4] = '\'';
      charArray0[5] = '8';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1166, 1166, 1166, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2594;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2594, 123, 123, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3929;
      String string0 = RandomStringUtils.random(3929);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3346 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      String string2 = RandomStringUtils.random(0, 128, 0, true, true, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 's';
      charArray1[1] = 's';
      charArray1[2] = 's';
      charArray1[3] = 's';
      charArray1[4] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 3743, 0, true, false, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-4004);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-4004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4004 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = (-5274);
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5274), (-5274), 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5274 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1737);
      int int1 = 0;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'U';
      charArray0[2] = 'j';
      charArray0[3] = ';';
      Random random0 = null;
      String string0 = RandomStringUtils.random(0, (-1737), 0, true, false, charArray0, (Random) null);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\\', 'U', 'j', ';'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5394, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'R';
      charArray0[2] = 'C';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1552), (-1552), 0, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1552 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(880, 1177, 56320, true, true);
      assertEquals("\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499\u0499", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      String string1 = RandomStringUtils.random(1029, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1373);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 807;
      int int1 = 0;
      RandomStringUtils.random(807, 0, 0, false, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(1476, 807, 1296, false, false);
      // Undeclared exception!
      RandomStringUtils.random(55296, false, false);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 128;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-4013);
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4013), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4013 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1475;
      boolean boolean0 = false;
      RandomStringUtils.random(1475, false, false);
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -15 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1259);
      RandomStringUtils.random(0, 0, (-1259), false, true);
      RandomStringUtils.random(0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1151);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-2994);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2994), 723, (-2994), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2994 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2848;
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '/';
      charArray0[2] = 'h';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      charArray0[5] = ']';
      charArray0[6] = 'X';
      charArray0[7] = 'y';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.nextBoolean();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2848, 2848, 2848, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
