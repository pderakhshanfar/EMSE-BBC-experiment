/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:47:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(50437);
      String string0 = RandomStringUtils.randomNumeric(3329);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(801);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(825, (-914), 12, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E\uFC6E", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(266, 55296, 266, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(471);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3231 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom(5631);
      String string0 = RandomStringUtils.randomAlphabetic(5631);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(5631);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -965 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2384 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(584, true, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-833), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -833 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "                                                                                                                                                                                                                                                                          ");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(24, (-3032), 636, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3057, 3057, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2020);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2020, 2020, 2020, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(995, (-2053), (-3080), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2969), (-1), 6455, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2969 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(50437, 50437, 33, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3494, 3494, 3494, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(713, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-824), 0, 801, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -824 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3941, 3941, 3941, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '4';
      MockRandom mockRandom0 = new MockRandom(2381L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3941, 1, 21, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '4', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(8, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(266, (-163), (int) (byte)0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 2690, (-307), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(2261, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 2262, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57355, 56319, (-599), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, (-1), 55296, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(4469, 56320, 4469, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomAlphanumeric(17);
      assertEquals("11111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      MockRandom mockRandom0 = new MockRandom(0);
      String string0 = RandomStringUtils.random(6455, 0, (-1), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(3329, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(123, 56167, 1618, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(2690, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1293 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 57343, 0, true, false, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
