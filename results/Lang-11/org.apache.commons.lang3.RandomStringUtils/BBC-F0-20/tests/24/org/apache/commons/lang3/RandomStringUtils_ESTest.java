/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:00:55 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(2753);
      String string0 = RandomStringUtils.randomNumeric(151);
      assertEquals("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(2388);
      String string0 = RandomStringUtils.randomAlphanumeric(24);
      assertEquals("666666666666666666666666", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(865, "6ft:a4UZ1{fnE5(^");
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1276, 0, 484, false, false, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 2083, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2793 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2101 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(25, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1677), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1677 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(865);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(865, 865, 47210, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(798, 56192, 56192, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1239, 56191, 28, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-581), (-1), 127, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -581 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 2, 2, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1089), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 56319, 56319, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5968 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(226, 56319, 56192, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      String string0 = RandomStringUtils.random(1556, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '9';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, Integer.MAX_VALUE, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertEquals("9", string0);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1276, 56320, (-3157), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2302, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2302, 0, 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2302, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1276, 0, (-3157), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(8, (-4361), 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 127, 0, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(484, 484, 128, true, true);
      assertEquals("\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4\u01E4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(6, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (String) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(553, 56179, 553, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, (-1089), (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(17, 56320, 20, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(2753);
      String string0 = RandomStringUtils.random(4, false, true);
      assertEquals("7777", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(56320);
      String string0 = RandomStringUtils.randomAlphabetic(123);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(151);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(24);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(24);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(123);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(151, (-584), (-18), true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(4);
      assertEquals("    ", string0);
  }
}
