/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:00:01 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(21);
      String string0 = RandomStringUtils.randomNumeric(14);
      assertNotNull(string0);
      assertEquals("55555555555555", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(345);
      String string0 = RandomStringUtils.randomAlphabetic(345);
      assertNotNull(string0);
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "1`enO0;0`E0vc");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1974, 1, 1974, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1117 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1419 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1280 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1318);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-5374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5374 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(46331, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-725), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -725 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(32, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1564), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1564 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "&O1JK0mGh<`ZbVe-'q");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1874, 1874, (-2485), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(44);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-489), 23, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(771, 1858, 1858, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 990, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(350, (-2148), 1, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1204, (-1), (-1), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1197), 0, (-1197), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1197 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1169, (-1884), (-1884), true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4332 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(12, 56192, 20, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(11, 56174, 20, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      String string0 = RandomStringUtils.random(3099, 1, (-1050), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(822, 51, 501, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(32, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(130, 0, (-410), false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1972L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 44, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-814), 2234, (-814), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -814 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1318, "lq");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56313, (-3586), false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3825));
      // Undeclared exception!
      RandomStringUtils.random(21, 56320, 565, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(3118, (-1707), 3118, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(705, 3431, (-1741), true, true);
      assertEquals("\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67\u0D67", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(39);
      String string0 = RandomStringUtils.randomAlphanumeric(40);
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(40);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(3246, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3871), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3871 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(14);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 591, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(32);
      assertEquals("                                ", string0);
  }
}
