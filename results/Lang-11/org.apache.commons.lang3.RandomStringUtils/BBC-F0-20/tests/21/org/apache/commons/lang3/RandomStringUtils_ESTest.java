/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:59:40 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(2572);
      String string0 = RandomStringUtils.randomNumeric(71);
      assertNotNull(string0);
      assertEquals("88888888888888888888888888888888888888888888888888888888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(1314);
      String string0 = RandomStringUtils.randomAlphanumeric(1314);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2525));
      String string0 = RandomStringUtils.randomAlphabetic(3041);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1269, "+vu}@v1f");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(874, (-25), 1, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7\uFFE7", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2718 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -903 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(323);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -25 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3636), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3636 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1428), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1428 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-2726));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, (-2726), 123, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(963, 963, 963, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1898), (-1129), (-1389), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1898 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 57343, (-1), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-232), 0, 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -232 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1039, 1039, 1039, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47682);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1790 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random((int) '|', charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(458, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3857, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(26373, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46324, 0, (-1617), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-933));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-185), (-933), (-933), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -185 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, (-1215), false, true, charArray0, (java.util.Random) null);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(1833, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-252), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -252 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 29, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2143, 56187, 6, false, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(16361, 56320, 16361, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2039, (-838), 46339, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '6';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46202, 1, 56319, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(30, 398, (-1937), true, true);
      assertNotNull(string0);
      assertEquals("\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E\u018E", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "C4st- .sPH.");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, (-1898), 1932, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(534);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(1232);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2525 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(30);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3583, 960, (-2916), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3041);
      assertNotNull(string0);
  }
}
