/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:22:50 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1152, 123, 1152, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(1490);
      String string0 = RandomStringUtils.randomAlphanumeric(1490);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(1490);
      String string0 = RandomStringUtils.randomAlphabetic(1011);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(23, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(2271, 0, (-1), false, false, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 32, 983, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -272 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1570 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(41);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1119 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2664);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2716), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2716 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1443, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, (-1351), (-1351), false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 1887, (-510), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2409, 2409, 2409, false, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56220, 1, 0, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-214), 622, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -214 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(898, 579, 579, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3570), (-717), (-717), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3570 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2566, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3390 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 55296, 35, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(898, 983, 898, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7\u03D7", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '4';
      String string0 = RandomStringUtils.random(1, 1, 41, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("4", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(41, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 56192, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3373), (-3373), (-3373), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3373 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(2003L);
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(43, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1570, 56192, 56319, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2143, 55296, 56320, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(5225, 57343, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1570, (-2320), 57343, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(270);
      String string0 = RandomStringUtils.random(1721, 1721, (-1172), true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(41, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(43, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(886, 3758, 3758, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "lL $Wuh0R+999HWG");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1500);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(2566);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1312 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(43);
      assertEquals("                                           ", string0);
  }
}
