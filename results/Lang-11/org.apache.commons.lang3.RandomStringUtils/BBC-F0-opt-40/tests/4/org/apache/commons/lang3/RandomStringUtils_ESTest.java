/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(23);
      Random.setNextRandom(23);
      String string0 = RandomStringUtils.randomNumeric(23);
      assertEquals("77777777777777777777777", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom0.ints((long) 57343);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(intStream0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      int int0 = 424;
      // Undeclared exception!
      RandomStringUtils.random(15, 57343, 424, false, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.random(611, (-5792), 611, false, false);
      assertEquals("\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(611, 611, (-5792), false, false);
      assertEquals("\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263\u0263", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(611, 2538);
      assertNotNull(intStream0);
      
      String string2 = RandomStringUtils.random(611, (-5792), 611, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960\uE960", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, 57343, (-2658), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      String string0 = RandomStringUtils.random(0, (-1), 0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      int int1 = 55296;
      String string0 = RandomStringUtils.random(0, (-1), 55296, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-2230L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 55296);
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(55296, true, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), 55296, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2230L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 611;
      String string0 = RandomStringUtils.random(611, (-5745), 611, false, false);
      assertEquals("\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-4131L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DoubleStream doubleStream0 = mockRandom1.doubles((double) (-4131L), (-1068.30034941346));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(doubleStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int1 = 6;
      // Undeclared exception!
      RandomStringUtils.random(5, 56191, 6, false, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(3682);
      String string0 = RandomStringUtils.randomAlphabetic(3682);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2387);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(3498, (-5700), (-1), false, false);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(815, 56192, (-3419), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(611, (-5745), 611, false, false);
      assertEquals("\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F\uE98F", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(611);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom(611);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-5745), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56180;
      int int1 = 18;
      // Undeclared exception!
      RandomStringUtils.random(1, 56180, 18, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2107, (-5706), 2107, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 2107, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(31, 56320, 36, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(3498);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 31, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3498, (-1403), (-1959), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(55289, (-1983), (-1492), true, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 27, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1751L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '{';
      charArray0[4] = '7';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '7';
      charArray0[8] = '{';
      String string0 = RandomStringUtils.random(128, 0, 128, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'7', '7', '7', '{', '7', '{', '{', '7', '{'}, charArray0);
      assertEquals("77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-2070);
      // Undeclared exception!
      RandomStringUtils.random(34, (-2070), 296, true, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1489);
      assertNotNull(string0);
      
      Random.setNextRandom(18);
      String string1 = RandomStringUtils.randomAlphanumeric(1489);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1489);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(1658);
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(10, 1455, 3294, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5447, 0, (-933), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(3, "Fjns6ub!Ich[y[hz");
      assertEquals("FFF", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 3, 3, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(934);
      Random.setNextRandom((-945));
      String string1 = RandomStringUtils.random(24, 0, 0, true, true, (char[]) null);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCC", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1813), (-945), 1645, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1813 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 404;
      String string0 = RandomStringUtils.random(404, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(404);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                    ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1875;
      String string2 = RandomStringUtils.random(1875);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1875);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int2 = 100;
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(100, 404, 1875, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'V', 'G', 'G'}, charArray0);
      assertEquals("V", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -310 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 3963;
      String string0 = RandomStringUtils.randomAscii(3963);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3963);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      String string3 = RandomStringUtils.random(13, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = 29;
      String string4 = RandomStringUtils.random(29, "wPFzQ");
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwww", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1956, 32, 1383, false, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(2905);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1231, 2905, 399, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(2185L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom1.nextLong();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0L, long0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(1, (-4678), 456, true, true, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      String string0 = RandomStringUtils.random(1, 0, 296, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals("G", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2905;
      String string0 = RandomStringUtils.random(2905);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (String) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '{';
      // Undeclared exception!
      RandomStringUtils.random(1242, 36, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      int int1 = 39;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(39, (-258), 0, false, false);
      assertEquals("\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE\uFEFE", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3963;
      String string0 = RandomStringUtils.randomAscii(3963);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3963);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 0;
      String string2 = RandomStringUtils.random(0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      charArray0[3] = 'R';
      charArray0[4] = 'w';
      charArray0[6] = 'A';
      charArray0[7] = '2';
      charArray0[8] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L, 0, 3963);
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints(1L);
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-437), (-1947), (-1311), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -437 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 3331;
      String string0 = RandomStringUtils.random(3331);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3331, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(3331);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = (-681);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -681 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 3963;
      String string0 = RandomStringUtils.randomAscii(3963);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3963);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 0;
      String string2 = RandomStringUtils.random(0, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      charArray0[3] = 'R';
      charArray0[4] = 'w';
      charArray0[5] = '|';
      charArray0[6] = 'A';
      charArray0[7] = '2';
      charArray0[8] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 3963, 3963, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'z';
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = '\\';
      charArray0[2] = ',';
      charArray0[3] = '~';
      charArray0[4] = 'y';
      charArray0[5] = ')';
      charArray0[6] = 'p';
      charArray0[7] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 55296, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'x';
      charArray0[2] = 'l';
      charArray0[3] = '_';
      charArray0[4] = '%';
      charArray0[5] = 'l';
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertArrayEquals(new char[] {'y', 'x', 'l', '_', '%', 'l'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1571);
      int int1 = 930;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(930);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1571), 930, (-1571), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1571 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'V';
      charArray0[2] = 'H';
      charArray0[3] = '^';
      charArray0[4] = 'j';
      charArray0[5] = 'V';
      MockRandom mockRandom0 = new MockRandom(2751);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1079, 2751, 1079, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'k';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      charArray0[4] = '$';
      charArray0[5] = '`';
      charArray0[6] = '2';
      String string0 = RandomStringUtils.random(0, (-383), (-383), true, true, charArray0);
      assertArrayEquals(new char[] {'y', 'k', ')', 'B', '$', '`', '2'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-978);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -978 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-475);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -475 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(5447, 5447, 0, true, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5447, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = '3';
      charArray0[3] = '0';
      charArray0[4] = 'Y';
      charArray0[5] = 'R';
      charArray0[6] = ':';
      String string0 = RandomStringUtils.random(3888, charArray0);
      assertArrayEquals(new char[] {'0', '\\', '3', '0', 'Y', 'R', ':'}, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-658);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -658 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1591);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-2749);
      int int1 = (-1);
      int int2 = 57343;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2749), (-1), 57343, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2749 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1455, true, true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1098);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1098), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1098 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1317 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 56319;
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'Z';
      charArray0[2] = 'p';
      charArray0[3] = 'j';
      charArray0[4] = '@';
      charArray0[5] = 'e';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = 161;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(161);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 296;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '{';
      MockRandom mockRandom0 = new MockRandom(1751L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(296, 0, 296, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'7', '{'}, charArray0);
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'7', '{'}, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.randomAscii(3963);
      String string0 = RandomStringUtils.random(3963);
      RandomStringUtils.random(0, string0);
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      charArray0[3] = 'R';
      charArray0[4] = 'w';
      charArray0[5] = '|';
      charArray0[6] = 'A';
      charArray0[7] = '2';
      charArray0[8] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3963, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 498;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(498);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }
}
