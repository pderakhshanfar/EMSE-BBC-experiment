/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:02 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3880;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs((long) 3880);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      char[] charArray0 = null;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream2 = mockRandom0.longs();
      assertFalse(longStream2.equals((Object)longStream1));
      assertFalse(longStream2.equals((Object)longStream0));
      assertNotNull(longStream2);
      assertNotSame(longStream2, longStream1);
      assertNotSame(longStream2, longStream0);
      
      LongStream longStream3 = mockRandom0.longs();
      assertFalse(longStream3.equals((Object)longStream1));
      assertFalse(longStream3.equals((Object)longStream2));
      assertFalse(longStream3.equals((Object)longStream0));
      assertNotNull(longStream3);
      assertNotSame(longStream3, longStream1);
      assertNotSame(longStream3, longStream2);
      assertNotSame(longStream3, longStream0);
      
      int int1 = (-1835);
      int int2 = 56191;
      int int3 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 990, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3880);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-54);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      mockRandom0.setSeed((byte)0);
      String string0 = RandomStringUtils.random(3400, 57343, (-1101), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3400, (-1917), (-1101), false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(37, "T&Ei>7$NJ$5]It]>]\"");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string2);
      assertNotNull(string2);
      
      org.evosuite.runtime.Random.setNextRandom(37);
      String string3 = RandomStringUtils.randomAlphabetic(182);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(736, "|L");
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(23);
      String string1 = RandomStringUtils.randomNumeric(736);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 55296;
      int int1 = (-931);
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom(55296);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(53, 55296, (-931), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2571, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = null;
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 2571;
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int1 = 57343;
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(2571, 57343, 2571, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1849));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2571, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom(2);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(0, 2, 0, true, true, (char[]) null, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.randomAscii(2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"\"", string1);
      assertNotNull(string1);
      
      int int2 = (-15);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 0, 0, true, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-1849), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-2967);
      String string0 = RandomStringUtils.random(0, 0, (-2967), false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom((-3541));
      String string1 = RandomStringUtils.random(0, (-2967), (-3541), false, true);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 357;
      String string2 = RandomStringUtils.randomAlphanumeric(357);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string2);
      assertNotNull(string2);
      
      int int2 = 55296;
      int int3 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(357, 55296, (-1), true, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 820;
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '6';
      charArray0[2] = 'd';
      charArray0[3] = 'o';
      charArray0[4] = 't';
      charArray0[5] = 'W';
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1837, 57343, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 11;
      // Undeclared exception!
      RandomStringUtils.random(11, 56187, (-33), false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(1696, 56187, (-33), false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1749);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2314);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(128, (-1374), 11, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2\uFAA2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(983);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2371L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-5336L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom2 = new MockRandom(622);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 820, 11, true, true, charArray0, (Random) mockRandom2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'E';
      charArray0[2] = 'Q';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = '|';
      charArray0[6] = 'd';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, (-1), true, true, charArray0, (Random) mockRandom0);
      assertEquals("i", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', 'E', 'Q', 'z', 'z', '|', 'd'}, charArray0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Q';
      charArray1[1] = '|';
      charArray1[2] = '|';
      String string1 = RandomStringUtils.random(0, 1, 56319, true, true, charArray1, (Random) mockRandom0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'Q', '|', '|'}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, 1, 1, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 56192;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(1281, 1167, 56192, true, true);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3);
      assertEquals("   ", string0);
      assertNotNull(string0);
      
      int int0 = 7;
      // Undeclared exception!
      RandomStringUtils.random(3, 0, 7, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2371L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2371L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      charArray0[3] = 'k';
      charArray0[4] = '|';
      charArray0[5] = 'i';
      charArray0[6] = 'd';
      charArray0[7] = ']';
      String string1 = RandomStringUtils.random(1, 1, 56320, true, true, charArray0, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("z", string1);
      assertNotNull(string1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'X', 'z', 'B', 'k', '|', 'i', 'd', ']'}, charArray0);
      assertNotSame(mockRandom0, mockRandom1);
      
      org.evosuite.runtime.Random.setNextRandom((-982));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(993L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[21];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      // Undeclared exception!
      RandomStringUtils.random(2778, 8, 56319, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      char[] charArray0 = new char[3];
      char char0 = '$';
      charArray0[0] = '$';
      charArray0[1] = '2';
      charArray0[2] = ',';
      String string0 = RandomStringUtils.random(0, 0, (-247), false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', '2', ','}, charArray0);
      
      int int1 = 18;
      boolean boolean0 = true;
      Random random0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(18, 18, 123, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.random(56192, 57343, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '`';
      charArray0[2] = '_';
      charArray0[3] = 'V';
      charArray0[4] = '*';
      String string0 = RandomStringUtils.random(0, 0, 256, true, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '`', '_', 'V', '*'}, charArray0);
      
      int int0 = 56192;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(256, 56192, 256, false, false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2371L));
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 622, 11, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u026E", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1072;
      int int1 = (-1188);
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1072, (-3506), (-1188), false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      char char0 = 'y';
      int int1 = 56320;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      String string0 = RandomStringUtils.random(0, 1, 56320, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = '2';
      charArray0[2] = '$';
      charArray0[3] = '$';
      String string0 = RandomStringUtils.random(1145, 1, 2487, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {',', '2', '$', '$'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, (-1), 2089, false, false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '2';
      charArray0[2] = ',';
      String string0 = RandomStringUtils.random(0, 0, (-247), false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', '2', ','}, charArray0);
      
      String string1 = RandomStringUtils.random(9, (-505), 18, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFE07\uFE07\uFE07\uFE07\uFE07\uFE07\uFE07\uFE07\uFE07", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1290;
      int int1 = 1517;
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'a';
      charArray1[1] = 'E';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1517, 1290, 1517, false, false, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-625);
      int int1 = (-2137);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-793), 34, (-2137), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -793 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '!';
      charArray0[2] = 'L';
      charArray0[3] = '\"';
      charArray0[4] = '@';
      charArray0[5] = '.';
      charArray0[6] = 'P';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = 127;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = 't';
      charArray0[4] = 'Q';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = '6';
      charArray0[8] = 'b';
      MockRandom mockRandom0 = new MockRandom((-84));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-84), (-304), 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -84 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(3991);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3991, 0, (-2859), false, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "RE.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string2 = RandomStringUtils.random(0, 2155, (-179), false, false, charArray1, (Random) mockRandom0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1164 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-412), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -412 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -625 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      MockRandom mockRandom0 = new MockRandom(993L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1696, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(2203, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = 'q';
      MockRandom mockRandom0 = new MockRandom((-434L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2203, (-653), (-418), true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-3501);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3501));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3501 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(2111, "w[2NEBFm&d");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2111);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'L';
      charArray0[2] = 'Y';
      charArray0[3] = '~';
      charArray0[4] = ':';
      charArray0[5] = '8';
      charArray0[6] = 'z';
      String string0 = RandomStringUtils.random(1072, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'>', 'L', 'Y', '~', ':', '8', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 1854;
      // Undeclared exception!
      RandomStringUtils.random(1854, 0, 0, false, true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1977;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1977);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1379);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1379), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1379 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'w';
      charArray0[2] = '+';
      charArray0[3] = '<';
      charArray0[4] = 'R';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-36), (-36), (-36), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -36 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1349;
      String string0 = RandomStringUtils.randomAscii(1349);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1349);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = Integer.MAX_VALUE;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'l';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-1680.006083925209), 0.0);
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1349, Integer.MAX_VALUE, Integer.MAX_VALUE, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'X';
      charArray0[2] = 'R';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 261, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'&', 'X', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-536), "GO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -536 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-1490);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1490 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2976);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2976), "org.apache.commons.lang3.RandomStringUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2976 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 165;
      int int1 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(165, 1, 0, true, false);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 56191;
      RandomStringUtils.random(4108, 4108, 56191, true, true);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(57343);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 1310;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1310);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      RandomStringUtils.random(0, 1, 0, false, false, charArray0);
      String string0 = RandomStringUtils.random(0, 0, 1, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(2558, 0, 2558, false, true);
  }
}
