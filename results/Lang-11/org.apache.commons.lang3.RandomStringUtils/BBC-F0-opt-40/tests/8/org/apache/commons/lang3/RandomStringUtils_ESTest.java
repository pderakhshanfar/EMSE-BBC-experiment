/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:18:14 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2137, 0, (-934), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.random(547, (-1534), (-161), true, true);
      assertNotNull(string0);
      assertEquals("\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02\uFA02", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(109);
      String string0 = RandomStringUtils.randomNumeric(109);
      assertNotNull(string0);
      assertEquals("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(13);
      assertNotNull(string0);
      assertEquals("             ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-495));
      String string0 = RandomStringUtils.randomAlphanumeric(37);
      assertNotNull(string0);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(109);
      String string0 = RandomStringUtils.random(538, true, true);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(5067, 1, (-1), false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(2, 0, 278, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 428, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -380 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1534 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(480);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1964 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1894), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1894 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1770), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1770 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(1455);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(547, 1455, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(740, 547, 547, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1652, 1652, 0, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1328), (-1328), (-1479), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1328 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(164, 164, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1627), 0, 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1627 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1774 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 55296, 6, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(853, 893, 57343, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D\u037D", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(66, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(48, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(39, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, (-635), (-635), true, true, charArray0, (java.util.Random) null);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(538, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2527), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2527 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(336L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(554, 56319, 4172, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1760, 56320, 6, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(128, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(554);
      mockRandom0.nextDouble();
      String string0 = RandomStringUtils.random(554, 57343, 554, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000\uE000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(257, 56320, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(48, 48, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(2806);
      String string0 = RandomStringUtils.randomAlphabetic(2806);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1066, 0, 0, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(43);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 42, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "G9[-zN4i<~F`Ni~J");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 579, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(109);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(109);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2806);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, (-1149), true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56190);
  }
}
