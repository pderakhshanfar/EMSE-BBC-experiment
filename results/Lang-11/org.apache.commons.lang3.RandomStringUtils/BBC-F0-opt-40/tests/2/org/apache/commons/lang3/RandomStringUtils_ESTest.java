/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:01:28 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(24);
      assertEquals("888888888888888888888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(889);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1146);
      String string0 = RandomStringUtils.randomAlphabetic(1146);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(1146);
      String string0 = RandomStringUtils.random(1146, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "nfQuL)aV:.(");
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(2638, 1, (-983), false, false, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-6616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6616 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -238 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2259);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-4303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4303 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1089, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1209), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1209 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2489, (-425), 56320, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2700, 2700, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(853, (-940), (-940), true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2390), (-253), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2390 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1338, (-2029), 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1058), 3385, (-1058), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1058 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(587, (-916), (-916), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2784 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(522, (-1990), 3026, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A\uF83A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      String string0 = RandomStringUtils.random(40, 0, 123, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      charArray0[2] = '8';
      String string0 = RandomStringUtils.random(1, 0, (-2700), false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertEquals("8", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '8', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(30);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(30, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5233);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(738, 0, 18, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(40, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-884), 0, (-884), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -884 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, Integer.MAX_VALUE, 0, false, true, charArray0, (java.util.Random) null);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-500), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -500 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-4634), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1558L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(25, 55296, (-206), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 55296, 46746, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(957, 56320, Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomAlphanumeric(24);
      assertEquals("888888888888888888888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(15, (-143), (-820), true, true);
      assertEquals("\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71\uFF71", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(1790);
      // Undeclared exception!
      RandomStringUtils.random(46210, string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(24);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(24);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 123, 123, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
