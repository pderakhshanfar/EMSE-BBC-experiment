/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:58:48 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2220);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(1257);
      String string0 = RandomStringUtils.randomAlphanumeric(1257);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(511);
      String string0 = RandomStringUtils.randomAlphabetic(1370);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(3517, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(2086, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2540, true, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "s*}$,i");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-335L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1223, 400, 2570, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom((-1329L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2093, 2093, 2093, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1773, 1773, 18, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-922), 783, 32, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -922 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 572, 1, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-360), false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2483), (-2483), (-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2483 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3211, 3211, 3211, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3102 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(7, 56192, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Random.setNextRandom((-3741));
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1195L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(530, (-3741), 55296, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2487L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      String string0 = RandomStringUtils.random(1, 1, 521, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("3", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 0, 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(39, 0, (-1), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4404L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 0, (-1196), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(2359L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-1840), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(2861, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-164), "TH3=>]<A)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -164 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(56192);
      // Undeclared exception!
      RandomStringUtils.random(36243);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3882, 55296, 3882, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1140L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(521, (-781), 521, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3\uFCF3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(56170);
      MockRandom mockRandom0 = new MockRandom((-3139L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(815, 56192, 604, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(3180);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(2873, 2861, (-2013), true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3708, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1752 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 2861, 128, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3180);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(123);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1257);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1370);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1637, 0, 0, false, false, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }
}
