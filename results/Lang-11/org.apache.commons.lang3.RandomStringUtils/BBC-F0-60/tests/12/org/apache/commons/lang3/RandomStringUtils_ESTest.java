/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:40:48 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-836);
      Random.setNextRandom((-836));
      int int1 = 123;
      String string0 = RandomStringUtils.randomNumeric(123);
      assertNotNull(string0);
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      
      Random.setNextRandom((-1036));
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -836 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-4789);
      Random.setNextRandom((-4789));
      String string0 = RandomStringUtils.randomAlphabetic(1356);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-4789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4789 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3603;
      int int1 = (-1435);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3603, 56332, (-1435), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1546;
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(1, (-4789), 1546, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uED4B", string0);
      
      String string1 = RandomStringUtils.random(1546, (char[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, (-4789), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(212, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 212, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = null;
      MockRandom mockRandom1 = new MockRandom(56178);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56178, 127, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(1885L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(932, 56178, 932, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00\uDB72\uDC00", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(932);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'j';
      charArray0[2] = ':';
      charArray0[3] = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) 0, (double) 1);
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("8", string0);
      assertArrayEquals(new char[] {'8', 'j', ':', 'b'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream1 = mockRandom1.longs();
      assertNotNull(longStream1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(longStream1, longStream0);
      
      char[] charArray0 = null;
      int int0 = 20;
      // Undeclared exception!
      RandomStringUtils.random(20, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[7];
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      charArray0[0] = 'M';
      charArray0[1] = '1';
      charArray0[3] = 'N';
      LongStream longStream1 = mockRandom0.longs();
      assertNotNull(longStream1);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      
      char[] charArray1 = null;
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(212, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '1';
      charArray0[2] = 'P';
      charArray0[3] = ']';
      charArray0[4] = 'p';
      charArray0[5] = 'w';
      charArray0[6] = '\\';
      RandomStringUtils.random(932, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(932, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'Q';
      charArray0[2] = 'l';
      charArray0[3] = 'r';
      charArray0[4] = 'm';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = '_';
      charArray0[8] = 'R';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(139, 139, 139, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 45296;
      int int1 = 10;
      char[] charArray0 = null;
      MockRandom mockRandom1 = new MockRandom(0L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int2 = (-1168);
      String string0 = RandomStringUtils.random(10, (-997), (-1168), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B\uFC1B", string0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(45296);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(2597, 0, 818, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 932;
      MockRandom mockRandom0 = new MockRandom(952L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(932, 56192, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(14, (-4756), 1546, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C\uED6C", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(29);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 45315;
      char[] charArray0 = new char[5];
      int int1 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-4781), 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(4718);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(4718);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[0];
      Random.setNextRandom(32);
      String string4 = RandomStringUtils.random(32);
      assertNotNull(string4);
      assertEquals("                                ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      MockRandom mockRandom0 = new MockRandom(32);
      assertNotNull(mockRandom0);
      
      String string6 = RandomStringUtils.random(0, 888, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38, 0, 948, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 55296;
      int int1 = 0;
      int int2 = (-8);
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -8 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom((-1428L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 3583, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3643 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(1590, (-1212), 2743, true, true);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.randomAscii(458);
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(4718);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(3441L);
      assertNotNull(mockRandom0);
      
      int int0 = 388;
      int int1 = 45315;
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = '-';
      charArray0[2] = ',';
      charArray0[3] = '\'';
      charArray0[4] = 'Y';
      charArray0[5] = 'O';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45315, 388, 388, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom(37);
      int int0 = (-1);
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(2882, 37, (-1), true, true);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(37);
      assertNotNull(string1);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = (-1237);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1237 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(1546);
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, 3583, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1546;
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '^';
      charArray0[2] = 'j';
      charArray0[3] = 'c';
      charArray0[4] = '\\';
      // Undeclared exception!
      RandomStringUtils.random(45315, 0, 10, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1;
      int int2 = (-967);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-967), (-967), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 55296;
      int int1 = 0;
      int int2 = (-41);
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 4718;
      String string0 = RandomStringUtils.random(4718);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(4718);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(4718);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = ',';
      charArray0[2] = 'Q';
      charArray0[3] = 'N';
      String string0 = RandomStringUtils.random(123, 0, 0, true, true, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      assertArrayEquals(new char[] {'0', ',', 'Q', 'N'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 18, 123, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(4718);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(4718);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 0;
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '-';
      charArray0[2] = 'o';
      String string5 = RandomStringUtils.random(0, (-2026), (-1672), false, true, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'.', '-', 'o'}, charArray0);
      
      String string6 = RandomStringUtils.random(36, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string6);
      assertEquals("....................................", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new char[] {'.', '-', 'o'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '&';
      charArray0[2] = '9';
      charArray0[3] = 'K';
      MockRandom mockRandom0 = new MockRandom((-546));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1009, 83, 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-2126);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2126 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 55296;
      int int1 = 677;
      int int2 = 0;
      // Undeclared exception!
      RandomStringUtils.random(55296, 677, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-677), (-677), 890, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -677 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2188;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2188, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1598);
      String string0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1598), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1598 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 4082;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(4082, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4082);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319, "S2c");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      int int0 = (-621);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-621), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -621 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "tdeE[|S");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, "");
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string7);
      assertEquals("", string7);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'I';
      charArray1[1] = 'I';
      charArray1[2] = 'I';
      charArray1[3] = 'I';
      MockRandom mockRandom0 = new MockRandom((-177));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string8 = RandomStringUtils.random(0, (-177), 0, false, false, charArray1, (java.util.Random) mockRandom0);
      assertEquals(4, charArray1.length);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-2542);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2542), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2542 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '\'';
      String string5 = RandomStringUtils.random(0, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new char[] {'&', '\''}, charArray0);
      
      int int1 = 0;
      int int2 = 0;
      String string6 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int3 = 4037;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4037);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1360);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1360 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = '7';
      charArray0[2] = 'q';
      charArray0[3] = 'e';
      charArray0[4] = '#';
      charArray0[5] = 'G';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'e', '7', 'q', 'e', '#', 'G'}, charArray0);
      
      int int1 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 123;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(123);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "The chars array must not be empty");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 97;
      String string1 = RandomStringUtils.randomAscii(97);
      assertNotNull(string1);
      assertEquals("                                                                                                 ", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '[';
      charArray0[2] = 'Q';
      charArray0[3] = ' ';
      charArray0[4] = '3';
      charArray0[5] = 'e';
      charArray0[6] = 'H';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'t', '[', 'Q', ' ', '3', 'e', 'H'}, charArray0);
      
      int int2 = 1;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1448), (-1448), (-1448), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1448 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = '2';
      charArray0[2] = 't';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 1;
      String string1 = RandomStringUtils.randomAscii(1);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.randomAscii(1);
      assertNotNull(string4);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      int int1 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      charArray0[2] = 'N';
      charArray0[3] = 'R';
      charArray0[4] = '<';
      charArray0[5] = '?';
      String string5 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {'[', 'L', 'N', 'R', '<', '?'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "9+*T%-oK\" 7B-ApM6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = '@';
      charArray0[3] = 'M';
      charArray0[4] = '\\';
      charArray0[5] = 'Q';
      charArray0[6] = '^';
      charArray0[7] = '8';
      charArray0[8] = '?';
      String string3 = RandomStringUtils.random(0, (-3868), 1126, false, false, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new char[] {'0', 'y', '@', 'M', '\\', 'Q', '^', '8', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = '_';
      charArray0[4] = 'B';
      charArray0[5] = '-';
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, (-2099), false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 28;
      String string0 = "NTf";
      RandomStringUtils.random(28, "NTf");
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(28, 28, 28, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-3535);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3535 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1373);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'l';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1373), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1373 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56191);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(4718);
      String string1 = RandomStringUtils.randomAscii(4718);
      assertFalse(string1.equals((Object)string0));
      
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAlphabetic(0);
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }
}
