/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:33:17 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4675));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 16, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4675));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1984L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs(1574L);
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.random(1194, 56191, (-3564), false, false, (char[]) null, (Random) mockRandom1);
      assertNotNull(string1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1409, string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-4675);
      MockRandom mockRandom0 = new MockRandom((-4675));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4675));
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(34, 56320, (-1076), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(203);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 56319;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 123;
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 123, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-4675);
      MockRandom mockRandom0 = new MockRandom((-4675));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(35);
      assertNotNull(string0);
      assertEquals("                                   ", string0);
      
      org.evosuite.runtime.Random.setNextRandom(35);
      String string1 = RandomStringUtils.randomAlphabetic(35);
      assertNotNull(string1);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(123, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '4';
      charArray0[2] = 'U';
      charArray0[3] = ';';
      charArray0[4] = ')';
      charArray0[5] = 'z';
      charArray0[6] = '3';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, (-281), true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'c', '4', 'U', ';', ')', 'z', '3'}, charArray0);
      assertNotNull(string0);
      assertEquals("4", string0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      org.evosuite.runtime.Random.setNextRandom((-2300));
      String string1 = RandomStringUtils.randomNumeric(1);
      assertNotNull(string1);
      assertEquals("9", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'f';
      charArray0[2] = '1';
      charArray0[3] = 'U';
      charArray0[4] = 'h';
      charArray0[5] = 'q';
      charArray0[6] = 'w';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1828, 1828, 1828, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1796;
      String string0 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(1796, (char[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = RandomStringUtils.random(1796, (char[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(3126);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(23, 0, 621, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'N', 'N', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string3);
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNN", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(807, 42, (-450), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 1796;
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 56319;
      org.evosuite.runtime.Random.setNextRandom(56319);
      int int1 = 21;
      String string0 = RandomStringUtils.randomAlphanumeric(21);
      assertNotNull(string0);
      assertEquals("qqqqqqqqqqqqqqqqqqqqq", string0);
      
      int int2 = (-5260);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5260), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5260 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-734), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -734 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.random(1796, false, false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = 1045;
      int int1 = (-127);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-127), 1045, (-1), false, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 1796;
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = 0;
      int int2 = 807;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '=';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(807, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "Lr8=F");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-302L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = '%';
      charArray0[2] = 'N';
      charArray0[3] = 'W';
      charArray0[4] = 'n';
      charArray0[5] = 'f';
      charArray0[6] = '=';
      String string1 = RandomStringUtils.random(1796, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'Q', '%', 'N', 'W', 'n', 'f', '='}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(1796);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(953L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.random(1796, (char[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = RandomStringUtils.random(1796);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string6 = RandomStringUtils.random(1796, Integer.MAX_VALUE, 1796, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2243L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '0';
      charArray0[2] = '_';
      charArray0[3] = 'p';
      charArray0[4] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, 25, 25, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-2243L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[2] = '';
      charArray0[2] = '$';
      charArray0[3] = 'u';
      charArray0[4] = 'X';
      charArray0[5] = 'n';
      charArray0[6] = 'a';
      String string1 = RandomStringUtils.random(855, 1908, 317, false, false);
      assertNotNull(string1);
      assertEquals("\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774\u0774", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(301);
      assertNotNull(string2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(191, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1796;
      String string0 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(1796, (char[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.random(1796);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -211 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[16];
      int int0 = (-1813);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2114, (-1813), 32, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2114;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2114, 2114, 2114, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'z';
      charArray0[2] = '*';
      charArray0[3] = 's';
      charArray0[4] = ' ';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(896, 3300, 896, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-1503);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1503), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1895 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "e?[I$Rh}<F-k");
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'M';
      charArray0[2] = 'q';
      charArray0[3] = 'G';
      charArray0[4] = '~';
      String string1 = RandomStringUtils.random(3255, charArray0);
      assertArrayEquals(new char[] {'+', 'M', 'q', 'G', '~'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charArray0.length);
      
      String string2 = RandomStringUtils.random(1608);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'a';
      charArray1[1] = 'q';
      String string3 = RandomStringUtils.random(0, charArray1);
      assertArrayEquals(new char[] {'a', 'q'}, charArray1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray1.length);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'j';
      charArray2[1] = 'Q';
      charArray2[2] = '&';
      charArray2[3] = '&';
      charArray2[4] = 'W';
      charArray2[5] = '#';
      String string4 = RandomStringUtils.random(0, 0, 0, true, false, charArray2);
      assertArrayEquals(new char[] {'j', 'Q', '&', '&', 'W', '#'}, charArray2);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(6, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = 773;
      // Undeclared exception!
      RandomStringUtils.random(773, true, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '9';
      charArray0[2] = '2';
      charArray0[3] = '8';
      charArray0[4] = '^';
      charArray0[5] = '3';
      charArray0[6] = '&';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1641), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      String string1 = RandomStringUtils.random(0, (-605), (-605), false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-39);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = 0;
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, charArray0.length);
      
      String string3 = RandomStringUtils.random(0, "");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, false, true);
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int1 = 847;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(847);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1285), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1285 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '0';
      charArray0[2] = 'P';
      charArray0[3] = 'z';
      charArray0[4] = '\\';
      charArray0[5] = '=';
      charArray0[6] = 'Y';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {';', '0', 'P', 'z', '\\', '=', 'Y'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3513), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3513 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = '0';
      charArray0[2] = 'h';
      charArray0[3] = 'T';
      charArray0[4] = 'U';
      charArray0[5] = '.';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1171, (-1616), true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-498);
      int int1 = 1221;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-498), (-498), 1221, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -498 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-3041);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 's';
      charArray0[2] = 'A';
      charArray0[3] = 'f';
      charArray0[4] = '8';
      charArray0[5] = 'l';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3041), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3041 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 127;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 1796;
      String string1 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = null;
      String string3 = RandomStringUtils.random(1796, (char[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = RandomStringUtils.randomAscii(1796);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = RandomStringUtils.random(1796);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      int int2 = 0;
      String string6 = RandomStringUtils.random(0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 3483, 1796, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 3706;
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'O';
      String string1 = RandomStringUtils.random(3706, charArray0);
      assertArrayEquals(new char[] {'%', 'O'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      
      int int1 = 3903;
      String string2 = RandomStringUtils.randomAscii(3903);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = false;
      String string3 = RandomStringUtils.random(0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = RandomStringUtils.random(0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      RandomStringUtils.random(2524, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(147);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(2160, "Lr8=F");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -332 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      int int1 = 1495;
      int int2 = 0;
      int int3 = (-5146);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1495, 0, (-5146), true, true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1778);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 56319;
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'y';
      RandomStringUtils.random(1, 1, 56319, true, true, charArray0);
      int int1 = 0;
      RandomStringUtils.randomAlphabetic(0);
      int int2 = (-1164);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1164 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-630);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -630 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2282;
      RandomStringUtils.random(2282);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2282);
  }
}
