/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:34:23 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      Random.setNextRandom(24);
      String string1 = RandomStringUtils.randomNumeric(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8", string1);
      
      // Undeclared exception!
      RandomStringUtils.random(44, true, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 2987;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int1 = 56169;
      // Undeclared exception!
      RandomStringUtils.random(2987, 56169, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56300;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles(1390L, 1.0, (double) 1390L);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      RandomStringUtils.random(27370, 56169, 40, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      String string1 = RandomStringUtils.random(1, (char[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      Random.setNextRandom(49);
      String string3 = RandomStringUtils.random(1, 0, (-335), false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("1", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-72), 1039, (-72), false, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -72 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 56320;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      RandomStringUtils.random(181, 56320, 20, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1721L));
      assertNotNull(mockRandom0);
      
      int int0 = 27394;
      int int1 = 56300;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      RandomStringUtils.random(27394, 56300, 181, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2151L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = 37389;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(37389, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1699L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      int int0 = 27394;
      int int1 = 56320;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int2 = 181;
      int int3 = mockRandom0.nextInt();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      // Undeclared exception!
      RandomStringUtils.random(27394, 56320, 181, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphanumeric(128);
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-2151L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(24, (-407), (-1790), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69\uFE69", string0);
      
      String string1 = RandomStringUtils.random(29);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-2151L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(37373, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("GG", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 37373;
      // Undeclared exception!
      RandomStringUtils.random(2591, 55296, 37373, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int1 = 0;
      int int2 = 0;
      boolean boolean0 = false;
      long long0 = (-2151L);
      MockRandom mockRandom0 = new MockRandom((-2151L));
      assertNotNull(mockRandom0);
      
      int int3 = 37373;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(37373, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(154, (-3457), 542, false, false);
      assertNotNull(string0);
      assertEquals("\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[3] = '\u001E';
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 20, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "Wu51m%-1XlC?H8]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '$';
      charArray0[2] = 'V';
      charArray0[3] = 'w';
      charArray0[4] = '%';
      charArray0[5] = ';';
      charArray0[6] = '!';
      charArray0[7] = 'g';
      charArray0[8] = 'v';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3729, 0, (-1423), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(154, (-3455), 542, false, false);
      assertNotNull(string0);
      assertEquals("\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281\uF281", string0);
      
      String string1 = RandomStringUtils.random(542, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      Random.setNextRandom(542);
      String string2 = RandomStringUtils.randomAlphabetic(154);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2541, 1, 1, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String string1 = RandomStringUtils.random(1, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\u0000", string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(481);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, ");($j#s");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4024);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(234);
      LongStream longStream0 = mockRandom0.longs((long) 234);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt(3344);
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom(3344);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      IntStream intStream0 = mockRandom1.ints((long) 0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int1 = 29;
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(29, 123, 0, false, true, (char[]) null, (java.util.Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 6981;
      String string1 = RandomStringUtils.random(6981);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(53, "^RRvK");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      String string3 = RandomStringUtils.random(0, 53, 2783, true, true, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(761, 53, (-690), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[2] = 'u';
      charArray0[0] = '/';
      charArray0[4] = '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(4056, 57343, 0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -811 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[2] = 'u';
      charArray0[0] = '/';
      charArray0[4] = '\u001D';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 57343, false, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4024, 1213, (-330), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3072 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[2] = 'u';
      charArray0[0] = '/';
      charArray0[4] = '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, 6, false, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/", string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'/', '\u0000', 'u', '\u0000', '/', '\u0000'}, charArray0);
      
      String string2 = RandomStringUtils.random(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u0000", string2);
      
      String string3 = RandomStringUtils.random(1, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("/", string3);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'/', '\u0000', 'u', '\u0000', '/', '\u0000'}, charArray0);
      
      String string4 = RandomStringUtils.random(628, 0, 0, false, false, charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEqualsstring4);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'/', '\u0000', 'u', '\u0000', '/', '\u0000'}, charArray0);
      
      String string5 = RandomStringUtils.random(722);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[2] = 'u';
      charArray0[0] = '/';
      charArray0[4] = '\u001D';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4053);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4053, 4053, 4024, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 6981;
      String string1 = RandomStringUtils.random(6981);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = 53;
      String string2 = RandomStringUtils.random(53, "^RRvK");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(6981);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = 'Q';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = 'j';
      charArray0[5] = 'v';
      charArray0[6] = 'C';
      charArray0[7] = '*';
      charArray0[8] = '4';
      String string0 = RandomStringUtils.random(0, 0, 55296, false, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'*', 'Q', '\\', '`', 'j', 'v', 'C', '*', '4'}, charArray0);
      
      Random.setNextRandom(55296);
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      charArray0[1] = 'u';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(26, 26, 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[2] = 'u';
      String string1 = RandomStringUtils.random(0, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'u';
      charArray1[1] = '/';
      String string2 = RandomStringUtils.random(36, 0, 913, false, false, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(charArray1, charArray0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string2);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'u', '/'}, charArray1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -852 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'v';
      charArray0[4] = 'b';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'X';
      charArray0[2] = 'S';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'g';
      charArray0[6] = '}';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, 25, 25, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 299;
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'T';
      charArray0[2] = 'u';
      charArray0[3] = '%';
      charArray0[4] = '+';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(299, 299, 299, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'k';
      charArray0[4] = 'A';
      charArray0[5] = '}';
      String string0 = RandomStringUtils.random(3, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertEquals("AAA", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'k', 'A', '}'}, charArray0);
      
      String string1 = RandomStringUtils.random(2367, 3, 7, true, true, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'k', 'A', '}'}, charArray0);
      
      String string2 = RandomStringUtils.random(0, 2329, 2367, false, true, charArray0, (java.util.Random) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'k', 'A', '}'}, charArray0);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(25);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(6981);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(53, "^RRvK");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      char[] charArray0 = new char[0];
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      String string4 = RandomStringUtils.random(0, 9, 678, false, false);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(2187, (-1), (-1107), false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = ';';
      charArray0[4] = '.';
      charArray0[5] = 'H';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.random(1, 1, 0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0001", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1693 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 3643;
      String string0 = RandomStringUtils.random(3643, (char[]) null);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3643);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, 0, 1, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 20, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'T';
      charArray0[2] = 'u';
      charArray0[3] = '%';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '|';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(299, 299, 299, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = (-154);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(177, (-154), (-154), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = '@';
      charArray0[2] = ']';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'L';
      charArray0[2] = '\"';
      charArray0[3] = 'S';
      charArray0[4] = '/';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', 'L', '\"', 'S', '/'}, charArray0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', 'L', '\"', 'S', '/'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', 'L', '\"', 'S', '/'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 2032, 2032, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "%f}yiz");
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.random(2060, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-3368);
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3368), (-3368), (-3368), true, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3368 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "GV1\"e7dB8PW`7");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '3';
      charArray0[2] = 'u';
      charArray0[3] = '/';
      charArray0[4] = '*';
      charArray0[5] = 'x';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")", string1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {')', '3', 'u', '/', '*', 'x'}, charArray0);
      
      String string2 = RandomStringUtils.random(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u0000", string2);
      
      String string3 = RandomStringUtils.random(1, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(")", string3);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {')', '3', 'u', '/', '*', 'x'}, charArray0);
      
      String string4 = RandomStringUtils.random(628, 0, 0, false, false, charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEqualsstring4);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {')', '3', 'u', '/', '*', 'x'}, charArray0);
      
      String string5 = RandomStringUtils.randomAscii(0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1549);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1610);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1610 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      int int2 = 1419;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, (-1), 1419, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = false;
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1360, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1001, (-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '\"';
      charArray0[2] = 'Q';
      charArray0[3] = 'a';
      charArray0[4] = 'R';
      charArray0[5] = 'Z';
      charArray0[6] = 'D';
      charArray0[7] = ',';
      charArray0[8] = '^';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-548), 982, (-548), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -548 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 667;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(667);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      int int1 = (-914);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '?';
      charArray0[2] = 'j';
      charArray0[3] = 'F';
      charArray0[4] = 'u';
      charArray0[5] = '3';
      charArray0[6] = '+';
      charArray0[7] = ',';
      charArray0[8] = 'q';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(0, (-914), 392, false, true, charArray0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -914 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-2030);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2030), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2030 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1129);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1129 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-1), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'Y';
      charArray0[2] = '5';
      charArray0[3] = 'j';
      charArray0[4] = ']';
      charArray0[5] = 'v';
      RandomStringUtils.random(0, charArray0);
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(55296);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(6981);
      RandomStringUtils.random(53, "^RRvK");
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = 0;
      char[] charArray0 = new char[0];
      RandomStringUtils.random(0, 53, 2783, true, true, charArray0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.longs((long) 0);
      mockRandom0.nextInt(2783);
      mockRandom0.ints(3626L);
      RandomStringUtils.random(53, 6981, 1536, false, false, (char[]) null, (java.util.Random) mockRandom0);
      int int1 = 0;
      RandomStringUtils.random(0);
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(0, (-1525), (-1525), false, false, (char[]) null, (java.util.Random) mockRandom1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-105), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -105 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = ' ';
      charArray0[2] = 'v';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = 0;
      boolean boolean0 = true;
      RandomStringUtils.random(0, (-2341), 0, true, false);
      int int1 = 1258;
      boolean boolean1 = false;
      RandomStringUtils.random(1258, false, false);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '-';
      charArray0[2] = '{';
      charArray0[3] = 't';
      RandomStringUtils.random(1258, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2341 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1039);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1039 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 128;
      int int1 = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'd';
      charArray0[2] = '9';
      charArray0[3] = '}';
      charArray0[4] = 'A';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
