/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:31:23 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(1389);
      String string0 = RandomStringUtils.randomNumeric(1);
      assertEquals("8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-238));
      String string0 = RandomStringUtils.randomAlphanumeric(32);
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1525);
      String string0 = RandomStringUtils.randomAlphabetic(26);
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeee", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2751, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1481);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1481, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 1933, 0, false, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1358 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3390 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-36), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -36 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1541, 0, 0, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(2272);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(35, 56191, 103, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 55296, 55296, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(8, 5, 1541, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(15, 0, 22, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2812, (-4713), (-4713), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(855, 0, 0, true, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1700), 0, 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1700 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2428, 2751, 2751, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(2751, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3235, 56191, 1315, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(861, (-856), 116, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8\uFCA8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(43, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(43, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(43, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 0, (-1251), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-395), 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -395 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1), 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1103), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1103 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47381, (String) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(18, 56318, Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(18, 56320, Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1990, 1990, 4763, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(23, 220, 56319, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(2844, 55296, 1525, false, false);
      // Undeclared exception!
      RandomStringUtils.random(1525, string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "5:dZOR6!BBm.*|7SC<x");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-50));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -50 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1109 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2812);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(26);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils.random(3382, (-888), 3382, true, true, (char[]) null);
      RandomStringUtils.random(3382);
      // Undeclared exception!
      RandomStringUtils.random(3382);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(10);
      assertEquals("          ", string0);
  }
}
