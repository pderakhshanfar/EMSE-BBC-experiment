/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:46:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, (-1), true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(3046);
      String string0 = RandomStringUtils.randomAlphanumeric(3046);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(553, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "]n#Dm=p9f'd");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(1, 1, 26, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, Integer.MAX_VALUE, 32, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1585 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56192);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2260 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1055), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1055 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(32, false, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, ")q'a~1B");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2255, 2255, 3, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, 24, 40, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1543, 1543, 1543, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(123, 123, 0, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3917), 204, 724, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3917 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 48, 2228, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(44, 44, 44, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(941, 0, (-61), false, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-611), (-2391), 0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -611 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -39 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(47382, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(37, (-217), 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27\uFF27", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(128, 0, 37, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2893, 1748, 1748, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4091), (-3049), (-4091), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4091 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, (-22), (-22), true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2495), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2495 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(3088, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(3504, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 205, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(43);
      // Undeclared exception!
      RandomStringUtils.random(43, 56191, (-381), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(948, 57342, 948, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE\uD800\uDFFE", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 57342, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '8';
      MockRandom mockRandom0 = new MockRandom(1);
      String string0 = RandomStringUtils.random(21, 1, 21, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("888888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(56320);
      String string0 = RandomStringUtils.randomAlphabetic(9);
      assertEquals("rrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(2487, 0, 2995, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(286, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(39L);
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1772, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -120 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(9);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1597);
      assertNotNull(string0);
  }
}
