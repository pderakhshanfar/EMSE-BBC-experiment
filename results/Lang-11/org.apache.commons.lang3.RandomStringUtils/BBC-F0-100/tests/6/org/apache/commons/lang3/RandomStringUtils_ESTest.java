/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:46:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 0, (-167), false, false);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(2478);
      String string0 = RandomStringUtils.randomNumeric(127);
      assertEquals("5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(10);
      assertEquals("          ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(2478);
      String string0 = RandomStringUtils.randomAlphanumeric(127);
      assertEquals("5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(21, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1072, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      String string0 = RandomStringUtils.random(527, 0, 1, false, true, charArray0);
      assertEqualsstring0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(14, (-2493), 14, false, false);
      assertEquals("\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643\uF643", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 1794, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3058 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -126 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1538), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1538 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(152, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2478, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 0, 127, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(1087L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(761, 761, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2967), (-2167), 874, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2967 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, (-310), 1, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(21, 21, 21, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-919), 1, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -919 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 56191, 56191, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1103 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(884L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 56319, 55296, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(689, (-825), 1883, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7\uFCC7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(884L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 218, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56290);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56290, 56290, 1371, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1371, 56191, 1371, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1625, 57343, 173, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56301);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(559, (-240), (-2282), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10\uFF10", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(230);
      String string0 = RandomStringUtils.randomAlphabetic(1666);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(164, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(751, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(751, 751, 751, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56201, "@X7H-enAJ+H{773");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-534L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1378, (-1140), false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(43);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(26);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1666);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(14, 14, (-2493), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }
}
