/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:59:15 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(127, 0, (-3197), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(38);
      String string0 = RandomStringUtils.randomAlphanumeric(35);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(33);
      String string0 = RandomStringUtils.randomAlphabetic(756);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2692, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 55296, 0, false, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 472, (-1881), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1194);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1153 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2565 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-228), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -228 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1685, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2482), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2482 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1205, (-1226), 1205, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-256L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 56191, 56191, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2352), (-2352), 1584, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2352 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1143, (-157), 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 582, 582, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1192, 0, 1, false, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-742), 1428, (-742), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -742 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -360 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(127, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57363);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(57363, 57343, 813, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(382, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '3';
      String string0 = RandomStringUtils.random(1258, 1, 127, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57363);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1756, (int) (byte)0, (int) (byte)0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(813);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)39, 0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 1, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-497), 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -497 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-492), true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(3790, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (int) (byte)39, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1679, 55296, 1679, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(813, 57367, (-1891), false, false);
      assertEquals("\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017\uE017", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(2221, 56319, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(1023);
      String string0 = RandomStringUtils.randomNumeric(39);
      assertEquals("666666666666666666666666666666666666666", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1380L));
      // Undeclared exception!
      RandomStringUtils.random(56192, (int) (byte)0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(12, (-440), 123, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Requested random string length ");
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-817), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -817 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(39);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(35);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(756);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(1194, 1194, 46406, true, true, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(39);
      assertEquals("                                       ", string0);
  }
}
