/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:47:15 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1197);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(343);
      String string0 = RandomStringUtils.randomAlphanumeric(343);
      assertEquals("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(35);
      String string0 = RandomStringUtils.randomAlphabetic(35);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(14, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1626, 1170, 30, true, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 57343, 57343, false, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1191 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1878);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2665);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2380), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2380 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "?vbR;\"ZuyFM|:4U");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1473, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, (-690), (-1264), true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(56319);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(343, 343, 2324, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(32);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4218, (-1), (-1031), false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(816, 816, 816, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(717, 32, 717, false, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1355), 0, 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1355 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(736, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -786 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1662L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(36, (-2853), (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB\uF4DB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      MockRandom mockRandom0 = new MockRandom((-281L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("g", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[7] = '9';
      String string0 = RandomStringUtils.random(33, 7, (-1), false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertEquals("999999999999999999999999999999999", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(36, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(36, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(22, 0, (-2830), false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(2429L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3700), (-2586), (-638), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3700 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(3408, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1476), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1476 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(36, 56191, 36, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(59, 56191, 59, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(4167, 57343, (-1534), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(717, (-690), (-3568), false, false);
      assertEquals("\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E\uFD4E", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(1019);
      String string0 = RandomStringUtils.randomNumeric(1019);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(36, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1019);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1019);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -397 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-1), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56332);
  }
}
