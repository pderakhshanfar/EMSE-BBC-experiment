/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:58:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(43);
      String string0 = RandomStringUtils.randomAlphanumeric(43);
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(57);
      String string0 = RandomStringUtils.randomAlphabetic(57);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "11");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 57343, 57343, false, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (int) 'L', (int) 'J', false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1191 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3408, 3408, 23, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3408, (-1001), 3408, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(3315);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(45330, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1974, true, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2380), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2380 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, (-2226), 2115, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(32);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(159, 1, 159, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4218, (-1), (-1031), false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(816, 816, 816, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3183, 22, 16, true, true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1355), 0, 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1355 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1878, 986, 986, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(25387);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -786 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '1';
      String string0 = RandomStringUtils.random(2, 1, (-3353), true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("11", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-279), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-3375L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(2429L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3700), (-2586), (-638), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3700 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(3408, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(17, 17, (-1139), false, false);
      assertEquals("\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011\u0011", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-816), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -816 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 55296, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3449, 55296, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(13, 56320, 45314, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom((-1108));
      String string0 = RandomStringUtils.randomNumeric(3225);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1749);
      char[] charArray0 = new char[17];
      String string0 = RandomStringUtils.random(3, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "?vbR;\"ZuyFM|:4U");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1473, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 14, 14, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3266 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3225);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(28);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(43);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(8);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(953, 953, 4393, true, false, (char[]) null);
      assertEquals("\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9\u03B9", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(57);
      assertEquals("                                                         ", string0);
  }
}
