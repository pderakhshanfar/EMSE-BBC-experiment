/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:46:07 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(3475, 0, (-1), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1140);
      String string0 = RandomStringUtils.randomAlphanumeric(1140);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(2955, "Lm3P9K+]sIr");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, 1, (-5487), false, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1140);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(127);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -363 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1430);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -14 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1855), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1855 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, false, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2645), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2645 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1160, 0, 773, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(26, (-1317), Integer.MAX_VALUE, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 123, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(23, 55296, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(219, 38, 38, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 56319, false, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-701), (-2443), 28, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -701 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, 2454, 2454, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(55296);
      // Undeclared exception!
      RandomStringUtils.random(1437);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2159, (-363), 41, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46388, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(353L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, (-2007), 6, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-19), (-19), (-19), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -19 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(38, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(46318, 56191, 46318, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2767, 56191, 2754, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1819, 57343, 15, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(3326, 56320, 3326, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(907, (-264), (-517), false, false);
      assertNotNull(string0);
      assertEquals("\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8\uFEF8", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '0';
      String string0 = RandomStringUtils.random(19, 1, 19, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("0000000000000000000", string0);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(127);
      String string0 = RandomStringUtils.randomAlphabetic(127);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(46388, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(1160, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1586, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "YK3\"C6y5");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -791 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -9 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(388, 15, 388, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3);
      assertEquals("   ", string0);
  }
}
