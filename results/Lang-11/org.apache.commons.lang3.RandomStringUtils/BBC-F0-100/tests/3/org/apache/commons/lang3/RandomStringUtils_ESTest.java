/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:50:50 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      int int1 = (-867);
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(1, (-867), (-301), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFC9E", string0);
      
      org.evosuite.runtime.Random.setNextRandom((-867));
      String string1 = RandomStringUtils.randomAlphanumeric(1);
      assertNotNull(string1);
      assertEquals("P", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(851, 56320, 55296, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1925;
      // Undeclared exception!
      RandomStringUtils.random(1925, 56320, 1925, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 56320;
      MockRandom mockRandom0 = new MockRandom(870L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 56320;
      int int1 = 3308;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-1209L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(56320, 3308, 56320, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      org.evosuite.runtime.Random.setNextRandom((-1023));
      String string1 = RandomStringUtils.randomNumeric(13);
      assertNotNull(string1);
      assertEquals("6666666666666", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 3308, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '2';
      charArray0[2] = 'V';
      charArray0[3] = 'p';
      charArray0[4] = '+';
      charArray0[5] = '{';
      charArray0[6] = '^';
      charArray0[7] = 'O';
      charArray0[8] = '+';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      LongStream longStream0 = mockRandom1.longs((long) 0, 3520L);
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      IntStream intStream0 = mockRandom1.ints(0L);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 0, true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "N_ .UBH{,phk");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(1, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 349, 0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "#b'J#");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      org.evosuite.runtime.Random.setNextRandom(56320);
      String string1 = RandomStringUtils.randomAlphabetic(1);
      assertNotNull(string1);
      assertEquals("r", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints(594L);
      assertNotNull(intStream0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      double double1 = mockRandom0.nextGaussian();
      assertEquals(0.1, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 219, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      IntStream intStream0 = mockRandom1.ints(0L);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.random(127, 0, 0, false, false, (char[]) null, (Random) mockRandom1);
      assertNotNull(string1);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(mockRandom1, mockRandom0);
      
      String string2 = RandomStringUtils.random(127, 0, 2418, false, false);
      assertNotNull(string2);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(1871L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, (-1332), 13, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      MockRandom mockRandom0 = new MockRandom(')');
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(995, 1, 995, true, true, charArray1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 986, 1, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      IntStream intStream0 = mockRandom1.ints(0L);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      int int1 = 127;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 0, false, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = 'v';
      charArray0[2] = 'W';
      charArray0[3] = '*';
      charArray0[4] = ')';
      charArray0[5] = 't';
      charArray0[6] = '*';
      charArray0[7] = '@';
      charArray0[8] = '%';
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 56319, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      int int0 = 986;
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '=';
      charArray0[2] = 'C';
      charArray0[3] = '{';
      charArray0[4] = 's';
      charArray0[5] = 'S';
      charArray0[6] = 'C';
      charArray0[7] = '`';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(986, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55296);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 55296);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(111, 55296, 111, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2333L));
      assertNotNull(mockRandom0);
      
      int int0 = (-3054);
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[4];
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = ')';
      charArray0[3] = 'r';
      String string0 = RandomStringUtils.random(1, 0, (-3054), true, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'r', 'r', ')', 'r'}, charArray0);
      assertEquals("r", string0);
      assertEquals(4, charArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-896), 0, 1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -896 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      int int1 = (-27);
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      MockRandom mockRandom0 = new MockRandom((-27));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-27), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(986, (-1332), 0, false, false, (char[]) null);
      assertNotNull(string1);
      assertEquals("\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC\uFACC", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(986);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = 'd';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'d', 'v', 'd', 'd', '/', '/', 'd'}, charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      
      int int0 = 1160;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1160, 56192, 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(887, 887, (-264), false, false);
      assertNotNull(string0);
      assertEquals("\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377", string0);
      
      int int0 = 6339;
      String string1 = RandomStringUtils.randomAscii(6339);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1722;
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '^';
      charArray0[2] = 'K';
      charArray0[3] = '6';
      charArray0[4] = 'Q';
      charArray0[5] = 'L';
      MockRandom mockRandom0 = new MockRandom(6339);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 887);
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints((long) 6339);
      assertNotNull(intStream0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(887, 887, 887, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(42);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '$';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'R';
      String string1 = RandomStringUtils.random(42, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'6', '$', ',', 'N', 'R'}, charArray0);
      assertEquals("666666666666666666666666666666666666666666", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charArray0.length);
      
      int int0 = 843;
      int int1 = (-3021);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(843, (-3021), (-3021), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(2955, "Lm3P9K+]sIr");
      assertNotNull(string0);
      
      int int0 = 2475;
      int int1 = (-1916);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '}';
      String string1 = RandomStringUtils.random(2475, 0, (-1916), false, false, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'9', '}'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2955);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'b';
      String string0 = RandomStringUtils.random(1, 1, (-1), true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'6', 'b'}, charArray0);
      assertEquals("b", string0);
      assertEquals(2, charArray0.length);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.random(887, 887, (-264), false, false);
      assertNotNull(string0);
      assertEquals("\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377\u0377", string0);
      
      String string1 = RandomStringUtils.randomAscii(6339);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1722;
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '^';
      charArray0[2] = 'K';
      charArray0[3] = '6';
      charArray0[4] = 'Q';
      charArray0[5] = 'L';
      MockRandom mockRandom0 = new MockRandom(6339);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 887);
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6339, 6339, 1722, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -14 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-5487);
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '\'';
      String string1 = RandomStringUtils.random(0, 1, (-5487), false, false, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'#', '\''}, charArray0);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      
      String string2 = RandomStringUtils.random(1, false, false);
      assertNotNull(string2);
      assertEquals("\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = 127;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(127);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 56192;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'd';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'/', 'd'}, charArray0);
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      
      String string2 = RandomStringUtils.random(0, 1863, 1160, true, false, charArray0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'/', 'd'}, charArray0);
      assertEquals("", string2);
      assertEquals(2, charArray0.length);
      
      int int1 = 773;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1160, 0, 773, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 0;
      boolean boolean1 = false;
      String string3 = RandomStringUtils.random(0, false, true);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(55296);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(4567);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4567);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'u';
      charArray0[2] = 'A';
      charArray0[3] = 'q';
      charArray0[4] = '<';
      charArray0[5] = 'U';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'5', 'u', 'A', 'q', '<', 'U'}, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      
      int int1 = 57343;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(57343, false, false);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56320);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, true, false);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      int int1 = 123;
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 123, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils.random(2955, "Lm3P9K+]sIr");
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(2955, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'r';
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1335;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1335);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'z';
      charArray0[2] = 'L';
      charArray0[3] = '';
      charArray0[4] = ' ';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1855), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1855 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-2645);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2645), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2645 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, 0, (-2478), true, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2934 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-3032);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3032 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, charArray0);
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '-';
      charArray0[2] = 'e';
      charArray0[3] = 'X';
      charArray0[4] = '%';
      charArray0[5] = 'x';
      charArray0[6] = ')';
      charArray0[7] = 'e';
      RandomStringUtils.random(1, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '3';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      charArray0[2] = 'x';
      charArray0[3] = 'Q';
      charArray0[4] = ';';
      charArray0[5] = 'Y';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(1558L, (double) 1558L, (double) 55296);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, (-148), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'K';
      charArray0[2] = 'e';
      charArray0[3] = 'I';
      charArray0[4] = 'j';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[7] = 'd';
      charArray0[8] = 'e';
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-19), (-19), (-19), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -19 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'l';
      charArray0[2] = '>';
      charArray0[3] = '4';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '*';
      charArray0[2] = '>';
      charArray0[3] = 'u';
      charArray0[4] = '8';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(887, 887, (-264), false, false);
      int int0 = (-932);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -932 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
