/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:46:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(21, 0, (-608), true, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(3584);
      String string0 = RandomStringUtils.randomAlphabetic(3584);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(4740, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "Zh'ea)ou}E!l");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 1756, 0, false, false, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(45350);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -533 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4740);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2058 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(46329, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2352), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2352 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(984, true, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-398), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -398 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(7, "\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(581, 581, 33, true, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46203, 46203, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 56192, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1050), (-651), 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1050 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-3408), (-1), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(10, 10, 10, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-13), 0, 1030, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -13 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(30, 14, 14, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1189 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(156, 56192, 24, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(38, (-1161), 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77\uFB77", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(976, 976, (-1331), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0\u03D0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3352, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'3', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(99, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      RandomStringUtils.random(21, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(21, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(2230L);
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 23, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1834, 390, 1834, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2283), 21, (-2896), false, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2283 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, (-1768), true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(977, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1069, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(149, 56168, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, (-1229), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(2163, (-608), 55296, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 2474, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(17);
      assertEquals("11111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom(1498);
      String string0 = RandomStringUtils.randomAlphanumeric(1498);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1331 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(17);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(17);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1498);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 24, 0, false, false, (char[]) null);
      assertEquals("\u0018", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
