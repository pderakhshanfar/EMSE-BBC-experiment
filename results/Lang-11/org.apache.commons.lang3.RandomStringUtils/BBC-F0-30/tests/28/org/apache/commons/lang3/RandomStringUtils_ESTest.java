/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:10:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 35;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = false;
      int int1 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(35, 57343, 35, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt(35);
      assertEquals(0, int0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(32, 57343, 35, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 148;
      org.evosuite.runtime.Random.setNextRandom(148);
      String string0 = RandomStringUtils.randomAlphabetic(24);
      assertNotNull(string0);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYY", string0);
      
      int int1 = 13;
      String string1 = RandomStringUtils.randomAlphanumeric(13);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("YYYYYYYYYYYYY", string1);
      
      int int2 = 31;
      String string2 = RandomStringUtils.randomAlphanumeric(31);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(1688);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'n';
      charArray0[2] = 'u';
      charArray0[3] = 'r';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3802, 148, 24, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, ">zG^");
      assertNotNull(string0);
      assertEquals(">", string0);
      
      String string1 = RandomStringUtils.random(33, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      String string2 = RandomStringUtils.random(1, ">zG^");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">", string2);
      
      String string3 = RandomStringUtils.randomAscii(1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      int int0 = (-4967);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-4967));
      LongStream longStream0 = mockRandom0.longs((long) (-4967), (long) 56191);
      assertNotNull(longStream0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-4967), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(33, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.random(1337, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(1337);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(33, 56191, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(432);
      String string0 = RandomStringUtils.random(39);
      assertNotNull(string0);
      assertEquals("\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0", string0);
      
      String string1 = RandomStringUtils.random(432, "\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0", string1);
      
      String string2 = RandomStringUtils.random(39, "\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0", string2);
      
      String string3 = RandomStringUtils.random(39, "The chars array must not be empty");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                                       ", string3);
      
      String string4 = RandomStringUtils.random(432, "\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0\u01B0", string4);
      
      String string5 = RandomStringUtils.randomAlphabetic(39);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("ddddddddddddddddddddddddddddddddddddddd", string5);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'y';
      charArray0[2] = 'L';
      charArray0[3] = 'X';
      charArray0[4] = '|';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(39, 39, 432, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, ">zG^");
      assertNotNull(string0);
      assertEquals(">", string0);
      
      int int0 = 33;
      String string1 = RandomStringUtils.random(33, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      String string2 = RandomStringUtils.random(1, ">zG^");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">", string2);
      
      String string3 = RandomStringUtils.randomAscii(1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-4967), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 56191, false, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'y';
      String string0 = RandomStringUtils.randomAscii(23);
      assertNotNull(string0);
      assertEquals("                       ", string0);
      
      org.evosuite.runtime.Random.setNextRandom(23);
      String string1 = RandomStringUtils.randomNumeric(23);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("77777777777777777777777", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)35;
      byteArray1[7] = (byte)35;
      byteArray1[8] = (byte)35;
      mockRandom0.nextBytes(byteArray1);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)3}, byteArray1);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, (int) (byte)0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = RandomStringUtils.random(1, (int) (byte)0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0001", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic((byte)0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(20, (int) (byte)0, (int) (byte)0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)19;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = RandomStringUtils.random(2365, (int) (byte) (-113), (int) (byte) (-120), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1269 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1011);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1011, 56320, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 1;
      int int1 = 606;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'U';
      charArray0[2] = '|';
      charArray0[3] = '=';
      charArray0[4] = 'C';
      charArray0[5] = '3';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 606, true, true, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'p', 'U', '|', '=', 'C', '3'}, charArray0);
      assertNotNull(string0);
      assertEquals("U", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(9, true, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      String string0 = RandomStringUtils.random(212, 6085, (int) '5', false, false);
      assertNotNull(string0);
      assertEquals("\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      byteArray0[5] = (byte)121;
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      
      String string1 = RandomStringUtils.random((int) (byte)2, (int) (byte)0, (int) (byte)0, true, true, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '5'}, charArray0);
      assertNotNull(string1);
      assertEquals("55", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric((byte)121);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 6085, false, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((byte)1);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)123;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)121;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 29, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(127, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      String string0 = RandomStringUtils.random(212, 6085, (-1040), false, false);
      assertNotNull(string0);
      assertEquals("\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5\u17C5", string0);
      
      String string1 = RandomStringUtils.random(6085);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, (-1040), false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      String string0 = RandomStringUtils.random(212, (-1585), (-1040), false, false);
      assertNotNull(string0);
      assertEquals("\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF", string0);
      
      String string1 = RandomStringUtils.random(6085);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 4, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      int int0 = 6085;
      int int1 = (-1040);
      String string0 = RandomStringUtils.random(6085, (-1585), (-1040), false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(6085);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 12, 12, true, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(43);
      assertNotNull(string0);
      assertEquals("                                           ", string0);
      
      String string1 = RandomStringUtils.random(43, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      int int0 = (-1040);
      String string0 = RandomStringUtils.random(212, (-1585), (-1040), true, true);
      assertNotNull(string0);
      assertEquals("\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF", string0);
      
      String string1 = RandomStringUtils.random(6085);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4, 2, 6085, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(212, 55296, 212, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 7, 6, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-884L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'R';
      charArray0[2] = '\'';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(637, 637, 637, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(212, (-1585), (-1040), false, false);
      assertNotNull(string0);
      assertEquals("\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF", string0);
      
      String string1 = RandomStringUtils.random(6085);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(6085, string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Random random0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(43, 43, 43, true, true, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-3666);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3666 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3212;
      String string0 = RandomStringUtils.random(3212, "C[$%y@@U;3]Fn/~");
      assertNotNull(string0);
      
      int int1 = (-1837);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1837), 3212, 3212, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1837 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      boolean boolean1 = false;
      int int1 = 212;
      String string0 = RandomStringUtils.random(212, (-1585), (-1040), false, false);
      assertNotNull(string0);
      assertEquals("\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF\uF9CF", string0);
      
      String string1 = RandomStringUtils.random(6085);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int2 = (-3281);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3281 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2274;
      int int1 = 5;
      boolean boolean0 = false;
      char char0 = '5';
      char char1 = ' ';
      int int2 = 55296;
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '5';
      charArray0[2] = ' ';
      charArray0[3] = '5';
      charArray0[4] = '5';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 2055, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, 57343, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 43;
      Random random0 = null;
      int int1 = 56320;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'B';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(43, 56320, 56320, true, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(43);
      assertNotNull(string0);
      assertEquals("                                           ", string0);
      
      MockRandom mockRandom0 = new MockRandom(1054L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(43);
      assertEquals(0, int0);
      
      int int1 = 14;
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '=';
      charArray0[2] = 'u';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(43, 43, 14, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1670);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'b';
      charArray0[2] = '8';
      charArray0[3] = 'I';
      charArray0[4] = 'r';
      charArray0[5] = 'm';
      charArray0[6] = 'w';
      charArray0[7] = '2';
      // Undeclared exception!
      RandomStringUtils.random(1670, 1, 1670, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.random(949, 0, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1420);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1420 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = (-131);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -131 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(2836, 0, 0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      String string2 = RandomStringUtils.random(0, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = 0;
      String string3 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = 1;
      boolean boolean1 = true;
      String string4 = RandomStringUtils.random(0, 1, 56319, true, true);
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'G';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'R', 'G'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = 'h';
      charArray1[2] = 'j';
      charArray1[3] = '!';
      charArray1[4] = '~';
      charArray1[5] = 'o';
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray1, (Random) null);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', 'h', 'j', '!', '~', 'o'}, charArray1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(43);
      assertNotNull(string0);
      assertEquals("                                           ", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2910;
      String string0 = RandomStringUtils.randomAscii(2910);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2910, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-734), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -734 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = ' ';
      String string0 = RandomStringUtils.random(2274, 0, 2274, false, false, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'5', ' '}, charArray0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -821 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      int int1 = 1628;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, (-3487), 1628, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1628);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      charArray0[2] = 'U';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v', 'U'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '\\';
      charArray0[2] = '4';
      charArray0[3] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '}';
      charArray0[2] = '1';
      String string0 = RandomStringUtils.random(0, 0, 56319, false, false, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'', '}', '1'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'I';
      charArray0[2] = '$';
      charArray0[3] = 'o';
      charArray0[4] = 'V';
      charArray0[5] = 'E';
      charArray0[6] = '{';
      charArray0[7] = '6';
      charArray0[8] = '=';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2647), 2264, 56320, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2647 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 187;
      String string0 = RandomStringUtils.randomAscii(187);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                           ", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(187);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = ':';
      charArray0[2] = '\'';
      charArray0[3] = 'V';
      charArray0[4] = '8';
      RandomStringUtils.random(1215, charArray0);
      String string0 = RandomStringUtils.randomAscii(1215);
      RandomStringUtils.random(1215, string0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1215);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.random(3016, true, false);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1953;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1953);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '}';
      charArray0[2] = '';
      charArray0[3] = 'i';
      charArray0[4] = ';';
      charArray0[5] = 'J';
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1603), (-1603), (-812), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1603 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1693);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1693), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1693 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 2753;
      int int1 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2753, 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-637);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -637 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 3077;
      RandomStringUtils.randomAscii(3077);
      RandomStringUtils.random(3077);
      int int1 = (-222);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -222 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAscii(0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1799), (-1799), 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1799 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
