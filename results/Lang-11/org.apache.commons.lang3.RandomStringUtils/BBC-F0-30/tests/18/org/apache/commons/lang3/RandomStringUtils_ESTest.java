/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:58:40 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(56315);
      String string0 = RandomStringUtils.randomAlphabetic(3166);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(2672, charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(7, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(26, 72, 55296, false, false, (char[]) null);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, (-3285), 0, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(483, 483, (-2136), true, false);
      assertEquals("\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3\u01E3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1386 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(7211);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(2828);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -628 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1240 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(759);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-4997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4997 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1700), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1700 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "vz)VH]L4wvFLn");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 0, (-2269), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(722, Integer.MAX_VALUE, Integer.MAX_VALUE, false, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 2828, 7211, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3668, 3668, 3668, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, 413, 56191, false, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2136), 0, 1648, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2136 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, (-2267), (-2267), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -459 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(72, 56192, 72, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(28, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '1';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 1, (-574), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4581L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1077, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4581L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1077, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(443, (-28), 722, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-3285), 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), 596, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Random.setNextRandom(56319);
      // Undeclared exception!
      RandomStringUtils.random(1331, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(81, 56189, 81, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3034);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2728, (-354), 913, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47, 56320, (-3140), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(434);
      assertEquals("88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(56291);
      String string0 = RandomStringUtils.randomAlphanumeric(123);
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(56315);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56315, 56315, 56315, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4581L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5), 2805, 46325, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(434);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(24);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(55296);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(24, 27, 434, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
