/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:52:45 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(839);
      String string0 = RandomStringUtils.randomNumeric(3271);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-1349));
      String string0 = RandomStringUtils.randomAlphabetic(2136);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(1667, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      String string0 = RandomStringUtils.random(147, 0, (-1077), true, true, charArray0);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string0);
      assertArrayEquals(new char[] {'a', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1641);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(321);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -336 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2944));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2944 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic('m');
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(1, false, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-936), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -936 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(3337, "The chars array must not be empty");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1474), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1474 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 914, 723, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(18, 18, 18, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1789, 1, 1418, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-243), (-2372), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -243 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 57343, (-1682), true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1829, 1829, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1857, 0, (-1), false, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2815), 0, 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2815 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1470, 1470, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4922 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (-2125), 1731, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1731, 5, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u06C3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Random.setNextRandom(1952);
      String string0 = RandomStringUtils.random(40, 1952, 40, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8\u07C8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(15, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(15, 0, 691, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1937), (-669), 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1937 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 31, 10, true, true, charArray0, (java.util.Random) null);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-12), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -12 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(26, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2915, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3, 56170, 894, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 1731, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(584, (-88), 3337, true, true);
      assertEquals("\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8\uFFA8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 930, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(839);
      String string0 = RandomStringUtils.random(11, true, true);
      assertEquals("44444444444", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(2162);
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(15, 0, 0, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(47991, 56191, (-70), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46325);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2726 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 2, false, false, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2317);
      assertNotNull(string0);
  }
}
