/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:56:54 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-3149));
      String string0 = RandomStringUtils.randomAlphanumeric(44);
      assertNotNull(string0);
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(1254);
      String string0 = RandomStringUtils.randomAlphabetic(1254);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(2123, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "mHfxKDDx~+w[mXM");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(1437, 0, (-3160), false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, (-2586), (-2586), true, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 56319, (-2748), true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2044);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56320);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -32 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1170), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1170 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1496, true, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4011), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4011 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-696), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -696 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-3351), (-3351), false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2906, 1142, 520, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(383, (-1816), (-1816), true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 2221, 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-865), 485, 0, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -865 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1256, 1256, 296, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 478, false, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1387), 612, (-1387), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1387 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(239, 239, 239, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3579, 56191, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      MockRandom mockRandom0 = new MockRandom(785);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(785, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEqualsstring0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1468, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(223, 0, (-1107), false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(4749L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1287), 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(802);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 802, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(1989, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(4709, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(47351, 56319, 47346, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(802, 55306, 802, false, false);
      assertEquals("\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(655, 56320, 655, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom((-2748));
      String string0 = RandomStringUtils.randomNumeric(19);
      assertEquals("2222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56320, (-1150), 19, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(37, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1468, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(47352, 2381, 223, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, "\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00\uD80A\uDC00");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-4074));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4074 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 56191, 56191, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
