/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:58:51 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 0, (-468), false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-1987));
      String string0 = RandomStringUtils.randomAlphabetic(2703);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(2339, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(21, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "%rnV\"Q");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1, 1, (-1053), false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, (-4763), false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(24, 56191, (-4345), false, false);
      assertNotNull(string0);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -910 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2386 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(861);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2190 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(34, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "V)HY`#u9{#D3");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1489), "Z#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1489 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(680, 680, 680, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(1711);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1711, 13, 128, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1504, 1504, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(466, 0, 466, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2093), 0, (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2093 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(26, 905, 905, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(109, (-3080), 127, true, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1483), (-1118), 1049, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1483 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 21, 21, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1611 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1053), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1053 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = '6';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(34, 1, (-1), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '6', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("6666666666666666666666666666666666", string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(29, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(29, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(29, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(352, 0, 24, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1023), 314, (-1023), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1023 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 128, 1711, true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1334), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1334 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(223, 56319, (-717), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(223, 55296, 223, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(564, (-674), 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E\uFD5E", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(221, 57331, (-667), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomNumeric(34);
      assertNotNull(string0);
      assertEquals("9999999999999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom((-1967));
      String string0 = RandomStringUtils.randomAlphanumeric(1811);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 17, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 109, 127, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(34);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -267 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1821);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38, (-2005), (-1302), false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56298);
  }
}
