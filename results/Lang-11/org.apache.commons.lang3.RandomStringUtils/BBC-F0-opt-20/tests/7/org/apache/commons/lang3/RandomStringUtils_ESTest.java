/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:15 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-1);
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(4411, 56320, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(34);
      String string0 = RandomStringUtils.randomAlphanumeric(26);
      assertNotNull(string0);
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBB", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 41;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(41, 56162, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(2638, false, false);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(2638);
      String string1 = RandomStringUtils.random(36, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(1859);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(2638);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = RandomStringUtils.randomAscii(36);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string4);
      
      String string5 = RandomStringUtils.randomAscii(2638);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = '>';
      charArray0[2] = 'z';
      charArray0[3] = '@';
      charArray0[4] = '?';
      charArray0[5] = 'O';
      charArray0[6] = 'P';
      charArray0[7] = '>';
      charArray0[8] = 'J';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1859);
      assertEquals(779, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3231, 2638, 24, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1632, (-1960), 56320, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(602);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String string2 = RandomStringUtils.random(1632, 1632, (-1), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56320, 56191, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 56320;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (-1745), (-634), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'b';
      charArray0[3] = ' ';
      charArray0[5] = '$';
      charArray0[6] = '2';
      String string1 = RandomStringUtils.random(7, 0, (-634), true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'9', 'b', '\u0000', ' ', '\u0000', '$', '2'}, charArray0);
      assertEquals("9999999", string1);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1156, 56192, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'V';
      charArray0[2] = ':';
      charArray0[4] = '6';
      charArray0[5] = 'G';
      charArray0[6] = 'E';
      charArray0[7] = '\\';
      String string0 = RandomStringUtils.random(123, 0, 15, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'G', 'V', ':', '\u0000', '6', 'G', 'E', '\\'}, charArray0);
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(13);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-1011), (-1));
      assertNotNull(intStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom0.nextInt((-237));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, 42, 1341, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      charArray0[3] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1362, 1, 1362, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[3] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      charArray0[3] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1815, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 47347, false, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 56192;
      int int1 = 0;
      String string0 = RandomStringUtils.random(0, 56192, 46227, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int2 = (-1609);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1609 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(2181, (-1720), 0, true, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(127);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                               ", string2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[3] = 'h';
      charArray0[1] = 'j';
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1541), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, "");
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, "");
      assertNotNull(string5);
      assertEquals("", string5);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2763L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      LongStream longStream1 = mockRandom1.longs(0L);
      assertNotNull(longStream1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(longStream1, longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1815, 0, 29, false, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, (-1541), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 2559;
      boolean boolean1 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'y';
      charArray0[2] = '4';
      charArray0[3] = '1';
      charArray0[4] = 'O';
      charArray0[5] = 'v';
      charArray0[6] = '=';
      charArray0[7] = 'E';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2559, (-1541), 8, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-26));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-26);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      String string2 = RandomStringUtils.random(0, (-4888), (int) (byte)0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals("", string2);
      assertEquals(1, charArray0.length);
      
      String string3 = RandomStringUtils.random(0, 2668, 29, true, true);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1541), (-1541), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = (-1585);
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      charArray0[3] = '[';
      charArray0[4] = 'E';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'j';
      charArray0[8] = 'S';
      // Undeclared exception!
      RandomStringUtils.random(57343, 1, 57343, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[3] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = 'E';
      charArray0[3] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1815, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1541), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, "");
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, "");
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '2';
      String string7 = RandomStringUtils.random(13, 0, (-1541), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertArrayEquals(new char[] {' ', '2'}, charArray0);
      assertEquals("             ", string7);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = ' ';
      charArray0[2] = '2';
      charArray0[3] = 'v';
      charArray0[4] = 'd';
      charArray0[5] = 'o';
      charArray0[6] = ' ';
      charArray0[7] = '1';
      MockRandom mockRandom0 = new MockRandom((-1720));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2181, (-4506), (-4506), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1720), 1274, 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1720 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 's';
      charArray0[2] = 'j';
      charArray0[3] = 'p';
      charArray0[4] = 'W';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-26);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2047;
      boolean boolean0 = true;
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = 'j';
      charArray0[3] = '6';
      charArray0[4] = '#';
      char char0 = 'E';
      charArray0[5] = 'E';
      char char1 = '/';
      charArray0[6] = '/';
      charArray0[7] = 'P';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2047, (-3173), (-3173), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2967;
      String string0 = RandomStringUtils.random(2967);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2967, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = (-6872);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'S';
      charArray0[2] = '0';
      charArray0[3] = '|';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-6872), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6872 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -694 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1541), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, "");
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, "");
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(1);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\u0000", string6);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = ' ';
      charArray0[2] = '1';
      charArray0[3] = 'z';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string7 = RandomStringUtils.random(1, 0, (-1240), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertArrayEquals(new char[] {'2', ' ', '1', 'z'}, charArray0);
      assertEquals("2", string7);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-2424);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2424 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 4172;
      int int1 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(4172, (-1), 4172, true, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-2410);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2410));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2410 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 272;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(272, true, false);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'j';
      charArray0[2] = '4';
      charArray0[3] = 't';
      charArray0[4] = 'o';
      String string0 = RandomStringUtils.random(1980, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'+', 'j', '4', 't', 'o'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'q';
      charArray0[2] = '(';
      charArray0[3] = 'T';
      charArray0[4] = 'n';
      charArray0[5] = 'v';
      charArray0[6] = 'q';
      MockRandom mockRandom0 = new MockRandom((-1094));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2211, 0, (-1094), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '?';
      charArray0[2] = 'A';
      charArray0[3] = '+';
      charArray0[4] = '/';
      charArray0[5] = 'f';
      MockRandom mockRandom0 = new MockRandom(4711L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1211, (-2563), 1211, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'B';
      charArray0[2] = 'M';
      charArray0[3] = 'Q';
      charArray0[4] = '(';
      charArray0[5] = 'b';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'D', 'B', 'M', 'Q', '(', 'b'}, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = '{';
      charArray0[2] = '-';
      charArray0[3] = '3';
      charArray0[4] = ';';
      charArray0[5] = 'Y';
      charArray0[6] = 'b';
      charArray0[7] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-163), 0, 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -163 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1214;
      String string0 = RandomStringUtils.random(1214);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1214, false, false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      char char0 = 'P';
      charArray0[1] = 'P';
      char char1 = '`';
      charArray0[2] = '`';
      charArray0[3] = 'L';
      char char2 = ')';
      charArray0[4] = ')';
      char char3 = '#';
      charArray0[5] = '#';
      char char4 = 's';
      charArray0[6] = 's';
      charArray0[7] = 'T';
      char char5 = '`';
      charArray0[8] = '`';
      String string2 = RandomStringUtils.random(1, 1, 779, false, false, charArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'5', 'P', '`', 'L', ')', '#', 's', 'T', '`'}, charArray0);
      assertEquals("P", string2);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(691);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3760;
      String string0 = RandomStringUtils.random(3760, false, false);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.random(0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = 2085;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2085);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2318);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 68;
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, 0, 68, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int2 = (-2720);
      boolean boolean1 = true;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-12L), 68, (-2720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'r';
      charArray0[2] = 'B';
      charArray0[3] = 'D';
      charArray0[4] = 'P';
      charArray0[5] = ']';
      charArray0[6] = 'n';
      charArray0[7] = '';
      MockRandom mockRandom0 = new MockRandom((-578L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2090), (-2090), 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2090 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, "ZQICX_");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 441;
      RandomStringUtils.random(441, "r5.u'1<DF8");
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(4373);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1267);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1267 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, 0, 0, true, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'j';
      charArray0[2] = 'E';
      charArray0[3] = '[';
      charArray0[4] = 'j';
      charArray0[5] = '=';
      charArray0[6] = 'G';
      RandomStringUtils.random(1310, 1, (-1585), true, true, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1380, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
