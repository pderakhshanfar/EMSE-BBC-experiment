/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:35:06 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(750, 0, (-3200), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertEquals("222222222222222222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(127);
      String string0 = RandomStringUtils.randomAlphanumeric(750);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-817));
      String string0 = RandomStringUtils.randomAlphabetic(36);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(710, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2102, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");
      assertEquals("]]]]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, (-1127), true, true, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1917);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4479);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -817 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3480 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(474, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2434), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2434 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46212, "~Oe8Nw5=v");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-499), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -499 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-2570L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(325, 325, (-177), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-846L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3510, 3510, 3510, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(502, (-1866), 1434, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-606), (-606), (-606), false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -606 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(864, 864, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3327, 3327, 3327, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-626), (-52), (-1627), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -626 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 55296, 55296, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1572));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-1572), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2570L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      String string0 = RandomStringUtils.random(1496, 0, 1, true, false, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1570));
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3846), 0, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3846 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2951L));
      String string0 = RandomStringUtils.random(0, (-1647), (-1647), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1572));
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-1572), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 55296, 1353, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1572));
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 55296, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-249L));
      String string0 = RandomStringUtils.random(1662, (-1532), (-18), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1572));
      // Undeclared exception!
      RandomStringUtils.random(5, 57343, 56205, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 5, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      String string0 = RandomStringUtils.random(3617, 0, 32, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(951, 951, 0, true, true);
      assertEquals("\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7\u03B7", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 0, 0, false, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 0, 0, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(106, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-757L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(965, 0, 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2354 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(750);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(36);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 1, (-1), false, false, (char[]) null);
      assertEquals("\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
