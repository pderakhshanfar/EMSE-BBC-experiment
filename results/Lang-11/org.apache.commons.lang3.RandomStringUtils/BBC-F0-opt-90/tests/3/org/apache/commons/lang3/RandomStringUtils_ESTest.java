/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:06:16 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(867, 0, (-1006), true, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(470);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(2251);
      String string0 = RandomStringUtils.randomAlphanumeric(452);
      assertNotNull(string0);
      assertEquals("cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-1073));
      String string0 = RandomStringUtils.randomAlphabetic(32);
      assertNotNull(string0);
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(3314, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(874, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '0';
      String string0 = RandomStringUtils.random(1633, 1, 1633, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(874, (-1006), 0, false, false);
      assertNotNull(string0);
      assertEquals("\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12\uFC12", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2117 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -819 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1102);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-725));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -725 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2852), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2852 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(36334, "y:1[+W8|");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(36355, (-1), (-869), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3272, (-917), 1185, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-226), 0, (-1), false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -226 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4248, 4248, (-177), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1297), (-1964), 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1297 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(874, (-1006), (-1006), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2408 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      String string0 = RandomStringUtils.random(2888, 0, 10, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57363, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(160, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1111L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2150, 56320, 56320, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-337), 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, true, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3407, 56191, (-2503), false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(45332, 56191, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(377, 55296, 46218, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4655L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 56320, 3, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(37, (-2548), 31, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C\uF60C", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(20);
      assertNotNull(string0);
      assertEquals("88888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(487, 487, (-1), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7\u01E7", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random((int) '\u001C', 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-120), (-120), (-120), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -120 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(20);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(452);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(452);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(1633, 1, 1633, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56332);
  }
}
