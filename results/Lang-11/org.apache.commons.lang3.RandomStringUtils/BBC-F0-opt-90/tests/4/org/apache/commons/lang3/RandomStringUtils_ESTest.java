/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, (-1047), false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(30);
      assertEquals("                              ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1654);
      String string0 = RandomStringUtils.randomAlphanumeric(1654);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2071);
      String string0 = RandomStringUtils.randomAlphabetic(2071);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1112, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(2043, 0, 2424, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, (-1), false, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1531), 1322, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(75);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2619 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2043);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -471 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(56192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -736 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(26258, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2296), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2296 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "@g{bq}7-");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2284, 2284, 2284, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(2526);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2526, 2526, 56320, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1762), (-1762), (-1762), false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1762 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1090, 1090, 1090, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2069, 56320, 2762, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-395), 2295, (-158), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -395 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4546, 4546, 4546, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56281);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56281, (-1390), 56281, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1160, 1756, 1160, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '1';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(1690, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1847), 0, 1681, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1847 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 56320, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(41, true, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1414), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1414 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(1969, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56281);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(848, 56281, 1922, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4843, 56179, 12, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4035, 56320, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(75, (-1), 75, false, false);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomNumeric(25);
      assertEquals("9999999999999999999999999", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(848, 440, 56320, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2029, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      RandomStringUtils.random(2029, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(25, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 0, 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(56320);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(22, 56320, 56320, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(25);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -392 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1922, 127, 56320, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }
}
