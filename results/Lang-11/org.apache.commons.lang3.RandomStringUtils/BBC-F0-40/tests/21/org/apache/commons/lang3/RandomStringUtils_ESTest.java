/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:00:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46237, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1896));
      String string0 = RandomStringUtils.randomAlphabetic(2484);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom((-877L));
      assertNotNull(mockRandom0);
      
      int int0 = 55296;
      char[] charArray0 = null;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(5, 55296, 14, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 56192;
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56192, 56319, 55296, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-37), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(57343, "||6m%P");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-2204);
      org.evosuite.runtime.Random.setNextRandom((-2204));
      String string0 = RandomStringUtils.randomAlphanumeric(7);
      assertNotNull(string0);
      assertEquals("4444444", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '~';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2204), 7, 7, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2204 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3111);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(1L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 3111, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)91;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      charArray0[1] = '4';
      RandomStringUtils.random(871, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2998, "_");
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4230 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(2990, 2990, (-1533), true, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(2990);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string4 = RandomStringUtils.random(1, (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\u0000", string4);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(579);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5993, 14, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1533);
      String string0 = RandomStringUtils.random(2998, 2998, (-1533), true, false);
      assertNotNull(string0);
      
      int int1 = 1;
      String string1 = RandomStringUtils.randomAscii(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2998);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3111);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 57343, 3111, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 57343;
      int int1 = 3692;
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 3692, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-494L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2998, 3577, 2998, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(1565L);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, (-2360), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, 4178, 3158, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052\u1052", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(1, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(1, 0, (-1), false, false);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u0000", string2);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string3 = RandomStringUtils.random(37, 31, 1, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                                     ", string3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(2998, 2998, (-1533), false, false);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(43, 3006, 594, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2998;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2998, 2998, 2998, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      String string1 = RandomStringUtils.random(871, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'l', '4'}, charArray0);
      assertEquals("lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 242, 242, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-494L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2998, 2998, 57343, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, false, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string2 = RandomStringUtils.random(1, 1092, 3266, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\u0445", string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 1;
      String string1 = RandomStringUtils.random(1, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(27);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      
      int int1 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(55296);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, (-596), (-596), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 0, false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '_';
      charArray0[2] = '';
      charArray0[3] = '[';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, 28, false, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(2998, 2998, (-1533), false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, 1, 2998, false, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      MockRandom mockRandom0 = new MockRandom((-1464L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'A';
      charArray0[7] = 'A';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(828, 2998, (-4246), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "m~KChL+cs");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 895;
      String string3 = RandomStringUtils.randomAscii(895);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEqualsstring3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[2] = 'U';
      String string4 = RandomStringUtils.random(0, charArray0);
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'\'', '\\', 'U'}, charArray0);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, 895, 0, false, false);
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(895, 0, 895, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = ')';
      charArray0[2] = 'A';
      charArray0[3] = 'p';
      MockRandom mockRandom0 = new MockRandom(4178);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4178, 4178, 4178, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 55296;
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      char char0 = '/';
      charArray0[1] = '/';
      charArray0[2] = '5';
      charArray0[3] = '\\';
      charArray0[4] = '_';
      char char1 = '#';
      charArray0[5] = '#';
      charArray0[6] = 'o';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-299);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-299), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -299 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1459;
      String string0 = RandomStringUtils.random(1459, "`<3/R*5%");
      assertNotNull(string0);
      
      int int1 = 3512;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1459, 1459, 3512, true, false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(3128, false, false);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.randomNumeric(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.random(0, "");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1059 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '3';
      charArray0[2] = 'x';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'?', '3', 'x'}, charArray0);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, 0, (-1077), false, false, (char[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, false, false);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(0, "RA\u0006j");
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int0 = (-435);
      int int1 = (-1);
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '+';
      charArray1[2] = 'q';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-435), (-1), (-435), false, false, charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -435 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-895), 1, (-1), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -895 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 871, 123, true, true, (char[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      int int1 = 1937;
      String string0 = RandomStringUtils.random(0, 0, 1937, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int2 = (-109);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -109 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1004;
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'O';
      charArray0[2] = '%';
      charArray0[3] = 'v';
      charArray0[4] = 'P';
      String string0 = RandomStringUtils.random(1004, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {':', 'O', '%', 'v', 'P'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1004);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2575;
      String string0 = RandomStringUtils.randomAscii(2575);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2575, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2575, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1;
      String string0 = "";
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-439);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -439 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'K';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, (-2740), 56191, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'c';
      charArray0[2] = '2';
      charArray0[3] = 'T';
      charArray0[4] = '&';
      charArray0[5] = '=';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1181), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '3';
      charArray0[2] = '';
      charArray0[3] = 'P';
      charArray0[4] = '3';
      charArray0[5] = 'E';
      charArray0[6] = 'B';
      charArray0[7] = ',';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1843), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1843 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 3835;
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = '&';
      charArray0[2] = 'N';
      charArray0[3] = 'O';
      charArray0[4] = '3';
      charArray0[5] = '\'';
      charArray0[6] = '&';
      charArray0[7] = '_';
      charArray0[8] = 'J';
      RandomStringUtils.random(3835, charArray0);
      int int1 = 1772;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1772);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(2998, 2998, (-1533), false, false);
      int int0 = 1;
      RandomStringUtils.randomAscii(1);
      int int1 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, 1, 2998, false, false);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1533), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1533 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = '^';
      charArray0[2] = '\\';
      charArray0[3] = 'W';
      charArray0[4] = '%';
      charArray0[5] = ',';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1108;
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'b';
      charArray0[2] = '|';
      charArray0[3] = 'v';
      RandomStringUtils.random(1108, charArray0);
      String string0 = "/lS\\u1MK8f|)>";
      RandomStringUtils.random(3137, string0);
      int int1 = 0;
      RandomStringUtils.randomAscii(0);
      int int2 = 0;
      RandomStringUtils.random(0, "");
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(3137, true, false);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(555);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-1244);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1244), "3sF8vZKt=^v4C$U.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1244 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
