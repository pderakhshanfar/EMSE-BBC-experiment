/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:06:02 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(778);
      String string0 = RandomStringUtils.randomAlphabetic(3249);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(2971, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'N';
      String string0 = RandomStringUtils.random(1, 1, 29, true, true, charArray0);
      assertEquals("N", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', 'N', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, (-17), false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, 56175, (-1060), false, false);
      assertEquals("\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00\uDB6F\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-4895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4895 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -610 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, " is less than 0.");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1), 1, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, (-210), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56175, 3313, 3313, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1419, 23, 127, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45303, (-2491), 45329, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1713, 1713, 1713, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1380), (-1380), 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1380 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 4056, 4056, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(35331);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1449L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(27, 57343, (-2150), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1067L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(45314, 45314, 45322, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '5';
      MockRandom mockRandom0 = new MockRandom(1796);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 1796, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("5", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)36, (int) (byte)0, (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)30, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random((int) (byte)36, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1067L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(45314, 0, (-427), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4292, 557, 4292, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-17), (-17), (-1710), true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -17 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3653L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 113, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-921), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -921 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1050), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1050 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(331, 56192, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 55296, (-2651), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 36383, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 2480, false, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(749, (-2671), (-905), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591\uF591", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom((-1569));
      String string0 = RandomStringUtils.randomNumeric(2230);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom(2088);
      String string0 = RandomStringUtils.randomAlphanumeric(2088);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, "170oSIT%q/~#y");
      assertEquals("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1624, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2230);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2088);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3249);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
