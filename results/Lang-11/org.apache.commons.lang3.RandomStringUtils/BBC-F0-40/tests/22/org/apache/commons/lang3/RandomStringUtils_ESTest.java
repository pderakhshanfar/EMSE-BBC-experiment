/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:00:21 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomNumeric(39);
      assertEquals("666666666666666666666666666666666666666", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(672);
      String string0 = RandomStringUtils.randomAlphabetic(672);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(2370, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1, 0, 884, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), 1270, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(22);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1050 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2849 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -234 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1137), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1137 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "Requested random string length ");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2091), "\u0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2091 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, (-1), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2912, 2912, 123, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1099);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(37, 37, 37, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(32, 0, (-3189), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2745, 2745, 0, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2528), 0, 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2528 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -598 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1864, 56192, (-2370), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(5, (-795), 56320, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFCE5\uFCE5\uFCE5\uFCE5\uFCE5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 619, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(945, 945, 3349, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1\u03B1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '8';
      String string0 = RandomStringUtils.random(32, 1, 30, false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '8', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("88888888888888888888888888888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(5, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3144, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(3349);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3349, 0, 1, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(340, 1, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom((-749));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-749), 0, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -749 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-867), 757, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(25, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2895), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2895 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(13, 56192, 13, false, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, (-2694), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2367, 56320, 57343, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(1414, (-1755), 1414, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Random.setNextRandom(672);
      String string0 = RandomStringUtils.randomAlphanumeric(1179);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(39);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3349, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1179);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(672);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2181), 1, 353, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2181 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3515);
      assertNotNull(string0);
  }
}
