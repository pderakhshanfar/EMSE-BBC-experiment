/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:57:38 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(0L);
      int int0 = 440;
      String string0 = RandomStringUtils.random(440, 440, 56191, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2927, 56320, (-898), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(0L);
      String string0 = RandomStringUtils.random(440, 440, 56191, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8\u01B8", string0);
      
      org.evosuite.runtime.Random.setNextRandom(440);
      String string1 = RandomStringUtils.random(440, 56191, 440, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37\uD838\uDD37", string1);
      
      RandomStringUtils.randomAlphabetic(930);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 56191;
      boolean boolean0 = false;
      int int1 = 127;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56191, 127, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '2';
      charArray0[2] = 'w';
      charArray0[3] = 'H';
      charArray0[4] = 'd';
      charArray0[5] = '0';
      charArray0[6] = 'M';
      charArray0[7] = 'g';
      charArray0[8] = ':';
      MockRandom mockRandom0 = new MockRandom(4253);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string0 = RandomStringUtils.random(4253, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'>', '2', 'w', 'H', 'd', '0', 'M', 'g', ':'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(440, 56191, 440, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(1214, (-2600), 1, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte[] byteArray0 = new byte[2];
      float float0 = mockRandom0.nextFloat();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.0F, float0, 0.01F);
      
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)16;
      mockRandom0.nextBytes(byteArray0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float float1 = mockRandom0.nextFloat();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.2F, float1, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56192, (int) (byte)0, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(41, (-4841), 41, false, false);
      assertNotNull(string0);
      assertEquals("\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17\uED17", string0);
      
      String string1 = RandomStringUtils.random(41, 41, (-4841), false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")))))))))))))))))))))))))))))))))))))))))", string1);
      
      org.evosuite.runtime.Random.setNextRandom(1297);
      String string2 = RandomStringUtils.randomAlphanumeric(13);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7777777777777", string2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 2078;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(2078, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 2522;
      String string1 = RandomStringUtils.random(2522, 0, (-2028), false, false, (char[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(44);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      String string0 = RandomStringUtils.random(2078, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-526L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      float float0 = mockRandom1.nextFloat();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.1, double0, 0.01);
      
      int int0 = 0;
      // Undeclared exception!
      RandomStringUtils.random(2078, 0, 0, false, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, (int) (byte)0, 27, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 22;
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '@';
      charArray0[2] = 'g';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(22, 22, 22, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, "dIMl:E!OKT");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1605);
      String string0 = RandomStringUtils.random(1605, 1605, 3, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3, "/b1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("///", string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(844);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEqualsstring2);
      
      int int0 = 64;
      String string3 = RandomStringUtils.random(3, 64, 3, false, false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("SSS", string3);
      
      String string4 = RandomStringUtils.random(64, "V=h}Q/hQW^DiN%!B7`");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string4);
      
      // Undeclared exception!
      RandomStringUtils.random(48226);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2535L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random(1, 2534, 2078, false, false, (char[]) null, (Random) mockRandom1);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals("\u09E6", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3891));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3891 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1227), (-1227), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 4;
      int int1 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int2 = 0;
      // Undeclared exception!
      RandomStringUtils.random(36246);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      MockRandom mockRandom2 = new MockRandom((byte)20);
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[0] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) (byte)20, (int) (byte)20, (int) (byte) (-106), true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      String string0 = RandomStringUtils.random((int) (byte)68, (int) (byte)0, 128, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      String string1 = RandomStringUtils.random((int) (byte)68, charArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((byte) (-106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -106 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(2736L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(39, (int) (byte) (-106), 949, false, false, charArray0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)20;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(47387, (-1), (int) (byte)0, false, false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(56191, (int) (byte)0, (-2130), false, false, charArray0, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 128;
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      char char0 = 'b';
      charArray0[1] = 'b';
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)68;
      MockRandom mockRandom1 = new MockRandom(2736L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)68, (int) (byte)0, 128, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '9';
      int int0 = 308;
      // Undeclared exception!
      RandomStringUtils.random(308, 0, (-1), true, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[5];
      int int0 = 2950;
      int int1 = 304;
      // Undeclared exception!
      RandomStringUtils.random(57343, 1329, 304, true, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 34;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(34, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(34);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 29;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(29, 29, (-2901), false, false);
      assertNotNull(string0);
      assertEquals("\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D\u001D", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2901 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'b';
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)68;
      MockRandom mockRandom1 = new MockRandom(2736L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random((int) (byte)68, (int) (byte)0, 128, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new char[] {'3', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("33333333333333333333333333333333333333333333333333333333333333333333", string0);
      
      String string1 = RandomStringUtils.random(43, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'3', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("3333333333333333333333333333333333333333333", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1);
      int int1 = 128;
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'b';
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      DoubleStream doubleStream0 = mockRandom0.doubles(357L);
      assertNotNull(doubleStream0);
      
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.3, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-735), (int) (byte)1, (int) (byte)0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -735 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'b';
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)58;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(128);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '9';
      charArray0[2] = '=';
      charArray0[3] = 'E';
      charArray0[4] = '%';
      int int0 = 2466;
      // Undeclared exception!
      RandomStringUtils.random(2466, 2466, 594, false, true);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(405L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'u';
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'U', 'u'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1150;
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'I';
      charArray0[2] = '1';
      charArray0[3] = '|';
      MockRandom mockRandom0 = new MockRandom(894L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)80;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1150, 1150, 1150, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-111), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -111 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1739;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(1739, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), ")\"5DZrEKX#.-; *v&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = '=';
      String string0 = RandomStringUtils.random(2668, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'O', '='}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = 0;
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'O', '='}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = 78;
      String string3 = RandomStringUtils.random(78, charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'O', '='}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string3);
      
      int int2 = 0;
      int int3 = 32;
      String string4 = RandomStringUtils.random(0, 0, 32, false, false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(57343);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 2750;
      String string0 = RandomStringUtils.random(2750);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2750, "Q:A02%z9:,C{");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-4308);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-4308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4308 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 97;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(97, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1901;
      int int1 = 1;
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'j';
      charArray0[2] = 'S';
      charArray0[3] = '\'';
      charArray0[4] = 'I';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1901, 1901, 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-264), (-476), (-1754), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -264 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 2296;
      String string2 = RandomStringUtils.randomAscii(2296);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = (-2174);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2174), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2174 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(758);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'b';
      charArray0[2] = 'K';
      String string1 = RandomStringUtils.random(758, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'U', 'b', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-2142);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'H';
      charArray0[2] = 'z';
      charArray0[3] = 'v';
      charArray0[4] = 'J';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2142), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2142 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3309), (-3309), (-3309), false, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3309 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-234);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-234), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -234 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'T';
      charArray0[2] = 'f';
      charArray0[3] = '&';
      charArray0[4] = 't';
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-172);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -172 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, 2950, 0, true, true);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, (-1483), 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'X';
      charArray0[2] = '';
      charArray0[3] = '>';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, true, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomNumeric(0);
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1757 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0);
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'N';
      charArray0[2] = '8';
      charArray0[3] = 'w';
      charArray0[4] = 'z';
      String string1 = RandomStringUtils.random(32, charArray0);
      assertEquals("oooooooooooooooooooooooooooooooo", string1);
  }
}
