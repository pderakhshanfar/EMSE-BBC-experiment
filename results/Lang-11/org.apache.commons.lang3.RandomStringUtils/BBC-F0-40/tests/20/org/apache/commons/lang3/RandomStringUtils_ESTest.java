/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:59:20 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(50);
      String string0 = RandomStringUtils.randomAlphanumeric(50);
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(448);
      String string0 = RandomStringUtils.randomAlphabetic(448);
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(3926, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(24, 56167, 1933, false, false);
      assertEquals("\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00\uDB67\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 450, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(3577);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(41);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1359 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(3082, "S=hU!f>%[*Lxa:5");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3082, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(4555);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3581 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2303 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -312 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-402), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -402 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(866, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-952), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -952 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "/Vmu");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1097), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1097 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(999, (-1970), 999, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(1487L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 40, 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1304), (-1304), 2464, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1304 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3105, (-1), 4178, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3221, 1023, 1023, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-918), (-918), 201, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -918 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2406, 4862, 4862, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56319);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 76, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(76, 76, 45, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1421, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(497, 0, (-869), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1476), (-1970), (-1970), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1476 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 1340, true, false, (char[]) null, (java.util.Random) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(27, 56192, 1933, false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(929, 55296, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56319);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(35, 56319, 76, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(76, (-2266), 41, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726\uF726", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextFloat();
      String string0 = RandomStringUtils.random(1158, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(2841, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(127);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(34, (-5453), (-2518), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1069));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1069 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(448);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(448, 35333, 448, true, true, (char[]) null);
      assertEquals("\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05\u8A05", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
