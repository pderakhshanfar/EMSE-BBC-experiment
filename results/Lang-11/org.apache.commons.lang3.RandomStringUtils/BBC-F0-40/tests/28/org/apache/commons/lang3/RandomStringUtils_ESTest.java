/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:09:50 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(722, 0, (-1694), false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(43);
      String string0 = RandomStringUtils.randomAlphanumeric(1407);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1500);
      String string0 = RandomStringUtils.randomAlphabetic(309);
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "OiCY@$^)mE^.8:");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, Integer.MAX_VALUE, 2045, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1000);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -828 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(45320);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1114 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -966 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(46353, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1919), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1919 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3620, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2509), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2509 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, ">Lo41e;*NEIuT,]YA8}");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(35335, 15, 15, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1419, 1419, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1449, (-2666), (-2666), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-306), 1355, 703, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -306 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1707, 1707, 2477, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 17, 17, false, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(980, (-1), 980, true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(389, 389, 389, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -444 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      String string0 = RandomStringUtils.random(1481, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      String string0 = RandomStringUtils.random(1587, 0, 1500, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(22, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-3128));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3128), 4, (-1591), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3128 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(17, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, (-1329), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(55296, 56191, 55296, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 35, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, (-1664), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1476, 57343, (-304), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1476, (-1664), 1, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3383);
      String string0 = RandomStringUtils.randomNumeric(37);
      assertEquals("0000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(1000, 1000, 0, true, true);
      assertEquals("\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8\u03E8", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(8, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-3128));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2364, (-1591), (-3128), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(17, "IQy\"g[xgH!_");
      assertEquals("IIIIIIIIIIIIIIIII", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1641), (-327), (-44), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1641 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(37);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(309);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 1, 3659, false, false, (char[]) null);
      assertEquals("\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
