/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:10:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(2278);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-3183));
      String string0 = RandomStringUtils.randomAlphanumeric(12);
      assertNotNull(string0);
      assertEquals("yyyyyyyyyyyy", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-84));
      String string0 = RandomStringUtils.randomAlphabetic(7);
      assertNotNull(string0);
      assertEquals("ttttttt", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(1232, charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1846, (-1569), 56191, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 2630, (-2237), true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(2278);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2382 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1835 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3747 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2486);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-577), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -577 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(2289, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3347, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1734, (-1), 1734, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3485, 3485, 56319, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2289, 2289, 2289, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1846, 26, (-2578), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 56191, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1988, (-1569), 56191, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 128, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-248), 56320, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -248 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1325, 837, 837, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(499L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(679, 56319, (-3124), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1328L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(684, (-3124), 14, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC\uF3CC", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Random.setNextRandom(128);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2528, 128, (-3950), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '0';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4211, 1, 4211, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1116L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1116L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1116L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(22, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-741L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(2289, 0, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(55296);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-99), 55296, 4209, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -99 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1), (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1569), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1569 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(520L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(684, 56319, (-3124), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1747, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, (-3657), false, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(9, (-5787), 2278, false, false);
      assertEquals("\uE965\uE965\uE965\uE965\uE965\uE965\uE965\uE965\uE965", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(19);
      // Undeclared exception!
      RandomStringUtils.random(56319, true, true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(1257, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(2353, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5250, 5250, 55296, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2278);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1778));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1778 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3612);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, 0, (-1711), false, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(22);
      assertEquals("                      ", string0);
  }
}
