/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:59:07 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomNumeric(3470);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-179));
      String string0 = RandomStringUtils.randomAlphabetic(34);
      assertNotNull(string0);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(4324, "\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4\u10E4");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      String string0 = RandomStringUtils.random(1103, 0, 0, true, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(28);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1356 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-5651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5651 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(482, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4451), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4451 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2521), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2521 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3639, 1, 1265, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(673, 24, (-1270), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1896, 1, 1, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, (-4819), false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 128, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 574, 4102, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(650, 650, 650, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-294), (-1277), (-302), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -294 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(673, 673, 673, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56159, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56159, 56159, 5572, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(526, (-5321), (-2138), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37\uEB37", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'O';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random((int) (byte)13, 1, (int) (byte)37, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("OOOOOOOOOOOOO", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1268, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1268, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3885, 0, 3885, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1270), 6, 673, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1270 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(13, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(5, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2814, 56311, 18, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1371, 56320, 1371, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(2821, (-506), (-3763), false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4, 50, (-1), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("2222", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-1403));
      String string0 = RandomStringUtils.randomAlphanumeric(123);
      assertNotNull(string0);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1268, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(1330);
      String string0 = RandomStringUtils.random(1330, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 3396, 35, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1202 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(5542);
      // Undeclared exception!
      RandomStringUtils.random(5542, string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(123);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(34);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(673);
      assertEqualsstring0);
  }
}
