/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:29:20 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1335);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphabetic(123);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(108, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-225), 638, false, true, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1335, 0, 0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 362, 108, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -226 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -14 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(32);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3721 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4477), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4477 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(439, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-498), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -498 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4806, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 2087, 1, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, (-21), (-1), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-34), (-1358), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 2141, 2141, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-679), 1, (-1271), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -679 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(791, 791, 791, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45317);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1514 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(791, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'H';
      String string0 = RandomStringUtils.random(1871, 1, (-1), true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(45396, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(45400, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(128, 0, (-34), false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-197), 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -197 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random((int) '\u0000', (-927), (int) '\u0000', false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4671, 56320, 4671, false, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(128, 56192, 128, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1463, 56191, 10, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(128, (-1795), 128, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD\uF8FD", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(19, 57343, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(899, 3434, (-3853), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A\u0D6A", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(2910);
      String string0 = RandomStringUtils.randomAlphanumeric(2910);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(45400, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      RandomStringUtils.random(78, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, (-3672), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "IwJ&=3GgFcI!");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4477), (-4477), 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4477 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(2910);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2910);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(2324, 2324, 591, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }
}
