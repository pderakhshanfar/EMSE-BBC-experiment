/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:28:25 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-34), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(35, 0, 7, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2);
      assertNotNull(string0);
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(23);
      String string0 = RandomStringUtils.randomAlphanumeric(37);
      assertNotNull(string0);
      assertEquals("7777777777777777777777777777777777777", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      String string0 = RandomStringUtils.random(31, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("ccccccccccccccccccccccccccccccc", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(15);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -396 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2205), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2205 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(31, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2413), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2413 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(742, (-4341), 205, false, false);
      assertNotNull(string0);
      assertEquals("\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(61195, string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1173, 57343, 1586, true, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1026, 35, 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(7067, 32, 32, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1142), (-1), 1, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1142 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-193), 4501, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(399, 399, 399, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2797), (-525), (-2560), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2797 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(28, 32, 32, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46209);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -168 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '6';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, (-1620), true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '6', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("6", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2818);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1405, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2568, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 15, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2818);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1405, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom((-888));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-888), (-888), 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -888 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(24, 23, 1586, false, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(37, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1273), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1273 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1350, "\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B\uEF0B");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, (-2318), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      RandomStringUtils.random(1, 56183, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56175, 56175, (-43), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(285);
      String string0 = RandomStringUtils.random(1586, (-520), 1586, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomNumeric(25);
      assertEquals("9999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(539);
      String string0 = RandomStringUtils.randomAlphabetic(7);
      assertEquals("ttttttt", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(163, 56320, 2, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(680, 24, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(25);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(539);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(7);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-562));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -562 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
