/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:00:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1153);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(41);
      String string0 = RandomStringUtils.randomAlphanumeric(41);
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(42);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(39, "O%*+S@");
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "W/C;dwg#");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 127, 0, true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1448 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2974 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1709), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1709 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3051, false, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1970), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1970 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-625), 1, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1310, 2217, 235, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(621, 1117, 1117, false, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(902, 56320, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1462, 1462, (-2511), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2392, (-4217), (-4217), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(128, 0, (-1053), true, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1479), 4058, 44, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1479 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1731, 1731, 1731, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1792 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(902, (-1501), 3, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23\uFA23", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 56320, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-536), (-536), 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -536 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 56320, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(39, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1333), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1333 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(38, 56191, (-534), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(7, 55296, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(12, 56320, 12, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1117, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, (-1349), (-1053), true, true);
      assertEquals("\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB\uFABB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 2214, 2060, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "+");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 19, 2, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(46194);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(2214);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(8, 5, 2260, false, false, (char[]) null);
      assertEquals("\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }
}
