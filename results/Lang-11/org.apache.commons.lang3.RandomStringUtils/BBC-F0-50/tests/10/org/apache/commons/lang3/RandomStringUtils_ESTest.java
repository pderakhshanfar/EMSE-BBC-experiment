/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:53:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(418, 0, (-1), false, false, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(529);
      String string0 = RandomStringUtils.randomAlphanumeric(413);
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1303, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "M,0vm51a!&]r(-49pF");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, (-1270), 56320, false, false, charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(25, 0, 25, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1388);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -12 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1398 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56348, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3671), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3671 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1226, true, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1270), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1270 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 95, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom((-227));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(529, (-375), (-227), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom((-1103));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1103), (-1103), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(49873, 1, 49873, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1303, 1, 1, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 19, 1691, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(666, 1576, 1576, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1591, 56177, 1591, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1023));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(647, 45334, (-1023), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116\uB116", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)1, (int) (byte)0, (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, (int) (byte)0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(2977, (int) (byte)0, (int) (byte)0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random((int) (byte)2, (int) (byte)0, 860, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 1, 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) null);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) (byte)0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 57343, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (String) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) '/', "\u0000");
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(1867, 56191, (-1886), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1867, 56176, (-1886), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(647, (-4069), 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B\uF01B", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)103, 57319, (int) (byte)103, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.nextLong();
      char[] charArray0 = new char[9];
      charArray0[3] = '1';
      String string0 = RandomStringUtils.random(1, 1, (int) (byte)103, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(263);
      String string0 = RandomStringUtils.randomAlphabetic(263);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(31, (int) (byte)0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(297, (int) (byte)1, (-2756), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -743 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(413);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(263);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
