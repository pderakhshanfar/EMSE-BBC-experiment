/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:53:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(1026, 0, (-1089), false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomNumeric(16);
      assertNotNull(string0);
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(4044);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(3634);
      String string0 = RandomStringUtils.randomAlphanumeric(38);
      assertNotNull(string0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-2812));
      String string0 = RandomStringUtils.randomAlphabetic(32);
      assertNotNull(string0);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(27, "\" _J4|b~");
      assertNotNull(string0);
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "{UBV={AX}`o");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, (-603), (-908), true, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(34, 56182, 34, false, false);
      assertNotNull(string0);
      assertEquals("\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 56319, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(3634);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(833);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55317);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2666);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3461));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3461 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-776), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -776 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3229, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3636), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3636 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4126, (-1930), 2926, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(56191);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, (-3968), 56191, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-1), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1302), 1632, (-1302), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1302 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1600, 578, 17, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(898, 898, 898, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1547), 0, (-3059), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1547 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3669, 3669, 3669, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(99, 55296, (-3177), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(45, 57343, 728, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2434, (-1), 2434, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3824, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3968), 969, (-3968), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3968 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1174), 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(3229, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2798), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2798 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, (-4679), (-1023), false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(8, 2412, 52, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u096C\u096C\u096C\u096C\u096C\u096C\u096C\u096C", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(32, 553, 32, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229\u0229", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3824, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(3845, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55296);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(20, 20, 55296, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(41, "\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00\uDB76\uDC00");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3022 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2695 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3229);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(553, 1683, 2507, false, false, (char[]) null);
      assertEquals("\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693\u0693", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1203 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
