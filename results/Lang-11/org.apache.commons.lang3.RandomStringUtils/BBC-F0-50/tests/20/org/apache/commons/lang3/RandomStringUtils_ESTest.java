/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:02:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((byte)46);
      String string0 = RandomStringUtils.randomAlphanumeric((byte)46);
      assertNotNull(string0);
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(56145);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertNotNull(string0);
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      String string0 = RandomStringUtils.random(127, 0, 127, true, false, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertNotNull(string0);
      assertEquals("ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 123, 0, false, true, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(552, (-4922), 10, false, false);
      assertNotNull(string0);
      assertEquals("\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6\uECC6", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 941, 0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1554);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2673 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1807 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2455));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2455 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2540 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1041, false, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "{G)u{|^(GU$YiM");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1071, 4707, 1071, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(834, 3532, 3532, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1524, 0, 0, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 11, 123, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(32, (-1896), 1232, true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1232, 1232, 1232, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-75));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -75 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)113);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[3] = '1';
      String string0 = RandomStringUtils.random(837, (int) (byte)1, (int) (byte)113, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '1', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46330, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46330, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46330, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, (-1), true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(3400L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1643, 387, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom((-1019));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1019), (-1019), (-1019), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1019 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(5705L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1719), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1719 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1207), (-1207), (-1207), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1207 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(19, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1091L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3997, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(129, 56191, 3291, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1091L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3997, 56339, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomNumeric(2);
      assertEquals("99", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(8, (-172), 8, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF54\uFF54\uFF54\uFF54\uFF54\uFF54\uFF54\uFF54", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(41, 0, 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1071, 1071, 1071, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56182);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(552);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1665);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-219), (-219), 1182, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -219 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(658);
      assertEqualsstring0);
  }
}
