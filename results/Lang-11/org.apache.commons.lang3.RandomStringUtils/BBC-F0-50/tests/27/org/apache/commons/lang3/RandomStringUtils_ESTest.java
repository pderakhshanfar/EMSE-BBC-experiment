/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:59:20 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1369), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertEquals("222222222222222222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1715);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(4273, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      String string0 = RandomStringUtils.random(2392, 0, 601, true, true, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, (-1032), true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1228), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2929 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -24 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4038);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1032 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(601, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1071), "1zV|QuuIUm6]}$I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1071 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2628, 1497, 3097, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4273, 127, 127, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(2392, 0, 601, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1322), 0, (-1), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1322 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2385, 95, 95, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 275, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2892 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(13, 1475, 13, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1475, 2471, 1475, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '4';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 1, (-245), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 0, 0, false, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 2705, 46190, true, false, (char[]) null, (Random) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1123), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1123 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(25, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(41, 56192, (-3719), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(41, 56187, (-3719), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1381, 56320, 25, false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(694);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(694, (-312), 8, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8\uFEC8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(1402, 56320, 25, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(25, string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomAlphanumeric(18);
      assertEquals("222222222222222222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1715);
      String string0 = RandomStringUtils.randomAlphabetic(1943);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3484, 0, 0, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 57343, 0, true, true, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1228), (-1228), (-834), true, true, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1228 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(18);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1715);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(18);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3341, (-33), 3341, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }
}
