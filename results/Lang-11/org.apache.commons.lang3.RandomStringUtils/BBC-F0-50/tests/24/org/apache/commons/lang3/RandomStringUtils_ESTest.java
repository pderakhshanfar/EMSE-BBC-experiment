/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:03:13 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = null;
      int int1 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 56192, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56192, 56320, 3, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57293);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(57293);
      int int0 = 1354;
      String string0 = RandomStringUtils.randomAlphabetic(1354);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(127);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(43);
      // Undeclared exception!
      RandomStringUtils.random(43, 55295, (-225), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[8];
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)26;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byteArray0[7] = (byte)127;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(35325, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(127);
      IntStream intStream0 = mockRandom0.ints(127, 3022);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(3022, 56192, 3022, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(3022);
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.randomNumeric(2568);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57343);
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(57343, false, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[8];
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)127;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      LongStream longStream1 = mockRandom0.longs((long) (byte)0);
      assertNotSame(longStream1, longStream0);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      
      // Undeclared exception!
      RandomStringUtils.random(35325, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 55295;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)26;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(55295, 55295, (-2606), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      org.evosuite.runtime.Random.setNextRandom(3022);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-5);
      byte byte0 = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)127;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)11, (byte)0, (byte)0, (byte) (-49), (byte)11, (byte)0, (byte)0, (byte) (-48)}, byteArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (int) (byte)0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[3];
      org.evosuite.runtime.Random.setNextRandom(3040);
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)11, (byte)0}, byteArray0);
      
      String string0 = RandomStringUtils.randomAlphabetic(7848);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[3];
      org.evosuite.runtime.Random.setNextRandom(3040);
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)11, (byte)0}, byteArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(55295, 55295, (-2606), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(34, 55296, 56322, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) '[', "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(34, 55296, 56319, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(12);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1750;
      org.evosuite.runtime.Random.setNextRandom(1750);
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(2970, false, false);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(1750);
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'u';
      charArray0[2] = '.';
      charArray0[3] = '#';
      charArray0[4] = 'l';
      charArray0[5] = '<';
      String string1 = RandomStringUtils.random(2970, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'n', 'u', '.', '#', 'l', '<'}, charArray0);
      
      String string2 = RandomStringUtils.randomAlphanumeric(5);
      assertEquals("55555", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56294);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(2091, false, false);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = '@';
      charArray0[5] = 'c';
      String string1 = RandomStringUtils.random(262, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertEquals("cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'c', 'c', 'c', '@', '\u0000', 'c'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 56319;
      org.evosuite.runtime.Random.setNextRandom(56319);
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(56319, false, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'l';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(443, 0, (-475), true, true, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertEquals("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', 'l'}, charArray0);
      
      String string1 = RandomStringUtils.random(443, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '_';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2815);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.2F, float0, 0.01F);
      
      LongStream longStream1 = mockRandom0.longs();
      assertNotSame(longStream1, longStream0);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random((int) (byte)1, (-886), 0, false, false);
      assertEquals("\uFC8D", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      String string1 = RandomStringUtils.random(1205, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@', '@'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2440 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-3094);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3094), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3094 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '5';
      charArray0[2] = 'b';
      charArray0[3] = '\"';
      charArray0[4] = '$';
      charArray0[5] = '7';
      charArray0[6] = '[';
      charArray0[7] = 'G';
      Random random0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 57343, (-478), false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAscii(127);
      assertEquals("                                                                                                                               ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string1 = RandomStringUtils.random(2876, 362, 1909, false, false, (char[]) null, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(61);
      int int0 = 801;
      int int1 = 1336;
      int int2 = 26;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(801, 128, 26, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(2091, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(127);
      assertEquals("                                                                                                                               ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      int int0 = 0;
      int int1 = 32;
      // Undeclared exception!
      RandomStringUtils.random(28, 32, (-1766), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3998;
      String string0 = RandomStringUtils.random(3998, "The chars array must not be empty");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3998);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '5';
      charArray0[2] = 'q';
      charArray0[3] = 'A';
      charArray0[4] = '(';
      charArray0[5] = 'e';
      charArray0[6] = 'd';
      charArray0[7] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(30, 40, 40, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(983);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(983);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAscii(127);
      assertEquals("                                                                                                                               ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      int int0 = (-20);
      int int1 = 1336;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(127, (-20), 1336, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = '`';
      charArray0[2] = '~';
      charArray0[3] = 'a';
      charArray0[4] = 'n';
      charArray0[5] = '`';
      charArray0[6] = 'n';
      charArray0[7] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 1871, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.random(3998, "The chars array must not be empty");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(35, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      byte byte0 = (byte)1;
      MockRandom mockRandom0 = new MockRandom((byte)1);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)110;
      byteArray0[0] = (byte)110;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[9];
      charArray0[1] = '#';
      charArray0[3] = 'r';
      charArray0[4] = ';';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      charArray0[8] = 'r';
      // Undeclared exception!
      RandomStringUtils.random(646, (int) (byte)0, 646, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = 'r';
      charArray0[2] = 'e';
      charArray0[3] = '@';
      charArray0[4] = 'c';
      MockRandom mockRandom0 = new MockRandom(2806);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random((int) (byte)1, (int) (byte)0, 2806, true, true, charArray0, (Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertEquals("e", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'#', 'r', 'e', '@', 'c'}, charArray0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random((int) (byte)0, 2806, 0, false, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random((int) (byte)0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'#', 'r', 'e', '@', 'c'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric((byte)1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3558);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      String string1 = RandomStringUtils.random(3558, 0, 0, false, false, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'='}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(202);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '=';
      charArray1[1] = '=';
      charArray1[2] = '=';
      charArray1[3] = '=';
      charArray1[4] = '=';
      String string2 = RandomStringUtils.random(2280, charArray1);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '='}, charArray1);
      
      String string3 = RandomStringUtils.random(38, 0, (-3862), false, false, charArray1);
      assertEquals(5, charArray1.length);
      assertEquals("======================================", string3);
      assertNotSame(charArray1, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '='}, charArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3558);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      // Undeclared exception!
      RandomStringUtils.random(3558, 0, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3558);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      String string1 = RandomStringUtils.random(3558, 0, 0, false, false, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'='}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(202);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      String string2 = RandomStringUtils.random(0, "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAscii(127);
      assertEquals("                                                                                                                               ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      int int0 = 0;
      int int1 = 1336;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(127, 0, 1336, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(2360, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(850);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2529), 0, (-2529), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2529 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 918;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(918);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319, "qnP5=Tn$|");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-3124);
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '[';
      charArray0[2] = '_';
      charArray0[3] = '?';
      charArray0[4] = '+';
      charArray0[5] = 'P';
      charArray0[6] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3124), 0, (-3124), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3124 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 56320;
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      charArray0[2] = '`';
      charArray0[3] = 'K';
      charArray0[4] = '$';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 56319;
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'R';
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = 'j';
      charArray0[4] = 'O';
      charArray0[5] = 'g';
      String string0 = RandomStringUtils.random(0, (-1185), 1300, false, false, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'D', '{', 'o', 'j', 'O', 'g'}, charArray0);
      
      String string1 = RandomStringUtils.random(0, (-279), 0, false, false, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'D', '{', 'o', 'j', 'O', 'g'}, charArray0);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-279), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -279 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '<';
      charArray0[2] = 'q';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(89, 89, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 850;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(2360, 2360, 850, true, true);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1513);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1513 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-3892);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3892), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3892 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-3421);
      int int1 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3421), (-3421), 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3421 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 19;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 19, 19, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAscii(127);
      assertEquals("                                                                                                                               ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2493);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'O';
      charArray0[2] = ':';
      charArray0[3] = 'n';
      charArray0[4] = '3';
      charArray0[5] = '!';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      mockRandom0.setSeed(5027L);
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'/', 'O', ':', 'n', '3', '!'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3884), 0, (-3884), false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3884 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = '^';
      charArray0[2] = 'u';
      RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      char[] charArray1 = new char[8];
      charArray1[0] = 'r';
      charArray1[1] = '&';
      charArray1[2] = 'A';
      charArray1[3] = '>';
      charArray1[4] = '&';
      charArray1[5] = 'N';
      charArray1[6] = '&';
      charArray1[7] = '(';
      RandomStringUtils.random(0, charArray1);
      int int0 = 1860;
      RandomStringUtils.randomAscii(1860);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1860, 0, 1860, true, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1888);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1888 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      int int1 = (-515);
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0, 423.7627, 1117.1443483034107);
      RandomStringUtils.random(0, (-515), (-515), false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -515 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1270), "The chars array must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1270 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '<';
      charArray0[2] = '^';
      charArray0[3] = '#';
      charArray0[4] = 'i';
      charArray0[5] = 'X';
      charArray0[6] = 'G';
      RandomStringUtils.random(0, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1229 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3558);
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      String string1 = RandomStringUtils.random(3558, 0, 0, false, false, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom(202);
      mockRandom0.nextBoolean();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextFloat();
      mockRandom0.longs();
      RandomStringUtils.random(0, 202, 0, false, false, charArray0, (Random) mockRandom0);
      String string2 = RandomStringUtils.random(0, 3558, 0, false, true);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      char char0 = '=';
      charArray0[0] = '=';
      charArray0[1] = 'y';
      char char1 = '9';
      charArray0[2] = '9';
      charArray0[3] = 't';
      charArray0[4] = 'y';
      char char2 = '/';
      charArray0[5] = '/';
      char char3 = '}';
      charArray0[6] = '}';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
      char[] charArray0 = new char[0];
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, false, false);
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'Q';
      charArray0[2] = '~';
      charArray0[3] = '[';
      charArray0[4] = 'f';
      charArray0[5] = '3';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(621, false, true);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = ':';
      charArray0[2] = '';
      RandomStringUtils.random(2187, charArray0);
      RandomStringUtils.random(0, (-3093), (-3093), true, false, charArray0);
      MockRandom mockRandom0 = new MockRandom((-3093));
      mockRandom0.nextFloat();
      mockRandom0.ints((long) 2187, (-3093), 0);
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = (-2777);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2777 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-3152);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3152 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
