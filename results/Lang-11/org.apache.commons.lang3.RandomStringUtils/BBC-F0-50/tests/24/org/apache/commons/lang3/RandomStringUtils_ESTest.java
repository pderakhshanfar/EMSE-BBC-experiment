/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:58:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom((-17));
      String string0 = RandomStringUtils.randomNumeric(1);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(37);
      String string0 = RandomStringUtils.randomAlphanumeric(37);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(904);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(2187, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(2806, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3558);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, (-3093), (-3093), true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(850, 1305, 0, true, true);
      assertEquals("\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519\u0519", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1663 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -353 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(918);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -515 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-279), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -279 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "qnP5=Tn$|");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 127, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(89, 89, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3124), 0, (-3124), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3124 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46, 2187, (-1), true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 29, 29, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3421), (-3421), 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3421 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 19, 19, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(351, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3884), 0, (-3884), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3884 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 56192, (-3913), false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1862), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1862 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56183, 3922, false, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(79, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1270), "The chars array must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1270 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2094, 56192, 46231, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2119, 55296, 1653, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(19, 57328, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      String string0 = RandomStringUtils.random(17, 0, 17, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("88888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, (-1754), 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF926", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(2259, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2259, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(3558, 0, 0, false, false, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(44, (-2319), (-662), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2493);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1513 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1), false, true, charArray0);
  }
}
