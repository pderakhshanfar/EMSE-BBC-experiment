/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:00:43 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(270, 0, (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphabetic(33);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(4064, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(3454, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1583, "n:|&!PK*.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, (-19), 2227, true, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-394), (-1), false, false);
      assertNotNull(string0);
      assertEquals("\uFE76", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 36344, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2280);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-827));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -827 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -143 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -63 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4760);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2157 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2870), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2870 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1422, 56191, 127, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(433, string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1025);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38, 38, 1, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(2187);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2187, 1, 1, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3659), (-1), 3241, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3659 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38410, 38410, 535, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 494, 494, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-3744), 556, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38434, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1174, 56309, 1174, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'W';
      String string0 = RandomStringUtils.random(1, 1, 3325, true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("W", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '0';
      String string0 = RandomStringUtils.random(1, 1, 56319, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46208, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46208, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46208, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1025, 0, 1984, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(98L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1638), 56191, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1638 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-85), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1373, 56191, 1373, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(218, (-4838), 218, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A\uED1A", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2007, 56320, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(2477);
      String string0 = RandomStringUtils.randomNumeric(2477);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(35);
      String string0 = RandomStringUtils.randomAlphanumeric(71);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46349, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(40, 0, 123, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(44L);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(31, 31, 861, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1448L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5126, 5126, 5126, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2477);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1828 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(71);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, 861, 0, false, false, (char[]) null);
      assertEquals("\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D\u035D", string0);
  }
}
