/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:49:22 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1334);
      assertNotNull(string0);
      
      Random.setNextRandom(56192);
      String string1 = RandomStringUtils.randomAlphabetic(1334);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)42;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(1524, (int) (byte)0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[7];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteArray0[2] = (byte)0;
      String string0 = RandomStringUtils.random(14, 56319, 14, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uD802\uDC01\uD802\uDC01\uD802\uDC01\uD802\uDC01\uD802\uDC01\uD802\uDC01\uD802\uDC01", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random((int) (byte)0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, false, true);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.random(156, false, false);
      assertEquals("\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(865, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '+';
      String string1 = RandomStringUtils.random(865, charArray0);
      assertEqualsstring1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {' ', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      Random.setNextRandom((-933));
      String string2 = RandomStringUtils.randomNumeric(417);
      assertEquals("777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-933), 7, 865, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -933 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(2451);
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '3';
      charArray0[2] = 'S';
      charArray0[3] = '(';
      charArray0[4] = '~';
      String string0 = RandomStringUtils.random(2451, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'0', '3', 'S', '(', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string1 = RandomStringUtils.randomAlphanumeric(2451);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(486, 2451, 486, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(1, 1445);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt();
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 14, false, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 1445);
      assertNotNull(longStream0);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(1445, (-4854), 1445, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(20, 56319, 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = '0';
      charArray0[3] = '!';
      charArray0[4] = ',';
      MockRandom mockRandom0 = new MockRandom(1251L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(1, 1, 26, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'0', 'y', '0', '!', ','}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      RandomStringUtils.random(511, 56330, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom(1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '{';
      charArray0[2] = 'E';
      charArray0[3] = 'J';
      charArray0[4] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(721, 1, 1, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      mockRandom1.nextBytes(byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt((int) (byte)1);
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int1 = mockRandom1.nextInt();
      assertEquals(2, int1);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(int1 == int0);
      
      String string0 = RandomStringUtils.random(0, (int) (byte)1, (int) (byte)33, false, false, (char[]) null, (java.util.Random) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(3, 55296, 2409, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)102;
      byteArray1[7] = (byte)1;
      byteArray1[8] = (byte)102;
      mockRandom0.nextBytes(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)5, (byte)0, (byte)0, (byte)0, (byte)6}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = mockRandom0.nextInt((int) (byte)6);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = mockRandom0.nextInt();
      assertEquals(7, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'Q';
      // Undeclared exception!
      RandomStringUtils.random(56319, (int) (byte)0, (int) (byte)0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      RandomStringUtils.random(511, 56319, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-2347), 1445);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-2347), 0L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      mockRandom1.nextBytes(byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte byte0 = (byte)33;
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      mockRandom2.nextBytes(byteArray0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      int int0 = mockRandom2.nextInt((int) (byte)1);
      assertEquals(0, int0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      int int1 = mockRandom2.nextInt();
      assertEquals(2, int1);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)1, 55296, 9, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-2347), 1445);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-2347), 0L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)113;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int0 = mockRandom0.nextInt((int) (byte)33);
      assertEquals(2, int0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      String string0 = RandomStringUtils.random(1133, 46359, 2, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0003\u0003", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAlphanumeric((byte)0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(264L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(36271, (-1232), 36271, true, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-2347), 1445);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)113;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int0 = mockRandom0.nextInt((int) (byte)19);
      assertEquals(2, int0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      RandomStringUtils.random(2, (int) (byte)0, (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46196);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(54, 54, 0, false, true);
      assertEquals("666666666666666666666666666666666666666666666666666666", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2004, "666666666666666666666666666666666666666666666666666666");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 1, (-574.482), 1953.35440329249);
      assertNotNull(doubleStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'M';
      charArray0[2] = 'B';
      charArray0[3] = '<';
      String string0 = RandomStringUtils.random(1, 1, 1263, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("M", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'K', 'M', 'B', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      
      RandomStringUtils.random(928, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(928);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      charArray0[2] = 'I';
      charArray0[3] = '5';
      charArray0[4] = 'm';
      String string1 = RandomStringUtils.random(1, 1, 1393, false, false, charArray0);
      assertEquals("X", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'U', 'X', 'I', '5', 'm'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(430);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(38, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(202);
      assertEquals("                                                                                                                                                                                                          ", string0);
      assertNotNull(string0);
      
      Random.setNextRandom((-1728));
      String string1 = RandomStringUtils.randomAscii(4);
      assertEquals("2222", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, 6, 6, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 20, 56319, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 39;
      // Undeclared exception!
      RandomStringUtils.random(40, (-3053), 39, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(54);
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = ']';
      MockRandom mockRandom1 = new MockRandom(0L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(46211, 0, (-1331), true, false, charArray0, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "Requested random string length ");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(202);
      assertEquals("                                                                                                                                                                                                          ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Random.setNextRandom(1);
      String string2 = RandomStringUtils.randomAscii(1);
      assertEquals("!", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.random(1, (-626), 942, true, true);
      assertEquals("\uFD8F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-626), (-1), 168, true, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -626 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 3626;
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[2] = '|';
      charArray0[3] = '\'';
      charArray0[4] = '5';
      charArray0[5] = 'r';
      charArray0[6] = '5';
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 3626, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      charArray0[2] = 'q';
      charArray0[3] = '{';
      charArray0[4] = '(';
      charArray0[5] = 'C';
      charArray0[6] = '.';
      charArray0[7] = '7';
      charArray0[8] = '*';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(29, 1, 29, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'<', 'B', 'q', '{', '(', 'C', '.', '7', '*'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(202);
      assertEquals("                                                                                                                                                                                                          ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Random.setNextRandom(1);
      String string2 = RandomStringUtils.random(1, "Requested random string length ");
      assertEquals("e", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 3626;
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[2] = '|';
      charArray0[3] = '\'';
      charArray0[4] = '5';
      charArray0[5] = 'r';
      charArray0[6] = '5';
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 3626, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DoubleStream doubleStream0 = mockRandom0.doubles(3160L);
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 0, 2, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'v';
      char char0 = '\'';
      charArray0[2] = '\'';
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'n', 'v', '\''}, charArray0);
      assertEquals(3, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints((long) 57343);
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(0, 57343, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'n', 'v', '\''}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '1';
      charArray0[2] = '!';
      String string0 = RandomStringUtils.random(0, 57343, 56320, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'>', '1', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(0, (-78), (-1), false, false, (char[]) null, (java.util.Random) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4487), (-5131), 4988, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4487 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, 57343, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'v';
      charArray0[2] = '\'';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 57343);
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(0, 57343, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'n', 'v', '\''}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, Integer.MAX_VALUE, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57344, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = 'C';
      charArray0[5] = '1';
      charArray0[6] = '1';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(139, 139, 35, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-2794);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2794 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0, 3461L);
      assertNotNull(longStream0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 56319;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3714), 56319, 56319, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3714 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'm';
      String string0 = RandomStringUtils.random(2022, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', 'm'}, charArray0);
      assertEquals(2, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(3160L);
      assertNotNull(doubleStream0);
      
      String string1 = RandomStringUtils.random(0, 2248, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'l', 'm'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2513 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(56319);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1500;
      String string0 = RandomStringUtils.random(1500, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1500);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'c';
      charArray0[3] = 'G';
      charArray0[4] = 'y';
      charArray0[5] = '|';
      charArray0[6] = '_';
      charArray0[7] = 'l';
      charArray0[8] = '0';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3156), (-2417), (-2417), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3156 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'l';
      charArray0[2] = '';
      charArray0[3] = 'N';
      charArray0[4] = '<';
      charArray0[5] = '\'';
      charArray0[6] = 'h';
      charArray0[7] = '}';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-555), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -555 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = ',';
      charArray0[2] = '!';
      charArray0[3] = 'Z';
      charArray0[4] = 'i';
      charArray0[5] = '~';
      RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      int int1 = (-641);
      boolean boolean1 = true;
      RandomStringUtils.random(0, (-641), (-641), true, true);
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -910 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = (-2737);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2737 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils.randomAscii(128);
      String string0 = RandomStringUtils.randomAscii(202);
      assertEquals("                                                                                                                                                                                                          ", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(1635);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1635, 1635, 1635, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.random(1);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = (-209);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -209 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-1344);
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'q';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1344), (-1344), (-1344), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1344 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'v';
      charArray0[2] = '\'';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 57343);
      RandomStringUtils.random(0, 57343, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      RandomStringUtils.randomAlphabetic(0);
      String string0 = RandomStringUtils.random(0, (-5131), 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-2268);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2268), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2268 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      charArray0[2] = 'v';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      charArray0[5] = 'Z';
      charArray0[6] = 'n';
      charArray0[7] = 'J';
      charArray0[8] = '6';
      MockRandom mockRandom0 = new MockRandom(0);
      RandomStringUtils.random(0, (-2520), 0, true, false, charArray0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(2206, 1855, 123, true, true);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '!';
      charArray0[2] = 'Z';
      charArray0[3] = '1';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-1288);
      int int1 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(56320, (-1288), (-1), true, false);
  }
}
