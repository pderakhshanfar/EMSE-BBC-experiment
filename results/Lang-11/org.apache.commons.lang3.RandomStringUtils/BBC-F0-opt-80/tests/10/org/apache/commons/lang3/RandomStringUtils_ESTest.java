/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:29:13 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(236);
      RandomStringUtils.randomAlphabetic(1350);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      RandomStringUtils.random(0, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.random(691, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.random(0, "Tm`y?.uoCj,G");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      RandomStringUtils.random(0, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(0, 0, 1640, true, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.random(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -746 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1338 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(128, true, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1510), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1510 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "w4");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(18, 752, 0, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2874, 2874, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-1735));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1364, (-1735), (-1735), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(3350, 0, 56192, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1375), (-892), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 665, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(75, 0, 75, false, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-295), (-295), (-295), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -295 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 3350, 3350, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Random.setNextRandom(56320);
      // Undeclared exception!
      RandomStringUtils.random(1505);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -46 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1735), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1735 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1364);
      String string0 = RandomStringUtils.random(691, 1364, 691, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554\u0554", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(36354, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(36354, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(184, 0, (-612), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 3228, 0, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(0);
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(29, 554, (-4442), false, false);
      assertEquals("\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A\u022A", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(521, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(75, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(37366, 56319, 37393, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2923, 55296, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(41, (-46), 1105, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2\uFFD2", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(7, 57343, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[9];
      charArray0[6] = '3';
      String string0 = RandomStringUtils.random(6, 6, (-905), false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("333333", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(42);
      String string0 = RandomStringUtils.randomAlphanumeric(42);
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1361, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(10, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -358 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1505);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(42);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(521, 3350, 1, false, false, (char[]) null);
      assertEquals("\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16\u0D16", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
