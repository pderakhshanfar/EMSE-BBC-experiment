/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:01:47 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(188, 0, (-607), false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(5782);
      String string0 = RandomStringUtils.randomAlphanumeric(32);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1433);
      String string0 = RandomStringUtils.randomAlphabetic(3);
      assertEquals("ddd", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(326, 1532, 326, false, false, (char[]) null);
      assertEquals("\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC\u05FC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 55296, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(641, 641, 55296, false, false);
      assertEquals("\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281\u0281", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1512);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(743);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(36335);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1663 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2182 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(55314, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1119, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "\"n^0qbtd[yTZUV");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1512, 25, 1512, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2829));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(164, (-2829), 6, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom((-2760L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1012, 1012, 1012, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-148), 0, 1357, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -148 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1184, 1184, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(34, 2413, 2413, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-583), (-583), 0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -583 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2947, 2947, 2947, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2829 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(188, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1512, 56319, (-1077), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '7';
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(123, 0, 3763, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '7', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(8, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(123, 0, 3763, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-17), (-17), 1532, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -17 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1194), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4157, 56320, 4157, false, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2829), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2829 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1371, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56319);
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(4173, 56191, 4173, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1512, (-2829), 1512, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(11, 57343, 2259, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-18));
      String string0 = RandomStringUtils.randomNumeric(16);
      assertEquals("2222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3509);
      String string0 = RandomStringUtils.random(3509, 3509, (-4136), true, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1950), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1950 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1817L);
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1003, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(435, (-968), 15, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "F?G/'n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(32);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, (-1), 26, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3);
      assertEquals("   ", string0);
  }
}
