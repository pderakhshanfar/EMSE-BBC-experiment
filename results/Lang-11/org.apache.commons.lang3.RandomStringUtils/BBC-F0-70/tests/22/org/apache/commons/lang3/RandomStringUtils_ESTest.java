/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:51:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1084);
      assertNotNull(string0);
      
      Random.setNextRandom(1084);
      String string1 = RandomStringUtils.randomAlphabetic(1924);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1203);
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(1203, 1988, 1, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1203, (-2011), 1203, false, false, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 18;
      int int1 = 57343;
      int int2 = 1674;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 516, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-1944);
      int int1 = mockRandom0.nextInt(53);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 1674, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = 56181;
      int int1 = (-2608);
      MockRandom mockRandom1 = new MockRandom((-2608));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(0);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(56181, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(21);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      String string2 = RandomStringUtils.random(22, 56320, (-2864), false, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string2);
      
      int int0 = 5;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(136, (-2577), 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF\uF5EF", string0);
      
      Random.setNextRandom(3752);
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      
      String string1 = RandomStringUtils.randomAlphanumeric(136);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string1);
      
      String string2 = RandomStringUtils.randomNumeric(136);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(136, (-2547), 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D\uF60D", string0);
      
      Random.setNextRandom(3752);
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      
      String string1 = RandomStringUtils.random(136);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9\u0EA9", string1);
      
      String string2 = RandomStringUtils.randomNumeric(15);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("666666666666666", string2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 46202;
      // Undeclared exception!
      RandomStringUtils.random(46202, ",$GzM,@~DM#)|2");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string0 = RandomStringUtils.random(11, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1125;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int1 = (-2542);
      int int2 = 55296;
      int int3 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1125, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(25, 56192, 1125, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(316L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(5332, 72, 13, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 5;
      String string0 = RandomStringUtils.random(0, 5, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(5, (-3092), (-1), false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uF3EC\uF3EC\uF3EC\uF3EC\uF3EC", string1);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3541, (-1978), 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1125;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'o';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = 'o';
      // Undeclared exception!
      RandomStringUtils.random(1125, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'o';
      charArray0[2] = '^';
      charArray0[3] = '6';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) 1143, 1453.704809);
      assertNotNull(doubleStream0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1797 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      String string0 = RandomStringUtils.random(1, 1, (-1), false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'1', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("1", string0);
      
      String string1 = RandomStringUtils.random(1, 1, 7, true, true, charArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'1', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("1", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(21);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(2712, (-994), 1, true, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom((-1227L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 1, 789, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(2712, (-451), Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) Integer.MAX_VALUE, (double) 2712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(2712, 2712, 1, true, true);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = 'p';
      String string1 = RandomStringUtils.random(1, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'4', '<', '%', 'p'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("4", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(156);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                            ", string0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(855, 156, 156, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      charArray1[1] = '6';
      charArray1[2] = 'z';
      charArray1[3] = 'P';
      charArray1[4] = 'o';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4229, 1981, 1981, false, true, charArray1, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, (-2864), false, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, 0, 1490, false, false);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(156);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                            ", string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, (-616), 127, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-981));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -981 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 2630, 1, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(1, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(0, "\u0000");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'G';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      charArray0[5] = '(';
      charArray0[6] = 'A';
      charArray0[7] = 'Q';
      charArray0[8] = 'b';
      String string4 = RandomStringUtils.random(2630, charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new char[] {'U', 'G', 'q', 'j', '\u0000', '(', 'A', 'Q', 'b'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2925;
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(1945, 0, 2925, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 902;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(902);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4668), "%CW-:&?|[YPW1;o%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4668 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 3454;
      String string0 = RandomStringUtils.random(3454, "|iDL}2");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3454);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(2712, (-994), 1, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'K';
      charArray0[2] = 'B';
      charArray0[3] = 'e';
      charArray0[4] = 'p';
      charArray0[5] = ']';
      charArray0[6] = '_';
      charArray0[7] = ',';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2837), (-88), 1, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2837 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 1125;
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'o';
      charArray0[2] = 'P';
      charArray0[3] = '6';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1125, 0, 2127, false, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {',', 'o', 'P', '6'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int2 = (-99);
      // Undeclared exception!
      try { 
        mockRandom0.doubles(2122.8763749155, (-2602.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'G';
      charArray0[2] = 'e';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)42;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3147, (-715), (-409), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1533);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1533 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-2552);
      int int1 = 1;
      String string0 = RandomStringUtils.random(0, (-2552), 1, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(1, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.random(0, "\u0000");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'G';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      charArray0[4] = ',';
      charArray0[5] = '(';
      charArray0[6] = 'I';
      charArray0[7] = 'Q';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2552), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2552 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 128;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2423 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 56192;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(56192, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      int int1 = 56320;
      boolean boolean0 = false;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, 56320, 56320, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int2 = 0;
      String string1 = "";
      String string2 = RandomStringUtils.random(0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int3 = 57343;
      int int4 = (-2487);
      boolean boolean1 = true;
      boolean boolean2 = false;
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, (-2487), true, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'F';
      charArray0[2] = 'U';
      charArray0[3] = 'Z';
      charArray0[4] = '1';
      charArray0[5] = 'L';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'_', 'F', 'U', 'Z', '1', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = 5306;
      String string4 = RandomStringUtils.randomAscii(5306);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5306, 5306, 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(571);
      assertNotNull(string0);
      assertEqualsstring0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'Q';
      charArray0[4] = 'U';
      charArray0[5] = '`';
      charArray0[6] = '2';
      charArray0[7] = 'c';
      charArray0[8] = 'X';
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 571, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'G';
      charArray0[3] = '#';
      charArray0[4] = 'p';
      charArray0[5] = '7';
      charArray0[6] = '&';
      charArray0[7] = 'N';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\\', '\\', 'G', '#', 'p', '7', '&', 'N'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(3631);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = '?';
      charArray0[4] = 'U';
      charArray0[5] = 'G';
      charArray0[6] = 'j';
      charArray0[7] = '9';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-643), 3631, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-849);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-849), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -849 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 0;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      mockRandom0.setSeed((-1946L));
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, false, false);
      int int0 = 2398;
      // Undeclared exception!
      RandomStringUtils.random(1550, 1550, 2398, false, true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 380;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(380);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '1';
      charArray0[2] = '/';
      charArray0[3] = '%';
      charArray0[4] = 'v';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-2633);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2633 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(1563, false, false);
      int int0 = 1086;
      // Undeclared exception!
      RandomStringUtils.random(1086, true, true);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }
}
