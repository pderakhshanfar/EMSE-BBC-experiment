/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:00:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(41, 56191, 41, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      MockRandom mockRandom1 = new MockRandom(809);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(36, 56191, 36, false, false, (char[]) null, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0, 127);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 809, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(1849, 0, 0, false, true, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(1849, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      String string1 = RandomStringUtils.random(1859, 0, 0, false, false, (char[]) null, (Random) mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 22;
      org.evosuite.runtime.Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomNumeric(22);
      assertEquals("6666666666666666666666", string0);
      assertNotNull(string0);
      
      int int1 = 28;
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(28, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016", string1);
      assertNotNull(string1);
      
      org.evosuite.runtime.Random.setNextRandom(28);
      int int2 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(4118);
      String string0 = RandomStringUtils.randomAlphanumeric(4118);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4738), "#UIoK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4738 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3002);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(46);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                              ", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(3002);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(855, 56320, 20, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(27);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                           ", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '0';
      MockRandom mockRandom0 = new MockRandom(27);
      assertNotNull(mockRandom0);
      
      String string4 = RandomStringUtils.random(27, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("222222222222222222222222222", string4);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'2', '0'}, charArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(27);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                           ", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '0';
      MockRandom mockRandom0 = new MockRandom(27);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(27, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = 614;
      IntStream intStream0 = mockRandom0.ints(1080L);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(45310, "F");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '\'';
      charArray0[2] = 'Q';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(1080L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(614, (-1208), (-6645), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48\uFB48", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(614);
      String string1 = RandomStringUtils.randomAlphabetic(614);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 56228;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56228);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(844);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56194, (-1618), 844, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1324);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2391, 2391, 1324, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'a';
      charArray0[2] = '7';
      charArray0[3] = 'i';
      charArray0[4] = 'M';
      charArray0[5] = '$';
      charArray0[6] = 'J';
      charArray0[7] = 'u';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 55296, (-2298), true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(1080L);
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(614, (-1177), (-6629), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67\uFB67", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(450);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1177), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1177 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'C';
      charArray0[2] = ':';
      charArray0[3] = 'h';
      charArray0[4] = 'I';
      String string0 = RandomStringUtils.random(2227, 0, (-1), true, false, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', 'C', ':', 'h', 'I'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1699, 1699, (-39), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(1174, 452, 28, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(753, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(909, 452, 17, false, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -18 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-769L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'H';
      charArray0[2] = '-';
      charArray0[3] = 'a';
      charArray0[4] = 'q';
      charArray0[5] = 'a';
      charArray0[6] = 'q';
      charArray0[7] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3689, 3689, (-1), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(288, 288, 1699, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1174, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'G';
      charArray0[2] = '\"';
      charArray0[3] = '1';
      charArray0[4] = '!';
      charArray0[5] = 'j';
      charArray0[6] = 'q';
      charArray0[7] = 'a';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 839;
      String string0 = RandomStringUtils.random(839);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      int int1 = 44;
      // Undeclared exception!
      RandomStringUtils.random(839, 44, (-1949), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      String string0 = RandomStringUtils.random(127, charArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertNotNull(string0);
      
      int int1 = 9;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(9, 127, 127, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(684, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2096;
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, 0, 2096, false, true, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(207, 0, 2096, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -309 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, true, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = ')';
      charArray0[2] = 'C';
      charArray0[3] = ')';
      charArray0[4] = 'U';
      charArray0[5] = 'F';
      charArray0[6] = ' ';
      charArray0[7] = 'A';
      charArray0[8] = '@';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-1114), 0);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string2 = RandomStringUtils.random(0, 1330, (-1114), false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'V', ')', 'C', ')', 'U', 'F', ' ', 'A', '@'}, charArray0);
      assertNotNull(string2);
      
      int int0 = (-2561);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2561), 1330, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2561 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1183);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1183 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-1480);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1480), "|D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1480 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = (-1884);
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'z';
      charArray0[2] = 'T';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1884), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1884 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-4362);
      int int1 = 0;
      int int2 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4362), 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4362 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 3790;
      String string0 = " is less than 0.";
      String string1 = RandomStringUtils.random(3790, " is less than 0.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = (-1159);
      int int2 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(3790, (-1159), 0, false, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 354;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(354);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '~';
      charArray0[2] = '0';
      String string0 = RandomStringUtils.random(559, charArray0);
      assertEqualsstring0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', '~', '0'}, charArray0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.random(0, false, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-2916);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(559, (-2916), 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = 56192;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(56192, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-1119);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1119), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1119 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(302);
      assertEquals("                                                                                                                                                                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(302);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(302, false, false);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(839);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(302, 839, (-2714), false, false, (char[]) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347\u0347", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(302);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3989;
      boolean boolean0 = true;
      char[] charArray0 = null;
      RandomStringUtils.random(0, (-1), 3989, true, true, (char[]) null);
      RandomStringUtils.random(349);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.random(349, (char[]) null);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-808);
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 't';
      charArray0[2] = 'w';
      charArray0[3] = 'X';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-808), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -808 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1232;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1232, 1232, 1232, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2891), 491, (-2891), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2891 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-2644);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.randomAscii(1);
      int int0 = (-1011);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1011));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1011 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'Y';
      charArray0[2] = '^';
      charArray0[3] = '}';
      charArray0[4] = '@';
      charArray0[5] = '`';
      charArray0[6] = '#';
      MockRandom mockRandom0 = new MockRandom(0);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      RandomStringUtils.random(127, charArray0);
      int int1 = 0;
      boolean boolean0 = true;
      RandomStringUtils.random(0, 127, 127, true, true, charArray0);
      int int2 = 0;
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAscii(123);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      RandomStringUtils.random(0, charArray0);
      int int1 = 127;
      RandomStringUtils.randomAscii(127);
      // Undeclared exception!
      RandomStringUtils.random(127, true, false);
  }
}
