/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:52:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(100, 0, (-1), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1927);
      String string0 = RandomStringUtils.randomNumeric(2741);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1066);
      String string0 = RandomStringUtils.randomAlphanumeric(14);
      assertEquals("aaaaaaaaaaaaaa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(6971);
      String string0 = RandomStringUtils.randomAlphabetic(18);
      assertEquals("WWWWWWWWWWWWWWWWWW", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(11, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(6971, "VM%u4z");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "WWWWWWWWWWWWWWWWWW");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      String string0 = RandomStringUtils.random(7, 0, Integer.MAX_VALUE, true, true, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Q', '\u0000'}, charArray0);
      assertEquals("QQQQQQQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(2100, 57343, 55296, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 1, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -508 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -732 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2000), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2000 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3054, 4881, (-767), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-1014));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1905, (-1014), (-1014), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(760, 0, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-29), (-29), 2245, false, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -29 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2471, (-3413), 1949, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 17, 17, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1035), (-1035), (-1035), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1035 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 56191, 56191, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -37 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(1927, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2748L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3054, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2748L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3054, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2748L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3095, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2748L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(15, true, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2014), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2014 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-430), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -430 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 56191, 2052, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2137L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3053, 55296, 3053, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(299, 57343, 299, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(990, 3054, (-1), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE\u0BEE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(15, (-378), (-2984), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86\uFE86", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(29, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(239, 56192, 57343, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "FRol");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-544L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-902), (-483), (-902), true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -902 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3054);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1905);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2245);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(18);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 2245, false, true, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1905);
      assertNotNull(string0);
  }
}
