/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:41:58 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1023;
      Random.setNextRandom(1023);
      String string0 = RandomStringUtils.randomNumeric(1023);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1023);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1023);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(980L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int1 = 32;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(127, 55296, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(243);
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      mockRandom0.setSeed((-27L));
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-1480), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2924, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2949, 57343, 1461, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(2924, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1549), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1549 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(28, 55296, 2924, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4077);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(2924, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2924, 57343, 1456, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string0 = RandomStringUtils.random(2924, (-960), (int) (byte) (-108), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      Random.setNextRandom(2421);
      String string1 = RandomStringUtils.random(28, (int) (byte) (-108), (-960), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261\u0261", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(25);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWW", string2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2924;
      String string0 = RandomStringUtils.random(1, 1, 2924, false, false);
      assertNotNull(string0);
      assertEquals("\u0001", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56355, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 2960, 2924, false, false);
      assertNotNull(string0);
      assertEquals("\u0B90", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-4161), false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[3] = (byte) (-108);
      MockRandom mockRandom1 = new MockRandom((byte)0);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom0.ints(1273L, (int) (byte)0, (int) (byte)15);
      assertNotNull(intStream0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      int int0 = mockRandom0.nextInt(3);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0, int0);
      
      int int1 = 0;
      boolean boolean0 = true;
      double double0 = mockRandom0.nextGaussian();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(0, (-4001), 56191, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(3, (int) (byte)0, (int) (byte)0, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'W';
      charArray0[3] = '8';
      charArray0[4] = 'Z';
      charArray0[5] = 'M';
      charArray0[6] = '6';
      charArray0[7] = '\'';
      charArray0[8] = 'E';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 0, 478, true, true, charArray1, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2520));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(2924, (int) (byte)0, (-1), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(566, 0, 47830, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-36);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = RandomStringUtils.random(2924, (-960), (int) (byte)0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2881;
      String string0 = RandomStringUtils.random(1, 2938, 2881, false, false);
      assertNotNull(string0);
      assertEquals("\u0B7A", string0);
      
      String string1 = RandomStringUtils.random(1, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      int int1 = 56355;
      String string2 = RandomStringUtils.random(2938, 56355, 1, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      RandomStringUtils.random(56355);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-915);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -915 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46239, (-536), 46228, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'M';
      charArray0[2] = 'B';
      charArray0[3] = '$';
      charArray0[4] = 'k';
      charArray0[5] = 'M';
      charArray0[6] = '$';
      String string0 = RandomStringUtils.random(2938, (int) (byte)0, 2938, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'W', 'M', 'B', '$', 'k', 'M', '$'}, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      
      String string1 = RandomStringUtils.random((int) (byte)15);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      int int1 = 55296;
      int int2 = 2924;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 2924, false, false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 2938, 2924, false, false);
      assertNotNull(string0);
      assertEquals("\u0B7A", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      int int0 = 56355;
      String string2 = RandomStringUtils.random(2938, 56355, 1, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      RandomStringUtils.random(56355);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-2520), 2924, false, false);
      assertNotNull(string0);
      assertEquals("\uF628", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '0';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'I';
      charArray0[5] = '&';
      charArray0[6] = 'O';
      charArray0[7] = 'F';
      charArray0[8] = 'u';
      MockRandom mockRandom0 = new MockRandom(1627L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1538, (-2520), 3);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt(3);
      assertEquals(0, int0);
      
      String string2 = RandomStringUtils.random(1, 1, 1538, false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'P', '0', '>', 'j', 'I', '&', 'O', 'F', 'u'}, charArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, charArray0.length);
      assertEquals("0", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4583, 123, 17, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2889 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'W';
      charArray0[0] = 'W';
      charArray0[1] = '%';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'W', '%'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'N';
      charArray0[2] = '?';
      charArray0[3] = 'g';
      String string0 = RandomStringUtils.random(35, charArray0);
      assertArrayEquals(new char[] {'`', 'N', '?', 'g'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("```````````````````````````````````", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 35, 1, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-2520);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2924, 2924, 2924, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2640);
      assertNotNull(string0);
      
      int int0 = 879;
      int int1 = (-128);
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int2 = 37;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(31, 37, 37, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '3';
      String string0 = RandomStringUtils.random(678, charArray0);
      assertArrayEquals(new char[] {'>', '3'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEqualsstring0);
      
      String string1 = RandomStringUtils.random
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(678);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      int int1 = 34;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(34, (-3454), 34, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-3821);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3821), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3821 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-1602);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1602), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1602 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '%';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'d', '%'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(667, charArray0);
      assertArrayEquals(new char[] {'d', '%'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2640;
      String string0 = RandomStringUtils.randomAscii(2640);
      assertNotNull(string0);
      
      int int1 = 879;
      int int2 = (-128);
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'g';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 879);
      assertNotNull(longStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2640, 879, (-128), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = '$';
      charArray0[2] = '\"';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'d', '$', '\"'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'W';
      charArray0[3] = '8';
      charArray0[4] = 'Z';
      charArray0[5] = 'M';
      charArray0[6] = '6';
      charArray0[7] = '\'';
      charArray0[8] = 'E';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 678;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(678, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2208;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2208);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-3804);
      int int1 = 0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[0];
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3804), (-3804), 0, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3804 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 123;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'K';
      charArray0[2] = 'b';
      charArray0[3] = 'f';
      charArray0[4] = 'k';
      charArray0[5] = 'z';
      charArray0[6] = '{';
      charArray0[7] = '<';
      String string2 = RandomStringUtils.random(0, 774, 123, true, true, charArray0);
      assertArrayEquals(new char[] {'<', 'K', 'b', 'f', 'k', 'z', '{', '<'}, charArray0);
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.random(2208, false, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 897;
      String string0 = RandomStringUtils.random(897, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '0';
      charArray0[2] = '_';
      charArray0[3] = 'm';
      RandomStringUtils.random(897, 1, 0, false, true, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3358 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'A';
      charArray0[2] = 'E';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3072), 0, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3072 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2155);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1341), 0, (-2155), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1341 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '\'';
      charArray0[2] = 's';
      charArray0[3] = '2';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'=', '\'', 's', '2'}, charArray0);
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 'D';
      charArray0[2] = '<';
      charArray0[3] = 'I';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(301, 301, 301, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 3460;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '\"';
      String string1 = RandomStringUtils.random(0, 3460, 0, false, true, charArray0);
      assertArrayEquals(new char[] {'H', '\"'}, charArray0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      
      int int2 = 1360;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1360);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-2520), 2924, false, false);
      assertNotNull(string0);
      assertEquals("\uF628", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-4666);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4666), "X/>!QNjY]z3sSe~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4666 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1274 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1447);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-605);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -605 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, true, true);
      int int1 = 0;
      RandomStringUtils.random(0, (char[]) null);
      // Undeclared exception!
      RandomStringUtils.random(56320, "org.apache.commons.lang3.RandomStringUtils");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'r';
      charArray0[2] = '_';
      charArray0[3] = '-';
      charArray0[4] = 't';
      charArray0[5] = '[';
      charArray0[6] = '2';
      charArray0[7] = '}';
      MockRandom mockRandom0 = new MockRandom(3583L);
      String string0 = RandomStringUtils.random(0, (-1), (-1), true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.randomAscii(0);
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, (-472), false, true);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      RandomStringUtils.random(0, false, false);
      int int1 = (-4881);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4881 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
