/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:50:35 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(56267, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '0';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      charArray0[4] = '\'';
      charArray0[5] = '<';
      charArray0[6] = 'R';
      String string0 = RandomStringUtils.random(228, charArray0);
      assertArrayEquals(new char[] {'6', '0', 'N', '#', '\'', '<', 'R'}, charArray0);
      assertEquals("666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(228);
      String string1 = RandomStringUtils.randomAlphanumeric(32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(405, 56189, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = 55296;
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = 56189;
      // Undeclared exception!
      RandomStringUtils.random(56189, 56189, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(56208);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(56208, 56208, 0, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 34;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      DoubleStream doubleStream0 = mockRandom2.doubles();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1663, 56320, 34, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(614);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(614);
      String string1 = RandomStringUtils.randomAlphabetic(614);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string1);
      assertNotNull(string1);
      
      int int0 = 41;
      String string2 = RandomStringUtils.random(41, "dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ddddddddddddddddddddddddddddddddddddddddd", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(41);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(614);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(34);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      
      int int2 = 55296;
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '^';
      charArray0[2] = '-';
      charArray0[3] = ',';
      charArray0[4] = 'j';
      charArray0[5] = 'z';
      charArray0[6] = 'q';
      charArray0[7] = 'L';
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 1, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(34);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int2 = 0;
      char[] charArray0 = new char[5];
      IntStream intStream0 = mockRandom0.ints();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(intStream0);
      assertNotSame(mockRandom0, mockRandom1);
      
      charArray0[0] = '*';
      charArray0[1] = 'H';
      charArray0[2] = '_';
      charArray0[3] = ']';
      charArray0[4] = '2';
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(34);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      DoubleStream doubleStream0 = mockRandom2.doubles();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      String string0 = RandomStringUtils.random(1688, 56320, 34, false, false, (char[]) null, (Random) mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(23);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(34);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = false;
      int int2 = (-1019);
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(34);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 56192, 5, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(46);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(46);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = null;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 541;
      MockRandom mockRandom0 = new MockRandom(18);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(18, 18, (-2848), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 18;
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = ')';
      charArray0[2] = 'O';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(18, 0, (-1), false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(71);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      int int0 = 2622;
      int int1 = 47;
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = ';';
      charArray0[4] = 'a';
      charArray0[5] = '<';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(8, 47, 71, false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '=';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) ':', (int) '=', (int) '=', false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      String string0 = RandomStringUtils.random(2, (-839), (-1), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFCBC\uFCBC", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(123);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1095);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 39;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1095, 0, 39, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1, 690, 2498, true, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u02B2", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-374);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(2907);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2856;
      String string0 = RandomStringUtils.randomAscii(2856);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      char char0 = '9';
      charArray0[0] = '9';
      charArray0[1] = 'h';
      String string1 = RandomStringUtils.random(2856, charArray0);
      assertArrayEquals(new char[] {'9', 'h'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertNotNull(string1);
      
      org.evosuite.runtime.Random.setNextRandom(1075);
      // Undeclared exception!
      RandomStringUtils.random(45331, charArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, "ah_3[0v;gw5qKEn");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      String string1 = RandomStringUtils.random((int) 'u', charArray0);
      assertArrayEquals(new char[] {'u', '', 'u', 'u', 'M', '\u0000', 'M', 'M'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string1);
      assertEquals(8, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1095, "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'X';
      charArray0[2] = 'D';
      int int0 = 4197;
      String string0 = RandomStringUtils.random(4197, charArray0);
      assertArrayEquals(new char[] {'Z', 'X', 'D', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4197, 1, 1, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      String string3 = RandomStringUtils.random(0, (-477), (-1133), false, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("", string3);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-477), "The chars array must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -477 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'd';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      String string0 = RandomStringUtils.random(2000, 2, 1, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {':', 'd', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(123);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom((-153L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      mockRandom0.setSeed((-153L));
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1172 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1564;
      int int1 = 56320;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1564, 1564, 56320, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 49;
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(49, true, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'o';
      charArray0[2] = 'c';
      charArray0[3] = 'o';
      charArray0[4] = '\'';
      charArray0[5] = '<';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 0, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '`';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'7', '`'}, charArray0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = 'a';
      charArray0[4] = 'g';
      charArray0[5] = '%';
      charArray0[6] = '[';
      charArray0[7] = '^';
      charArray0[8] = 'M';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints(632, 2155);
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(0, 552, 0, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'|', 'G', 'h', 'a', 'g', '%', '[', '^', 'M'}, charArray0);
      assertEquals("", string1);
      assertEquals(9, charArray0.length);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1430), 0, 2545, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1430 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1013;
      String string0 = RandomStringUtils.randomAscii(1013);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '7';
      charArray0[2] = '[';
      charArray0[3] = 'v';
      charArray0[4] = '\'';
      charArray0[5] = '(';
      charArray0[6] = ')';
      String string1 = RandomStringUtils.random(1013, charArray0);
      assertArrayEquals(new char[] {'I', '7', '[', 'v', '\'', '(', ')'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charArray0.length);
      assertNotNull(string1);
      
      int int1 = (-357);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-357), string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -357 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'o';
      charArray0[2] = 'w';
      charArray0[3] = '?';
      charArray0[4] = '#';
      charArray0[5] = 'Q';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1445), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1445 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1510);
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1510), (-1510), (-1510), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1510 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1050);
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      charArray0[4] = '-';
      charArray0[5] = '1';
      charArray0[6] = 'S';
      charArray0[7] = '^';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3162, 3162, (-1050), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '#';
      charArray0[2] = '4';
      charArray0[3] = 'a';
      charArray0[4] = '#';
      charArray0[5] = '0';
      MockRandom mockRandom0 = new MockRandom((-4659L));
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, 0, 1219, false, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'~', '#', '4', 'a', '#', '0'}, charArray0);
      assertEquals("", string2);
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-392), (-392), 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -392 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, "");
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.randomAscii(0);
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(275, 275, 275, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(1, false, false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'd';
      charArray0[2] = '*';
      charArray0[3] = '&';
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'/', 'd', '*', '&'}, charArray0);
      assertEquals("", string1);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'/', 'd', '*', '&'}, charArray0);
      assertEquals("", string2);
      assertEquals(4, charArray0.length);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "l*=ZT*_1<hGOaI*A");
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, false, false);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(0, 0, (-3329), false, false);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils.randomAscii(2300);
      boolean boolean0 = false;
      boolean boolean1 = false;
      RandomStringUtils.random(2300, false, false);
      int int0 = 0;
      RandomStringUtils.randomAscii(0);
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(2300, 0, 0, false, true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.random(2515);
      int int0 = (-3821);
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.ints();
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        mockRandom0.longs(1L, (-1403L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1549);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1549), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1549 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-3579);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3579), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3579 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils.random(0, 4452, 4452, true, true);
      int int0 = (-1537);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1537 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1201;
      boolean boolean0 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'm';
      charArray0[2] = '\"';
      charArray0[3] = 'V';
      charArray0[4] = 'v';
      charArray0[5] = '7';
      charArray0[6] = '3';
      charArray0[7] = 's';
      charArray0[8] = 'c';
      RandomStringUtils.random(1201, 0, 1201, true, true, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1201);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'X';
      charArray0[2] = 'D';
      charArray0[3] = '{';
      charArray0[4] = 'E';
      charArray0[5] = '=';
      charArray0[6] = '.';
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextGaussian();
      mockRandom0.nextFloat();
      mockRandom0.nextInt();
      RandomStringUtils.random(1, (-1), (-374), true, false, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -422 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, "");
      // Undeclared exception!
      RandomStringUtils.randomNumeric(653);
  }
}
