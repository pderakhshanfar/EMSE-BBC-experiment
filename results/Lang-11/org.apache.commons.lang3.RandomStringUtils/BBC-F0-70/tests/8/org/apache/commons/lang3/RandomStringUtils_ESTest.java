/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:38:11 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2067, 0, (-218), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomAlphanumeric(3);
      assertEquals("666", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-1874));
      String string0 = RandomStringUtils.randomAlphabetic(2469);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, (-960), 3856, true, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1668, Integer.MAX_VALUE, (-867), false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -962 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -647 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(308);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1129 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-824), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -824 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1554, true, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2084, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, (-1352), (-1352), false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 2610, 0, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(414, (-1), (-1), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(39, 0, 2715, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-155), (-155), (-155), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -155 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1291, (-1), 2454, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 880, 880, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-141), 291, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(599, 599, 599, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55296);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(643, 55296, (-3693), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(346, (-3887), 116, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(616, 0, 2012, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string0);
      assertArrayEquals(new char[] {'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-19L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      charArray0[2] = '4';
      String string0 = RandomStringUtils.random(1, 1, (-6), false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("4", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '4', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(346, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(616, 0, 2012, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, 1, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(865, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (String) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(5, 56319, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1986, 56320, 402, false, false, (char[]) null, (java.util.Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(127, string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2555, 56323, 2555, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomNumeric(16);
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(402, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 0, 2610, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(346, "\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1");
      assertEquals("\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1\uF0D1", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(16);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(2661);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3638 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(627, 627, (-1038), true, true, (char[]) null);
      assertEquals("\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273\u0273", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
