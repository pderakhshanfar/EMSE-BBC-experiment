/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:16:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(804, 0, (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(1222);
      String string0 = RandomStringUtils.randomAlphanumeric(1222);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1207, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1222, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "'Jz");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, (-3787), true, false, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(2551);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2329);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1558 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2087);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2580 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3274 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56337, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1059), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1059 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-662), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -662 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 947, 57343, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, 57343, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, (-2606), 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1144), 46364, 46355, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1144 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(408, (-559), 2224, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2097, 2097, 2097, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-151), 1, (-151), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -151 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(634, (-847), (-847), true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(817, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-1446), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1878L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(15, 511, 15, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF\u01FF", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 0, 15, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2576), 888, 888, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2576 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom((-4440));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-4440), (-1), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1597, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(725, 3403, 3751, false, false);
      assertEquals("\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B\u0D4B", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2728), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2728 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2952, 56192, (-1429), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(867, 55296, 43, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(127, 57343, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, (-3365), 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF2DB", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      char[] charArray0 = new char[5];
      charArray0[2] = '1';
      String string0 = RandomStringUtils.random(530, 1, 36327, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(123, 33, 37042, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(127);
      String string0 = RandomStringUtils.randomAlphabetic(127);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4, 0, 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(1312, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, 0, 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "3tq|c5i_fs.k, VZ");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1687, 57343, 2551, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3365 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(127);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1, 1, 56320, false, false, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2576));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2576 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
