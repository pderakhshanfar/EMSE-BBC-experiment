/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:02 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean2 = mockRandom0.nextBoolean();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      RandomStringUtils.random(4455, 56175, 4455, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(24);
      assertEquals("888888888888888888888888", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(24);
      assertEquals("888888888888888888888888", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(36216);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      int int1 = 2395;
      String string1 = RandomStringUtils.random(2395, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56189, 56191, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2411, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(2411, (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = false;
      MockRandom mockRandom1 = new MockRandom(2411);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = 56319;
      int int1 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(4785, 56319, 55296, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 3599L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(30, (-2007), (-3385), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A\uF82A", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(453, 453, (-2007), false, false, (char[]) null);
      assertEquals("\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string2 = RandomStringUtils.random(30, "\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6");
      assertEquals("\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6\u01C6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.random(30, 56192, (-3385), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-2174));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2692);
      assertNotNull(string0);
      
      org.evosuite.runtime.Random.setNextRandom(2692);
      String string1 = RandomStringUtils.randomAlphanumeric(2692);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-1265);
      int int1 = 32;
      int int2 = (-2015);
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '/';
      charArray0[2] = 'E';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(2692L, long0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-2658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(2214, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(2214, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 3599L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.random(2214, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'g';
      charArray0[2] = 'T';
      charArray0[3] = '~';
      charArray0[4] = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 56192, true, true, charArray0, (Random) mockRandom0);
      assertEquals("g", string0);
      assertArrayEquals(new char[] {'b', 'g', 'T', '~', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs((-1L), (long) 0);
      assertNotNull(longStream0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = 'S';
      charArray1[2] = 'C';
      charArray1[3] = 'b';
      charArray1[4] = '~';
      charArray1[5] = 'g';
      String string0 = RandomStringUtils.random(0, 3340, 55296, false, false, charArray1, (Random) mockRandom0);
      assertNotSame(charArray1, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'*', 'S', 'C', 'b', '~', 'g'}, charArray1);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3340, 56191, 55296, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(127, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-286), 0L);
      assertNotNull(longStream0);
      
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(2214, (-286), 2214, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      int int0 = 56308;
      int int1 = 1;
      int int2 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, 56308, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs((-1L), (long) 0);
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 986, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, (String) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(862, (-742), 41, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A\uFD1A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(2961, 0, 2961, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1837, 0, 123, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'y', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = ':';
      charArray0[2] = '%';
      charArray0[3] = 'h';
      charArray0[4] = 'W';
      charArray0[5] = 't';
      charArray0[6] = 'M';
      charArray0[7] = '>';
      charArray0[8] = 'S';
      String string0 = RandomStringUtils.random(7, 7, (-617), false, false, charArray0);
      assertEquals(">>>>>>>", string0);
      assertArrayEquals(new char[] {'7', ':', '%', 'h', 'W', 't', 'M', '>', 'S'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '7';
      charArray1[1] = 'M';
      charArray1[2] = 'W';
      charArray1[3] = 'M';
      charArray1[4] = 'S';
      charArray1[5] = 'S';
      charArray1[6] = '7';
      charArray1[7] = 'S';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2262), (-2262), 7, false, false, charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2262 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 25;
      String string0 = RandomStringUtils.random(6693, 6693, 25, true, true);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(16, (-607), (-1), true, true);
      assertEquals("\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1\uFDA1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'j';
      charArray0[2] = '*';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2194), 495, 4, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.random(2961, 0, 2961, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = 'V';
      charArray0[3] = '0';
      charArray0[4] = '8';
      charArray0[5] = '1';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '0';
      charArray1[1] = '8';
      charArray1[2] = 'V';
      charArray1[3] = 'y';
      charArray1[4] = 'y';
      charArray1[5] = 'V';
      charArray1[6] = 'V';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(3300, 0, 3300, false, true, charArray1, (Random) mockRandom0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '8', 'V', 'y', 'y', 'V', 'V'}, charArray1);
      assertEquals(7, charArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 42;
      int int1 = 0;
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[3] = 'Z';
      charArray0[4] = '=';
      charArray0[5] = 'K';
      charArray0[6] = '|';
      charArray0[7] = '<';
      charArray0[8] = 'B';
      // Undeclared exception!
      RandomStringUtils.random(42, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(41, 1, 56320, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-2);
      String string0 = RandomStringUtils.random(0, 0, (-2), false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 42;
      String string2 = RandomStringUtils.random(42, 0, 42, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2150 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(2961, 0, 2961, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = 'V';
      charArray0[3] = 'a';
      charArray0[4] = '8';
      charArray0[5] = '1';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'a';
      charArray1[1] = '8';
      charArray1[2] = 'V';
      charArray1[3] = 'y';
      charArray1[4] = 'y';
      charArray1[5] = 'V';
      charArray1[6] = 'V';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3300, 0, 3300, false, true, charArray1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1);
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 42;
      // Undeclared exception!
      RandomStringUtils.random(42, 0, 42, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 796;
      // Undeclared exception!
      RandomStringUtils.random(796, 0, (-1986), false, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '>';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 4153);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4153, 4153, 4153, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(6693, 6693, 25, true, true);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -890 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(38, 0, 0, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 8, 32, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2534);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'r';
      charArray0[2] = 'v';
      charArray0[3] = 'r';
      charArray0[4] = 'L';
      charArray0[5] = '3';
      charArray0[6] = '3';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2304, 0, 22, false, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(1690, ":");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2534;
      String string0 = RandomStringUtils.randomAscii(2534);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'v';
      charArray0[2] = '\'';
      charArray0[3] = '%';
      charArray0[4] = '}';
      charArray0[5] = 'h';
      String string1 = RandomStringUtils.random(2534, 2534, (-2072), true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2534);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.random(2961, 0, 2961, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = 'V';
      charArray0[3] = 'a';
      charArray0[4] = '8';
      charArray0[5] = '1';
      charArray0[6] = 's';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 2961, 46325, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3198 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(831, 10, 831, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1764L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string2 = RandomStringUtils.random(0, (-1), 39, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 56192, 4235, false, true);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(418, (-1), (-2347), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = '@';
      charArray0[2] = 'j';
      charArray0[3] = 'c';
      charArray0[4] = 'C';
      charArray0[5] = ';';
      charArray0[5] = 'R';
      charArray0[7] = 'Y';
      charArray0[8] = '\"';
      MockRandom mockRandom0 = new MockRandom(2050);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string0 = RandomStringUtils.random((int) 'c', false, false);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 35, 35, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 536, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      int int1 = (-1);
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = 4235;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'C';
      charArray0[2] = 'm';
      charArray0[3] = '(';
      charArray0[4] = '!';
      charArray0[5] = 'Y';
      charArray0[6] = 'Q';
      String string1 = RandomStringUtils.random(0, 0, 1, true, true, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'0', 'C', 'm', '(', '!', 'Y', 'Q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string3);
      assertArrayEquals(new char[] {'0', 'C', 'm', '(', '!', 'Y', 'Q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string3);
      
      int int1 = 0;
      String string4 = RandomStringUtils.random(0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, true, true);
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-252), 1, 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -252 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'L';
      String string0 = RandomStringUtils.random(0, (-1179), 0, false, false, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'K', 'P', 'L'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-626), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -626 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '-';
      charArray0[2] = '1';
      charArray0[3] = '2';
      charArray0[4] = '{';
      charArray0[5] = 'I';
      String string0 = RandomStringUtils.random(0, 1, 56319, false, false, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'R', '-', '1', '2', '{', 'I'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
      
      int int0 = 1310;
      String string1 = RandomStringUtils.random(1310);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = (-2693);
      char[] charArray0 = new char[2];
      char char0 = 's';
      charArray0[0] = 's';
      char char1 = 'h';
      charArray0[1] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2693), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2693 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-5004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5004 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'L';
      charArray0[2] = '#';
      charArray0[3] = 'S';
      charArray0[4] = 'F';
      charArray0[5] = '_';
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'A', 'L', '#', 'S', 'F', '_'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2534);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'v';
      charArray0[2] = '\'';
      charArray0[3] = '%';
      charArray0[4] = '}';
      charArray0[5] = 'h';
      String string1 = RandomStringUtils.random(2534, charArray0);
      assertArrayEquals(new char[] {'r', 'v', '\'', '%', '}', 'h'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(2534, (-1), 0, true, true);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '}';
      charArray0[2] = '_';
      charArray0[3] = 'H';
      charArray0[4] = 'R';
      charArray0[5] = 'i';
      charArray0[6] = '\\';
      charArray0[7] = 'z';
      MockRandom mockRandom0 = new MockRandom((-3383L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 1, 539, false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'0', '}', '_', 'H', 'R', 'i', '\\', 'z'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1781), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1781 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2961, 0, 2961, false, true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 127;
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'C';
      charArray0[2] = 'e';
      char char0 = '';
      charArray0[3] = '';
      charArray0[4] = '1';
      String string0 = RandomStringUtils.random(127, charArray0);
      assertEquals("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertArrayEquals(new char[] {'o', 'C', 'e', '', '1'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertEquals("\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 56191;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(56191, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, true, false);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1224;
      RandomStringUtils.random(1224);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1224);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1458;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1458);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0);
      int int1 = 700;
      int int2 = (-328);
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'F';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.nextInt((-328));
      mockRandom0.longs(0L);
      mockRandom0.nextFloat();
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, (double) 0.1F, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-111);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -111 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 4440;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4440);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1039);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1039 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'Y';
      charArray0[2] = 'F';
      charArray0[3] = ';';
      charArray0[4] = 'c';
      charArray0[5] = '9';
      charArray0[6] = ']';
      charArray0[7] = 'w';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(2395, charArray0);
      int int0 = (-1286);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1286), (-1286), 888, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1286 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'D';
      charArray0[2] = 'Z';
      RandomStringUtils.random(0, (-2175), 0, false, false, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-497), 123, (-2175), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -497 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-1841);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1841 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
