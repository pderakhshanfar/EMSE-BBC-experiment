/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:13:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(1807);
      String string0 = RandomStringUtils.randomAlphabetic(1807);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(18, "cccccccccccccccccc");
      assertEquals("cccccccccccccccccc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "\"p");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1079, (-1993), 1079, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 2188, false, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2541);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1311 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1494 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1502 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1220 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1858), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1858 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(29, 29, 29, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2267, 2267, 12, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(760);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 1135, 1135, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 17, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1127), 0, (-3152), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1475, 56192, (-947), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3470), 1350, (-3470), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3470 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -422 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(233, 55296, 1298, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1832, (-87), (-936), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      String string0 = RandomStringUtils.random(3046, 0, 3, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(538L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      String string0 = RandomStringUtils.random(3, 0, 3, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1567, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1567, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1502, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-764L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(8, 0, (-973), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, (-2350), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2399), (-2399), 2541, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2399 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 966, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1803, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(7, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2188), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2188 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(32, 56192, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2369, 55296, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1412, 57340, 1412, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(774, (-1409), 32, false, false);
      assertEquals("\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F\uFA7F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(1200);
      String string0 = RandomStringUtils.randomNumeric(1200);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom(1776);
      String string0 = RandomStringUtils.randomAlphanumeric(1776);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(3046, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "5`D:");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(263, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1200);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1776);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1807);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3292, 567, 567, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(41);
      assertEquals("                                         ", string0);
  }
}
