/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:44:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(25);
      assertNotNull(string0);
      assertEquals("                         ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(615);
      String string0 = RandomStringUtils.randomAlphanumeric(615);
      assertNotNull(string0);
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(385, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(914, 35, 32, false, false, (char[]) null);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -448 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -723 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(127, true, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4891), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4891 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "]WA;");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(939, (-1713), (-1), true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 12, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(1405, 0, 1405, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4565), (-4565), (-1782), true, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4565 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 834, (-620), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1153, 1153, 1153, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1656), (-1656), 914, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1656 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, 57343, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2403, 56170, (-1926), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(914, (-1634), 1245, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E\uF99E", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56187);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56187, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56187);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2173, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[20];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 422, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-2574), (-2574), false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-18), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -18 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(2252, "\u0000");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56205);
      // Undeclared exception!
      RandomStringUtils.random(56191, 56205, 26235, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1173, 55296, 36, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(422, (-232), (-1125), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18\uFF18", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphabetic(25);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2593, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(985, 0, (-655), false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(703, 56320, Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2252, 2252, 18, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(723L);
      // Undeclared exception!
      RandomStringUtils.random(797, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(6);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(25);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
