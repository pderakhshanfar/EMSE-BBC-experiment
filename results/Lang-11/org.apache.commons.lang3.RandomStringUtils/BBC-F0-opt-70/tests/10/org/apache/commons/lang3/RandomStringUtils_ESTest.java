/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:14:52 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(204);
      assertEquals("                                                                                                                                                                                                            ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(56312);
      String string0 = RandomStringUtils.randomAlphanumeric(17);
      assertEquals("jjjjjjjjjjjjjjjjj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(56312);
      String string0 = RandomStringUtils.randomAlphabetic(42);
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1050, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(2906, " B");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, (-1206), 1, true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 56319, (-2752), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(8);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -611 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1409 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1154), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1154 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(2467);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2467, 2467, 1050, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(31, 31, 31, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(3022, 0, 3022, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-257), (-257), 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -257 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46, 46, 56191, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(677, 56191, 42, false, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-699), 0, 0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -699 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56204, 6, 6, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56165);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1231), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1231 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(669, (-1244), 12, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24\uFB24", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '5';
      MockRandom mockRandom0 = new MockRandom(2467);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(28, 0, (-1542), false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '5', '\u0000', '\u0000'}, charArray0);
      assertEquals("5555555555555555555555555555", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 46206, 55296, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-1436));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1436), (-1436), (-1436), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1436 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3652, true, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, (String) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 56319, (-532), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1181, 55296, 56262, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 56319, (-532), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(56312);
      String string0 = RandomStringUtils.random(1948, 56312, 24, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(108);
      String string0 = RandomStringUtils.randomNumeric(108);
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(2482);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(15, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1876, 3652, 3652, true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(31, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(108);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1582 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56191);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2303);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(23, 2303, 1002, false, false, (char[]) null);
      assertEquals("\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF\u08FF", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56165);
  }
}
