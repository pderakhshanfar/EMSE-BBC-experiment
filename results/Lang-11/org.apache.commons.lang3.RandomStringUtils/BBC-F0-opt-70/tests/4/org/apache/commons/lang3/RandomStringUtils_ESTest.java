/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(537);
      String string0 = RandomStringUtils.randomAlphanumeric(537);
      assertNotNull(string0);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(16280);
      String string0 = RandomStringUtils.randomAlphabetic(25);
      assertNotNull(string0);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "PQ'%`t9?c%");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      String string0 = RandomStringUtils.random(9, 0, (-1), true, true, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000'}, charArray0);
      assertEquals("nnnnnnnnn", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -478 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(546);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3666 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-423), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -423 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, false, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2916), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2916 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "F|'F^NUnos_p~oxp)PV");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(128);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1292, 128, 1292, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(732);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(732, 732, 732, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, (-551), 250, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3908), (-1), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3908 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, 6, 6, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46213);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3592 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(23, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56356);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)25, 56191, 56356, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(991, (-599), (int) (byte)3, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9\uFDA9", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 56192, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '7';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(36251, 1, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56307, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56307, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56301, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1835), 0, 128, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1835 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(1211);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-172), 1211, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(399, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56307, 56307, 57343, false, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 119, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(12, (-1), 56191, false, false);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(17);
      assertEquals("11111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56307, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2915, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2425L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3127, (-554), 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(17);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-478), (-451), (-551), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -478 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
