/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:58:16 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Random.setNextRandom(322);
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string1 = RandomStringUtils.random(1, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("h", string1);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      String string2 = RandomStringUtils.randomAlphabetic(7);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("QQQQQQQ", string2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 18;
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertNotNull(string0);
      assertEquals("222222222222222222", string0);
      
      Random.setNextRandom(18);
      int int1 = 3408;
      String string1 = RandomStringUtils.randomAlphanumeric(3408);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.randomAscii(3408);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3408);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 56129;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1, 56129, 1756, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 16;
      // Undeclared exception!
      RandomStringUtils.random(56151, 56151, 16, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 0, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 1, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, (-1742), false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56319, 56320, 56319, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(5023);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'y';
      charArray0[2] = 'x';
      charArray0[3] = '|';
      // Undeclared exception!
      RandomStringUtils.random(5023, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1050, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(36, (-1345), 959, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF\uFABF", string0);
      
      Random.setNextRandom((-1345));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1050, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      charArray0[0] = 'k';
      mockRandom0.setSeed((-1));
      charArray0[1] = 'p';
      charArray0[2] = '!';
      charArray0[3] = 'p';
      charArray0[4] = '\'';
      String string1 = RandomStringUtils.random(2, 0, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kk", string1);
      assertArrayEquals(new char[] {'k', 'p', '!', 'p', '\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string0 = RandomStringUtils.random(572, 812, 36, false, false);
      assertNotNull(string0);
      assertEquals("\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D\u032D", string0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      mockRandom1.setSeed((-4245L));
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom2);
      assertNotSame(mockRandom1, mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 1, (-2189), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(572, 3323, 1, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1050, Integer.MAX_VALUE, (-3591), false, false);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-3591));
      String string1 = RandomStringUtils.random(0, (-1334), Integer.MAX_VALUE, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(3494, (-1334), 1108, false, false, (char[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'S';
      charArray0[2] = '`';
      charArray0[3] = '!';
      charArray0[4] = '.';
      charArray0[5] = '}';
      charArray0[6] = 'C';
      String string0 = RandomStringUtils.random(1422, 1, 0, true, false, charArray0, (java.util.Random) mockRandom2);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertArrayEquals(new char[] {'F', 'S', '`', '!', '.', '}', 'C', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '}';
      charArray0[2] = 'S';
      charArray0[3] = 'C';
      charArray0[4] = 'Q';
      charArray0[5] = '!';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = 'S';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1050, 0, 56192, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = false;
      int int0 = 0;
      String string2 = RandomStringUtils.random(1050, 0, 0, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1050, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '1';
      charArray0[2] = '=';
      charArray0[3] = '1';
      charArray0[4] = '7';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      String string0 = RandomStringUtils.random(1, 0, 0, false, true, charArray0, (java.util.Random) mockRandom1);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertEquals("1", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(mockRandom1, mockRandom2);
      assertArrayEquals(new char[] {'W', '1', '=', '1', '7', '\\', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-23);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.4, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2, (int) (byte)1, 32, true, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1142;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string0 = RandomStringUtils.random(1142, 1142, 110, true, true);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1142, 1142, 110, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = 1;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(36, 1, (-1), false, true, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'S';
      charArray0[2] = '`';
      charArray0[3] = '!';
      charArray0[4] = '.';
      charArray0[5] = '}';
      charArray0[6] = 'C';
      charArray0[7] = 'Q';
      charArray0[8] = 'i';
      String string0 = RandomStringUtils.random(1, 1, 1422, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("`", string0);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new char[] {'F', 'S', '`', '!', '.', '}', 'C', 'Q', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(845, "&EbkG");
      assertNotNull(string0);
      assertEqualsstring0);
      
      String string1 = RandomStringUtils.random(1, (-1), 845, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFFFF", string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      mockRandom0.setSeed(676);
      charArray0[1] = '$';
      charArray0[2] = 'b';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = ')';
      charArray0[6] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-80), 57343, 676, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -80 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-32);
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = ')';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = ')';
      charArray0[7] = '&';
      charArray0[8] = '&';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2408), (-2408), (-32), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2408 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 98;
      int int1 = 123;
      // Undeclared exception!
      RandomStringUtils.random(98, 2249, 123, true, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long0 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0L, long0);
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2380);
      assertNotNull(string0);
      
      int int0 = 1142;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1142);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1630;
      String string0 = RandomStringUtils.random(1630);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1630, true, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = '^';
      charArray0[4] = 'H';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2901, 1568, 2901, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1361), (-1361), (-1361), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1361 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 3388;
      int int1 = 56320;
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[2];
      char char0 = 'H';
      charArray0[0] = 'H';
      char char1 = 't';
      charArray0[1] = 't';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3388, 56320, 56320, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1158), (-1158), (-1158), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1158 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = '9';
      charArray0[2] = 'E';
      charArray0[3] = ',';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'_', '9', 'E', ','}, charArray0);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(3051);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 123;
      int int2 = 1706;
      boolean boolean0 = false;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-611L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '9';
      charArray0[2] = '[';
      charArray0[3] = '\'';
      charArray0[4] = 'S';
      charArray0[5] = 'H';
      charArray0[6] = '4';
      charArray0[7] = 'o';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3633, (-3181), 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 98;
      int int1 = 123;
      String string0 = RandomStringUtils.random(98, 2249, 123, false, false);
      assertNotNull(string0);
      assertEquals("\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9\u08C9", string0);
      
      int int2 = 930;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(930);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 816;
      String string0 = RandomStringUtils.random(816, "d2[*>_er~Olj7]");
      assertNotNull(string0);
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string0);
      
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '9';
      charArray0[2] = '&';
      charArray0[3] = ']';
      charArray0[4] = '~';
      charArray0[5] = '%';
      charArray0[6] = '(';
      charArray0[7] = 'w';
      charArray0[8] = 'D';
      RandomStringUtils.random(816, charArray0);
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(816);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1661);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1661 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = (-1398);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1398 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '\'';
      charArray0[2] = '#';
      charArray0[3] = 'd';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {']', '\'', '#', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2408), (-2408), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(4762, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1857);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'N';
      charArray0[2] = '.';
      charArray0[3] = '&';
      charArray0[4] = ')';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(540, 540, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, "Requested random string length ");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(980);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, (-1), 1, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'H';
      charArray0[2] = 'b';
      charArray0[3] = 'A';
      charArray0[4] = 'Z';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 57343, 1, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1714);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1714 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = '&';
      charArray0[2] = '';
      charArray0[3] = 'f';
      charArray0[4] = 'm';
      charArray0[5] = 'Z';
      charArray0[6] = '&';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1452), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1452 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      boolean boolean0 = false;
      RandomStringUtils.random(0, false, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '/';
      charArray0[2] = '1';
      charArray0[3] = 'R';
      charArray0[4] = 'd';
      charArray0[5] = 'v';
      charArray0[6] = 't';
      RandomStringUtils.random(0, 2144, 0, false, true, charArray0);
      RandomStringUtils.random(0, (-1526), 2144, false, false);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2144);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(287, (-1), (-1), true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-206);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-206), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -206 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 568;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(568);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2930);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2930 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
