/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:59:03 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2123);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(671);
      String string0 = RandomStringUtils.randomAlphanumeric(3);
      assertEquals("BBB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-2677));
      String string0 = RandomStringUtils.randomAlphabetic(1603);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(2621, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "qJi");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 327, false, false, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) 'i', (int) 'i', 0, true, true);
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-472), false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1284 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1439 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -986 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2123);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2211, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2756), "Dl?1|xt^/.-Gw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2756 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2734), 1, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1553, 1, Integer.MAX_VALUE, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2572, 1057, 1057, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1428), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 1384, (-2661), true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1535, 172, 172, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1960), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1221, 1221, 1221, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4214 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2423, 55338, 2423, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47, 56353, 47, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(625, (-1827), 625, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD\uF8DD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      MockRandom mockRandom0 = new MockRandom((-104L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, (-2435), true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("t", string0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(42, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(42, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(957, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(474, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1216), (-347), (-1), false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1216 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 1253, 1253, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-967), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -967 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(625, 127, 49, false, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(19, 56316, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(43, "\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32, 0, 5, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("55555555555555555555555555555555", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(123, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 0, 210, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56191);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3541 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(122, (-1608), 48, true, true, (char[]) null);
      assertEquals("\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8\uF9B8", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
