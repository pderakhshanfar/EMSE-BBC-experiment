/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:05:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 56192, 57343, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(34, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57340);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      assertNotSame(intStream1, intStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)35;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.1, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      double double1 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.2, double1, 0.01);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      int int1 = mockRandom2.nextInt((int) (byte)35);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(int1 == int0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertEquals(3, int1);
      
      MockRandom mockRandom3 = new MockRandom();
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertNotNull(mockRandom3);
      
      char[] charArray0 = null;
      DoubleStream doubleStream1 = mockRandom2.doubles();
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertFalse(mockRandom2.equals((Object)mockRandom3));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      assertNotSame(mockRandom2, mockRandom3);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      MockRandom mockRandom4 = new MockRandom();
      assertFalse(mockRandom4.equals((Object)mockRandom3));
      assertFalse(mockRandom4.equals((Object)mockRandom1));
      assertFalse(mockRandom4.equals((Object)mockRandom2));
      assertFalse(mockRandom4.equals((Object)mockRandom0));
      assertNotNull(mockRandom4);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 57340, 18, false, false, (char[]) null, (Random) mockRandom4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 57343;
      boolean boolean0 = false;
      int int1 = 1464;
      // Undeclared exception!
      RandomStringUtils.random(1464, 56192, 57343, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 34, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(29, (-4329), 29, false, false);
      assertNotNull(string0);
      assertEquals("\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17\uEF17", string0);
      
      String string1 = RandomStringUtils.random(2298, "5Y9Wy>g");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      org.evosuite.runtime.Random.setNextRandom(217);
      String string2 = RandomStringUtils.randomAlphabetic(328);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (-4285), 1, false, false);
      assertNotNull(string0);
      assertEquals("\uEF43", string0);
      
      String string1 = RandomStringUtils.random(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      
      org.evosuite.runtime.Random.setNextRandom(21);
      String string2 = RandomStringUtils.randomNumeric(21);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("555555555555555555555", string2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte byte0 = (byte) (-112);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((byte) (-112));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      MockRandom mockRandom3 = new MockRandom((byte)64);
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertNotNull(mockRandom3);
      
      double double1 = mockRandom3.nextGaussian();
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom3, mockRandom0);
      assertNotSame(mockRandom3, mockRandom1);
      assertNotSame(mockRandom3, mockRandom2);
      assertEquals(0.1, double1, 0.01);
      
      LongStream longStream0 = mockRandom2.longs();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom3));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(longStream0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom3);
      assertNotSame(mockRandom2, mockRandom1);
      
      int int0 = mockRandom2.nextInt((-1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom3));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom3);
      assertNotSame(mockRandom2, mockRandom1);
      assertEquals(0, int0);
      
      MockRandom mockRandom4 = new MockRandom();
      assertFalse(mockRandom4.equals((Object)mockRandom1));
      assertFalse(mockRandom4.equals((Object)mockRandom0));
      assertFalse(mockRandom4.equals((Object)mockRandom2));
      assertFalse(mockRandom4.equals((Object)mockRandom3));
      assertNotNull(mockRandom4);
      
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)11, 55296, (int) (byte)31, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)31;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((byte)64);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      double double1 = mockRandom2.nextGaussian();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertEquals(0.1, double1, 0.01);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(mockRandom1, mockRandom2);
      
      int int0 = mockRandom1.nextInt(55296);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(mockRandom1, mockRandom2);
      assertEquals(2, int0);
      
      MockRandom mockRandom3 = new MockRandom();
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertNotNull(mockRandom3);
      
      String string0 = RandomStringUtils.random(12, 55296, 57343, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(mockRandom0.equals((Object)mockRandom3));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(mockRandom0, mockRandom3);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, "\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)64;
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte)31;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)35;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      byteArray0[8] = (byte)11;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom((byte) (-25));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.3, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.4, double1, 0.01);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom0.nextInt((int) (byte)11);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(5, int0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      String string0 = RandomStringUtils.random((int) (byte)11, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom2);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((int) (byte) (-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -25 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(114L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-128);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom((-1L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.2, double0, 0.01);
      
      double double1 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.3, double1, 0.01);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      MockRandom mockRandom3 = new MockRandom();
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertNotNull(mockRandom3);
      
      mockRandom3.nextBytes(byteArray0);
      assertFalse(mockRandom3.equals((Object)mockRandom0));
      assertFalse(mockRandom3.equals((Object)mockRandom2));
      assertFalse(mockRandom3.equals((Object)mockRandom1));
      assertNotSame(mockRandom3, mockRandom0);
      assertNotSame(mockRandom3, mockRandom2);
      assertNotSame(mockRandom3, mockRandom1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)5, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int int0 = 0;
      // Undeclared exception!
      RandomStringUtils.random(36353, (int) (byte) (-126), 0, true, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1195L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)11;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom((byte) (-1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.3, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.4, double1, 0.01);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom0.nextInt((int) (byte)11);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(5, int0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)11, (int) (byte)0, (int) (byte)0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 6;
      String string0 = RandomStringUtils.random(6);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      int int1 = 57343;
      String string1 = RandomStringUtils.random(6, 57343, 6, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'J';
      charArray0[2] = 'Q';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 57343, 1591L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1, 57343, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(1);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      LongStream longStream0 = mockRandom2.longs();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(longStream0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      int int0 = mockRandom0.nextInt(8);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(mockRandom0, mockRandom2);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '=';
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, true, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '3';
      charArray0[2] = 'd';
      charArray0[3] = '9';
      charArray0[4] = '0';
      // Undeclared exception!
      RandomStringUtils.random(46338, 1, 55296, true, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LongStream longStream0 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom1.nextInt(2953);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '=';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      String string0 = RandomStringUtils.random(1, 0, (-657), true, true, charArray0, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("U", string0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', '=', 'U', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(46322, "U");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphanumeric(128);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
      
      String string1 = RandomStringUtils.random(128, true, true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-2674);
      // Undeclared exception!
      RandomStringUtils.random(56192, (-693), 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom(1432L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(572L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(1783, 1783, (-1680), true, true);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(919);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2259, 2259, 919, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, true, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(3900, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3900, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(3900);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3900, 3900, 4792, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-2674);
      String string0 = RandomStringUtils.random(2196, 5999, (-2674), false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(5999);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(3900, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(3900, 3900, (-562), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 2866;
      int int1 = 0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      int int2 = (-2552);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2552 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(572L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream1 = mockRandom0.longs(0L);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      int int0 = mockRandom0.nextInt(123);
      assertEquals(1, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      mockRandom1.setSeed(3900);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      int int1 = 1252;
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'U';
      charArray0[2] = 'M';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      charArray0[7] = 'c';
      charArray0[8] = 'U';
      String string0 = RandomStringUtils.random(1, 1, 1252, false, false, charArray0, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("M", string0);
      assertArrayEquals(new char[] {'M', 'U', 'M', 'U', 'U', 'c', 'c', 'c', 'U'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(123);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3900;
      String string0 = RandomStringUtils.random(3900, false, false);
      assertNotNull(string0);
      
      char char0 = 'V';
      char char1 = 'L';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 48539;
      // Undeclared exception!
      RandomStringUtils.random(48539, string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1);
      char[] charArray0 = new char[3];
      charArray0[1] = 'U';
      charArray0[2] = 'c';
      MockRandom mockRandom0 = new MockRandom(572L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 1783);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream1 = mockRandom0.longs(572L);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      int int1 = mockRandom0.nextInt(1783);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      mockRandom0.setSeed(572L);
      // Undeclared exception!
      RandomStringUtils.random(1783, (-1), 1783, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom(1432L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(572L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream1 = mockRandom0.longs(1144L);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      int int0 = mockRandom0.nextInt((-1));
      assertEquals(0, int0);
      
      mockRandom0.setSeed((-2975L));
      // Undeclared exception!
      RandomStringUtils.random(3477, 0, 1783, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(3900, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'u';
      charArray0[5] = 'Y';
      charArray0[7] = 'Y';
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1887;
      String string0 = RandomStringUtils.random(1887, (String) null);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1887);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.randomAscii(0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int2 = (-1483);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1483 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '*';
      charArray0[2] = 'i';
      String string0 = RandomStringUtils.random(2031, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'!', '*', 'i'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string1 = RandomStringUtils.randomAscii(128);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                ", string1);
      
      String string2 = RandomStringUtils.random(0, "o$>T&");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = 0;
      String string3 = RandomStringUtils.randomAscii(0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '!';
      charArray1[1] = '*';
      charArray1[2] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 2031, 2031, false, true, charArray1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 2868;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2868, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1783;
      int int1 = (-1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'U';
      charArray0[2] = 'c';
      MockRandom mockRandom0 = new MockRandom(572L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int2 = mockRandom0.nextInt(1783);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      mockRandom0.setSeed(572L);
      String string0 = RandomStringUtils.random(1783, (-1), 1783, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'M', 'U', 'c'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(3900, false, false);
      assertNotNull(string0);
      
      int int0 = (-2116);
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2116), 0, 3900, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2116 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-2002);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2002 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = 32;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-860);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -860 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(800);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = 'L';
      charArray0[2] = '0';
      charArray0[3] = ']';
      charArray0[4] = 'w';
      charArray0[5] = '(';
      charArray0[6] = '8';
      charArray0[7] = 'Q';
      charArray0[8] = 'S';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, (-764), false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'5', 'L', '0', ']', 'w', '(', '8', 'Q', 'S'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ';';
      charArray0[2] = 'q';
      charArray0[3] = '\'';
      charArray0[4] = '*';
      charArray0[5] = '.';
      charArray0[6] = 'D';
      charArray0[7] = 'x';
      charArray0[8] = 'w';
      String string0 = RandomStringUtils.random(0, 56319, 150, false, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'x', ';', 'q', '\'', '*', '.', 'D', 'x', 'w'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-538);
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-538), 0, (-538), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -538 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1058);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1058), (-1058), (-1058), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1058 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191, true, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 43;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(43);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(3801);
      assertNotNull(string0);
      
      int int0 = 1625;
      String string1 = RandomStringUtils.random(0, 0, 1625, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[8];
      char char0 = 'L';
      charArray0[0] = 'L';
      charArray0[1] = 'l';
      charArray0[2] = '[';
      charArray0[3] = 'D';
      char char1 = '9';
      charArray0[4] = '9';
      charArray0[5] = 'W';
      charArray0[6] = 'v';
      char char2 = '`';
      charArray0[7] = '`';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3384), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3384 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = ':';
      charArray0[2] = '/';
      charArray0[3] = '1';
      charArray0[4] = 'p';
      charArray0[5] = 'V';
      charArray0[6] = ')';
      charArray0[7] = 'L';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1625, 1625, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = true;
      String string2 = RandomStringUtils.random(0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 0;
      String string3 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = (-2944);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2944));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2944 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(2185, " is less than 0.");
      assertNotNull(string0);
      
      int int0 = (-2674);
      // Undeclared exception!
      RandomStringUtils.random(56320, 5999, (-2674), false, false);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-485);
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, (-485), 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = false;
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '(';
      charArray0[2] = '.';
      charArray0[3] = 'u';
      charArray0[4] = '7';
      charArray0[5] = 'X';
      charArray0[6] = '9';
      charArray0[7] = '6';
      charArray0[8] = 'J';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-485), (-426), 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -485 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.random(3779, "KT!21`xk/G%VJ$4!");
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '}';
      charArray0[2] = '8';
      charArray0[3] = 'O';
      charArray0[4] = 'W';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1132, 1132, 3779, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAlphabetic(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3926), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3926 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '!';
      charArray0[2] = '*';
      charArray0[3] = '{';
      charArray0[4] = 'x';
      charArray0[5] = '-';
      charArray0[6] = 'U';
      charArray0[7] = 'G';
      charArray0[8] = 'N';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2424, 2424, 2424, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-1096);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1096), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1096 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, "");
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      RandomStringUtils.random(0, charArray0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56319);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 302;
      RandomStringUtils.random(302, (char[]) null);
      int int1 = 2866;
      int int2 = 0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      RandomStringUtils.random(302, 2866, 0, true, true, (char[]) null);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(302);
  }
}
