/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:46:29 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, 159, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Random.setNextRandom(150);
      String string2 = RandomStringUtils.random(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'O';
      charArray0[2] = 'T';
      charArray0[3] = '\\';
      charArray0[4] = 'g';
      charArray0[5] = 'Q';
      charArray0[6] = 'S';
      charArray0[7] = '<';
      charArray0[8] = ',';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(164, 0, 0, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-1440));
      int int0 = 33;
      String string0 = RandomStringUtils.randomAlphabetic(33);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(127);
      assertFalse(string1.equals((Object)string0));
      assertEquals("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", string1);
      assertNotNull(string1);
      
      int int1 = 2026;
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(2026, (char[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = 15;
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(292, 15, 165, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.random(3481);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'e';
      charArray0[2] = '_';
      String string1 = RandomStringUtils.random(8, 0, 0, true, false, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'K', 'e', '_'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("KKKKKKKK", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1980));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1980 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(21);
      Random.setNextRandom(21);
      String string0 = RandomStringUtils.randomAlphanumeric(80);
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555555555", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'p';
      charArray0[2] = 'o';
      charArray0[3] = ' ';
      charArray0[4] = 'V';
      charArray0[5] = 'z';
      charArray0[6] = '@';
      charArray0[7] = 'h';
      charArray0[8] = '>';
      String string1 = RandomStringUtils.random(21, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'(', 'p', 'o', ' ', 'V', 'z', '@', 'h', '>'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("                     ", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(1397);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Random.setNextRandom(14);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = null;
      int int0 = 56166;
      MockRandom mockRandom0 = new MockRandom(55296);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = 3;
      // Undeclared exception!
      RandomStringUtils.random(3, 56166, 103, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 56192;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1502L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(2, 56320, 55296, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals("\uD800\uDC00", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("  ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(1556, 56192, 748, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, (-1503), false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Random.setNextRandom(56320);
      int int0 = 701;
      // Undeclared exception!
      RandomStringUtils.random(701);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1, (char[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom(2409L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 5065;
      String string0 = RandomStringUtils.random(5065, 5065, 1, false, false);
      assertNotNull(string0);
      
      Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(799);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '';
      charArray0[2] = '=';
      MockRandom mockRandom1 = new MockRandom(24);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 1, false, true, charArray0, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2, 55296, 748, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uD800\uDC00", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(748);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'B';
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 56191, true, false, charArray0, (java.util.Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(24, 0, (-761), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2970, 5065, (-358), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom(21);
      Random.setNextRandom(21);
      String string0 = RandomStringUtils.randomAlphanumeric(80);
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555555555", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'p';
      charArray0[2] = 'o';
      charArray0[3] = '(';
      charArray0[4] = 'V';
      charArray0[5] = 'z';
      charArray0[6] = '@';
      charArray0[7] = 'h';
      charArray0[8] = '>';
      String string1 = RandomStringUtils.random(21, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'(', 'p', 'o', '(', 'V', 'z', '@', 'h', '>'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("(((((((((((((((((((((", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(29, (-761), 2, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07\uFD07", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(5065, 5065, 1, false, false);
      assertNotNull(string0);
      
      Random.setNextRandom(56191);
      int int0 = 828;
      String string1 = RandomStringUtils.random(828);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F\uDB7F\uDC7F", string1);
      assertNotNull(string1);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2212), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2212 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1432;
      String string0 = RandomStringUtils.randomAscii(1432);
      assertNotNull(string0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(27, 27, 55296, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(27, 2, 28, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals("\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int0 = (-2203);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(392, (-2203), (-2203), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 62;
      int int1 = (-330);
      String string0 = RandomStringUtils.random(62, (-330), (-754), false, false);
      assertEquals("\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6\uFEB6", string0);
      assertNotNull(string0);
      
      Random.setNextRandom((-754));
      char[] charArray0 = new char[5];
      char char0 = 'k';
      charArray0[0] = 'k';
      char char1 = '@';
      charArray0[1] = '@';
      char char2 = 'z';
      charArray0[2] = 'z';
      charArray0[3] = '2';
      char char3 = '4';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(62, (-330), (-330), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'c';
      MockRandom mockRandom0 = new MockRandom(445L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 46199, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1432);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1432, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1432, false, false);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = 46205;
      // Undeclared exception!
      RandomStringUtils.random(46205, "+cpG");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(123);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, (-945), 717, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(46203);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1432);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[2] = ';';
      charArray0[3] = '~';
      charArray0[4] = '!';
      charArray0[5] = 'B';
      charArray0[6] = 'p';
      charArray0[7] = '3';
      String string1 = RandomStringUtils.random(1432, 34, 1432, false, false, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2907 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -694 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 297;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(297);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      char char0 = '#';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1890;
      IntStream intStream0 = mockRandom0.ints(26, 1149);
      assertNotNull(intStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1890, 12, 12, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'J';
      String string1 = RandomStringUtils.random(16, 0, 729, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(128);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = null;
      String string3 = RandomStringUtils.random(0, (char[]) null);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(128);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(0, "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(607, 1, (-532), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'Y';
      charArray0[2] = '';
      charArray0[3] = '0';
      charArray0[4] = 'N';
      charArray0[5] = '$';
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertArrayEquals(new char[] {'W', 'Y', '', '0', 'N', '$'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      int int1 = (-4085);
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, (-4085), (-4085), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = (-2052);
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(2159, (-4085), (-2052), true, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'T';
      charArray0[5] = 'Q';
      charArray0[6] = '8';
      charArray0[7] = '4';
      charArray0[8] = 'A';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'Z', 'n', 'H', 'C', 'T', 'Q', '8', '4', 'A'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, true, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1069));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1069 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2064;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2064, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'B';
      charArray0[2] = 'n';
      charArray0[3] = '~';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, (-2963), true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'/', 'B', 'n', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'c';
      charArray0[2] = 'P';
      charArray0[3] = '1';
      charArray0[4] = 'P';
      charArray0[5] = 'f';
      charArray0[6] = '2';
      charArray0[7] = 'J';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 32, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-694);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(518, (-694), 518, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 1194;
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 't';
      charArray0[2] = 'G';
      charArray0[3] = 'w';
      charArray0[4] = '}';
      charArray0[5] = '0';
      charArray0[6] = '<';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1194, 1194, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3359;
      // Undeclared exception!
      RandomStringUtils.random(3359, true, true);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 968;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(968);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1317);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1317), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1317 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils.random(316, (String) null);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(316);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '=';
      charArray0[2] = 'z';
      charArray0[3] = ',';
      charArray0[4] = 'A';
      charArray0[5] = '~';
      charArray0[6] = '%';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("P", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      int int0 = (-3072);
      RandomStringUtils.random(0, 0, (-3072), false, false);
      int int1 = 56320;
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '9';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -362 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, 0, 0, false, false);
      RandomStringUtils.random(0, 0, 0, false, false);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, "xC$capG1#NV\"NCBtPUq");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'f';
      charArray0[2] = '\'';
      charArray0[3] = '@';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-822), 0, (-1433), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -822 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -155 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      int int1 = 0;
      RandomStringUtils.random(0, "");
      int int2 = 0;
      char[] charArray0 = new char[5];
      char char0 = '&';
      charArray0[0] = '&';
      char char1 = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'K';
      char char2 = 'J';
      charArray0[3] = 'J';
      char char3 = '=';
      charArray0[4] = '=';
      RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.random(0);
      int int3 = (-2102);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2102), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2102 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1027 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'a';
      charArray0[2] = '\\';
      charArray0[3] = '}';
      charArray0[4] = '\\';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, false, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomAscii(0);
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 127;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(127);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, "");
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'Z';
      charArray0[2] = 'q';
      charArray0[3] = 'y';
      charArray0[4] = 'D';
      charArray0[5] = 'V';
      charArray0[6] = 'R';
      charArray0[7] = 'r';
      charArray0[8] = '=';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3106), (-3106), 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3106 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'r';
      charArray0[2] = 'y';
      charArray0[3] = 'e';
      charArray0[4] = '+';
      charArray0[5] = '4';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1598), (-1598), 751, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1598 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
