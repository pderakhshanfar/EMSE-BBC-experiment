/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:46:06 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 873;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(13, 873, 22, false, false);
      assertEquals("\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369\u0369", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(327);
      int int1 = 45;
      String string1 = RandomStringUtils.random(45, "3/qRnHl/?z@r]#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string1);
      assertNotNull(string1);
      
      RandomStringUtils.randomAscii(873);
      RandomStringUtils.randomAlphabetic(873);
      RandomStringUtils.randomAlphanumeric(96);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(13);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(865L);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(6, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(855);
      RandomStringUtils.randomAlphanumeric(855);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 46328;
      MockRandom mockRandom0 = new MockRandom(46328);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int1 = 0;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(46328, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(46328);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 0;
      char[] charArray0 = null;
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3647, 56191, (-4385), false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 0;
      // Undeclared exception!
      RandomStringUtils.random(46213, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 56305;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.1, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56305, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(46213, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(2881);
      Random.setNextRandom(3660);
      String string0 = RandomStringUtils.randomNumeric(3660);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'C';
      charArray0[2] = 'V';
      charArray0[3] = '=';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = ':';
      charArray0[7] = 'c';
      String string1 = RandomStringUtils.random(2881, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', 'C', 'V', '=', '_', '_', ':', 'c'}, charArray0);
      assertNotNull(string1);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '_';
      charArray1[1] = 'C';
      charArray1[2] = 'C';
      charArray1[3] = '_';
      charArray1[4] = 'C';
      // Undeclared exception!
      RandomStringUtils.random(3660, charArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'L';
      charArray0[2] = 'W';
      // Undeclared exception!
      RandomStringUtils.random(43, 0, 8, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.1, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(9, 56319, (-1213), false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.1, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 1387, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '\'';
      charArray0[2] = '\\';
      charArray0[3] = 'B';
      charArray0[4] = '$';
      charArray0[5] = '-';
      charArray0[6] = '`';
      charArray0[7] = '3';
      MockRandom mockRandom0 = new MockRandom((-2147L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(7, 7, 37, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'i', '\'', '\\', 'B', '$', '-', '`', '3'}, charArray0);
      assertEquals("3333333", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(37);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-1137);
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, (-1137), false, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "The chars array must not be empty");
      assertEquals("T", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'W';
      charArray0[2] = 'n';
      charArray0[3] = 'o';
      charArray0[4] = '';
      charArray0[5] = 'D';
      String string1 = RandomStringUtils.random(5, 5, 1, true, false, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'W', 'n', 'o', '', 'D'}, charArray0);
      assertEquals("DDDDD", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '^';
      int int0 = 1453;
      // Undeclared exception!
      RandomStringUtils.random(1453, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 3546;
      int int2 = (-134);
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(3546, (-134), 1325, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(3269, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(688);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '^';
      MockRandom mockRandom1 = new MockRandom(3831L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string3 = RandomStringUtils.random(2637, 0, 0, false, false, charArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', '^'}, charArray0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(2, (String) null);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(18, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 48572;
      boolean boolean0 = true;
      char[] charArray0 = new char[8];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      charArray0[0] = 'l';
      charArray0[1] = '1';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      charArray0[5] = ' ';
      charArray0[6] = '1';
      charArray0[7] = '[';
      // Undeclared exception!
      RandomStringUtils.random(1241, 0, 48572, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(348);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '#';
      charArray0[2] = '>';
      charArray0[3] = 'N';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(348);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(1997, 348, 12, true, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(348, (-952), 348, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48\uFC48", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.random(1948, true, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '\\';
      charArray0[2] = '!';
      charArray0[3] = ' ';
      charArray0[4] = 'a';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '^';
      charArray0[2] = '%';
      charArray0[3] = '^';
      String string3 = RandomStringUtils.random(35, 0, 19, false, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'9', '^', '%', '^'}, charArray0);
      assertEquals("99999999999999999999999999999999999", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '1';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      charArray0[5] = ' ';
      charArray0[6] = '1';
      charArray0[7] = '[';
      String string1 = RandomStringUtils.random(1241, 0, 48572, true, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'l', '1', 'l', 'l', 'N', ' ', '1', '['}, charArray0);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(48572, false, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = RandomStringUtils.random(348);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.random(1997, 348, 12, true, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 348;
      int int1 = 29;
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'Y';
      charArray0[3] = 'C';
      charArray0[4] = 'w';
      charArray0[5] = 'j';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(348, 348, 29, true, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      // Undeclared exception!
      RandomStringUtils.randomNumeric(12);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'e';
      charArray0[2] = '[';
      charArray0[3] = 'l';
      charArray0[4] = '<';
      charArray0[5] = ':';
      charArray0[6] = 'N';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, (-1), (-1), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2527;
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      String string0 = RandomStringUtils.random(2527, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2527);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'Z';
      charArray0[2] = 'x';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'', 'Z', 'x'}, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, "H|EFZ<DD <4Jr=");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'D';
      charArray0[2] = 's';
      charArray0[3] = '\'';
      charArray0[4] = '/';
      charArray0[5] = ' ';
      charArray0[6] = ':';
      charArray0[7] = 'N';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 123, 2375, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '{';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'M', '{'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 32;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(32);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, false, true);
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0L);
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string4 = RandomStringUtils.random(0, 0, (-3006), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomAscii(0);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.randomAscii(0);
      assertEquals("", string6);
      assertNotNull(string6);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '7';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-812), (-298), (-311), true, true, charArray1, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -812 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, 1, 0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, " is less than 0.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(2372, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2372);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'D';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(489, 2527, (-1387), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2637;
      String string0 = RandomStringUtils.random(2637, "|?M>hqG");
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2637);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = (-1197);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1197 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '\'';
      charArray0[2] = '-';
      charArray0[3] = '\"';
      charArray0[4] = '@';
      charArray0[5] = '0';
      charArray0[6] = 'k';
      charArray0[7] = 'G';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'1', '\'', '-', '\"', '@', '0', 'k', 'G'}, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "");
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56192);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(3395, 0, (-1076), false, true);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = 'j';
      charArray0[2] = 'R';
      charArray0[3] = 'S';
      charArray0[4] = 'd';
      charArray0[5] = '9';
      charArray0[6] = 'Z';
      charArray0[7] = 'A';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 348;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(348);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.random(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(852, 852, 852, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1853);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1853 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-2057);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2057), "b@)avYShi;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2057 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-1174);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1174 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1252;
      // Undeclared exception!
      RandomStringUtils.random(1252, true, false);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 127;
      RandomStringUtils.random(127);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, (-1603), (-1603), true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      RandomStringUtils.random(0, (-136), (-136), true, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -136 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils.random(0, "s0i9'lY:QM1");
      int int0 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(0, 0, 0, true, false);
      int int1 = 3640;
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'R';
      charArray0[2] = '1';
      charArray0[3] = '-';
      charArray0[4] = '/';
      charArray0[5] = 'S';
      charArray0[6] = 'j';
      charArray0[7] = '+';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1114), 1478, 3640, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1114 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1860 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1361);
      int int1 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1361), (-1361), (-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1361 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'e';
      charArray0[2] = '[';
      charArray0[3] = 'l';
      charArray0[4] = '<';
      charArray0[5] = ':';
      charArray0[6] = 'N';
      charArray0[7] = '1';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3343, (-1), (-1054), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1082);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1082));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1082 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = true;
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = ',';
      charArray0[2] = 'U';
      charArray0[3] = ')';
      charArray0[4] = 'D';
      charArray0[5] = '*';
      RandomStringUtils.random(0, 2342, 1880, true, true, charArray0);
      int int0 = 229;
      int int1 = (-4809);
      int int2 = 0;
      boolean boolean1 = true;
      MockRandom mockRandom0 = new MockRandom(2342);
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 229, (long) (-4809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = (-2392);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, (-2392), true, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
