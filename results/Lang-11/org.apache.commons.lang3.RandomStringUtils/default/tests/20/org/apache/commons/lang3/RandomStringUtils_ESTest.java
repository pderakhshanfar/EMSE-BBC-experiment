/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:33:32 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextLong();
      mockRandom1.nextBoolean();
      MockRandom mockRandom2 = new MockRandom(2223L);
      RandomStringUtils.random(780, 0, 0, false, false, (char[]) null, (Random) mockRandom2);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.random(818, (-3457), (-1464), false, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'B';
      charArray0[2] = 'b';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1619);
      // Undeclared exception!
      RandomStringUtils.random(62079, string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 769;
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '_';
      charArray0[2] = '\\';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1512, 769, 1512, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAscii(3244);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 128;
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextBoolean();
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 1186, false, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      int int0 = 1322;
      // Undeclared exception!
      RandomStringUtils.random(141, 1322, 1745, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = 1186;
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextBoolean();
      // Undeclared exception!
      RandomStringUtils.random(1186, 128, 1, true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, 0, (-657), true, false);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      int int1 = (-686);
      boolean boolean0 = false;
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, 1030, 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1619, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(0, 1, 1, true, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.randomAscii(780);
      org.evosuite.runtime.Random.setNextRandom(780);
      RandomStringUtils.random(780, true, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'Y';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      charArray0[4] = '=';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[7] = 'W';
      charArray0[8] = 'm';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(20, 0, (-2081), true, false, charArray0, (Random) mockRandom0);
      RandomStringUtils.randomAscii(2160);
      char[] charArray1 = new char[2];
      charArray1[0] = 'R';
      charArray1[1] = '3';
      RandomStringUtils.random(0, charArray1);
      int int0 = 1186;
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1186);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-934), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -934 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils.randomAscii(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 128;
      MockRandom mockRandom1 = new MockRandom();
      boolean boolean1 = false;
      RandomStringUtils.random(1, (-686), (-2089), false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(745, false, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.randomAscii(0);
      int int0 = 0;
      RandomStringUtils.randomNumeric(0);
      int int1 = 1815;
      int int2 = 1372;
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'k';
      charArray0[4] = 'g';
      charArray0[5] = 'k';
      RandomStringUtils.random(0, 1372, 1815, true, true, charArray0);
      RandomStringUtils.random(0, false, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(1815, 0, 7, false, false);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1815);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int1 = 1186;
      MockRandom mockRandom0 = new MockRandom();
      int int2 = 128;
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(128, (-686), 128, false, false, (char[]) null, (Random) mockRandom1);
      boolean boolean1 = false;
      RandomStringUtils.random(0, true, false);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(152);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(780, (-3457), (-1502), false, false);
      assertEquals("\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F\uF27F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2655, 56320, 0, true, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 1, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-1045), 1, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1045
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, (-769), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1355, 1355, 1355, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'X';
      charArray0[2] = ')';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '+';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1363, 1363, 1363, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 248;
      String string0 = RandomStringUtils.randomAscii(248);
      assertEquals("                                                                                                                                                                                                                                                        ", string0);
      assertNotNull(string0);
      
      int int1 = 900;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-240), 900, 248, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -240 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = 1815;
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      char char0 = 'k';
      charArray0[0] = 'k';
      char char1 = 'g';
      charArray0[1] = 'g';
      String string3 = RandomStringUtils.random(1815, 0, 0, false, false, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'k', 'g'}, charArray0);
      assertNotNull(string3);
      
      int int2 = 945;
      // Undeclared exception!
      RandomStringUtils.random(945, true, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2005 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'G';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1994), (-3457), 30, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1994 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'a';
      charArray0[2] = 'z';
      charArray0[3] = '$';
      charArray0[4] = '/';
      charArray0[5] = '%';
      charArray0[6] = ' ';
      charArray0[7] = 'v';
      charArray0[8] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(270, 270, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 270
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1005), "o-O%~%P_X_w L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1005 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1464 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2100, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'M';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream1 = mockRandom0.longs((long) 0, (-545L), 1L);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      String string4 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new char[] {'T', 'M'}, charArray0);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -749 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2427, 27, 2427, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 3613;
      int int1 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      RandomStringUtils.random(3613, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      RandomStringUtils.random(3613, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(808, 808, 808, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = (-834);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2989), (-2989), (-834), false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2989 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'T';
      charArray0[2] = 'O';
      charArray0[3] = 'j';
      charArray0[4] = ']';
      charArray0[5] = 's';
      charArray0[6] = 'z';
      charArray0[7] = '@';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4136), Integer.MAX_VALUE, (-888), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4136 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2810;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2810);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(528, 528, 528, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 3642;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'u';
      charArray0[2] = '{';
      charArray0[3] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3642, 3642, 3642, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '+';
      charArray0[2] = 'q';
      charArray0[3] = 'v';
      charArray0[4] = 'O';
      charArray0[5] = '#';
      charArray0[6] = 'K';
      charArray0[7] = '!';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 2264, true, true, charArray0, (Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'>', '+', 'q', 'v', 'O', '#', 'K', '!'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1868;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1868);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2404, true, true);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'h';
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'1', 'h'}, charArray0);
      assertNotNull(string1);
      
      int int1 = 32;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(32, true, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "S8p#~&F");
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-519);
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = 'H';
      charArray0[2] = '4';
      charArray0[3] = ';';
      charArray0[4] = '|';
      charArray0[5] = '#';
      charArray0[6] = ' ';
      charArray0[7] = 'G';
      charArray0[8] = '^';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-519), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -519 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "'c3BIm\"rK");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-301), 1966, (-301), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -301 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-940), Integer.MAX_VALUE, 1, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -940 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(9);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-1848);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1848));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1848 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1619;
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1552, (-1047), 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1047
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 4106;
      String string0 = RandomStringUtils.random(205, 205, 4106, true, true);
      assertEquals("\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD\u00CD", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long long0 = mockRandom1.nextLong();
      assertEquals(0L, long0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(4106);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      // Undeclared exception!
      RandomStringUtils.random(59, 56320, 18, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(4);
      assertEquals("    ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 1, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      String string1 = RandomStringUtils.random(1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("f", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = RandomStringUtils.random(5, "25I;diq)r ]X0");
      assertEquals("22222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1522 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RandomStringUtils.random(2609);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'G';
      charArray0[2] = 'R';
      charArray0[3] = 'F';
      charArray0[4] = ';';
      charArray0[5] = 'k';
      charArray0[6] = '|';
      charArray0[7] = 'D';
      charArray0[8] = '*';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2609, 2609, 4779, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
