/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:14:23 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(526L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom(526L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom0.nextDouble();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string0 = RandomStringUtils.random(4, 55309, 4, false, false, (char[]) null, (Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("\uD80E\uDC01\uD80E\uDC01", string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'j';
      charArray0[4] = ':';
      charArray0[5] = 'B';
      charArray0[6] = '3';
      charArray0[7] = '4';
      charArray0[8] = '\"';
      // Undeclared exception!
      RandomStringUtils.random(2987, "\uD80E\uDC01\uD80E\uDC01");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 4;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int1 = 0;
      String string0 = RandomStringUtils.random(4, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(526L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(4, 55306, 4, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD80B\uDC01\uD80B\uDC01", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(4, 4, 55306, false, false, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0005\u0005\u0005\u0005", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1529), 55306, (-1367), false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1529 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(526L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom(2545L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      String string0 = RandomStringUtils.random(1, 47, (-2530), false, true, (char[]) null, (Random) mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertEquals("0", string0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(47, "0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("00000000000000000000000000000000000000000000000", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(47, 742, 742, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(526L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 55306;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(55306, 57343, 55306, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 128;
      org.evosuite.runtime.Random.setNextRandom(128);
      String string0 = RandomStringUtils.random(128);
      assertEquals("\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(128);
      assertFalse(string1.equals((Object)string0));
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2536);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(55309, 56191, 1927, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 4;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(4, 56319, 2633, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1692, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(35333, 35333, 35333, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(581, (-1279), 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 35324, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1, (-1603), 732, true, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uF9BD", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2098;
      int int1 = 0;
      char[] charArray0 = new char[3];
      charArray0[1] = 'Y';
      charArray0[2] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(2098, 0, (-1046), true, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[1] = 'R';
      charArray0[2] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = mockRandom0.nextFloat();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.1F, float1, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(4, 0, 4, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(1361L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int1 = 4186;
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 1, (double) 1, (double) 4186);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 1, 4186, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(45341);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[1] = 'R';
      charArray0[2] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random((int) 'u', (int) 'u', 0, true, true);
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(992);
      String string0 = RandomStringUtils.randomAlphanumeric(67);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = 4;
      int int1 = (-376);
      int int2 = 16264;
      // Undeclared exception!
      RandomStringUtils.random(56191, (-376), 16264, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2098;
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(36215, 0, 56192, true, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '6';
      charArray0[2] = '=';
      charArray0[3] = 'o';
      charArray0[4] = '\"';
      charArray0[5] = '&';
      charArray0[6] = '<';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47346, 1, 47346, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(4, 55306, 4, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4, 55306, 4, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD80A\uDC00\uD80A\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(498, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1103, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55306, 55306, 56319, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2536);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = '=';
      charArray0[2] = 'L';
      charArray0[3] = 'v';
      charArray0[4] = 'Y';
      String string3 = RandomStringUtils.random(0, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', '=', 'L', 'v', 'Y'}, charArray0);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.random(22, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 12;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(12, 12, 56320, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'G';
      charArray0[2] = 'x';
      charArray0[3] = 'e';
      charArray0[4] = 'S';
      charArray0[5] = 'J';
      charArray0[6] = '+';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, (-230), (-1222), false, true, charArray0, (Random) mockRandom0);
      assertEquals("", string2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'W', 'G', 'x', 'e', 'S', 'J', '+'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 123;
      int int1 = 1330;
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 1330, 128, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4, 4, 4, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 76;
      boolean boolean0 = true;
      char[] charArray0 = null;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(76, 76, 76, true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = '%';
      charArray0[2] = '/';
      charArray0[3] = 'a';
      charArray0[4] = '\\';
      charArray0[5] = 'p';
      charArray0[6] = 'N';
      charArray0[7] = '0';
      String string0 = RandomStringUtils.random(1792, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'!', '%', '/', 'a', '\\', 'p', 'N', '0'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-3979);
      int int1 = 56320;
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '$';
      charArray0[2] = 'M';
      charArray0[3] = 'L';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2307.421563453281), 0.0);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3979), (-3249), 56320, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3979 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 15;
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(15, 702, 15, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2098;
      int int1 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      char char0 = 'F';
      charArray0[0] = 'F';
      char char1 = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2098, 2098, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-1092);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1092), 1, (-1092), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1092 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-108), 2749, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(329);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(2749, false, false);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46213);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3997), "*)yChg|BCNa}8uWFQ!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3997 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      String string2 = RandomStringUtils.random(858, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEqualsstring2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-546), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -546 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3487, 41, 3487, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "i@MK_Zr(5uT[-A)");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1997), "QFG:XLm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1997 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '*';
      charArray0[2] = 'U';
      charArray0[3] = 'Q';
      charArray0[4] = 'E';
      charArray0[5] = ']';
      charArray0[6] = '=';
      charArray0[7] = 't';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Q', '*', 'U', 'Q', 'E', ']', '=', 't'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1310);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 3902;
      String string1 = RandomStringUtils.randomAscii(3902);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1310, 1310, 1310, true, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1579);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1460), 0, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1460 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-3208);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3208), 0, (-3208), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3208 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 527;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(527, false, true);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2308);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2561 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1303), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1303 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1397, 55306, (-737), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "B?");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 3011;
      String string1 = RandomStringUtils.random(3011, "B?");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3011);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(526L);
      mockRandom0.longs();
      RandomStringUtils.random(3521);
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      MockRandom mockRandom1 = new MockRandom(3521);
      String string0 = RandomStringUtils.random(11, 0, 0, false, false, charArray0, (Random) mockRandom1);
      assertEquals("+++++++++++", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, (-1303), (-127), true, true);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = 'W';
      charArray0[3] = 'Z';
      charArray0[4] = '^';
      charArray0[5] = '6';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, 55296, 2795, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -19 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25368, 25368, 25368, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = true;
      RandomStringUtils.random(0, 0, 0, true, true);
      int int0 = 1882;
      RandomStringUtils.random(1882);
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'Z';
      charArray0[2] = ')';
      RandomStringUtils.random(0, 56320, 0, true, false, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3219), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3219 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
