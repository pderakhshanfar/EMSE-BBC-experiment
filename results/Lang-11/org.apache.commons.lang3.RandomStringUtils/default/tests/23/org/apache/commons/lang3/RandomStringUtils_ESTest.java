/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:35:44 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.random(34, 0, (-2502), false, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56319, 1, (-740), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.randomAscii(128);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(954);
      RandomStringUtils.randomAlphabetic(32);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      RandomStringUtils.random(127, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      RandomStringUtils.random(0, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.random(1458, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      RandomStringUtils.random(561, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      RandomStringUtils.random(0, 0, 127, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils.random(0, 0, (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils.random(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(35324);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(128);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(380);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-803), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -803 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "Requested random string length ");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, (-3997), 56192, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3997
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3062, 3062, 3062, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1088, 1088, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1088
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1446, (-722), (-722), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2187), (-2187), (-2187), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2187 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2968, 15, 15, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(36207);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(36234, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(25, 2033, 9, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(954, (-868), 954, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C\uFC9C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2033, 9, 637, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(380, 0, 1, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, (-5481), false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-661), (-661), (-661), false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -661 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1884), 1922, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1127), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1127 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 32, false, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom(932);
      RandomStringUtils.randomAlphanumeric(932);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3539, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(2083);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, "Requested random string length ");
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2187 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1395 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2187 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1093 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
