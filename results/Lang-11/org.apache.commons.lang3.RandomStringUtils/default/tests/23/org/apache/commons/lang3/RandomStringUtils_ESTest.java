/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:02:25 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(2645, 0, (-137), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(268);
      assertEquals("8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(10);
      assertEquals("          ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(4689, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Requested random string length ");
      assertEquals("R", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2417, 2417, 20, true, true, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(586, 586, 0, true, true);
      assertEquals("\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A\u024A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56309);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(28);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57350);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3617), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3617 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47371, "Requested random string length ");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(16199, 16199, (-18), false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1804, 1804, 11, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(16, 16, 16, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 128, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(10, 1085, 10, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45, 45, 45, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(37364);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(47384, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 56191, 57343, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(27, 55296, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2417);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(23, (-688), 57343, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50\uFD50", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 2413, (-1), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u096D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(23);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(530, 633, 38, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(23);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 1, 2417, true, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-190), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -190 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 66, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(4509, false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1571, 57343, 1571, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(20);
      String string0 = RandomStringUtils.randomAlphanumeric(2413);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(32, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(16, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(5114, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -899 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -867 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -878 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-4938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4938 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
