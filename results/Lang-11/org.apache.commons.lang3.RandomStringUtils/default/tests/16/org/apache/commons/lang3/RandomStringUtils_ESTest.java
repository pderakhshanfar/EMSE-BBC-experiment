/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:32:10 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3374, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(3374, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(3374, false, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '_';
      charArray0[2] = 'U';
      charArray0[3] = 'F';
      charArray0[4] = '2';
      charArray0[5] = 'u';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.ints(0L);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextLong();
      mockRandom0.nextInt(1066);
      mockRandom0.nextDouble();
      RandomStringUtils.random(1066, 1, 1066, true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(1191, true, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2973 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      RandomStringUtils.random(1615, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-869));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(664, (-869), 664, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46348);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = '4';
      charArray0[2] = 'G';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '<';
      charArray0[6] = 'C';
      charArray0[7] = 'R';
      charArray0[8] = '.';
      RandomStringUtils.random(1, 1, (-1053), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-518), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 3596, true, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(1);
      RandomStringUtils.random(1, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, (-691), (-1413), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(664, (-379), 0, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3497, 0, (-493), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3853), (-3853), 1899, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3853 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, (-713), (-1408), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, (-673), (-1388), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-909));
      // Undeclared exception!
      RandomStringUtils.random(511, 511, (-909), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[3] = '5';
      charArray0[2] = 's';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = '|';
      charArray0[6] = '%';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 2964, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 56192;
      int int1 = Integer.MAX_VALUE;
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, Integer.MAX_VALUE, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 56319;
      int int1 = 1402;
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 1402, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-386);
      org.evosuite.runtime.Random.setNextRandom((-386));
      org.evosuite.runtime.Random.setNextRandom(127);
      RandomStringUtils.randomAlphabetic(127);
      RandomStringUtils.randomAscii(127);
      int int1 = 32;
      RandomStringUtils.randomAlphanumeric(32);
      RandomStringUtils.random(127, "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2273 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils.random(74, (-1017), 1553, false, false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 56167;
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56167, 56167, 56167, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 1, 0, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -108 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'z';
      charArray0[2] = 'b';
      charArray0[3] = '4';
      charArray0[4] = 'U';
      charArray0[5] = '2';
      charArray0[6] = 'A';
      charArray0[7] = 'C';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1810L);
      // Undeclared exception!
      RandomStringUtils.random(3589, 56167, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'F';
      charArray0[2] = '}';
      charArray0[3] = ' ';
      charArray0[4] = '#';
      charArray0[5] = 'Z';
      charArray0[6] = 'r';
      charArray0[7] = 'R';
      charArray0[8] = ';';
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, 1, 0, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0, (String) null);
      int int1 = 0;
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(499);
      int int2 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'u';
      RandomStringUtils.random(0, 0, Integer.MAX_VALUE, false, true, charArray0);
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56167, (String) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '2';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '<';
      charArray0[5] = '&';
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      boolean boolean1 = false;
      RandomStringUtils.random(0, 2660, 300, true, false);
      RandomStringUtils.randomAscii(2660);
      int int1 = 56191;
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '6';
      charArray0[2] = 'G';
      charArray0[3] = '*';
      charArray0[4] = ':';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomStringUtils.random(3, false, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(630, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 37;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(37, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(986, 986, 0, true, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(986, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, 25, 55296, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils.random(986, 986, 0, true, true);
      RandomStringUtils.random(986, "\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA\u03DA");
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, "");
      RandomStringUtils.random(2131, 2131, (-155), true, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = '&';
      charArray0[2] = 'y';
      charArray0[3] = '&';
      charArray0[4] = '6';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1322, Integer.MAX_VALUE, (-155), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      int int1 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils.randomAscii(1680);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1680, 1680, 1680, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 503;
      RandomStringUtils.random(503, false, false);
      RandomStringUtils.randomAscii(503);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(503, 503, 503, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-673), (-673), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '5';
      charArray0[2] = 'o';
      charArray0[3] = 'q';
      charArray0[4] = 'N';
      charArray0[5] = '|';
      charArray0[6] = '4';
      charArray0[7] = ']';
      charArray0[8] = 'R';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 294;
      RandomStringUtils.random(294);
      int int1 = (-2414);
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'H';
      charArray0[2] = '\"';
      charArray0[3] = 'r';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = 'I';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 294, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-350), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -350 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      int int1 = (-1455);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1455), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1455 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      RandomStringUtils.random(1615, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1388), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1388 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils.random(0, "hW^");
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -802 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils.random(0, false, false);
      int int0 = 3609;
      RandomStringUtils.random(3609);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'i';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, (String) null);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(37);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 3121;
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'x';
      charArray0[2] = 'y';
      charArray0[3] = 'v';
      charArray0[4] = '{';
      charArray0[5] = 'd';
      charArray0[6] = '';
      RandomStringUtils.random(3121, charArray0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(3121, false, false);
      RandomStringUtils.random(3121, charArray0);
      int int1 = 0;
      RandomStringUtils.random(0, "");
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(2906, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-131), (-5884), (-5884), false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -131 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'u';
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3792), 0, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3792 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(20);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1700 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, (-673), (-1388), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils.random(357, "r%oxCef?r");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 127;
      RandomStringUtils.random(127, "0N^,i?i0LLDc=");
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56167, 56167, 2147483607, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(44);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56167);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = RandomStringUtils.random(3544);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, (-2055), true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, (-1693), 822, false, true, (char[]) null);
  }
}
