/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:35:04 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.random(912, (-2383), 912, false, false);
      assertEquals("\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1\uF6B1", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1160);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      charArray0[2] = 'e';
      charArray0[3] = '\"';
      charArray0[4] = 'z';
      charArray0[5] = '3';
      charArray0[6] = 'N';
      charArray0[7] = '(';
      String string2 = RandomStringUtils.random(1160, 0, 57343, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'2', 'A', 'e', '\"', 'z', '3', 'N', '('}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(912, 0, 32, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1515, 0, 0, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1525;
      int int1 = 0;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1525, 0, 0, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      char char0 = '%';
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'C';
      charArray0[3] = 'K';
      // Undeclared exception!
      RandomStringUtils.random(27, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '5';
      charArray0[4] = 'n';
      charArray0[5] = '6';
      charArray0[6] = '%';
      charArray0[7] = '8';
      charArray0[8] = 'M';
      String string0 = RandomStringUtils.random(7, 7, 383, false, true, charArray0);
      assertArrayEquals(new char[] {'8', 'm', '4', '5', 'n', '6', '%', '8', 'M'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("8888888", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(21, (-258), (-170), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(955);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (-2383), false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(47370, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(46226);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 25, 1, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(46196);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(25, (-1448), 929, true, false, (char[]) null, (Random) mockRandom1);
      assertEquals("\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58\uFA58", string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(string0);
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1448), "G^[vro0o5+np9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1448 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(82, (-2365), 676, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4\uF6C4", string0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string1 = RandomStringUtils.random(2719, "G\"}B,Ho<3b^Wj&$");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(82, "G\"}B,Ho<3b^Wj&$");
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      String string0 = RandomStringUtils.random(25, 1, 743, false, false, (char[]) null, (Random) mockRandom2);
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string0);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(string0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      RandomStringUtils.random(724, "G\"}B,Ho<3b^Wj&$");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(36, 1304, 1304, true, true, charArray0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = (-2344);
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-2344), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '$';
      charArray0[2] = '3';
      charArray0[3] = 'v';
      MockRandom mockRandom0 = new MockRandom(1304);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1304, 1, (-5408), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 912;
      int int1 = 383;
      String string0 = RandomStringUtils.random(912, (-2365), 383, false, false);
      assertEquals("\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3\uF6C3", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1);
      assertEquals("\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = mockRandom0.nextInt(676);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(676, 1, 1, true, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2080 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, false, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(826, 942, (-942), true, true);
      assertEquals("\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE\u03AE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56192;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[2] = '.';
      // Undeclared exception!
      RandomStringUtils.random(2, 2, 392, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 59;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1497, 59, 59, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3036), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3036 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3155), (-3155), 770, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3155 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57346, (String) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = false;
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(1353, 1353, 0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 912;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(912);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(398, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -7 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(16, 16, 191, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '|';
      charArray0[2] = 'r';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'u', '|', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = '_';
      charArray0[4] = '}';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {']', 's', 's', '_', '}'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2453, 2453, 2453, false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(7, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(796);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, false, false);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'B';
      charArray0[2] = ':';
      charArray0[3] = 'X';
      charArray0[4] = 's';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1663), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1663 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1399, 745, 745, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 3711;
      int int1 = (-1429);
      boolean boolean0 = false;
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = ')';
      charArray0[2] = 'D';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3711, (-1429), (-1429), false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'r';
      charArray0[2] = 'l';
      charArray0[3] = '\"';
      charArray0[4] = '<';
      charArray0[5] = '';
      charArray0[6] = 'W';
      charArray0[7] = 'M';
      charArray0[8] = '*';
      String string0 = RandomStringUtils.random(0, 0, 2307, true, false, charArray0);
      assertArrayEquals(new char[] {'P', 'r', 'l', '\"', '<', '', 'W', 'M', '*'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(7, 7, 2876, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'V';
      charArray0[2] = 'I';
      charArray0[3] = 'K';
      // Undeclared exception!
      RandomStringUtils.random(27, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2365 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -240 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 203;
      String string0 = RandomStringUtils.random(203);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(203);
      assertEquals("                                                                                                                                                                                                           ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(203);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = (-2213);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2213 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4, 4, 131, true, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 3473;
      // Undeclared exception!
      RandomStringUtils.random(3473, (-25), 3473, true, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(726);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-4575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4575 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(1);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      LongStream longStream0 = mockRandom2.longs();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 1, false, false, (char[]) null, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(3744);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 2334;
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(3744, 0, 2334, true, false);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(912);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(3742, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 56192;
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0.0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(398);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'P';
      charArray0[2] = '{';
      charArray0[3] = '\"';
      charArray0[4] = 'M';
      charArray0[5] = 'X';
      charArray0[6] = '>';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(802, 4309, 32, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(25);
      assertEquals("                         ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17130, 17130, 17130, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 1319, 1319, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = false;
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(1353, 1353, 1319, false, false, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 912;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(912);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1831), (-1831), 1, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1831 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-2344);
      // Undeclared exception!
      RandomStringUtils.random(56178, 56178, (-2344), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1387), (-1), (-432), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1387 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RandomStringUtils.random(1);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1792), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1792 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -8 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      String string0 = RandomStringUtils.random(32, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "THtM&2?_gD:DQ=vdw/6");
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '2';
      charArray0[2] = ')';
      charArray0[3] = '*';
      charArray0[4] = 'L';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2076), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2076 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
