/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:31:31 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-1291L));
      int int0 = 1984;
      RandomStringUtils.random(1984, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-1291L));
      int int0 = 1984;
      // Undeclared exception!
      RandomStringUtils.random(1984, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 3394, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1261L));
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-549), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-1291L));
      int int0 = 1984;
      MockRandom mockRandom1 = new MockRandom((-1291L));
      // Undeclared exception!
      RandomStringUtils.random(1984, 0, 0, true, true, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56319, 56191, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 35;
      org.evosuite.runtime.Random.setNextRandom(35);
      int int1 = 55309;
      org.evosuite.runtime.Random.setNextRandom(55309);
      // Undeclared exception!
      RandomStringUtils.random(13);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 35;
      org.evosuite.runtime.Random.setNextRandom(35);
      int int1 = 55309;
      org.evosuite.runtime.Random.setNextRandom(55309);
      int int2 = 1;
      // Undeclared exception!
      RandomStringUtils.random(1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, 56320, 4, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(46231, "\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(528, (-778), 528, false, false);
      assertEquals("\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6\uFCF6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, (-3855), false, true, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom((-1015L));
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(1022, 1984, (-2608), false, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      RandomStringUtils.random(127, 127, 1984, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1291L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(41, 0, (-3680), true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '_';
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'U', 'U', '_', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1984, 0, 1, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'x';
      charArray0[2] = 'U';
      charArray0[3] = '4';
      String string1 = RandomStringUtils.random(0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(697, 1, 697, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(35);
      org.evosuite.runtime.Random.setNextRandom(1023);
      String string0 = RandomStringUtils.random(35);
      assertEquals("\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(35);
      assertEquals("66666666666666666666666666666666666", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(37, false, true);
      assertEquals("6666666666666666666666666666666666666", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = RandomStringUtils.randomNumeric(1196);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(647, 41, 41, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(35);
      org.evosuite.runtime.Random.setNextRandom(1023);
      String string0 = RandomStringUtils.randomNumeric(35);
      assertEquals("66666666666666666666666666666666666", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1023);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(35);
      org.evosuite.runtime.Random.setNextRandom(1023);
      String string0 = RandomStringUtils.random(35);
      assertEquals("\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2218L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.3F, float0, 0.01F);
      
      DoubleStream doubleStream1 = mockRandom0.doubles((long) 35, 0.0, 1417.160495568056);
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      DoubleStream doubleStream2 = mockRandom0.doubles((long) 1023);
      assertNotNull(doubleStream2);
      assertFalse(doubleStream2.equals((Object)doubleStream0));
      assertFalse(doubleStream2.equals((Object)doubleStream1));
      assertNotSame(doubleStream2, doubleStream0);
      assertNotSame(doubleStream2, doubleStream1);
      
      String string1 = RandomStringUtils.randomAlphanumeric(35);
      assertEquals("77777777777777777777777777777777777", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1261L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, (-549), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, (-1), (-786), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(35);
      org.evosuite.runtime.Random.setNextRandom(1023);
      String string0 = RandomStringUtils.random(35);
      assertEquals("\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF\u03FF", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom((-2218L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles((long) 35, 0.0, 1417.160495568056);
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      DoubleStream doubleStream2 = mockRandom0.doubles((long) 1023);
      assertNotNull(doubleStream2);
      assertFalse(doubleStream2.equals((Object)doubleStream1));
      assertFalse(doubleStream2.equals((Object)doubleStream0));
      assertNotSame(doubleStream2, doubleStream1);
      assertNotSame(doubleStream2, doubleStream0);
      
      String string1 = RandomStringUtils.random(35, 1023, 35, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422\u0422", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'x';
      charArray0[2] = '_';
      charArray0[3] = '4';
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'U', 'x', '_', '4'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string2 = RandomStringUtils.random(0, false, false);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 127, 1, false, true);
      assertEquals("", string3);
      assertNotNull(string3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RandomStringUtils.random(697, 1, 697, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char char0 = 'k';
      char char1 = '<';
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = 't';
      charArray0[3] = '<';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = '<';
      // Undeclared exception!
      RandomStringUtils.random(1640, 0, (-950), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, (-3794), 1, false, true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(46233, 46233, 46233, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.random(1662);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(1662);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(26);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'm';
      charArray0[2] = ']';
      MockRandom mockRandom0 = new MockRandom(1687L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(47371, 47371, 26, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 2958, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 128;
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs((-1L), 1L);
      assertNotNull(longStream1);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (-291), 4733, true, true);
      assertEquals("\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD\uFEDD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1456;
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '<';
      charArray0[2] = 'N';
      charArray0[3] = 'M';
      charArray0[4] = 'C';
      String string0 = RandomStringUtils.random(1456, 0, 1456, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'R', '<', 'N', 'M', 'C'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1456);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 102;
      String string0 = RandomStringUtils.random(102, ",+");
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string0);
      assertNotNull(string0);
      
      int int1 = (-1403);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1403 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(36L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 128, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1202;
      int int1 = (-1346);
      boolean boolean0 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = '{';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 90L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs((-1L), (long) 1202);
      assertNotNull(longStream1);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      
      LongStream longStream2 = mockRandom0.longs();
      assertNotNull(longStream2);
      assertFalse(longStream2.equals((Object)longStream0));
      assertFalse(longStream2.equals((Object)longStream1));
      assertNotSame(longStream2, longStream0);
      assertNotSame(longStream2, longStream1);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      mockRandom0.setSeed(1202);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1202, 1202, (-1346), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      int int1 = (-1291);
      boolean boolean0 = true;
      String string2 = RandomStringUtils.random(0, (-1291), 0, true, true, (char[]) null, (Random) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = 0;
      boolean boolean1 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int3 = 127;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      IntStream intStream0 = mockRandom0.ints(0, 4313);
      assertNotNull(intStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotSame(doubleStream1, doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs(2875L, (long) 0, (long) 127);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 472;
      String string1 = RandomStringUtils.random(472, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = (-2093);
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(472, (-2093), 472, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1182), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1182 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 46368;
      // Undeclared exception!
      RandomStringUtils.random(46368, "jBJdXC6-X!Qx");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2795, 2795, 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1984, (-1), (-854), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = '9';
      charArray0[2] = 'y';
      charArray0[3] = 'h';
      charArray0[4] = 'o';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'g', '9', 'y', 'h', 'o'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-679), 164, 398, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -679 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = ' ';
      charArray0[2] = ':';
      charArray0[3] = 'a';
      charArray0[4] = 'Z';
      charArray0[5] = ':';
      charArray0[6] = 'O';
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'$', ' ', ':', 'a', 'Z', ':', 'O'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1955), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1955 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(38014);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '`';
      charArray0[2] = '2';
      charArray0[3] = 'R';
      charArray0[4] = '*';
      charArray0[5] = '<';
      charArray0[6] = 'U';
      charArray0[7] = '|';
      charArray0[8] = 'J';
      String string1 = RandomStringUtils.random(2230, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'g', '`', '2', 'R', '*', '<', 'U', '|', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -86 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -94 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = (-3801);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3801));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3801 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1229 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1725), (-1725), 1253, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1725 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'Z';
      charArray0[2] = 'A';
      charArray0[3] = '0';
      charArray0[4] = 'w';
      charArray0[5] = '/';
      charArray0[6] = '\\';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1899), (-1899), 863, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1899 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils.random(46368, false, false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1291L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2456);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2456, (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-3167);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3167 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-390L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 32, 32, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, "MbUhOj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = 0;
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = ']';
      charArray0[2] = '&';
      charArray0[3] = 'i';
      charArray0[4] = '$';
      charArray0[5] = '<';
      charArray0[6] = 'B';
      charArray0[7] = 'd';
      charArray0[8] = ' ';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3756), 0, 432, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3756 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string4 = RandomStringUtils.random(0, 56319, 0, true, true);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, (-149), 2434, false, true);
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      RandomStringUtils.random(2434, true, true);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(704);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(704, 704, 704, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 4178;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 't';
      charArray0[2] = '/';
      charArray0[3] = '{';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4178, 4178, 4178, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1221);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-321), "z3xMzi.l{}k*_qkq,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -321 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = RandomStringUtils.random(4265);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(4265, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-3855);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3855), "6za%IeE;3d~q>\"zU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3855 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2082);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 3080;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3080);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1221);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'n';
      charArray0[2] = 'm';
      charArray0[3] = '*';
      charArray0[4] = 'l';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1070), 70, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {':', 'n', 'm', '*', 'l'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = RandomStringUtils.random(430, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1464 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-2610);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2610 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(4, 56320, 4, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(10);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 4657;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(4657);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'Y';
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1261L));
      String string0 = RandomStringUtils.random(11, (-1140), 11, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C\uFB8C", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = RandomStringUtils.random(1107);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -94 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      charArray0[2] = '=';
      charArray0[3] = 'u';
      charArray0[4] = ':';
      charArray0[5] = 'q';
      charArray0[6] = 'c';
      charArray0[7] = '0';
      charArray0[8] = 'f';
      String string0 = RandomStringUtils.random(128, charArray0);
      assertEquals("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string0);
  }
}
