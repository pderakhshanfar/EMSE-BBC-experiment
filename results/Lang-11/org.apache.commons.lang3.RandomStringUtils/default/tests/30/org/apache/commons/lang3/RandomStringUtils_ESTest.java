/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:38:41 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(986);
      RandomStringUtils.random(39);
      MockRandom mockRandom1 = new MockRandom(1L);
      RandomStringUtils.random(986, 56191, 986, false, false, (char[]) null, (Random) mockRandom1);
      RandomStringUtils.randomAscii(128);
      RandomStringUtils.random(39);
      RandomStringUtils.randomAscii(39);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56191);
      mockRandom0.nextGaussian();
      RandomStringUtils.random(1350, 1633, 45, false, true, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.randomAscii(986);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 17;
      org.evosuite.runtime.Random.setNextRandom(17);
      org.evosuite.runtime.Random.setNextRandom(17);
      RandomStringUtils.randomAlphanumeric(17);
      RandomStringUtils.random(17, false, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      charArray0[5] = '2';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 17, 17, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 986;
      MockRandom mockRandom0 = new MockRandom(986);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(986, 56191, 24, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(986);
      mockRandom0.ints();
      // Undeclared exception!
      RandomStringUtils.random(3417, 56320, 57343, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      RandomStringUtils.random(978, 57343, 17, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(978, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57362, (-148), 0, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-4505);
      org.evosuite.runtime.Random.setNextRandom((-4505));
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAscii(1307);
      RandomStringUtils.randomAlphabetic(1307);
      int int1 = 45371;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(45371, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2011);
      assertNotNull(string0);
      
      RandomStringUtils.random(2011, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(2011);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      RandomStringUtils.random(25, 56320, 56192, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-40), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -40 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(3035, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      RandomStringUtils.random(978, 57343, 17, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(57343, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(1327, (-1), 1327, false, false);
      RandomStringUtils.random(15, string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      RandomStringUtils.random(978, 57343, 9, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(39259);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1523, 56192, 37, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils.random(986, 2546, 24, false, false);
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'l';
      charArray0[2] = '+';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[5] = 'Z';
      charArray0[6] = '4';
      MockRandom mockRandom0 = new MockRandom(3016L);
      RandomStringUtils.random(24, 1, 986, true, false, charArray0, (Random) mockRandom0);
      int int0 = (-1002);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1002 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 986;
      int int1 = (-1089);
      MockRandom mockRandom0 = new MockRandom((-1089));
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(986, 56191, 24, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      RandomStringUtils.random(17, 1743, 1, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 1702, false, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringUtils.random(2512, 1211, 2512, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0);
      int int0 = 23;
      // Undeclared exception!
      RandomStringUtils.random(23, 8, (-1089), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 57343;
      MockRandom mockRandom0 = new MockRandom((-1807L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 5092, 5092, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(21, (-256), 25, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byte byte0 = (byte) (-110);
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      char[] charArray0 = new char[6];
      charArray0[1] = '@';
      charArray0[2] = ':';
      charArray0[3] = '|';
      charArray0[4] = 'K';
      charArray0[5] = 'a';
      // Undeclared exception!
      RandomStringUtils.random(2138, (int) (byte)0, 5, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(436, 10, 436, true, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '.';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2666), 481, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2666
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(2100);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      RandomStringUtils.random(598, 0, 3224, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-867));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'X';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      String string0 = RandomStringUtils.random(0, 0, 123, true, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'*', 'X', '*', '*', '*', 'q', 'q'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46351, "&+T?4a:@fqR");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1567);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1567, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-5079);
      boolean boolean0 = false;
      boolean boolean1 = false;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1567, 1, (-5079), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "^v;Q~6XT");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, true, true);
      assertNotNull(string3);
      assertEquals("", string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'J';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      charArray0[4] = '&';
      charArray0[5] = 'K';
      charArray0[6] = '{';
      charArray0[7] = 'w';
      charArray0[8] = '8';
      String string4 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'~', 'J', 'N', '#', '&', 'K', '{', 'w', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string5 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(0, false, true);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = RandomStringUtils.randomAscii(1);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals(" ", string8);
      
      String string9 = RandomStringUtils.random(1226, false, false);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1089));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1089 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '/';
      charArray0[2] = '^';
      charArray0[3] = 'J';
      charArray0[4] = 'N';
      charArray0[5] = ']';
      charArray0[6] = '$';
      charArray0[7] = '^';
      charArray0[8] = '9';
      String string1 = RandomStringUtils.random(0, 0, 32, false, true, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'%', '/', '^', 'J', 'N', ']', '$', '^', '9'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int1 = 126;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(126);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'u';
      charArray0[2] = 'A';
      charArray0[3] = '@';
      charArray0[4] = 'O';
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'O', 'u', 'A', '@', 'O'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string3 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, false, false);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(0, "kSG");
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1773, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 14, 14, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(12);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = '4';
      String string1 = RandomStringUtils.random(0, 0, (-1547), true, true, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'Z', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2089);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1280 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(49, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(49, 0, (-2435), false, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2435 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-812), (-812), (-812), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -812 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = null;
      String string1 = RandomStringUtils.random(0, 0, 0, false, false, (char[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3028), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3028 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 892;
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      RandomStringUtils.random(892, charArray0);
      RandomStringUtils.random(892);
      int int1 = 0;
      RandomStringUtils.random(0);
      int int2 = 56192;
      boolean boolean0 = false;
      boolean boolean1 = true;
      MockRandom mockRandom0 = new MockRandom(56192);
      mockRandom0.longs((long) 892);
      mockRandom0.nextInt();
      long long0 = (-1748L);
      mockRandom0.nextDouble();
      int int3 = 1;
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1748L), (-1L), (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 0;
      String string2 = RandomStringUtils.randomNumeric(0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = (-702);
      String string3 = RandomStringUtils.random(0, (-702), 1, true, true);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '<';
      charArray0[2] = 'K';
      charArray0[3] = 's';
      MockRandom mockRandom0 = new MockRandom((-2975L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 2023, 2023, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = (-3129);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3129), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3129 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1567;
      String string0 = RandomStringUtils.randomAscii(1567);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1567, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3705), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3705 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(7, true, true);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-2180);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2180 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1316 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 935, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(407, 1945, 407, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3802, (-1), (-1089), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-589);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-589), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -589 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = 1425;
      int int2 = 0;
      boolean boolean0 = true;
      boolean boolean1 = false;
      char[] charArray0 = new char[6];
      char char0 = '4';
      charArray0[0] = '4';
      charArray0[1] = '2';
      charArray0[2] = 'G';
      char char1 = 't';
      charArray0[3] = 't';
      char char2 = '%';
      charArray0[4] = '%';
      char char3 = ' ';
      charArray0[5] = ' ';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 0, (double) 1425, (double) 1425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(30);
      assertNotNull(string0);
      assertEquals("                              ", string0);
      
      String string1 = RandomStringUtils.random(10, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(978, 57343, 17, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(17, "\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3035, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = RandomStringUtils.random(1549, "&+T?4a:@fqR");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-867), "&+T?4a:@fqR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -867 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1247, 1247, 1247, false, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3012);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 230;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(230);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 1302;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '}';
      charArray0[2] = 'I';
      charArray0[3] = '~';
      charArray0[4] = '-';
      charArray0[5] = '8';
      charArray0[6] = '/';
      charArray0[7] = 'F';
      String string0 = RandomStringUtils.random(1302, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', '}', 'I', '~', '-', '8', '/', 'F'}, charArray0);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(1302, true, false);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = RandomStringUtils.random(2100);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      MockRandom mockRandom0 = new MockRandom((-980));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2100, (-980), 2100, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = RandomStringUtils.random(2512, 1211, 6, true, true);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2512, true, true);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "1[V=@(h}~USLDP[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'a';
      charArray0[2] = '~';
      charArray0[3] = '5';
      charArray0[4] = 'q';
      charArray0[5] = '_';
      charArray0[6] = 'X';
      String string2 = RandomStringUtils.random(6116, 0, 0, false, false, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'/', 'a', '~', '5', 'q', '_', 'X'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(24);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56314);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1432));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1432 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }
}
