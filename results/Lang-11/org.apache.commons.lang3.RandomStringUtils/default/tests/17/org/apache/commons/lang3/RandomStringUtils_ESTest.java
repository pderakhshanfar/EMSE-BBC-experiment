/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:18:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(209, 55296, 837, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.random(1780, "U");
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(902, 55296, 902, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.random(30);
      int int0 = (-908);
      org.evosuite.runtime.Random.setNextRandom((-908));
      RandomStringUtils.randomAlphanumeric(1410);
      int int1 = 9;
      RandomStringUtils.random(9);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-666), 9, (-908), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -666 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAscii(1);
      org.evosuite.runtime.Random.setNextRandom(18);
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.random(1780, "U/");
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1780, 57343, 1, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(13, 57343, 18, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(766, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-1L));
      // Undeclared exception!
      RandomStringUtils.random(2267, 56320, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 56192;
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int1 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(17, 56320, 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      org.evosuite.runtime.Random.setNextRandom(57343);
      // Undeclared exception!
      RandomStringUtils.random(57343, false, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(47977);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, (-193), 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 123;
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, (-1), 56192, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(431L);
      mockRandom0.doubles(1L);
      mockRandom0.nextBoolean();
      mockRandom0.nextInt(788);
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      // Undeclared exception!
      RandomStringUtils.random(788, 0, 44, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46220);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(1, 0, (-971), false, false);
      RandomStringUtils.randomAscii(541);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '`';
      charArray0[2] = 't';
      charArray0[3] = '#';
      charArray0[4] = 'k';
      charArray0[5] = '~';
      charArray0[6] = 'E';
      charArray0[7] = '?';
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-971), (-971), 0, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -971 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringUtils.random(26);
      RandomStringUtils.randomAscii(26);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(1347L);
      // Undeclared exception!
      RandomStringUtils.random(35, 19, 29, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(409, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = (-333);
      boolean boolean0 = true;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1192, 123, 1192, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2248, 21, 2447, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(584, 584, 584, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(766, 766, 766, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(778, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(1L);
      mockRandom0.nextBoolean();
      mockRandom0.nextInt(788);
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      // Undeclared exception!
      RandomStringUtils.random(788, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringUtils.random(1780, "U/");
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'O';
      charArray0[2] = '<';
      charArray0[3] = '`';
      charArray0[4] = 'e';
      charArray0[5] = '5';
      charArray0[6] = 'k';
      charArray0[7] = '5';
      MockRandom mockRandom0 = new MockRandom(1780);
      mockRandom0.doubles((long) '*');
      mockRandom0.nextInt(1780);
      // Undeclared exception!
      RandomStringUtils.random(1780, 0, 0, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.randomAlphanumeric(0);
      int int0 = (-971);
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-971), true, false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1192, (-333), 123, true, true, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(416, true, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringUtils.random(25, (-2080), 128, false, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphabetic(0);
      int int1 = 84;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(84, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(902, 902, (-1127), false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomStringUtils.random(999);
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '/';
      charArray0[2] = '|';
      charArray0[3] = 'T';
      charArray0[4] = 'X';
      charArray0[5] = '<';
      charArray0[6] = ')';
      charArray0[7] = 'f';
      charArray0[8] = '(';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 999, 0, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1189));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1189), (-1189), (-1189), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1189 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'J';
      charArray0[2] = '=';
      charArray0[3] = ' ';
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2421), (-2421), 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2421 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, (-1), (-1), false, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2518), (-2518), (-2518), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2518 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = '8';
      charArray0[3] = 'w';
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1248), (-1248), (-1248), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1248 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomNumeric(0);
      int int1 = (-370);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-370), 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -370 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, (-1940), false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 438;
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(438, 438, (-1935), false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-78), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -78 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils.random(10, 1211, Integer.MAX_VALUE, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 32;
      RandomStringUtils.random(32);
      int int1 = (-186);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -186 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "The chars array must not be empty");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      RandomStringUtils.random(56320, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'b';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'M';
      charArray0[2] = ')';
      charArray0[3] = 'E';
      RandomStringUtils.random(0, 1899, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 0, 123, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils.random(0, 2936, 0, false, true);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -975 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-2207);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2207 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2582;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2582, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1840 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-381));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -381 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-347);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -347 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45340, false, false);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.random(1841, false, false);
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(0, (-1496), 866, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RandomStringUtils.random(0, "");
      RandomStringUtils.randomAscii(0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'D';
      charArray0[2] = '.';
      MockRandom mockRandom0 = new MockRandom((-1359L));
      mockRandom0.doubles((double) (-760), (double) 0);
      mockRandom0.setSeed(0L);
      mockRandom0.longs();
      RandomStringUtils.random(0, (-760), 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(39, 36, 39, true, true);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56321, 56210, 56321, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1441;
      RandomStringUtils.random(1441, "ze7@BJx");
      RandomStringUtils.randomAscii(1441);
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(1441, false, true);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(56320);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RandomStringUtils.randomAscii(2404);
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = 'd';
      charArray0[2] = 'W';
      charArray0[3] = ' ';
      charArray0[4] = '<';
      charArray0[5] = 'Z';
      RandomStringUtils.random(2404, 0, 2404, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(32);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RandomStringUtils.random(754);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(5042, 1780, (-1879), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 17;
      // Undeclared exception!
      RandomStringUtils.random(17, 56168, 56319, false, false);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RandomStringUtils.random(1, "N_");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RandomStringUtils.random(66, (String) null);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RandomStringUtils.random(26);
      RandomStringUtils.randomAscii(26);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(1347L);
      mockRandom0.nextInt((-1));
      RandomStringUtils.random(26, (-1), 26, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(788);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(788, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RandomStringUtils.random(0, false, false);
          RandomStringUtils randomStringUtils0 = new RandomStringUtils();
          RandomStringUtils.random(0, "");
          RandomStringUtils.randomAscii(0);
          char[] charArray0 = new char[9];
          charArray0[0] = '8';
          charArray0[1] = 'y';
          charArray0[2] = 'c';
          charArray0[3] = 'T';
          charArray0[4] = '%';
          charArray0[5] = ')';
          charArray0[6] = 'z';
          charArray0[7] = '7';
          charArray0[8] = 'Q';
          RandomStringUtils.random(38, charArray0);
          // Undeclared exception!
          RandomStringUtils.random(2410, 0, 2410, true, true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
