/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:15:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 46233);
      mockRandom0.longs();
      mockRandom0.nextInt();
      RandomStringUtils.random(1585, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.randomAscii(0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(46233);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-2913);
      int int1 = 56192;
      int int2 = (-628);
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-628), false, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom((-868));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = mockRandom1.nextBoolean();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(boolean0);
      
      IntStream intStream0 = mockRandom1.ints((-1270), 0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(265, 56319, 1015, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(4547);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(4547, 56191, 4547, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom('_');
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      org.evosuite.runtime.Random.setNextRandom((-723));
      String string0 = RandomStringUtils.randomAlphanumeric(6);
      assertNotNull(string0);
      assertEquals("vvvvvv", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-453), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 141;
      org.evosuite.runtime.Random.setNextRandom(141);
      RandomStringUtils.randomAlphabetic(839);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2992), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2992 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      String string0 = RandomStringUtils.random(41, 46227, (-868), true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495\uB495", string0);
      
      String string1 = RandomStringUtils.random(7, (-868), 29, true, true, (char[]) null, (Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uFC9E\uFC9E\uFC9E\uFC9E\uFC9E\uFC9E\uFC9E", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.random(1, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(12, (-1), (-1), false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(1481, 46203, (-868), true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(46224);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '2';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = 'l';
      charArray0[7] = '3';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'_', '2', '\u0000', '_', '_', '_', 'l', '3'}, charArray0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1481, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(20, 20, 20, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[4] = 'h';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = ' ';
      charArray0[6] = 'y';
      charArray0[7] = 'y';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'h', '\u0000', 'y', 'y', 'y', ' ', 'y', 'y'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 2515;
      int int1 = 1009;
      // Undeclared exception!
      RandomStringUtils.random(1009, 0, (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '2';
      charArray0[4] = 'F';
      charArray0[5] = '_';
      charArray0[6] = 'l';
      MockRandom mockRandom0 = new MockRandom('_');
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 34, false, false, charArray0, (Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'_', '2', '\u0000', '\u0000', 'F', '_', 'l', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '2';
      charArray0[2] = '8';
      charArray0[3] = 'b';
      charArray0[5] = '_';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 13, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = RandomStringUtils.random(7, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47377, 47377, 1525, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(1375, (-190), 1375, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-2268), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(261);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                     ", string0);
      
      int int0 = (-2159);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'f';
      charArray0[2] = '6';
      charArray0[3] = ';';
      charArray0[4] = '\\';
      charArray0[5] = 'W';
      charArray0[6] = 'a';
      charArray0[7] = 'J';
      charArray0[8] = ')';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2159), 0, (-2159), true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2159 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(6, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-107));
      String string0 = RandomStringUtils.random(31, 198, (-107), false, false);
      assertNotNull(string0);
      assertEquals("\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131\u0131", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(31);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0000000000000000000000000000000", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(0, 3024, 0, false, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      float float1 = mockRandom0.nextFloat();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.1F, float1, 0.01F);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3024, (-1), (-1), true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2514), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2514 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -19 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = 'x';
      charArray0[2] = 'y';
      charArray0[3] = '{';
      charArray0[4] = 'h';
      charArray0[5] = 'V';
      charArray0[6] = '~';
      charArray0[7] = 'P';
      String string0 = RandomStringUtils.random(1884, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'^', 'x', 'y', '{', 'h', 'V', '~', 'P'}, charArray0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1900, 1900, 1, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string2 = RandomStringUtils.random(0, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -45 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(278);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(278, 278, 278, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      String string0 = RandomStringUtils.random(0, (-1543), 0, true, false, charArray0, (Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(3L, long0);
      
      mockRandom0.setSeed((-1L));
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string1 = RandomStringUtils.random(0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      float float1 = mockRandom0.nextFloat();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.4F, float1, 0.01F);
      
      IntStream intStream1 = mockRandom0.ints();
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      
      mockRandom0.setSeed(2);
      int int2 = 55296;
      LongStream longStream0 = mockRandom0.longs((long) 2);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-103);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 0, 55296, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -507 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3968, (-647), (-1), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -647
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 21, (-268), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(6, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '!';
      charArray0[2] = '}';
      charArray0[3] = 'F';
      charArray0[4] = 'V';
      charArray0[5] = '2';
      charArray0[6] = '\\';
      charArray0[7] = '#';
      charArray0[8] = 'U';
      MockRandom mockRandom0 = new MockRandom(278);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2089, 0, 278, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(25, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'o';
      String string0 = RandomStringUtils.random(0, 1, 2069, true, false, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'a', 'o'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 32;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(32, 1, 2069, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2835, 2835, 2835, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 335;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(335);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'v';
      charArray0[2] = '/';
      charArray0[3] = 'y';
      charArray0[4] = 'E';
      charArray0[5] = '6';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', 'v', '/', 'y', 'E', '6'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(945);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3407L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-31), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -31 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(1002);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = 3665;
      String string6 = RandomStringUtils.random(3665);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.randomAlphanumeric(0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = RandomStringUtils.random(1002, "Requested random string length ");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2072 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(127, 127, 1477, true, true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 911;
      String string0 = RandomStringUtils.random(911, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '2';
      charArray0[2] = '8';
      charArray0[3] = 'b';
      charArray0[4] = 'F';
      charArray0[5] = '_';
      charArray0[6] = 'l';
      charArray0[7] = '3';
      MockRandom mockRandom0 = new MockRandom(3407L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(37);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0, "Requested random string length ");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = 0;
      boolean boolean1 = false;
      // Undeclared exception!
      RandomStringUtils.random(128, 55296, 0, false, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1173), (-1173), 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1173 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 13;
      String string0 = RandomStringUtils.random(13, " is less than 0.");
      assertNotNull(string0);
      assertEquals("             ", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(911);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-3904);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-3904), (-297), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 3812, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -963 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1629), (-1629), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1629 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(6, (-3192), 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '4';
      charArray0[2] = '%';
      charArray0[3] = '2';
      charArray0[4] = 'Z';
      charArray0[5] = 'm';
      String string1 = RandomStringUtils.random(4197, 0, 4197, true, true, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "]");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'F';
      charArray0[2] = 'D';
      charArray0[3] = 's';
      charArray0[4] = '$';
      charArray0[5] = 'D';
      charArray0[6] = '\'';
      MockRandom mockRandom0 = new MockRandom(921);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(174, 2675, 921, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
