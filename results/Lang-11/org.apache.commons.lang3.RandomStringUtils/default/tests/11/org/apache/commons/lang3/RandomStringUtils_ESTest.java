/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:30:08 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "IiDMVmM=nc)|ug`R");
      assertNotNull(string2);
      assertEquals("", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      assertNotNull(randomStringUtils1);
      assertFalse(randomStringUtils1.equals((Object)randomStringUtils0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(973L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      
      String string3 = RandomStringUtils.random(3954, (-4117), 21, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string3);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(26427);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "IiDMVmM=nc)|ug`R");
      assertNotNull(string2);
      assertEquals("", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      assertNotNull(randomStringUtils1);
      assertFalse(randomStringUtils1.equals((Object)randomStringUtils0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(973L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextGaussian();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(3954, 56192, 26427, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      assertNotNull(randomStringUtils1);
      assertFalse(randomStringUtils1.equals((Object)randomStringUtils0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'q';
      charArray0[3] = '5';
      charArray0[4] = 'j';
      charArray0[5] = '\'';
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      charArray0[6] = '%';
      charArray0[7] = 'G';
      String string0 = RandomStringUtils.random(1, 0, (-1978), true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'e', 'e', 'q', '5', 'j', '\'', '%', 'G'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("q", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1978 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2, 0, 56319, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("33", string0);
      
      String string1 = RandomStringUtils.random(0, 1604, 56319, false, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(271, 0, 20, true, true, charArray0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = 128;
      String string4 = RandomStringUtils.random(44, 128, 0, false, false, (char[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080", string4);
      
      String string5 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.random(0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      int int1 = 2180;
      String string7 = RandomStringUtils.randomAscii(2180);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(46365, (-1082), (-277), false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, 57343, 57343, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 0, (-51), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomAscii(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string5 = RandomStringUtils.random(13, 2246, (-1052), false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6\u08C6", string5);
      
      String string6 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("\u0000", string6);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = (-1074);
      boolean boolean0 = true;
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(0, (-1074), (-1074), true, true, (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 36;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(36, 0, (-432), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55287);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2467), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2467 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(10444, 10444, 10444, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1169);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1169, 1169, (-19), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(0, (-1074), (-1074), true, true, (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = 0;
      String string3 = RandomStringUtils.random(0, (-265), 0, true, true, (char[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.randomAscii(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, (-1074), 11, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1169);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1169, 1169, 1169, true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-909L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(926, 926, 926, true, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom(983L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(23);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string1 = RandomStringUtils.randomAscii(23);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                       ", string1);
      
      int int0 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(1711, 0, 23, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 566;
      String string1 = RandomStringUtils.randomAscii(566);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(566, 0, 566, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(566);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEqualsstring2);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(566, 0, 566, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'Q';
      // Undeclared exception!
      RandomStringUtils.random(36399, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(727, 4708, 5, true, true);
      assertNotNull(string0);
      assertEquals("\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264\u1264", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(805, (-1737), 0, true, true);
      assertNotNull(string0);
      assertEquals("\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937\uF937", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1496 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47345, "I&#W0/,");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1010;
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '_';
      charArray0[2] = 'd';
      charArray0[3] = 'o';
      charArray0[4] = 'B';
      charArray0[5] = 'j';
      String string0 = RandomStringUtils.random(1010, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'!', '_', 'd', 'o', 'B', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = RandomStringUtils.random((int) 'o');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'o';
      charArray1[1] = ')';
      charArray1[2] = 'd';
      charArray1[3] = '!';
      charArray1[4] = 'o';
      charArray1[5] = '_';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-697), (-697), 56191, true, true, charArray1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -697 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(3262);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '-';
      charArray0[2] = 'D';
      charArray0[3] = 'c';
      charArray0[4] = 'n';
      charArray0[5] = '2';
      charArray0[6] = '$';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(25, (-2376), 25, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2376
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1832));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1832 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(3262, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'y';
      String string1 = RandomStringUtils.random(3262, charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'C', 'y'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      String string1 = RandomStringUtils.random(1, "\u0000");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      
      int int1 = (-1);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'A';
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'f', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(972, 127, 56319, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '*';
      charArray0[2] = 'X';
      charArray0[3] = '$';
      charArray0[4] = 'R';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1668, 1668, 0, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1668
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1839 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1117, 3666, 1117, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(566);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEqualsstring2);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(566, 0, 566, true, true, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(127, true, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3262, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1243), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1243 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = RandomStringUtils.randomAscii(1491);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(4319);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '-';
      charArray0[2] = 'j';
      charArray0[3] = ':';
      charArray0[4] = '+';
      charArray0[5] = '|';
      charArray0[6] = 'U';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(0, 1, 4319, false, false, charArray0, (Random) mockRandom0);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'a', '-', 'j', ':', '+', '|', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = 'J';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(24, 55296, 1, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55296
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2858);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string3 = RandomStringUtils.random(0, true, false);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1233;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1233);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3276);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(45, 45, 57343, true, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2324), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2324 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(39);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3262, 45303, 45303, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-539), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -539 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = (-1074);
      boolean boolean0 = true;
      char[] charArray0 = null;
      String string2 = RandomStringUtils.random(0, (-1074), (-1074), true, true, (char[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = 0;
      String string3 = RandomStringUtils.random(0, (-265), 0, true, true, (char[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = 0;
      String string5 = RandomStringUtils.random(0);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = RandomStringUtils.randomAscii(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string7 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = RandomStringUtils.random(0, "<gb*V&VJcFQp0.4X w");
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = RandomStringUtils.random(0, "y$Vs'DHqq]dPFP");
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string10);
      assertEquals("", string10);
      
      String string11 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string11);
      assertEquals("", string11);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, Integer.MAX_VALUE, true, true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(16);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 323, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = 123;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, 123, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -597 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 448;
      int int1 = Integer.MAX_VALUE;
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'k';
      charArray0[2] = '_';
      charArray0[3] = '/';
      charArray0[4] = 'e';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(448, 448, Integer.MAX_VALUE, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 448
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(1017, 0, 1, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -624 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -7 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(1668, "$YO{iT&pQt");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1010;
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '_';
      charArray0[2] = 'd';
      charArray0[3] = 'o';
      charArray0[4] = 'B';
      charArray0[5] = 'j';
      String string0 = RandomStringUtils.random(1010, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'!', '_', 'd', 'o', 'B', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2687 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      assertNotNull(randomStringUtils1);
      assertFalse(randomStringUtils1.equals((Object)randomStringUtils0));
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string4 = RandomStringUtils.random(12, 55311, 12, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\uD810\uDC01\uD810\uDC01\uD810\uDC01\uD810\uDC01\uD810\uDC01\uD810\uDC01", string4);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(55311);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0, "");
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils randomStringUtils1 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1351, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = '\"';
      charArray0[2] = '-';
      charArray0[3] = '\\';
      charArray0[4] = 'Y';
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }
}
