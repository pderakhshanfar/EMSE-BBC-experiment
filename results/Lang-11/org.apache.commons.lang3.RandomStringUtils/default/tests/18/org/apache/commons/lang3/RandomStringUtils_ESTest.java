/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:32:51 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom((-878L));
      MockRandom mockRandom2 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(32, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.randomAscii(1414);
      org.evosuite.runtime.Random.setNextRandom(Integer.MAX_VALUE);
      RandomStringUtils.randomAlphanumeric(1414);
      RandomStringUtils.random(1414, true, true);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(55296);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.random(3191);
      RandomStringUtils.random(1);
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '8';
      charArray0[2] = 'y';
      charArray0[3] = 'F';
      charArray0[4] = 'y';
      charArray0[5] = 'K';
      RandomStringUtils.random(251, 1, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(127);
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(127, (-3544), 127, false, false, (char[]) null, (Random) mockRandom0);
      org.evosuite.runtime.Random.setNextRandom(43);
      // Undeclared exception!
      RandomStringUtils.random(12, 56192, 6, false, false, (char[]) null, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom((-878L));
      mockRandom1.nextBoolean();
      mockRandom1.nextFloat();
      MockRandom mockRandom2 = new MockRandom();
      RandomStringUtils.random(32, 0, 0, false, false, (char[]) null, (Random) mockRandom2);
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 153, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 113, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      int int1 = (-1);
      boolean boolean1 = true;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1), true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 46196;
      // Undeclared exception!
      RandomStringUtils.random(46196, "b>+X+/CC`+9S_y");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1056), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1056 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      MockRandom mockRandom2 = new MockRandom((-3109L));
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      // Undeclared exception!
      RandomStringUtils.random(1694, (-1099), (-3326), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string1 = RandomStringUtils.random(1, (-176), 38, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("\uFF50", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 5161, 4, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-1099), true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-577);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1186, (-2469), (-577), true, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2908;
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '3';
      charArray0[2] = 'p';
      charArray0[3] = '$';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4331), (-4331), (-4331), false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4331 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45, 15, 15, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'x';
      charArray0[2] = '6';
      MockRandom mockRandom0 = new MockRandom(1011);
      assertNotNull(mockRandom0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1011, 1011, 19, false, true, charArray1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 4616, 56192, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray0[1] = ']';
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 42, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1794, 56192, 1144, true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3838, 57343, 3838, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 120;
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 32, 120, true, true, charArray0, (Random) null);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -111 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = '{';
      String string1 = RandomStringUtils.random(1, 1, 123, false, false, charArray0);
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      assertEquals("{", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'h', '{', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(52);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2917), (-2917), (-1), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2917 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      charArray0[3] = 'h';
      charArray0[1] = '{';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1407), (-1), 55296, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1407 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2904;
      String string0 = "-";
      String string1 = RandomStringUtils.random(2904, "-");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      String string2 = RandomStringUtils.random(2904, charArray0);
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'%'}, charArray0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(2904, true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2607 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(127);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2158, 2158, 2158, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'x';
      charArray0[2] = '6';
      charArray0[3] = '=';
      charArray0[4] = 'T';
      String string1 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string1);
      assertEquals(5, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'A', 'x', '6', '=', 'T'}, charArray0);
      
      int int0 = 606;
      String string2 = RandomStringUtils.randomAscii(606);
      assertNotNull(string2);
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'T';
      charArray1[1] = 'x';
      charArray1[2] = '=';
      String string3 = RandomStringUtils.random(0, 0, 0, false, false, charArray1);
      assertNotNull(string3);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals("", string3);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'T', 'x', '='}, charArray1);
      
      String string4 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      
      int int1 = (-2170);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2170), 0, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2170 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 762;
      String string0 = "";
      // Undeclared exception!
      try { 
        RandomStringUtils.random(762, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(153, (-1441), 153, true, true);
      assertNotNull(string0);
      assertEquals("\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F\uFA5F", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3763), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3763 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 127;
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 127, 127, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(12, 12, 1140, true, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4230, true, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1714, false, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(490);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '\'';
      charArray0[2] = 'D';
      charArray0[3] = 'h';
      charArray0[4] = '-';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string2);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'5', '\'', 'D', 'h', '-'}, charArray0);
      
      boolean boolean0 = true;
      String string3 = RandomStringUtils.random(0, false, true);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = RandomStringUtils.random(0, "@IL'}");
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = 0;
      String string6 = RandomStringUtils.random(0);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = RandomStringUtils.random(0);
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string8);
      assertEquals(5, charArray0.length);
      assertEquals("", string8);
      assertArrayEquals(new char[] {'5', '\'', 'D', 'h', '-'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(57343);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-241), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -241 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -12 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = (-2133);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2133 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 2904;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2904, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4099), "n-~U(H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4099 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(170, "qdOuLqX)^b<q;");
      assertNotNull(string1);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-692));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -692 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 40;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(40, 1642, 1, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = '{';
      charArray0[2] = '%';
      charArray0[3] = 'p';
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-1407), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-1453);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1453 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(48242);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(106);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(106);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4023, 8, 128, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockRandom mockRandom0 = new MockRandom((-4251L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string1 = RandomStringUtils.random(1, (-176), 33, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string1);
      assertEquals("\uFF50", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(0, 5161, 4, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(1884, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '7';
      charArray0[2] = 'D';
      charArray0[3] = 'T';
      charArray0[4] = '/';
      charArray0[5] = '1';
      charArray0[6] = '$';
      charArray0[7] = '[';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1884, 1884, (-284), false, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2122);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2122), (-2122), 450, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2122 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3570 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2067));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2067 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '3';
      charArray0[2] = 'p';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2908, 2908, 2908, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1689, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = RandomStringUtils.random(172, ";UDdovoGl-R-,9");
      assertNotNull(string0);
      assertEquals(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", string0);
      
      String string1 = RandomStringUtils.randomAscii(172);
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                            ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 34, 4304, true, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2172);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, 120, 32, true, true);
      assertNotNull(string0);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '_';
      charArray0[2] = '{';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1353, 1353, 1353, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = RandomStringUtils.random(2172);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(113);
      assertEquals("                                                                                                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }
}
