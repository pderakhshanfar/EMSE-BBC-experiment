/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:21:57 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringUtils.randomAscii(3);
      RandomStringUtils.randomNumeric(0);
      int int0 = 860;
      Random.setNextRandom(860);
      RandomStringUtils.random(0, true, false);
      RandomStringUtils.randomAlphabetic(860);
      RandomStringUtils.randomAlphanumeric(860);
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(32, true, false);
      RandomStringUtils.random(32);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3106);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(15, 56176, 15, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(15, 56191, 15, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-1552L));
      mockRandom0.nextInt();
      RandomStringUtils.random(683, 54, 3274, true, true, (char[]) null, (java.util.Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1143);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-473));
      RandomStringUtils.random(2379, true, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)15;
      MockRandom mockRandom0 = new MockRandom(1L);
      MockRandom mockRandom1 = new MockRandom((byte)15);
      mockRandom0.nextGaussian();
      RandomStringUtils.random(2996, (-1162), 4853, false, false, (char[]) null, (java.util.Random) mockRandom0);
      Random.setNextRandom((-1423));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(197);
      mockRandom0.doubles(3646.18529, 4493.08225551596);
      mockRandom0.ints(313, 2996);
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom((byte)15);
      mockRandom1.nextGaussian();
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(197);
      RandomStringUtils.random(197);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(287, 57343, 1, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, 57343, 15, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Random.setNextRandom((-309));
      String string1 = RandomStringUtils.randomAlphabetic(1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom((-701L));
          assertNotNull(mockRandom0);
          
          double double0 = mockRandom0.nextGaussian();
          assertEquals(0.0, double0, 0.01);
          
          char[] charArray0 = null;
          int int0 = 16;
          int int1 = 46334;
          // Undeclared exception!
          RandomStringUtils.random(16, 589, 46334, false, true, (char[]) null, (java.util.Random) mockRandom0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(197);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(3646.18529, 4493.08225551596);
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints(313, 2996);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)15;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double1 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.2, double1, 0.01);
      
      String string0 = RandomStringUtils.random(16, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals("\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003", string0);
      
      Random.setNextRandom(27);
      String string1 = RandomStringUtils.random((int) (byte)12, 57343, (int) (byte)0, false, false, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A\uE01A", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(516, 516, 516, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1), (-283), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(18);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                  ", string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(18);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = 2996;
      MockRandom mockRandom0 = new MockRandom(313);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom0.nextGaussian();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(490, (-1225), (int) (byte)15, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(197);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(197);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '0';
      charArray0[2] = 'x';
      charArray0[3] = 'a';
      charArray0[4] = 'A';
      charArray0[5] = 'O';
      String string1 = RandomStringUtils.random(1, 0, 5045, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'S', '0', 'x', 'a', 'A', 'O'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("S", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(197);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(3646.18529, 4493.08225551596);
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints(313, 2996);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      MockRandom mockRandom1 = new MockRandom((byte)15);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(43, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-43));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.1, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, (int) (byte)0, (int) (byte) (-7), true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.2, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 19, 55296, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-43));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      String string0 = RandomStringUtils.randomNumeric((byte)0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 't';
      charArray0[3] = 'y';
      charArray0[4] = '0';
      charArray0[5] = '=';
      charArray0[6] = 'R';
      charArray0[7] = '{';
      String string1 = RandomStringUtils.random((int) (byte)0, Integer.MAX_VALUE, (int) (byte)0, true, true, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', 'c', 't', 'y', '0', '=', 'R', '{'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1694, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (-472), 508, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertNotNull(string0);
      assertEquals("L", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.2, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom((byte)0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double1 = mockRandom1.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.3, double1, 0.01);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (int) (byte) (-61), (-2971), false, false, charArray1, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2723);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(2723, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(56192, string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1171, 1171, 36, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(3006, 3006, 529, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = '<';
      charArray0[2] = 'l';
      charArray0[3] = 'j';
      charArray0[4] = 'l';
      charArray0[5] = '4';
      MockRandom mockRandom0 = new MockRandom(3449L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3006, 3776, 529, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(47362, 27, 182, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-43));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.2, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.3, double1, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, (int) (byte)0, (int) (byte)0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, ":77t>H");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '^';
      charArray0[3] = '=';
      // Undeclared exception!
      RandomStringUtils.random(55257, charArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-466));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -466 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1084;
      String string0 = RandomStringUtils.random(1084, "lBEheD1kHyf(q6]=y{");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1084);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-584), (-584), (-584), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -584 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -15 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(1972);
      assertNotNull(string0);
      
      int int0 = 0;
      boolean boolean0 = false;
      String string1 = RandomStringUtils.random(0, true, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1103 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(20, 123, 20, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(3006, 3006, 529, false, false);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = '<';
      charArray0[2] = 'l';
      charArray0[3] = 'j';
      charArray0[4] = 'l';
      charArray0[5] = '4';
      charArray0[6] = 'F';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-6705), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -6705 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1290, 56319, 1290, true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'H';
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'%', 'H'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.random(0, "lCedO7");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = 2846;
      // Undeclared exception!
      RandomStringUtils.random(2846, 0, 2846, false, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(29, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(32);
      assertNotNull(string0);
      assertEquals("                                ", string0);
      
      // Undeclared exception!
      RandomStringUtils.random(32, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1691);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1691), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1691 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-170);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-170));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -170 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(44);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-39), 1, (-39), true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -39 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2728;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'D';
      charArray0[2] = '|';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'P';
      charArray0[6] = 'x';
      charArray0[7] = 'r';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2728, 2728, 32, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '1';
      charArray0[2] = 'r';
      charArray0[3] = ',';
      charArray0[4] = '@';
      charArray0[5] = '5';
      charArray0[6] = 'M';
      MockRandom mockRandom0 = new MockRandom(572);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 572, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'C', '1', 'r', ',', '@', '5', 'M'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3745);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2723);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, false, false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -535 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = (-986);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -986 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '0';
      charArray0[2] = '!';
      charArray0[3] = 'I';
      charArray0[4] = '0';
      charArray0[5] = ')';
      charArray0[6] = 'l';
      charArray0[7] = 'k';
      charArray0[8] = '1';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '0', '!', 'I', '0', ')', 'l', 'k', '1'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4, 4, 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2056;
      int int1 = (-955);
      boolean boolean0 = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'x';
      charArray0[2] = 'o';
      charArray0[3] = '?';
      charArray0[4] = 'D';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2056, (-955), 2056, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils.random(877, "G");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5, 5, 5, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertNotNull(string0);
      assertEquals("L", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1888), (-1888), 1, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1888 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = ']';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      String string0 = RandomStringUtils.random(0, 57343, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'n', ']'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1806;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1806);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-499), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -499 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2148 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(197, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = (-131);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-131), "q*7Y7O<G,p5WzZSN,4K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -131 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(47357);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(44);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(2406, (-233), 18, true, true, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(516);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1103), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1103 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 2391;
      char[] charArray0 = null;
      RandomStringUtils.random(2391, (char[]) null);
      int int1 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }
}
