/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:36:01 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-623), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.randomNumeric(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.randomAscii(3248);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      RandomStringUtils.random(2889, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.random(1317, false, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils.random(0, true, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(0, (String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringUtils.random(0, 0, (-1034), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringUtils.random(0, (-1295), 0, false, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(43);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1047, true, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2205), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2205 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(28, 2034, 28, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2555), (-400), (-349), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2555 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(701, 701, (-700), false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(701, 701, 701, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-840), 3087, 3087, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -840 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1047, 1047, 1047, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-735), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -735 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 2593, 0, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0A21", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(223L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(166, (-1034), 959, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6\uFBF6", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 123, true, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(483, 166, (-3247), false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(606);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(606, (-1111), 56191, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9\uFBA9", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 1160, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, 13, 13, true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1), (-1), true, false, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2586), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2586 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(866, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56239, (-165), false, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, 55296, 56239, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(597, 56320, 54, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 0, 0, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 13, 13, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1874 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1874 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3207 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -92 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(606, 606, 13, false, false, (char[]) null);
      assertEquals("\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E\u025E", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1874 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
