/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:18:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = null;
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints((long) 1);
      int int1 = 56182;
      // Undeclared exception!
      RandomStringUtils.random(1, 56182, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(104, 56182, 0, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.randomAscii(104);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int1 = 104;
      // Undeclared exception!
      RandomStringUtils.random(104, 56192, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(104, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAscii(1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      RandomStringUtils.random(123, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(391);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomAscii(9);
      org.evosuite.runtime.Random.setNextRandom(2963);
      int int0 = 2248;
      RandomStringUtils.randomAlphabetic(2248);
      RandomStringUtils.random(9, ",?2J=");
      boolean boolean0 = true;
      RandomStringUtils.random(0, true, true);
      org.evosuite.runtime.Random.setNextRandom(2533);
      RandomStringUtils.randomAlphanumeric(2873);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2963);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1113L));
      mockRandom1.ints();
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.random(3364, "xJ)m>");
      org.evosuite.runtime.Random.setNextRandom(3364);
      int int0 = 3616;
      org.evosuite.runtime.Random.setNextRandom(3616);
      int int1 = 824;
      RandomStringUtils.randomAlphanumeric(824);
      int int2 = 2727;
      int int3 = (-1586);
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'V';
      charArray0[2] = 'o';
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      mockRandom0.ints((long) 2727);
      mockRandom0.ints((long) 3616);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) (-1586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(15);
      int int0 = 2791;
      int int1 = 3885;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 117, 3885, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextGaussian();
      RandomStringUtils.random(4205, (-869), 4205, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2844;
      RandomStringUtils.random(2844);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(2844);
      int int1 = 2791;
      mockRandom0.nextGaussian();
      int int2 = (-990);
      RandomStringUtils.random(1, 2791, (-990), false, true, (char[]) null, (Random) mockRandom0);
      int int3 = (-583);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -583 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RandomStringUtils.random(1);
          RandomStringUtils randomStringUtils0 = new RandomStringUtils();
          MockRandom mockRandom0 = new MockRandom();
          char[] charArray0 = new char[5];
          charArray0[0] = 'z';
          charArray0[1] = 'z';
          charArray0[2] = '1';
          charArray0[3] = '1';
          charArray0[4] = 't';
          // Undeclared exception!
          RandomStringUtils.random(18, 1, 18, false, true, charArray0, (Random) mockRandom0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1357, 1357, 1357, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-20), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -20 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2101, 2101, 2101, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2459;
      // Undeclared exception!
      RandomStringUtils.random(2459, 56192, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2459;
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(2459, 56192, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(17, 17, 17, false, false, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.random(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom((-2363L));
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'p';
      MockRandom mockRandom0 = new MockRandom(0);
      RandomStringUtils.random(777, 0, 2791, true, true, charArray0, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1001);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2563, 1079, 34, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomStringUtils.random(1, 8, 2516, false, false, (char[]) null, (Random) mockRandom0);
      RandomStringUtils.random(2516, false, false);
      // Undeclared exception!
      RandomStringUtils.random(225, 1, 225, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomAlphanumeric(0);
      RandomStringUtils.random(0, "");
      RandomStringUtils.random(0, "");
      int int1 = (-4518);
      int int2 = 91;
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = ',';
      charArray0[2] = 'Q';
      charArray0[3] = 'I';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4518), 91, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4518 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1350;
      String string0 = RandomStringUtils.randomAscii(1350);
      RandomStringUtils.random(1350, string0);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'b';
      charArray0[2] = '9';
      charArray0[3] = '2';
      MockRandom mockRandom0 = new MockRandom((-319L));
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, (-671), true, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1694L);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(32, 3, 32, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomStringUtils.random(0, 0, 0, true, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'C';
      charArray0[2] = 'e';
      charArray0[3] = 'K';
      charArray0[4] = 'c';
      charArray0[5] = 'Q';
      MockRandom mockRandom0 = new MockRandom(0);
      RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(881, true, true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomNumeric(0);
      int int1 = 1;
      boolean boolean0 = false;
      RandomStringUtils.random(1, false, false);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(15, 15, 15, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(478, 35, 35, true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.random(1);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '.';
      charArray0[2] = '\\';
      charArray0[3] = '/';
      charArray0[4] = 'M';
      charArray0[5] = 'h';
      charArray0[6] = 'd';
      charArray0[7] = '=';
      charArray0[8] = 'd';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomStringUtils.random(2459, (-115), 0, false, false);
      RandomStringUtils.randomAscii(1);
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'q';
      charArray0[2] = '3';
      charArray0[3] = '.';
      charArray0[4] = 'n';
      charArray0[5] = '1';
      charArray0[6] = '4';
      charArray0[7] = '/';
      charArray0[8] = '`';
      RandomStringUtils.random(1, charArray0);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, charArray0);
      RandomStringUtils.random(0, (-115), 0, false, false);
      RandomStringUtils.random(0);
      RandomStringUtils.random(0, 0, (-115), false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomStringUtils.random(27, (-2985), 27, false, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      RandomStringUtils.random(869, 0, 1026, true, true, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-910), 0, (-910), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -910 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-591), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -591 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '%';
      charArray0[2] = '`';
      charArray0[3] = '3';
      charArray0[4] = 'n';
      charArray0[5] = '3';
      charArray0[6] = 'y';
      charArray0[7] = '?';
      charArray0[8] = 'X';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'^', '%', '`', '3', 'n', '3', 'y', '?', 'X'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 1;
      int int1 = 2333;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 2333, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(127);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = ',';
      charArray0[2] = 'w';
      charArray0[3] = '-';
      charArray0[4] = 'M';
      charArray0[5] = 'k';
      charArray0[6] = '<';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'+', ',', 'w', '-', 'M', 'k', '<'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      charArray1[1] = 'k';
      String string1 = RandomStringUtils.random(0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {',', 'k'}, charArray1);
      assertEquals(2, charArray1.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2205);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(41);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2579);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-138), (-138), (-138), false, false, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -138 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(7, 57343, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(321);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(321, 56, 27, false, true, (char[]) null, (Random) mockRandom0);
      assertEquals("888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(56);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(263);
      String string0 = RandomStringUtils.random(263, true, true);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 3979;
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '*';
      charArray0[2] = '\"';
      String string0 = RandomStringUtils.random(3979, charArray0);
      assertArrayEquals(new char[] {'3', '*', '\"'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      
      int int1 = 1;
      boolean boolean0 = true;
      String string1 = RandomStringUtils.random(3979, 122, 1, true, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(1, 0, (-190), true, true, charArray0);
      assertArrayEquals(new char[] {'3', '*', '\"'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("3", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = RandomStringUtils.random(123, charArray0);
      assertArrayEquals(new char[] {'3', '*', '\"'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream1 = mockRandom0.longs(1426L);
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      assertFalse(longStream1.equals((Object)longStream0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-622), 123, 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -622 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1222, 1, 1222, true, true);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2985), (-2985), (-2985), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2985 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-375);
      int int1 = (-28);
      int int2 = (-4871);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-375), (-28), (-4871), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -375 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1385), (-1385), (-1385), false, true, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1385 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1;
      int int1 = (-4712);
      // Undeclared exception!
      RandomStringUtils.random(1, (-4712), 296, true, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 127;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(127);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1121), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1121 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-2656);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2656), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2656 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1558 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -39 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = 4162;
      char[] charArray0 = null;
      int int2 = (-869);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'p';
      charArray0[2] = '%';
      charArray0[3] = 'E';
      charArray0[4] = 'l';
      String string2 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'f', 'p', '%', 'E', 'l'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "bQp%k=wl");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '';
      charArray0[2] = 'i';
      charArray0[3] = 'k';
      charArray0[4] = 'm';
      charArray0[5] = 'E';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'b', '', 'i', 'k', 'm', 'E'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(243, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'b', '', 'i', 'k', 'm', 'E'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 2483;
      int int1 = 0;
      // Undeclared exception!
      RandomStringUtils.random(2483, 56156, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(18);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RandomStringUtils.random(786, "8w!'t.FKa*");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1350);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = (-1843);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1843), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1843 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(786, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 5613;
      String string0 = RandomStringUtils.randomAscii(5613);
      // Undeclared exception!
      RandomStringUtils.random(5613, string0);
  }
}
