/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:01:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, 0, (-525), true, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertNotNull(string0);
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(226, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(983, "P3A:RU{v.SYx,t)");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "Requested random string length ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(727, 0, 0, false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -704 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1778));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1778 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1079);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "org.apache.commons.lang3.RandomStringUtils");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56192, 56192, 56192, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(814);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1681, 1681, 814, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(43, 43, 2292, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2295), 0, 0, false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2295 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(43, 43, 43, true, true, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-370), (-370), (-370), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -370 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(925, 925, 925, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56326);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2272 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2183, 56192, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56207);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(885, 56320, 3, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(983);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(983, (-1412), 983, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C\uFA7C", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2355, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2183, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2183, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2021, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(751, 0, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3194), (-3194), 222, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3194 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 924, (-149), false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2788), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2788 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-3973), false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56161);
      // Undeclared exception!
      RandomStringUtils.random(449, 56161, 449, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(56191, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(6322, (-748), 56320, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(109);
      String string0 = RandomStringUtils.randomNumeric(109);
      assertEquals("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(3504);
      String string0 = RandomStringUtils.randomAlphanumeric(3504);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(109, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(698, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(109);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3504);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3175 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-523), 1, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
