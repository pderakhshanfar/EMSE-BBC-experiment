/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 11:58:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(856, 0, (-3322), true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-644), 0, (-644), false, false, (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(331);
      assertEquals("                                                                                                                                                                                                                                                                                                                                           ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(602);
      String string0 = RandomStringUtils.randomAlphanumeric(602);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(323, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "4+:3");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(856, 856, 57343, false, false, (char[]) null);
      assertEquals("\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358\u0358", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 150, false, false, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(327, 327, 3, true, true);
      assertEquals("\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147\u0147", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(40);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-3730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3730 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(36352);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -343 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2526 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(48456, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(856, true, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2079), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2079 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "sR7sD_9-,N");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 18, (-2819), true, false, charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(857, 857, 48243, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, (char[]) null, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(860, 860, 57343, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(245, 245, 1537, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5014), (-5014), (-5014), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5014 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(14, 14, 14, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1625 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(16, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(264, 56192, 264, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1763, 57343, 13, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(856, (-604), 57343, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4\uFDA4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(197, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(40);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, 18, 18, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 2283, true, true, charArray0, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(729L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-2704), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(143, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(965, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(128, 56192, 128, false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(11, 55296, (-21), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(57343);
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      String string0 = RandomStringUtils.random(778, 0, 778, true, true, charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertEqualsstring0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(965);
      String string0 = RandomStringUtils.randomAlphabetic(3425);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(856, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(3425);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(602);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3425);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(45330, 45330, 45330, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-3823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3823 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
