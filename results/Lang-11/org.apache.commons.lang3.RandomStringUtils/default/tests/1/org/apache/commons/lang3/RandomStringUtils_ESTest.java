/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:26:36 GMT 2020
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(11, 0, (-1544), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringUtils.randomAscii(101);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(3585);
      RandomStringUtils.randomAlphanumeric(1624);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringUtils.randomAlphanumeric(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringUtils.random(1, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringUtils.random(2910, false, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringUtils.random(0, false, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils.random(0, "");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      RandomStringUtils.random(1, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[4];
      RandomStringUtils.random(0, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringUtils.random(0, 0, 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils.random(6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringUtils.random(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1232);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1484);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(650, 36224, 2456, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(38, 378, 223, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 378
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3, 3, 3, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2894), (-39), (-39), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2894 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(223, (-20), (-504), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, 40, 40, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 6, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(118, 118, 118, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46363);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      String string0 = RandomStringUtils.random(223, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)67);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)109, (int) (byte)0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(650, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(5, 0, 1212, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-6));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(958, (-6), 25, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA\uFFFA", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-2854L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(116, 116, 116, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1744), (-1158), 2239, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1744 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null, (java.util.Random) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 56192, (-1), false, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2479, "\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(37, 56320, (-1494), false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(777, (-59), 777, true, true);
      assertNotNull(string0);
      assertEquals("\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5\uFFC5", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(22);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(7, true, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(25, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -14 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -8 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -785 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(129, (-504), (-20), true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -26 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
