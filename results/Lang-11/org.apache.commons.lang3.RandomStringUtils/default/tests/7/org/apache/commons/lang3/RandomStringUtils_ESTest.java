/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:12:40 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = (-570);
      Random.setNextRandom((-570));
      // Undeclared exception!
      RandomStringUtils.random(3, 56192, (-3047), false, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Random.setNextRandom(56192);
      RandomStringUtils.random(3565, 56192, (-570), false, false, (char[]) null, (java.util.Random) mockRandom0);
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(348L);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints();
      Random.setNextRandom((-570));
      RandomStringUtils.random(28, 56192, (-3047), false, false, (char[]) null, (java.util.Random) mockRandom1);
      RandomStringUtils.randomNumeric(28);
      RandomStringUtils.randomAscii(851);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(348L);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom((-1260L));
      mockRandom2.ints();
      int int0 = 28;
      Random.setNextRandom((-570));
      RandomStringUtils.random(28, 56192, (-3047), false, false, (char[]) null, (java.util.Random) mockRandom1);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1946), (-3047), 970, true, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1946 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom((-1260L));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      IntStream intStream0 = mockRandom2.ints();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotNull(intStream0);
      
      int int0 = 28;
      int int1 = (-3047);
      // Undeclared exception!
      RandomStringUtils.random(28, 56192, (-3047), false, false, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      IntStream intStream0 = mockRandom0.ints();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(intStream0);
      
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.random(24, 19, 1882, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141\u0141", string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(3379);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(23, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(23);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 23;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Random.setNextRandom((-570));
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56192);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt(6196);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(1, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string0 = RandomStringUtils.random(1, (-796), 16, true, true, (char[]) null, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals("\uFCE6", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 42, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 23;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long long1 = mockRandom1.nextLong();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      assertNotSame(mockRandom1, mockRandom0);
      
      String string0 = RandomStringUtils.random(16, 55296, 947, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02\uD802\uDC02", string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(16);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(16, 0, (-2802), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals("\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001", string0);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = 'A';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string0 = RandomStringUtils.random(1682, 0, 3342, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 56320;
      // Undeclared exception!
      RandomStringUtils.random(1387, 56320, 1387, false, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(1232, (-1228), 1232, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1228), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1228 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1387;
      // Undeclared exception!
      RandomStringUtils.random(1387, 56320, 1387, false, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(4447);
      String string1 = RandomStringUtils.random(4447);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(4447);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphanumeric(1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("o", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1039);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      mockRandom0.setSeed(1039);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      mockRandom2.setSeed(31);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 153, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1039);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      mockRandom0.setSeed(1039);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      mockRandom0.setSeed(1039);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      String string0 = RandomStringUtils.random(1039, 1039, 31, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 4447;
      Random.setNextRandom(4447);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 35;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4447, 35, 35, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-5));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-5), (-5), (-5), false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'c';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-4107), 55296, 1780, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4107 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(16, 16, 3342, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1682;
      int int1 = 2075;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = 47550;
      MockRandom mockRandom1 = new MockRandom(1682);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      RandomStringUtils.random(1039, 47550, 1039, false, true, (char[]) null, (java.util.Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 56319, (-1638), false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'y';
      charArray0[2] = 'c';
      charArray0[3] = 'l';
      charArray0[4] = 'z';
      String string0 = RandomStringUtils.random(3018, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'x', 'y', 'c', 'l', 'z'}, charArray0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1682, 1682, (-463), true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'a';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = '>';
      charArray0[5] = '`';
      String string3 = RandomStringUtils.random(1841, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'b', 'a', 'b', 'b', '>', '`'}, charArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2075, 1039, 1061, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1061, 19, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-546), (-546), 17, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -546 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55, 55, 55, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(23);
      assertEquals("                       ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(23, 23, (-5100), true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2045, 2045, 0, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          // Undeclared exception!
          RandomStringUtils.random(1, true, true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '\\';
      charArray0[2] = 'R';
      String string1 = RandomStringUtils.random(127, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      assertEquals("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", string1);
      assertArrayEquals(new char[] {'/', '\\', 'R'}, charArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(1841);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1841, 1841, 1841, true, false, charArray0, (java.util.Random) mockRandom2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1664;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1664, 1664, 1664, true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(463, (-1), 463, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 56192;
      int int1 = (-1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      RandomStringUtils.random(56192, (-1), 56192, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1682);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1682, 1682, (-3936), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2045);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'S';
      charArray0[2] = '>';
      charArray0[3] = '`';
      charArray0[4] = 'b';
      charArray0[5] = 'x';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2045, 2045, 1, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(200);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(200, "dAbn5`_gg9}s]stP");
      assertFalse(string1.equals((Object)string0));
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '2';
      charArray0[2] = '\\';
      charArray0[3] = 'K';
      charArray0[4] = 'e';
      charArray0[5] = 'Y';
      charArray0[6] = '1';
      String string2 = RandomStringUtils.random(200, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charArray0.length);
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string2);
      assertArrayEquals(new char[] {'@', '2', '\\', 'K', 'e', 'Y', '1'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(10, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = (-464);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-464), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -464 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = 'Z';
      charArray0[2] = '`';
      charArray0[3] = 'S';
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("#", string0);
      assertArrayEquals(new char[] {'#', 'Z', '`', 'S'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56188, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 56320;
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'q';
      charArray0[2] = '5';
      charArray0[3] = 'q';
      charArray0[4] = '4';
      charArray0[5] = 'r';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = true;
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'E';
      charArray0[2] = 'V';
      charArray0[3] = 'l';
      charArray0[4] = 'f';
      charArray0[5] = 'h';
      charArray0[6] = 'v';
      String string1 = RandomStringUtils.random(0, 0, (-1), true, false, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {')', 'E', 'V', 'l', 'f', 'h', 'v'}, charArray0);
      assertNotNull(string1);
      
      int int0 = 541;
      boolean boolean1 = true;
      String string2 = RandomStringUtils.random(0, 56191, 541, false, true);
      assertEquals("", string2);
      assertNotNull(string2);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2384 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1;
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'y';
      charArray0[2] = '\\';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'m', 'y', '\\'}, charArray0);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'m', 'y', '\\'}, charArray0);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, true, true);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-812), 0, (-812), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -812 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(106);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      boolean boolean1 = false;
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 1;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = '^';
      charArray0[2] = '>';
      charArray0[3] = 'f';
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'i', '^', '>', 'f'}, charArray0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string2 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'i', '^', '>', 'f'}, charArray0);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(1300);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-1566);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'B';
      charArray0[2] = 'G';
      charArray0[3] = 'Z';
      charArray0[4] = 'l';
      charArray0[5] = '-';
      charArray0[6] = 'Z';
      charArray0[7] = 'y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1566), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1566 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-922), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -922 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(463, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1988, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -243 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(47885, 47885, (-3488), true, true);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1283);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = RandomStringUtils.random(16);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 615;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(615);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 6196;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int1 = mockRandom1.nextInt(6196);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(mockRandom1, mockRandom0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string0 = RandomStringUtils.random(2224, 46, 16, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2224, 46, 1, true, true, (char[]) null, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(55296);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(3345L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      RandomStringUtils.random(21, 55296, 1339, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(916);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1159), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1159 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-993));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -993 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(34, 55296, 55296, false, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(28);
      assertEquals("                            ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "@v4b,P?ZRry(S");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RandomStringUtils.random(0);
      RandomStringUtils.random(0);
      String string0 = RandomStringUtils.randomNumeric(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'p';
      String string1 = RandomStringUtils.random(1841, 0, 0, true, true, charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1682, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(463);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RandomStringUtils.random(3);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1025, 3, 3, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      char[] charArray0 = new char[1];
      char char0 = 'd';
      charArray0[0] = 'd';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
