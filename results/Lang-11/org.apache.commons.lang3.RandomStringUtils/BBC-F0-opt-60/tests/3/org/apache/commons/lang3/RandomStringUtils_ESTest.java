/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1135), false, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomAlphanumeric(32);
      assertNotNull(string0);
      assertEquals("88888888888888888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(32, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(2602, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1797, "REc-789mAV#K>");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1542, 0, 1542, false, false, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1467), (-1467), true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1493);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2290 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -513 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(255, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(158, 1530, 1, false, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom((-3176L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(255, 255, 255, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 0, 2962, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56320, 2021, 2021, false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-108), (-108), (-108), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -108 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 611, 611, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2121 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1048), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1048 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(672, (-3164), 672, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4\uF3A4", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(44, 318, 4164, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E\u013E", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 4164, 304, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(63228, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(63228, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(296, 0, 0, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(127, 0, 55296, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1062), 0, (-1062), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1062 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 3505, (-919), true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2729), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2729 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, (-767), false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1076, 55296, 0, false, false);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 56320, 15, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(24);
      String string0 = RandomStringUtils.randomNumeric(17);
      assertNotNull(string0);
      assertEquals("88888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(47392);
      String string0 = RandomStringUtils.randomAlphabetic(36);
      assertNotNull(string0);
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(2800);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(63228, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2111, (-20), 2111, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -919 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(202);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(36);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(249, 249, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(45332);
  }
}
