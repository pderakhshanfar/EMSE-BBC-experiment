/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:02:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(594);
      String string0 = RandomStringUtils.random(594);
      assertEquals("\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252\u0252", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(594);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(594);
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = null;
      int int1 = (-5231);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = 55296;
      int int3 = (-1);
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = null;
      int int1 = (-5231);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(35373, 55296, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = mockRandom0.nextInt(56192);
      assertEquals(0, int0);
      
      int int1 = 55296;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(29, 55296, 56192, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2477, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56320);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '6';
      charArray0[2] = 'z';
      charArray0[3] = '{';
      charArray0[4] = '`';
      charArray0[5] = 'M';
      charArray0[6] = ':';
      String string0 = RandomStringUtils.random(1, 1, 2477, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("6", string0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(string0);
      assertArrayEquals(new char[] {'^', '6', 'z', '{', '`', 'M', ':'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotSame(mockRandom0, mockRandom1);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = null;
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom((-1031L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      int int1 = 2477;
      // Undeclared exception!
      RandomStringUtils.random(2477, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(4208);
      assertNotNull(string0);
      
      Random.setNextRandom(4208);
      String string1 = RandomStringUtils.randomNumeric(4208);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(0, 2477, 2477, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(2477, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1165);
      assertNotNull(string0);
      
      Random.setNextRandom(1165);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = '.';
      charArray0[2] = '?';
      charArray0[3] = '0';
      charArray0[4] = '%';
      charArray0[5] = ';';
      charArray0[6] = '$';
      charArray0[7] = '>';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.randomAlphabetic('.');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(517);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 13;
      boolean boolean1 = false;
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(13, (-265), 0, false, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(0, "3<hm 'a]$");
      assertEquals("", string2);
      assertNotNull(string2);
      
      MockRandom mockRandom0 = new MockRandom(85L);
      assertNotNull(mockRandom0);
      
      String string3 = RandomStringUtils.random(987, (-1), (-899), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(46326, (-614), 682, true, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 2477, 2477, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(2477, 56319, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertEquals("                                                                                                                           ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(123);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string2 = RandomStringUtils.random(123, (-978), 56191, true, true);
      assertEquals("\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E\uFC2E", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, "                                                                                                                           ");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(632, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(127, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1788, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1788);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'R';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'`', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(123);
      assertEquals("                                                                                                                           ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(56191);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 56191);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, (-1254), 123, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 56319;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = '\\';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      charArray0[4] = 'E';
      charArray0[5] = 'h';
      charArray0[6] = 'Z';
      charArray0[7] = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, (-1108), false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 3785, 3785, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '3';
      charArray0[2] = 'z';
      charArray0[3] = '3';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      String string1 = RandomStringUtils.random((int) 'z', charArray0);
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new char[] {'z', '3', 'z', '3', 'z', 'z', 'z'}, charArray0);
      assertEquals(7, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1984L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3785, 1, 3785, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(0, 0, 10, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(2111, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = null;
      String string3 = RandomStringUtils.random(2111, (char[]) null);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-2901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2901 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      charArray0[2] = 'x';
      charArray0[3] = '\'';
      charArray0[4] = 'x';
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 56320, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-696);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-696), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -696 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      charArray0[3] = 'V';
      charArray0[4] = 'Q';
      charArray0[5] = 'H';
      charArray0[6] = '#';
      charArray0[7] = '&';
      MockRandom mockRandom0 = new MockRandom((-1786L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1006), (-1006), (-1006), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1006 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = (-2324);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2324 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'G';
      MockRandom mockRandom0 = new MockRandom((-973));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 128, (-973), true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'O';
      charArray0[3] = '8';
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, (-789), 0, false, true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2641;
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string0 = RandomStringUtils.random(2641, false, false);
      assertNotNull(string0);
      
      int int1 = 1011;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1011);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1965);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1965), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1965 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = 'F';
      charArray0[2] = '\'';
      charArray0[3] = 'x';
      charArray0[4] = '/';
      charArray0[5] = 'f';
      charArray0[6] = 'X';
      charArray0[7] = 'm';
      charArray0[8] = '^';
      MockRandom mockRandom0 = new MockRandom(99);
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(99, 0, 99, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new char[] {',', 'F', '\'', 'x', '/', 'f', 'X', 'm', '^'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 439;
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'A';
      MockRandom mockRandom0 = new MockRandom(130L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs(130L, (long) 439);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      mockRandom0.setSeed(439);
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(439, 439, 439, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 's';
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (-1), false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 123;
      String string0 = RandomStringUtils.randomAscii(123);
      assertEquals("                                                                                                                           ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 0, 0, false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomStringUtils.random(0, 1788, 0, false, false);
      RandomStringUtils.random(0, false, false);
      RandomStringUtils.random(2600, (char[]) null);
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, 562, 1260, true, true, (char[]) null);
      RandomStringUtils.randomAscii(1260);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      MockRandom mockRandom0 = new MockRandom(95L);
      // Undeclared exception!
      RandomStringUtils.random(56191, 2600, (-2672), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0);
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomStringUtils.randomAscii(0);
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomNumeric(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -674 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomStringUtils.random(0);
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-659), (-659), 0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -659 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 128;
      int int1 = (-609);
      boolean boolean0 = true;
      RandomStringUtils.random(128, (-609), 128, true, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-609), (-609), 128, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -609 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphanumeric(0);
      int int1 = (-940);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -940 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-706);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -706 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-292);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -292 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2395 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = 670;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(670);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils.random(1, "E5E='Uc");
      RandomStringUtils.randomAscii(1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'V';
      charArray0[2] = 'b';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3258), 1, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3258 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1239;
      int int1 = 1;
      boolean boolean0 = true;
      RandomStringUtils.random(0, 1239, 1, true, true);
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1239);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-988);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'x';
      charArray0[2] = ')';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-988), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -988 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = '~';
      charArray0[2] = 'd';
      charArray0[3] = 'H';
      charArray0[4] = 'S';
      charArray0[5] = ',';
      charArray0[6] = '~';
      charArray0[7] = 'L';
      charArray0[8] = 'm';
      RandomStringUtils.random(1, charArray0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1444), "E+vq:rXg >ZOg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1444 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 55296;
      int int1 = (-2288);
      boolean boolean0 = false;
      boolean boolean1 = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'h';
      charArray0[2] = 'K';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(55296, (-2288), 55296, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '\"';
      charArray0[2] = '_';
      charArray0[3] = '3';
      charArray0[4] = '0';
      charArray0[5] = '2';
      charArray0[6] = 'K';
      charArray0[7] = 'z';
      charArray0[8] = 'v';
      RandomStringUtils.random(1, 0, 1, false, false, charArray0);
      RandomStringUtils.random(0, 1, 1, false, false, charArray0);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2087);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = ' ';
      charArray0[2] = '*';
      charArray0[3] = '4';
      charArray0[4] = 'Y';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1805, 1805, 1805, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
