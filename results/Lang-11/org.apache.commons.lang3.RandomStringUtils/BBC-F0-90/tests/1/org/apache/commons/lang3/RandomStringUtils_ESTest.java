/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:32:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(5, 0, (-1260), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(17);
      assertEquals("11111111111111111", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomAlphanumeric(17);
      assertEquals("11111111111111111", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2847, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(1229, 0, 1229, false, false, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, (-215), true, true, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1260), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -220 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(5462, "He\"");
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(5462);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -964 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-2300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2300 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1267), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1267 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "Sd_,(^}[7!r]Sx$");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2065, 2, 2065, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2540, (-1027), 2505, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(64189, 64189, 64189, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(310, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2466), 1221, 1221, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2466 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(358, 358, 0, true, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(21, 56320, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-824), (-824), (-824), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -824 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2748, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'W', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2267L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1385, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1363, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(370, 0, 370, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1267), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1267 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(855, 855, 1080, false, false);
      assertEquals("\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1010, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1625), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1625 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1941L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1940, 55296, 56320, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, (-2211), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-871));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1481, (-871), 1481, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(35);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 56334, 1380, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1385, 3436, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom((-1996));
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1832, 1938, 0, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-35), 15, (-35), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -35 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "The chars array must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(17);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(17);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, 2, 2, true, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2540);
      assertNotNull(string0);
  }
}
