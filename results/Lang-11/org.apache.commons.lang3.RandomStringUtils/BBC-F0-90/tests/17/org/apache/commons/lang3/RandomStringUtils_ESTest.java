/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:48:35 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-939L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(127, 0, (-1766), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1091));
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(915, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "0ikImA'RWSM^");
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(3475, 26, 1310, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -854 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-3343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3343 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2070), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2070 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "The chars array must not be empty");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(19, 3586, 19, false, false, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(29);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(29, 29, 1, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 486, 486, false, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(127, (-1691), (-2414), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1230), 372, (-1230), false, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1230 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 55296, 0, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(417, 417, 417, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3478 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1658, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(323, 56192, 323, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3411, 56320, 3411, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1766));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, (-887), 127, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFC89", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1933);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(648, 1933, 7, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D\u078D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      String string0 = RandomStringUtils.random(718, (int) (byte)0, (int) (byte)0, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(57, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(37, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(37, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1386L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(424, 424, 915, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-633), (-633), 0, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -633 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 20, 20, true, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 1933, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56182, 127, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(456, (-2070), 0, false, false);
      assertEquals("\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA\uF7EA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1748));
      String string0 = RandomStringUtils.randomNumeric(1012);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-68));
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1252), 56319, (-1252), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1252 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1012);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1012);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1989);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(577, (-1667), (-1667), false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
