/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:40:34 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 56192;
      // Undeclared exception!
      RandomStringUtils.random(128, 56192, 159, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(836);
      RandomStringUtils.randomNumeric(998);
      RandomStringUtils.random(998, 46362, 46330, false, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3218;
      org.evosuite.runtime.Random.setNextRandom(3218);
      String string0 = RandomStringUtils.random(3271);
      assertNotNull(string0);
      
      int int1 = 35;
      String string1 = RandomStringUtils.randomAlphanumeric(35);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = 56320;
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'T';
      charArray0[2] = '6';
      charArray0[3] = 'm';
      charArray0[4] = 'U';
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-958L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(127, 56320, 1274, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(54);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(54, 56320, 127, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(33, 56320, 33, false, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56319);
      String string0 = RandomStringUtils.randomAlphabetic(22);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqq", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56320);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 42;
      String string0 = RandomStringUtils.random(42, 56320, 42, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      int int1 = 32;
      boolean boolean0 = true;
      char char0 = '+';
      char char1 = 'H';
      char char2 = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int2 = (-1372);
      int int3 = (-677);
      boolean boolean1 = true;
      IntStream intStream0 = mockRandom0.ints(32, 56191);
      assertNotNull(intStream0);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1L), 0, 282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2389, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      char[] charArray0 = null;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(19, 55296, (-2348), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(238, 238, (-1), true, true, (char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom((-2154L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.random(42, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(30, 55296, (-2348), false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -341 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-111L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2359, (-234), 25, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 57343;
      // Undeclared exception!
      RandomStringUtils.random(57343, "M;`'xmGWV3$Y|(c!");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2154L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      String string0 = RandomStringUtils.random(30, (-2469), 30, false, false, (char[]) null, (Random) mockRandom1);
      assertEquals("\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B\uF65B", string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(string0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(30);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 42, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'u';
      MockRandom mockRandom0 = new MockRandom(2830L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("-", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'-', 'u'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 42;
      MockRandom mockRandom1 = new MockRandom(0L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int1 = 2787;
      int int2 = mockRandom1.nextInt(2787);
      assertEquals(0, int2);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      IntStream intStream0 = mockRandom0.ints((long) 42);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(intStream0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      boolean boolean0 = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      // Undeclared exception!
      RandomStringUtils.random(42, 0, 2787, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1374;
      String string0 = RandomStringUtils.random(1374, ";'6g.2l:@");
      assertNotNull(string0);
      
      int int1 = 1551;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1551);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints(1L, (-4173), (-1));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(42, 46230, (-4173), true, false, charArray0, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.random(34);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      String string1 = RandomStringUtils.random(34, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = RandomStringUtils.random(1371, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '2';
      String string0 = RandomStringUtils.random((int) '2', 0, (-1), false, false, charArray0, (Random) mockRandom0);
      assertEquals("22222222222222222222222222222222222222222222222222", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', '2'}, charArray0);
      
      String string1 = RandomStringUtils.random(142, (-421), 142, false, false);
      assertEquals("\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B\uFE5B", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 1;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(46230, Integer.MAX_VALUE, 46230, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 34;
      int int1 = 1;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int2 = (-1);
      int int3 = mockRandom0.nextInt((-1));
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles(0L);
      assertNotSame(doubleStream1, doubleStream0);
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(28, (-1), 34, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      charArray0[5] = '\u0000';
      charArray0[3] = '%';
      charArray0[4] = '&';
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2, (-1), (-1), false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = false;
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = 'N';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int1 = mockRandom0.nextInt(1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      IntStream intStream0 = mockRandom0.ints((long) 141);
      assertNotNull(intStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles((long) 1);
      assertNotSame(doubleStream1, doubleStream0);
      assertNotNull(doubleStream1);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(141, (-1), 1, false, false, charArray0, (Random) mockRandom0);
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'N', 'Y', '+', 'N', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 322, (-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 141;
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = 'N';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      IntStream intStream0 = mockRandom0.ints((long) 141);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = RandomStringUtils.random(141, (-1), 1, true, true, charArray0, (Random) mockRandom0);
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'N', 'Y', '+', 'N', '\u0000'}, charArray0);
      
      int int2 = 322;
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 322, (-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 365;
      String string0 = RandomStringUtils.randomAscii(365);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                             ", string0);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '=';
      charArray0[2] = '%';
      charArray0[3] = 'n';
      charArray0[4] = '&';
      charArray0[5] = 'J';
      charArray0[6] = 'w';
      charArray0[7] = '&';
      charArray0[8] = '%';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-77), (-77), true, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 46222;
      char[] charArray0 = new char[1];
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      charArray0[0] = 'R';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1374, 0, 46222, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, true, true);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.random(0, 2399, 0, true, true);
      assertEquals("", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(40, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(17, (-2129), 38, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = (-3927);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3927 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1374;
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(1374, true, false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(123);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      int int0 = (-1329);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1329), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1329 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-333);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -333 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'G';
      charArray0[2] = 'n';
      charArray0[3] = 'k';
      charArray0[4] = ' ';
      charArray0[5] = '/';
      charArray0[6] = 'g';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(57343, (-1459), 1930, true, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "+XCc");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 260;
      int int1 = (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(260, (-3545), (-1), true, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1806);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1806), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1806 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, true, true);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(0, "");
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.random(1);
      assertEquals("\u0000", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = null;
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = (-1036);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1036 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 56191;
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'D';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 1374;
      boolean boolean0 = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1374, 1374, 1374, false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-287), 0, 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -287 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'V';
      charArray0[2] = 'i';
      charArray0[3] = ')';
      charArray0[4] = 'R';
      charArray0[5] = '|';
      charArray0[6] = 'O';
      String string1 = RandomStringUtils.random(0, (-1), (-1), true, true, charArray0);
      assertEquals("", string1);
      assertEquals(7, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'~', 'V', 'i', ')', 'R', '|', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 56319;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56319);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-544);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -544 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = RandomStringUtils.randomAscii(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'i';
      charArray0[2] = 'P';
      charArray0[3] = '%';
      charArray0[4] = '&';
      charArray0[5] = '=';
      charArray0[6] = 's';
      charArray0[7] = 'n';
      String string2 = RandomStringUtils.random(32, 0, 0, true, true, charArray0);
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string2);
      assertEquals(8, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'w', 'i', 'P', '%', '&', '=', 's', 'n'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -449 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = ')';
      charArray0[2] = 'F';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      charArray0[5] = 'O';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), (-1), false, false, charArray0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = '}';
      charArray0[2] = ')';
      charArray0[3] = '|';
      charArray0[4] = 'k';
      charArray0[5] = 'N';
      charArray0[6] = ':';
      charArray0[7] = 'O';
      charArray0[8] = 'i';
      MockRandom mockRandom0 = new MockRandom(3392L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(0L, (-1L), 0L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs(4038L);
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      assertFalse(longStream1.equals((Object)longStream0));
      
      mockRandom0.setSeed(0);
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', '}', ')', '|', 'k', 'N', ':', 'O', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), 2277, (-1), true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 56191;
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 32;
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      RandomStringUtils.random(32, charArray0);
      int int1 = (-981);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-981), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -981 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      int int0 = 5177;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(5177);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      RandomStringUtils.randomAscii(1);
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = '`';
      charArray0[4] = 'u';
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextInt(1);
      mockRandom0.ints((long) 141);
      // Undeclared exception!
      try { 
        RandomStringUtils.random(141, (-1), 1, true, true, charArray0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 123;
      RandomStringUtils.random(123);
      int int1 = 0;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(123, 123, 0, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-810);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -810 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
