/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:50:26 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1947, 0, (-729), false, false, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(19);
      String string0 = RandomStringUtils.randomAlphanumeric(41);
      assertNotNull(string0);
      assertEquals("33333333333333333333333333333333333333333", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-2785));
      String string0 = RandomStringUtils.randomAlphabetic(264);
      assertNotNull(string0);
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(3744, 3744, 17, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1493), (-1493), true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(32);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -139 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56186);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1954 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56192);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1187 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -214 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3432);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(3432);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(3432, 3432, 56192, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      RandomStringUtils.random(3432, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(937, true, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1051), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1051 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "\",-zS*e");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2314, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, (-737), 1, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(3432);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3432, 32, (-2096), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(3432);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3432, 3432, 3432, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-12), (-1), 550, true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -12 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Random.setNextRandom((-2785));
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(264, 1, 43, false, true, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, (-2917), (-2917), false, true, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-489), (-489), (-489), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -489 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(883, 56191, 56191, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -902 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2096), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2096 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(677, (-455), 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39\uFE39", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3432, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3432, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3432, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1493L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(32, 0, 32, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 3744, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-5074), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(2862, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3429, 56191, 3429, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(340, 56191, (-2269), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(361, 56191, (-2269), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(697, 57339, (-505), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(20);
      String string0 = RandomStringUtils.randomNumeric(1);
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(1);
      char[] charArray0 = new char[8];
      charArray0[1] = 'V';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'V', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56191, 2862, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(21, " isess han 0.");
      assertNotNull(string0);
      assertEquals("                     ", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(264);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 19, false, true, (char[]) null);
  }
}
