/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:36:30 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-682), 57343, 24, false, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -682 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(21);
      String string0 = RandomStringUtils.randomNumeric(21);
      assertEquals("555555555555555555555", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1499);
      String string0 = RandomStringUtils.randomAlphanumeric(15);
      assertEquals("KKKKKKKKKKKKKKK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(718);
      String string0 = RandomStringUtils.randomAlphabetic(718);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, "w`#if`V3y5o]<C");
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      String string0 = RandomStringUtils.random(447, 0, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-2250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2250 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -141 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-124), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -124 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1641, false, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, "omXK`%8H");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1366, 2008, (-873), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(370, (-1), (-1), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 3821, (-2238), true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3124, 3124, 2769, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-126), (-126), (-126), false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -126 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(406, 406, 406, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2793 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(2053, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(19, 56155, 19, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2901, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(35, 0, 0, true, true, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(11, 0, 0, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-712), 0, (-712), false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -712 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(13, 56192, 16, false, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3037, 57343, (-854), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(21);
      String string0 = RandomStringUtils.random(21, false, true);
      assertEquals("555555555555555555555", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(718, (-622), 16, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92\uFD92", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(46220, 0, (-811), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(21, (-1), (-377), false, false);
      assertEquals("\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF\uFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 21, (-313), true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(21);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(46352);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(718);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, 2053, 0, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
