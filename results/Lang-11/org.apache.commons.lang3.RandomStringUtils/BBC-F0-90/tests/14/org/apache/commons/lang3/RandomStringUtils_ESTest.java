/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:45:19 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(658);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(66);
      String string0 = RandomStringUtils.randomAlphanumeric(2488);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(1723, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1216, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      String string0 = RandomStringUtils.random(1, 0, 19, true, true, charArray0);
      assertEquals("s", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'s', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 56191, 29, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-5644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -5644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -839 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-3846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3846 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-30), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -30 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(128, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, " is less than 0.");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1404), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1404 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1828, (-1), 1828, false, false, charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(43, 1961, 4, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3989, 3989, 3989, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-166), 0, 0, true, false, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -166 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(2306, 2306, 4881, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(8, 39, 39, false, false, charArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, (-2572), false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1527), (-1765), (-1), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1527 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 1, 1, true, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -21 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(700, 56191, 700, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2912L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1961, 2909, 1961, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(33, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(64012, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(64012, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom((-625));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-625), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-258));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-258), 3214, (-258), true, true, (char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -258 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-1), 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(577, (-1308), 1803, false, false);
      assertEquals("\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4\uFAE4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "=*d\"2@>Mam*:&+");
      assertEquals("=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(657, 56167, 657, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1524));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, (-1524), 56192, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(691, 56320, 691, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '1';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(146, 1, 15, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-907));
      String string0 = RandomStringUtils.randomAlphabetic(28);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(64012, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(869, 1961, 2008, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1318), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1318 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(28);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1216);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2488);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(28);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 19, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
