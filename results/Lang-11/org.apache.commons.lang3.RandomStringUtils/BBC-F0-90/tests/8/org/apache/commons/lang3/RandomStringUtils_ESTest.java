/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:39:08 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(2205);
      String string0 = RandomStringUtils.randomNumeric(2205);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphanumeric(2205);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomNumeric(1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(128);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D\u089D", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(128, 1, 1, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(38, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 458;
      // Undeclared exception!
      RandomStringUtils.random(458, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, (-2398), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      String string1 = RandomStringUtils.random(4, 56191, 870, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      String string2 = RandomStringUtils.random(458, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      assertNotSame(mockRandom1, mockRandom0);
      
      String string3 = RandomStringUtils.randomAscii(5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("     ", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      RandomStringUtils.random(763, "\uDB7F\uDC00\uDB7F\uDC00");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(4138);
      String string0 = RandomStringUtils.randomAscii(28);
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAlphabetic(4138);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomNumeric(28);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(33);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(33);
      String string1 = RandomStringUtils.randomAlphanumeric(33);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      RandomStringUtils.random(4, 56191, 870, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 56191;
      String string0 = RandomStringUtils.random(4, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(4, "\uDB7F\uDC00\uDB7F\uDC00");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.random(591, "\uDB7F\uDC00\uDB7F\uDC00");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string2 = RandomStringUtils.random(4, 56191, 870, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(1437);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 32;
      int int1 = 14;
      int int2 = 9;
      char[] charArray0 = null;
      // Undeclared exception!
      RandomStringUtils.random(32, 14, 9, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string0 = RandomStringUtils.random(1395, (-2072), 1866, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
      RandomStringUtils.random(1941, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = 'J';
      charArray0[4] = 'Z';
      charArray0[5] = '^';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1620, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'s', ',', ',', 'J', 'Z', '^'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -764 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'u';
      charArray0[2] = 'i';
      charArray0[3] = 'u';
      charArray0[4] = 'h';
      charArray0[5] = 'b';
      charArray0[6] = 'A';
      charArray0[7] = '(';
      charArray0[8] = 'U';
      MockRandom mockRandom0 = new MockRandom(1361L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, (-2001), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1395, (-2072), 1866, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(12, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      // Undeclared exception!
      RandomStringUtils.random(26379, (String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(2090);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.randomAscii(2090);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(2090, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, false, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.random(0, false, false);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(2090, false, false);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = RandomStringUtils.random(519, false, false);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string6);
      assertNotNull(string6);
      
      String string7 = RandomStringUtils.random(0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '+';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1288, 0, 56319, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, 56191, 0, false, false);
      assertEquals("\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00\uDB7F\uDC00", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'P';
      charArray0[2] = '5';
      charArray0[4] = 'z';
      charArray0[5] = 'X';
      charArray0[6] = '|';
      // Undeclared exception!
      RandomStringUtils.random(56191, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = 1;
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, 0, 1, true, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1845);
      assertNotNull(string0);
      
      char char0 = '#';
      char char1 = 'e';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      String string1 = RandomStringUtils.random(1, 1, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("e", string1);
      assertEquals(2, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      int int0 = 333;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-872), charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -872 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 128, false, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1140L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '2';
      charArray0[2] = 'v';
      charArray0[3] = '/';
      charArray0[4] = 'k';
      charArray0[5] = 'Q';
      charArray0[6] = '+';
      charArray0[7] = '-';
      charArray0[8] = 'K';
      String string0 = RandomStringUtils.random(1, 1, (-1), false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("2", string0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'e', '2', 'v', '/', 'k', 'Q', '+', '-', 'K'}, charArray0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 2526, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = null;
      int int0 = 19;
      boolean boolean0 = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(19, (-2375), (-3795), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = null;
      char[] charArray1 = null;
      int int0 = 567;
      MockRandom mockRandom0 = new MockRandom(567);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1920, 1920, 567, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 45351;
      int int2 = (-4324);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-4324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -4324 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(149);
      assertEquals("                                                                                                                                                     ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 'e';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      RandomStringUtils.random(149, 1, 149, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = RandomStringUtils.random(3059);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 5898;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '`';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5898, 3059, 3059, true, true, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = null;
      int int0 = (-2072);
      boolean boolean0 = false;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(1395, (-2072), 1866, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1395);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 56320;
      int int1 = 56319;
      boolean boolean0 = false;
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 56319, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1845;
      int int1 = 128;
      // Undeclared exception!
      RandomStringUtils.random(128, 128, 1845, true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '&';
      charArray0[2] = 'W';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(173, 1920, 3006, true, true, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780\u0780", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = (-2381);
      String string2 = RandomStringUtils.random(3, (-2381), 1998, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\uF6B3\uF6B3\uF6B3", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(0);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Random.setNextRandom(22);
      String string4 = RandomStringUtils.random(751, (char[]) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016\u0016", string4);
      assertNotNull(string4);
      
      String string5 = RandomStringUtils.random(3, (char[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\u0016\u0016\u0016", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(751);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1920;
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '&';
      charArray0[2] = 'W';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random(5898, 1920, 5898, false, false, charArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RandomStringUtils.random(294);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      int int0 = 20;
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(20);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'd';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-38), 794, (-38), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -38 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 776;
      String string0 = RandomStringUtils.random(776, (-3010), (-2090), false, false);
      assertEquals("\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E\uF43E", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2090), "! {<)_vD<qvc7d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2090 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1845;
      java.util.Random random0 = null;
      int int1 = 56319;
      int int2 = 1284;
      boolean boolean0 = false;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(56319, 1284, 1284, false, false, (char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 55296;
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 727;
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'x';
      charArray0[2] = 'Z';
      String string2 = RandomStringUtils.random(727, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEqualsstring2);
      assertEquals(3, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'$', 'x', 'Z'}, charArray0);
      
      String string3 = RandomStringUtils.randomNumeric(0);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = (-1898);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphabetic((-1898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1898 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      RandomStringUtils.random(1697, true, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = ':';
      charArray0[2] = 'o';
      charArray0[3] = '/';
      charArray0[4] = '+';
      charArray0[5] = 'D';
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'m', ':', 'o', '/', '+', 'D'}, charArray0);
      
      String string1 = RandomStringUtils.random(0, true, true);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.randomAscii(0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.random(0, true, true);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = RandomStringUtils.randomAscii(1304);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 4644;
      String string0 = RandomStringUtils.random(4644);
      assertNotNull(string0);
      
      int int1 = 57343;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(4644, 57343, 57343, true, false, (char[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = RandomStringUtils.random(171, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1046 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 55296;
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1920;
      String string0 = RandomStringUtils.random(1920);
      assertNotNull(string0);
      
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      MockRandom mockRandom0 = new MockRandom((-296L));
      assertNotNull(mockRandom0);
      
      String string1 = RandomStringUtils.random(0, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(1920, "N2i]=~t>\nwFXv");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = RandomStringUtils.randomAscii(1920);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = (-3394);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-3394), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3394 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
      
      int int0 = 211;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RandomStringUtils.random(211, 211, 211, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 149;
      RandomStringUtils.randomAscii(149);
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'b';
      charArray0[2] = 'e';
      RandomStringUtils.random(149, charArray0);
      int int1 = 0;
      boolean boolean0 = false;
      RandomStringUtils.random(149, 0, 0, false, false, charArray0);
      int int2 = 1068;
      RandomStringUtils.random(1068);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0, false, false);
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomStringUtils.randomAscii(1692);
      RandomStringUtils.random(1692);
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        RandomStringUtils.random(173, 3006, 1692, false, false, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1268);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1268), "-wD!=i1U$%|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1268 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAlphabetic(0);
      RandomStringUtils.random(0);
      RandomStringUtils.randomAlphabetic(0);
      char[] charArray0 = null;
      RandomStringUtils.random(3080, (char[]) null);
      int int1 = (-2575);
      boolean boolean0 = true;
      RandomStringUtils.random(0, (-2575), 3080, true, true, (char[]) null);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -312 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-1538);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-1538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1538 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAscii((-1304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1304 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1969;
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1969);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      RandomStringUtils.randomAscii(0);
      boolean boolean0 = true;
      RandomStringUtils.random(0, true, true);
      RandomStringUtils.randomNumeric(0);
      RandomStringUtils.random(0, 0, 0, true, true);
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      RandomStringUtils.random(0, true, true);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1346 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-385);
      int int1 = 498;
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '`';
      charArray0[2] = '?';
      charArray0[3] = 'O';
      charArray0[4] = '4';
      charArray0[5] = 'p';
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-385), 498, (-385), true, true, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -385 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils.randomAlphabetic(0);
      int int0 = (-1);
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1), (-1), 0, false, true, charArray0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'Q';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2918);
      // Undeclared exception!
      try { 
        RandomStringUtils.randomNumeric((-2918));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2918 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 776;
      // Undeclared exception!
      RandomStringUtils.randomNumeric(776);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1644);
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-1644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1644 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomStringUtils.random(0, "");
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'D';
      charArray0[2] = '(';
      charArray0[3] = '$';
      charArray0[4] = '1';
      charArray0[5] = ',';
      charArray0[6] = '-';
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-352);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-352), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -352 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
