/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:48:34 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.LocaleUtils$SyncAvoid", "", "org.apache.commons.lang3.LocaleUtils$SyncAvoid");
      Locale locale1 = Locale.GERMANY;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertTrue(list0.contains(locale1));
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.LocaleUtils$SyncAvoid", "", "org.apache.commons.lang3.LocaleUtils$SyncAvoid");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("ja");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      locale0.getScript();
      Locale.getISOCountries();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LocaleUtils.languagesByCountry("qG");
      LocaleUtils.availableLocaleSet();
      LocaleUtils.languagesByCountry("");
      LocaleUtils.countriesByLanguage(":ie7 8-Mb/");
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.UK;
      locale2.toLanguageTag();
      Locale locale3 = Locale.TAIWAN;
      LocaleUtils.localeLookupList(locale3, locale1);
      LocaleUtils.availableLocaleSet();
      LocaleUtils.availableLocaleList();
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("en-GB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: en-GB
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("~<cv%`7oqy(");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.LocaleUtils$SyncAvoid", "", "org.apache.commons.lang3.LocaleUtils$SyncAvoid");
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
      assertFalse(list0.contains(locale0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("rx_VD%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rx_VD%
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("rq_DD0%7;;Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rq_DD0%7;;Y
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("hq_M07v%{#FbpHY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: hq_M07v%{#FbpHY
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zq_^sp 7v%BdFoFyT|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zq_^sp 7v%BdFoFyT|
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("rx_VD");
      assertEquals("rx", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("rx__5VVDzp");
      assertEquals("5VVDzp", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("lsj+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: lsj+
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ja");
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("qG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: qG
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Invalid locale format: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocaleUtils.availableLocaleList();
      LocaleUtils.languagesByCountry("]}@^A-a?30l007m`");
      Locale locale0 = Locale.FRENCH;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale1 = Locale.ENGLISH;
      locale1.getUnicodeLocaleAttributes();
      LocaleUtils.localeLookupList((Locale) null, locale0);
      LocaleUtils.languagesByCountry("2ooX+YPX~>m!");
      String string0 = "";
      LocaleUtils.countriesByLanguage("sk");
      Locale locale2 = Locale.GERMANY;
      locale0.toLanguageTag();
      LocaleUtils.localeLookupList(locale1, (Locale) null);
      LocaleUtils.availableLocaleSet();
      LocaleUtils.availableLocaleList();
      LocaleUtils.localeLookupList((Locale) null, locale2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, list0);
      LocaleUtils.localeLookupList((Locale) null);
      LocaleUtils.localeLookupList(locale2);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
}
