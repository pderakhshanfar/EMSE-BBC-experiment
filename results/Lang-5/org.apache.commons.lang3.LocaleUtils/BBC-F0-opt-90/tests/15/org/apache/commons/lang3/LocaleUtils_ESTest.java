/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 02:40:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocaleUtils.languagesByCountry("}paV5F=nRl");
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils localeUtils0 = new LocaleUtils();
      LocaleUtils.languagesByCountry("$womd!BU@ONJsK");
      Locale locale0 = Locale.FRENCH;
      LocaleUtils.localeLookupList(locale0, locale0);
      LocaleUtils.availableLocaleSet();
      Locale locale1 = Locale.GERMAN;
      locale1.getDisplayName();
      LocaleUtils.isAvailableLocale(locale1);
      LocaleUtils.localeLookupList(locale1, locale1);
      Locale.getISOCountries();
      LocaleUtils.isAvailableLocale(locale1);
      LocaleUtils.countriesByLanguage("}paV5F=nRl");
      LocaleUtils.countriesByLanguage("}paV5F=nRl");
      LocaleUtils.isAvailableLocale(locale0);
      Locale locale2 = LocaleUtils.toLocale((String) null);
      assertNull(locale2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.availableLocaleList();
      assertEquals(160, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale("CWQ'CFz)`-<", "", "XHGS`Ie;-BMQ");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = new Locale("6XS+SeTCGRhi[@d8", "O.4g'iu/Nq@GHd))kU", "1");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertTrue(list0.contains(locale0));
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ks_URz_I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ks_URz_I
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ks_UR_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ks_UR_
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("kj_SZ_y");
      assertEquals("y", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ks_U2z_I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ks_U2z_I
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ks_<Um2XDyY5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ks_<Um2XDyY5
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ks__<U2zEI |");
      assertNotNull(locale0);
      assertEquals("ks", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("iu?]K/f?aL^j5<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: iu?]K/f?aL^j5<
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("whFZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: whFZ
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("de");
      assertEquals("de", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("j(#^qm;E2E4=06tfR5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: j(#^qm;E2E4=06tfR5
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(" @7(@4IKi:[Bg<MJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format:  @7(@4IKi:[Bg<MJ
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ks_UI");
      assertNotNull(locale0);
      assertEquals("UI", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
  }
}
