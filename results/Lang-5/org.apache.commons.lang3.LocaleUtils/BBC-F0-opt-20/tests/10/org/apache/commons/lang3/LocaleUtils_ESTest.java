/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 10:45:54 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("ga");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      locale0.getDisplayScript(locale1);
      LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale2 = Locale.US;
      LocaleUtils.localeLookupList(locale2, locale1);
      LocaleUtils localeUtils0 = new LocaleUtils();
      LocaleUtils.languagesByCountry("@/y)9I(UXJ5Obk&Ye");
      LocaleUtils.countriesByLanguage(",oT)l");
      Locale locale3 = Locale.US;
      LocaleUtils.localeLookupList(locale3, locale1);
      LocaleUtils.countriesByLanguage("qiiBC#8tDz]");
      Locale locale4 = Locale.ROOT;
      locale4.getDisplayVariant();
      LocaleUtils.localeLookupList(locale4);
      List<Locale> list1 = LocaleUtils.localeLookupList(locale4, locale1);
      assertEquals(2, list1.size());
      
      Locale locale5 = Locale.SIMPLIFIED_CHINESE;
      List<Locale> list2 = LocaleUtils.localeLookupList(locale5, locale2);
      assertFalse(list2.contains(locale0));
      
      List<Locale> list3 = LocaleUtils.localeLookupList(locale5);
      assertEquals(2, list3.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("org.apache.commons.lang3.LocaleUtils");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.lookup(linkedList0, list0);
      List<Locale> list1 = LocaleUtils.localeLookupList((Locale) null, locale0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocaleUtils.availableLocaleList();
      LocaleUtils.languagesByCountry("~-J]");
      Locale locale0 = new Locale("~-J]");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = new Locale("nMsfjNkOM1", "", "W0");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertTrue(list0.contains(locale0));
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("gj_RM_':J-");
      assertEquals("gj_RM_':J-", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gj_BWE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gj_BWE
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("gj_LW");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gj_BniL0KEJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gj_BniL0KEJ
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gj_qgRWdK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gj_qgRWdK
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("gj__B.0&E");
      assertEquals("B.0&E", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gj_RBnWiTL0%EJA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gj_RBnWiTL0%EJA
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("qfCz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: qfCz
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("iw");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("d0QuYp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d0QuYp
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("<D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: <D
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("erNxe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: erNxe
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertFalse(set0.isEmpty());
  }
}
