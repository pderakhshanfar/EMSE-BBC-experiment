/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:40:54 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      int int0 = week0.compareTo(regularTimePeriod0);
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1, int0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1, 53, 1644, 1644, 1644);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week1.equals(week0);
      assertFalse(boolean0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(101237L, week1.getSerialIndex());
      assertEquals((-1890203760001L), week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertFalse(week0.equals((Object)regularTimePeriod0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week((-175), 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530028L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2287, 1589, 1589, 1900, 1589);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(229173L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 0, 0, 0, (-1945));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-2335422300001L), week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(100489L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 2794);
      Week week0 = new Week(mockDate0);
      String string0 = week0.toString();
      assertEquals((-2208907560001L), week0.getLastMillisecond());
      assertEquals("Week 1, 1900", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week(0, (-1));
      int int0 = week0.getYearValue();
      assertEquals((-53L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      week0.getYear();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-336L));
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      System.setCurrentTimeMillis((-337L));
      week0.getYear();
      assertEquals(1970, week0.getYearValue());
      assertEquals((-337L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getWeek();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(1970, 1710);
      int int0 = week0.getWeek();
      assertEquals(90552L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-78), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week((-1473), (-2894));
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-153319L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      System.setCurrentTimeMillis(1);
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals(0L, long0);
      assertEquals(7, week0.getWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1303L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1392409281319L, long0);
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 1625, 0, 1281, 244);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(53, year0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-679), (-299), 1694, 2285);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-679,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-299,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1694,HOUR_OF_DAY=1694,MINUTE=2285,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(53, week0.getWeek());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(0L, long0);
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2287, 1589, 1589, 1900, 1589);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(74284410539999L, long0);
      assertEquals(52, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 1, 366, (-21), (-2028), 11);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1970, week0.getYearValue());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=53,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-21,HOUR_OF_DAY=-21,MINUTE=-2028,SECOND=11,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-2L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Week week0 = new Week(mockDate0);
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE);
      week0.getFirstMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1, 53, 1460, 1, 9, 9);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(50, (-2257), 53, 50, 9, 0);
      mockGregorianCalendar0.setTime(mockDate0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1912114251000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1909,MONTH=4,WEEK_OF_YEAR=23,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=9,SECOND=9,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week((-783), (-783));
      week0.getFirstMillisecond();
      assertEquals((-41514L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 0, 0, 0, (-1945));
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-2335422300001L), week0.getLastMillisecond());
      assertEquals(100489L, week0.getSerialIndex());
      assertEquals((-2335422300000L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week((-1648), (-1648));
      MockDate mockDate0 = new MockDate();
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(week1);
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-3662), int0);
      assertEquals((-87456L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week((-1473), (-2894));
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-2894) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week(0, 0);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week(52, 52);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week((-783), (-783));
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-783) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = null;
      try {
        week0 = new Week((Date) null, zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(1694, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week(358, 358);
      Locale locale0 = new Locale("(M!,`5-hGR&69K", "5=R -{4{$M:p;R`", "Second");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      week0.peg(mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(19076L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week();
      week0.getYear();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1391L);
      Week week0 = new Week(mockDate0);
      int int0 = week0.getWeek();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1390L, week0.getLastMillisecond());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Ufl2>-Hk62");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 2, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("8`W:nxUS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo("Q found at end of string.");
      assertEquals(7, week0.getWeek());
      assertEquals(1, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4271, 250, 44, 960, 52);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week();
      int int0 = week0.compareTo(week1);
      assertEquals(7, week1.getWeek());
      assertEquals(4178, int0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week(date0, timeZone0);
      Quarter quarter0 = new Quarter(date0);
      int int0 = week0.compareTo(quarter0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week(358, 358);
      Week week1 = new Week(358, 60);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(3282L, week1.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week((-353), 53);
      boolean boolean0 = week0.equals(week1);
      assertEquals(2712L, week1.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(week1);
      assertEquals((-1L), week1.getLastMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2287, 1589, 1589, 2, 1589);
      Week week0 = new Week(mockDate0);
      week0.equals(week0);
      assertEquals(74277577739999L, week0.getLastMillisecond());
      assertEquals(229160L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week(date0, timeZone0);
      Minute minute0 = new Minute();
      boolean boolean0 = week0.equals(minute0);
      assertFalse(boolean0);
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 604, (-88), (-1061), 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(103350L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 2794);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-2208907560001L), week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1391L);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertNotNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60, 60, 2);
      TimeZone timeZone0 = TimeZone.getTimeZone("s!e727U @0AY>=4/5=");
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals((-157680000001L), week0.getLastMillisecond());
      assertEquals(1964, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1900, 60, 2287);
      Year year0 = new Year(mockDate0);
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1600, 274, (-995));
      Locale locale0 = Locale.CANADA_FRENCH;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-7), year0);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week((-175), 10020);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(531141L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1391L);
      Week week0 = new Week(mockDate0);
      Week week1 = (Week)week0.next();
      int int0 = week0.compareTo(week1);
      assertEquals(1970, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week(date0, timeZone0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(106749L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 0, 0, 0, (-1945));
      Week week0 = new Week(mockDate0);
      int int0 = week0.getYearValue();
      assertEquals((-2335422300001L), week0.getLastMillisecond());
      assertEquals(1896, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("5370 $9sc<6!?bn*zdU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week(date0, timeZone0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-1L), long0);
      assertEquals(104411L, week0.getSerialIndex());
  }
}
