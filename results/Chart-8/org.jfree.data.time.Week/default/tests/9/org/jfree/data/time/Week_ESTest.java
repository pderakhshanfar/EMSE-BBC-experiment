/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:38:32 GMT 2020
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 9999);
      week1.compareTo(week0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(53, 1);
      Week week1 = new Week(53, 124);
      week0.equals(week1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week((-2305), 9999);
      week0.equals(week1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(53, 10017);
      week0.next();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      week0.previous();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(245, 1318, 1318, 0, 245);
      TimeZone timeZone0 = TimeZone.getTimeZone("0j<$L,o(BPiW");
      Locale locale0 = Locale.CANADA_FRENCH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      week0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week((-3209), (-3209));
      week0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-1988L));
      Week week0 = new Week();
      week0.getYear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week(0, 0);
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week((-2305), 9999);
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      week0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(14, (-2246));
      week0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(2311, 2311);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(1);
      Week week0 = new Week();
      week0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      week0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-3209));
      Week week0 = new Week();
      week0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-3209));
      Week week0 = new Week();
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      week0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week((-2070), (-2070));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2070), 0, 53, (-2070), 0);
      week0.peg(mockGregorianCalendar0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week(2311, 2311);
      long long0 = week0.getFirstMillisecond();
      assertEquals(122490L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-3209));
      Week week0 = new Week();
      long long0 = week0.getFirstMillisecond();
      assertEquals((-3210L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-3209L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week(0, 0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (0) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      // Undeclared exception!
      try { 
        week0.compareTo(week1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = null;
      try {
        week0 = new Week((Date) null, zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 907, 1, (-1754), (-4139));
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=907,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1754,SECOND=-4139,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 907, 1, (-1754), (-4139));
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals((-1L), long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=907,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1754,SECOND=-4139,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("!e]&#Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Day day0 = new Day();
      int int0 = week0.compareTo(day0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      int int0 = week1.compareTo(week0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals((-2013), int0);
      assertEquals(106L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week();
      boolean boolean0 = week1.equals(week0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertTrue(boolean0);
      assertEquals(106749L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = new Week(2127, 9975);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      System.setCurrentTimeMillis(1109L);
      Week week1 = new Week();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week1);
      assertEquals(528729L, regularTimePeriod0.getSerialIndex());
      assertEquals(1108L, week1.getLastMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      Hour hour0 = new Hour();
      boolean boolean0 = week0.equals(hour0);
      assertEquals(7, week0.getWeek());
      assertFalse(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week(2127, 9975);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(528729L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week(53, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(53, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(182, 244, (-205), 1929, (-2407));
      Locale locale0 = new Locale("Null 'minute' argument.", "Null 'minute' argument.", "2AU/9S{a26_@+pQpI8");
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(111406L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      MockDate mockDate0 = new MockDate((-2407), 1503, 2, (-2407), 1929);
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertNull(regularTimePeriod1);
      assertEquals(20406L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-12), 0, (-12), 2434);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.Week");
      Locale locale0 = Locale.ITALY;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals((-2240508360001L), week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis((-3209));
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-3210L), regularTimePeriod0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      week0.getYear();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, zoneInfo0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1928L));
      Locale locale0 = Locale.ENGLISH;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((-5), (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(1840, year0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(48, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = week0.compareTo(regularTimePeriod0);
      assertEquals((-1), int0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106750L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.getWeek();
      assertEquals(7, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 1, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Week week0 = new Week((-1412), 2108);
      week0.hashCode();
      assertEquals(111848L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0, (TimeZone) null);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }
}
