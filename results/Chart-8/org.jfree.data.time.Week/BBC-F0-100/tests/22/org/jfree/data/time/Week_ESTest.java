/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:50:57 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.FRENCH;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      Year year0 = new Year();
      Week week1 = new Week((-1881), year0);
      week1.compareTo(week0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(2440L);
      Week week0 = new Week(1, 1);
      Locale locale0 = Locale.FRANCE;
      Week week1 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, locale0);
      week0.equals(week1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      Date date0 = year0.getStart();
      Week week0 = new Week(1, year0);
      Week week1 = new Week(date0);
      week0.equals(week1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1602, 10005);
      week0.next();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, locale0);
      week0.next();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      week0.previous();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 29);
      week0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(29, (-1002));
      week0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      week0.getYear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("o|bD4Y*Z4`Ot5");
      Year year0 = new Year(mockDate0, timeZone0);
      Week week0 = new Week(823, year0);
      System.setCurrentTimeMillis((-957L));
      week0.getYear();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 29);
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(2958465, year0);
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week();
      week0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-1673), (-1673));
      week0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1397, 1397, 8, 1397, 1397);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      System.setCurrentTimeMillis(1L);
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      week0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week(29, (-1002));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-53077L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-567), (-567), 10, (-567), 2014, (-567));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-567,MONTH=-567,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=10,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-567,HOUR_OF_DAY=-567,MINUTE=2014,SECOND=-567,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1L), long0);
      assertEquals(40, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      long long0 = week1.getLastMillisecond();
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week((-1673), (-1673));
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals((-88550L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(28, 13, 324);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(51, week0.getWeek());
      assertEquals((-1263254400001L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-567), (-567), 10, (-567), 2014, (-567));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-567,MONTH=-567,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=10,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-567,HOUR_OF_DAY=-567,MINUTE=2014,SECOND=-567,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(40, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(4241, 2);
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      week0.getFirstMillisecond(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-5L), week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week(89, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1800), 89, 89, (-1002), 1);
      mockGregorianCalendar0.getWeekYear();
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(89L, week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66861589319000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=150,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=92,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=18,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week((-1673), (-110));
      MockDate mockDate0 = new MockDate(0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      week1.getFirstMillisecond();
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals((-1L), week1.getLastMillisecond());
      assertEquals((-5711L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-567), (-567), 10, (-567), 2014, (-567));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      week0.getFirstMillisecond();
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals(83886L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1362, 2704, 2704, 1362, 1362);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.FRENCH;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      Year year0 = new Year();
      Week week1 = new Week(2704, year0);
      int int0 = week1.compareTo(week0);
      assertEquals(106630L, week1.getSerialIndex());
      assertEquals(47, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-1480), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week((-80), (-80));
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-80) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week(2014, 2014);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week((-1673), (-110));
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-110) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(31, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.peg(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("&a'C>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1362, 2704, 2704, 1362, 1362);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.FRENCH;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      int int0 = week0.compareTo(mockDate0);
      assertEquals(1, int0);
      assertEquals(48120799319999L, week0.getLastMillisecond());
      assertEquals(47, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      Year year0 = new Year(9999);
      Week week1 = new Week(53, year0);
      int int0 = week1.compareTo(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7985, int0);
      assertEquals(530000L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      Second second0 = new Second(mockDate0, week0.DEFAULT_TIME_ZONE);
      Millisecond millisecond0 = new Millisecond(53, second0);
      int int0 = week0.compareTo(millisecond0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Year year0 = new Year();
      Date date0 = year0.getStart();
      Locale locale0 = Locale.ITALIAN;
      Week week0 = new Week(date0, year0.DEFAULT_TIME_ZONE, locale0);
      Week week1 = new Week(date0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(2440L);
      Week week0 = new Week(1, year0);
      Locale locale0 = Locale.FRANCE;
      Week week1 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, locale0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(2439L, week1.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      Week week1 = new Week(1, 1);
      week1.equals(week0);
      assertEquals(54L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertTrue(boolean0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1397, 1397, 8, 1397, 1397);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      Object object0 = new Object();
      boolean boolean0 = week0.equals(object0);
      assertEquals(45555452219999L, week0.getLastMillisecond());
      assertEquals(180921L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Year year0 = new Year(9999);
      Week week0 = new Week(53, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(530000L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week((-716), (-716));
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals((-37895L), regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Week week0 = new Week(0, 0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = new Week((-1673), (-110));
      MockDate mockDate0 = new MockDate(0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      RegularTimePeriod regularTimePeriod0 = week1.previous();
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1397, 1397, 8, 1397, 1397);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(180920L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, (-473), 883);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(99111L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals((-3155846400001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1900), 2014, 0, (-1673), 366);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale0 = Locale.CANADA;
      Week week0 = null;
      try {
        week0 = new Week(date0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-141), year0);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(115, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2531), (-2531), 2891, 0, 1770, (-2531));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      String string0 = week0.toString();
      assertEquals((-88486369931001L), week0.getLastMillisecond());
      assertEquals("Week 53, 834", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      Date date0 = week0.getEnd();
      Week week1 = null;
      try {
        week1 = new Week(date0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("o|bD4Y*Z4`Ot5");
      Year year0 = new Year(mockDate0, timeZone0);
      Week week0 = new Week(823, year0);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(55, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-141), year0);
      week0.hashCode();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106857L, week0.getSerialIndex());
  }
}
