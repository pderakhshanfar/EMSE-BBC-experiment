/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:50:59 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2103, 0, 1, 1832, (-2643), 1832);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(212171L, week0.getSerialIndex());
      assertEquals(4003, week0.getYearValue());
      assertEquals(12, week0.getWeek());
      assertEquals(64161721651999L, week0.getLastMillisecond());
      assertEquals(64161721652000L, week0.getFirstMillisecond());
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(212171L, week0.getSerialIndex());
      assertEquals(4003, week0.getYearValue());
      assertEquals(12, week0.getWeek());
      assertEquals(64161721651999L, week0.getLastMillisecond());
      assertEquals(64161721652000L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(4003, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(212172L, week1.getSerialIndex());
      assertEquals(13, week1.getWeek());
      
      int int0 = week0.compareTo(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals((-1), int0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(212171L, week0.getSerialIndex());
      assertEquals(4003, week0.getYearValue());
      assertEquals(12, week0.getWeek());
      assertEquals(64161721651999L, week0.getLastMillisecond());
      assertEquals(64161721652000L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(4003, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(212172L, week1.getSerialIndex());
      assertEquals(13, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2103, 0, 1, 1832, (-2643), 1832);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(12, week0.getWeek());
      assertEquals(64161721651999L, week0.getLastMillisecond());
      assertEquals(64161721652000L, week0.getFirstMillisecond());
      assertEquals(212171L, week0.getSerialIndex());
      assertEquals(4003, week0.getYearValue());
      
      Week week1 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertTrue(week1.equals((Object)week0));
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(64161721652000L, week1.getFirstMillisecond());
      assertEquals(12, week1.getWeek());
      assertEquals(4003, week1.getYearValue());
      assertEquals(212171L, week1.getSerialIndex());
      assertEquals(64161721651999L, week1.getLastMillisecond());
      
      int int0 = week1.compareTo(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, int0);
      assertTrue(week0.equals((Object)week1));
      assertTrue(week1.equals((Object)week0));
      assertEquals("Sun Mar 16 12:27:32 GMT 4003", mockDate0.toString());
      assertEquals(12, week0.getWeek());
      assertEquals(64161721651999L, week0.getLastMillisecond());
      assertEquals(64161721652000L, week0.getFirstMillisecond());
      assertEquals(212171L, week0.getSerialIndex());
      assertEquals(4003, week0.getYearValue());
      assertEquals(64161721652000L, week1.getFirstMillisecond());
      assertEquals(12, week1.getWeek());
      assertEquals(4003, week1.getYearValue());
      assertEquals(212171L, week1.getSerialIndex());
      assertEquals(64161721651999L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209075200000L), week0.getFirstMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-2209075200001L), week0.getLastMillisecond());
      
      mockDate0.setTime(53L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week1 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
      assertEquals(53L, week1.getFirstMillisecond());
      assertEquals(52L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      
      boolean boolean0 = week1.equals(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(boolean0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals((-2209075200000L), week0.getFirstMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-2209075200001L), week0.getLastMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
      assertEquals(53L, week1.getFirstMillisecond());
      assertEquals(52L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1729, 9);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(9, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(414L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63), week0.getWeek());
      
      Week week1 = new Week(77, 44);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2409L, week1.getSerialIndex());
      assertEquals(44, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(77, week1.getWeek());
      
      boolean boolean0 = week1.equals(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(boolean0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(9, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(414L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63), week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2409L, week1.getSerialIndex());
      assertEquals(44, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(77, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7910, 7918, 2586, 7918, 3957);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Wed Oct 27 15:57:00 GMT 10477", mockDate0.toString());
      assertEquals("10477", year0.toString());
      assertEquals(268480972620000L, year0.getFirstMillisecond());
      assertEquals(10477, year0.getYear());
      assertEquals(10477L, year0.getSerialIndex());
      assertEquals(268480972620000L, year0.getLastMillisecond());
      
      Week week0 = new Week(3957, year0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Wed Oct 27 15:57:00 GMT 10477", mockDate0.toString());
      assertEquals("10477", year0.toString());
      assertEquals(268480972620000L, year0.getFirstMillisecond());
      assertEquals(10477, year0.getYear());
      assertEquals(10477L, year0.getSerialIndex());
      assertEquals(268480972620000L, year0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(117, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(555398L, week0.getSerialIndex());
      assertEquals(10477, week0.getYearValue());
      
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(regularTimePeriod0);
      assertEquals("Wed Oct 27 15:57:00 GMT 10477", mockDate0.toString());
      assertEquals("10477", year0.toString());
      assertEquals(268480972620000L, year0.getFirstMillisecond());
      assertEquals(10477, year0.getYear());
      assertEquals(10477L, year0.getSerialIndex());
      assertEquals(268480972620000L, year0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(117, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(555398L, week0.getSerialIndex());
      assertEquals(10477, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 81, 9, 12);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Y_H{%=\"~eK<8k}9\"%");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("java.util.TimeZone");
      assertNotNull(locale0);
      assertEquals("java.util.timezone", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.timezone", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Mon Dec 20 09:12:00 GMT 1909", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("java.util.timezone", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.timezone", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-1894459680000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals(101229L, week0.getSerialIndex());
      assertEquals((-1894459680001L), week0.getLastMillisecond());
      assertEquals(1909, week0.getYearValue());
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Mon Dec 20 09:12:00 GMT 1909", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("java.util.timezone", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.timezone", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-1894459680000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals(101229L, week0.getSerialIndex());
      assertEquals((-1894459680001L), week0.getLastMillisecond());
      assertEquals(1909, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1910, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(101231L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(1, 0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNull(regularTimePeriod0);
      assertEquals(1L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(1424, 0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals((-112), week0.getWeek());
      assertEquals((-112L), week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
      
      int int0 = week0.getYearValue();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, int0);
      assertEquals((-112), week0.getWeek());
      assertEquals((-112L), week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week((-1755), (-5860));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(37, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-5860), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-310543L), week0.getSerialIndex());
      
      int int0 = week0.getYearValue();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-5860), int0);
      assertEquals(37, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-5860), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-310543L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      System.setCurrentTimeMillis(0L);
      Year year0 = week0.getYear();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(year0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 1793, 1793, (-2088), 24, 24);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Mon Jan 31 00:24:24 GMT 2050", mockDate0.toString());
      assertEquals(2527201464000L, week0.getFirstMillisecond());
      assertEquals(108656L, week0.getSerialIndex());
      assertEquals(2527201463999L, week0.getLastMillisecond());
      assertEquals(6, week0.getWeek());
      assertEquals(2050, week0.getYearValue());
      
      System.setCurrentTimeMillis((-2096L));
      Year year0 = week0.getYear();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(year0);
      assertEquals("Mon Jan 31 00:24:24 GMT 2050", mockDate0.toString());
      assertEquals(2527201464000L, week0.getFirstMillisecond());
      assertEquals(108656L, week0.getSerialIndex());
      assertEquals(2527201463999L, week0.getLastMillisecond());
      assertEquals(6, week0.getWeek());
      assertEquals(2050, week0.getYearValue());
      assertEquals("2050", year0.toString());
      assertEquals((-2096L), year0.getLastMillisecond());
      assertEquals((-2096L), year0.getFirstMillisecond());
      assertEquals(2050, year0.getYear());
      assertEquals(2050L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 627, 11, (-3243), 212);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sat Aug 16 05:00:32 GMT 1913", mockDate0.toString());
      assertEquals(1913, week0.getYearValue());
      assertEquals((-1779130768001L), week0.getLastMillisecond());
      assertEquals(101422L, week0.getSerialIndex());
      assertEquals(33, week0.getWeek());
      assertEquals((-1779130768000L), week0.getFirstMillisecond());
      
      int int0 = week0.getWeek();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(33, int0);
      assertEquals("Sat Aug 16 05:00:32 GMT 1913", mockDate0.toString());
      assertEquals(1913, week0.getYearValue());
      assertEquals((-1779130768001L), week0.getLastMillisecond());
      assertEquals(101422L, week0.getSerialIndex());
      assertEquals(33, week0.getWeek());
      assertEquals((-1779130768000L), week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=y@o83\"FVl*PDm!L|a{");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      assertNotNull(year0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      
      Week week0 = new Week(0, year0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(104410L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(104410L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(104409L, week1.getSerialIndex());
      assertEquals((-1), week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      
      int int0 = week1.getWeek();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals((-1), int0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(104410L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(104409L, week1.getSerialIndex());
      assertEquals((-1), week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      long long0 = week0.getSerialIndex();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week((-2033), (-2033));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals((-2033), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-107734L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(15, week0.getWeek());
      
      long long0 = week0.getSerialIndex();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-107734L), long0);
      assertEquals((-2033), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-107734L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(15, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      System.setCurrentTimeMillis(1);
      Year year0 = week0.getYear();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(year0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(year0.DEFAULT_TIME_ZONE, locale0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1380), 4763, (-1283));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Week week0 = new Week(date0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals(40, week0.getWeek());
      assertEquals(1582, week0.getYearValue());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-1L), long0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals(40, week0.getWeek());
      assertEquals(1582, week0.getYearValue());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(631, 631, 631);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Fri Apr 22 00:00:00 GMT 2585", mockDate0.toString());
      assertEquals(19417190400000L, year0.getLastMillisecond());
      assertEquals(19417190400000L, year0.getFirstMillisecond());
      assertEquals(2585L, year0.getSerialIndex());
      assertEquals(2585, year0.getYear());
      assertEquals("2585", year0.toString());
      
      Week week0 = new Week(631, year0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Fri Apr 22 00:00:00 GMT 2585", mockDate0.toString());
      assertEquals(19417190400000L, year0.getLastMillisecond());
      assertEquals(19417190400000L, year0.getFirstMillisecond());
      assertEquals(2585L, year0.getSerialIndex());
      assertEquals(2585, year0.getYear());
      assertEquals("2585", year0.toString());
      assertEquals(137124L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(119, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2585, week0.getYearValue());
      
      MockDate mockDate1 = new MockDate(1);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Week week1 = new Week(mockDate1, week0.DEFAULT_TIME_ZONE);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(week1.equals((Object)week0));
      assertEquals("Fri Apr 22 00:00:00 GMT 2585", mockDate0.toString());
      assertEquals(19417190400000L, year0.getLastMillisecond());
      assertEquals(19417190400000L, year0.getFirstMillisecond());
      assertEquals(2585L, year0.getSerialIndex());
      assertEquals(2585, year0.getYear());
      assertEquals("2585", year0.toString());
      assertEquals(137124L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(119, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2585, week0.getYearValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(0L, week1.getLastMillisecond());
      
      long long0 = week1.getLastMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(week0, week1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(week1, week0);
      assertEquals(0L, long0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(week0.equals((Object)week1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(week1.equals((Object)week0));
      assertEquals("Fri Apr 22 00:00:00 GMT 2585", mockDate0.toString());
      assertEquals(19417190400000L, year0.getLastMillisecond());
      assertEquals(19417190400000L, year0.getFirstMillisecond());
      assertEquals(2585L, year0.getSerialIndex());
      assertEquals(2585, year0.getYear());
      assertEquals("2585", year0.toString());
      assertEquals(137124L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(119, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2585, week0.getYearValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(0L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(1, 0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      long long0 = week0.getLastMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, long0);
      assertEquals(1, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-3385), 0, 0, 2565);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Wed Sep 24 00:42:45 GMT 1890", mockDate0.toString());
      assertEquals((-2501536635000L), week0.getFirstMillisecond());
      assertEquals((-2501536635001L), week0.getLastMillisecond());
      assertEquals(1890, week0.getYearValue());
      assertEquals(39, week0.getWeek());
      assertEquals(100209L, week0.getSerialIndex());
      
      long long0 = week0.getLastMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-2501536635001L), long0);
      assertEquals("Wed Sep 24 00:42:45 GMT 1890", mockDate0.toString());
      assertEquals((-2501536635000L), week0.getFirstMillisecond());
      assertEquals((-2501536635001L), week0.getLastMillisecond());
      assertEquals(1890, week0.getYearValue());
      assertEquals(39, week0.getWeek());
      assertEquals(100209L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1380), 4763, (-1283));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Week week0 = new Week(date0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(40, week0.getWeek());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals(1582, week0.getYearValue());
      
      long long0 = week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1380,MONTH=4763,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1283,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(40, week0.getWeek());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals(1582, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(1060, 1060);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(56216L, week0.getSerialIndex());
      assertEquals(1060, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(36, week0.getWeek());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      long long0 = week0.getFirstMillisecond(calendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, long0);
      assertEquals(56216L, week0.getSerialIndex());
      assertEquals(1060, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(36, week0.getWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=y@o83\"FVl*PDm!L|a{");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = new Locale("=y@o83\"FVl*PDm!L|a{", "=y@o83\"FVl*PDm!L|a{", "=y@o83\"FVl*PDm!L|a{");
      assertNotNull(locale0);
      assertEquals("=y@o83\"fvl*pdm!l|a{_=Y@O83\"FVL*PDM!L|A{_=y@o83\"FVl*PDm!L|a{", locale0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", locale0.getVariant());
      assertEquals("=y@o83\"fvl*pdm!l|a{", locale0.getLanguage());
      assertEquals("=Y@O83\"FVL*PDM!L|A{", locale0.getCountry());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"fvl*pdm!l|a{_=Y@O83\"FVL*PDM!L|A{_=y@o83\"FVl*PDm!L|a{", locale0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", locale0.getVariant());
      assertEquals("=y@o83\"fvl*pdm!l|a{", locale0.getLanguage());
      assertEquals("=Y@O83\"FVL*PDM!L|A{", locale0.getCountry());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id==y@o83\"FVl*PDm!L|a{,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("=y@o83\"fvl*pdm!l|a{_=Y@O83\"FVL*PDM!L|A{_=y@o83\"FVl*PDm!L|a{", locale0.toString());
      assertEquals("=y@o83\"FVl*PDm!L|a{", locale0.getVariant());
      assertEquals("=y@o83\"fvl*pdm!l|a{", locale0.getLanguage());
      assertEquals("=Y@O83\"FVL*PDM!L|A{", locale0.getCountry());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 2565);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sun Dec 31 00:42:45 GMT 1899", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209072635000L), week0.getFirstMillisecond());
      assertEquals((-2209072635001L), week0.getLastMillisecond());
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-2209072635000L), long0);
      assertEquals("Sun Dec 31 00:42:45 GMT 1899", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209072635000L), week0.getFirstMillisecond());
      assertEquals((-2209072635001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 1793, 1793, (-2088), 24, (-2610));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Sun Jan 30 23:40:30 GMT 2050", mockDate0.toString());
      assertEquals(6, week0.getWeek());
      assertEquals(2050, week0.getYearValue());
      assertEquals(108656L, week0.getSerialIndex());
      assertEquals(2527198830000L, week0.getFirstMillisecond());
      assertEquals(2527198829999L, week0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Week week0 = new Week(date0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1582, week0.getYearValue());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals(40, week0.getWeek());
      
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1582) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week(400, (-1832));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-97208L), week0.getSerialIndex());
      assertEquals((-1832), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-112), week0.getWeek());
      
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week(1060, 1060);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(36, week0.getWeek());
      assertEquals(56216L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1060, week0.getYearValue());
      
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1060) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((-2254), (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2103, 0, 1, 1832, (-2643), 1832);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.peg(mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week();
      Month month0 = new Month(1, 53);
      int int0 = week0.compareTo(month0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11);
      Week week0 = new Week(mockDate0);
      int int0 = week0.compareTo(mockDate0);
      assertEquals(1, int0);
      assertEquals(10L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, 46, 5, 2388, (-1256), 13);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week();
      boolean boolean0 = week1.equals(week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(2, 1600);
      boolean boolean0 = week0.equals(week1);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(84802L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2103, 0, 1, 1832, (-2643), 1832);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(mockGregorianCalendar0);
      assertEquals(12, week0.getWeek());
      assertFalse(boolean0);
      assertEquals(64161721651999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-3385), 0, 0, 2565);
      Week week0 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals((-2501536635001L), week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week1.equals(week0);
      assertEquals(10L, week1.getLastMillisecond());
      assertTrue(boolean0);
      assertEquals(104411L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week(1149, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(530072L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(631, 631, 631);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(631, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals(1, int0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(137059L, regularTimePeriod0.getSerialIndex());
      assertEquals(119, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2543);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.jfree.data.time.RegularTimePeriod");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-1), int0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 2565);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(100701L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals((-2209072635001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-3385), 0, 0, 2565);
      Week week0 = new Week(mockDate0);
      Week week1 = null;
      try {
        week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = new Locale("", "", "Could not find separator.");
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = new Week((-739), (-739));
      System.setCurrentTimeMillis((-629L));
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      week0.getFirstMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=371,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals((-39138L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4), 1793, 1793, (-2088), 24, 24);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getSerialIndex();
      assertEquals(2527201463999L, week0.getLastMillisecond());
      assertEquals(108656L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=y@o83\"FVl*PDm!L|a{");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      Week week0 = new Week(0, year0);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "=y@o83\"FVl*PDm!L|a{");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      Week week0 = new Week(11, year0);
      String string0 = week0.toString();
      assertEquals("Week 11, 1970", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2543);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.jfree.data.time.RegularTimePeriod");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      int int0 = week0.getYearValue();
      assertEquals(2542L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 11, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-3385), 0, 0, 2565);
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals((-2501536635001L), week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
  }
}
