/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:44:27 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-337L));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals(104412L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(11, 1840);
      Week week1 = new Week(11, 53);
      boolean boolean0 = week0.equals(week1);
      assertEquals(97531L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-337L));
      TimeZone timeZone0 = TimeZone.getTimeZone("l(i-h>,BH3K%");
      Week week0 = new Week(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1891, 10014);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(530841L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(53, 180);
      Week week1 = (Week)week0.next();
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(181, week1.getYearValue());
      assertEquals(9594L, week1.getSerialIndex());
      assertNotNull(week1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(1, 305);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(16166L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week((-4), (-4536));
      int int0 = week0.getYearValue();
      assertEquals((-240412L), week0.getSerialIndex());
      assertEquals((-4536), int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      System.setCurrentTimeMillis(0L);
      week0.getYear();
      assertEquals(999L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-17L));
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(39);
      Date date0 = spreadsheetDate0.toDate();
      Week week0 = new Week(date0);
      week0.getYear();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-18L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getWeek();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(1970, (-1972));
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-104594L), week0.getSerialIndex());
      assertEquals((-78), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-418), (-418));
      long long0 = week0.getSerialIndex();
      assertEquals((-22060L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week(0, 0);
      System.setCurrentTimeMillis(1);
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week((-4), (-4536));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-4536), (-3677));
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-240412L), week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=-4536,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3677,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(0L, long0);
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-9223372036854775808L));
      Instant instant1 = MockInstant.plusSeconds(instant0, 264L);
      Date date0 = Date.from(instant1);
      Week week0 = new Week(date0);
      long long0 = week0.getLastMillisecond();
      assertEquals(49, week0.getWeek());
      assertEquals((-9223372036854511809L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year();
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 53, (-2497));
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2497,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-337L));
      TimeZone timeZone0 = TimeZone.getTimeZone("l(i-h>,BH3K%");
      Week week0 = new Week(mockDate0, timeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getFirstMillisecond(calendar0);
      assertEquals((-338L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-334L));
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setTime(mockDate0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-334,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-335L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(738, (-3687));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-617), (-1), (-1), 1, (-1), 11);
      week0.peg(mockGregorianCalendar0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week((-2190), 0);
      week0.getFirstMillisecond();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(114L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year();
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      Week week1 = new Week();
      int int0 = week0.compareTo(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-44), int0);
      assertEquals(106749L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week(13, (-354));
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-354) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week((-1972), 700);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week((-1972), 700);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week((-1961), 700);
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (700) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(11, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(120, year0);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = new Week((-1972), 700);
      int int0 = week0.getWeek();
      assertEquals(37176L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("SW~U*8WMs>ty.z-@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(1254, year0);
      int int0 = week0.compareTo(year0);
      assertEquals(0, int0);
      assertEquals((-26), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year();
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      Week week1 = new Week(53, year0);
      int int0 = week1.compareTo(week0);
      assertEquals(44, int0);
      assertEquals(53, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week(1615, 1840);
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = week0.compareTo(calendar0);
      assertEquals(1, int0);
      assertEquals(97599L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(17, (-403), (-1639), 1139, 11);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week1.equals(week0);
      assertTrue(boolean0);
      assertEquals((-2869994940001L), week1.getLastMillisecond());
      assertEquals(99591L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week(1, 305);
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(53L);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(week1);
      assertEquals(16166L, week0.getSerialIndex());
      assertEquals(52L, week1.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(104411L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week(1615, 1840);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(97598L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      Week week0 = new Week(1847, 9999);
      boolean boolean0 = week0.equals(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530002L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week(1847, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(55, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 44, 34, 90);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals((-2208914670001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(45, 1303, 519, 45, 1303);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-586), ":z:]6g-Y1");
      Locale locale0 = Locale.GERMANY;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      assertEquals(2682614579999L, week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, 14, 14);
      TimeZone timeZone0 = TimeZone.getTimeZone("V'm)#s hZ");
      Week week0 = new Week(mockDate0, timeZone0);
      Week week1 = null;
      try {
        week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.US;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-13), 10, 100, 0, 0, 666);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-13), year0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(100051L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-337L));
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-337L), long0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-338L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(1254, year0);
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106716L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-337L));
      TimeZone timeZone0 = TimeZone.getTimeZone("l(i-h>,BH3K%");
      Week week0 = new Week(mockDate0, timeZone0);
      int int0 = week0.getYearValue();
      assertEquals((-338L), week0.getLastMillisecond());
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getLastMillisecond();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      week0.getYear();
      assertEquals(999L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week(738, (-3687));
      week0.hashCode();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-195441L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(11, (-1633), 11, 243, 1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      RegularTimePeriod regularTimePeriod0 = week1.next();
      assertEquals(94075L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }
}
