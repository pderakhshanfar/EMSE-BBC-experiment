/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:54:20 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 3, (-3625), 1236, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = week0.compareTo(regularTimePeriod0);
      assertEquals((-1), int0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(103005L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(7, 3061);
      boolean boolean0 = week0.equals(week1);
      assertEquals(162240L, week1.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(3999, 11);
      boolean boolean0 = week1.equals(week0);
      assertEquals(486L, week1.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(311531L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(571, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(59, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      Week week1 = (Week)week0.next();
      Week week2 = (Week)week1.next();
      Week week3 = (Week)week2.next();
      assertEquals(5877, week1.getYearValue());
      assertEquals(311535L, week3.getSerialIndex());
      assertEquals(1392409281319L, week3.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209075200001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week((-859), (-1628));
      int int0 = week0.getYearValue();
      assertEquals((-1628), int0);
      assertEquals((-86375L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      System.setCurrentTimeMillis(0L);
      week0.getYear();
      assertEquals((-2209075200001L), week0.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2566);
      Date date0 = spreadsheetDate0.toDate();
      Week week0 = new Week(date0);
      System.setCurrentTimeMillis((-580L));
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getWeek();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-1170), (-491));
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-25913L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis(1);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2566);
      Date date0 = spreadsheetDate0.toDate();
      Week week0 = new Week(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4, 2958465, 14, 9999);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2958465,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=9999,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Week week0 = new Week();
      long long0 = week0.getLastMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-2209075200001L), long0);
      assertEquals(100701L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 3, (-3625), 1236, 0);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1119), 7, 12, 3297, 32);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1119,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3297,HOUR_OF_DAY=3297,MINUTE=32,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-837518400001L), week0.getLastMillisecond());
      assertEquals(25, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week((-653), (-653));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-34494L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1852), year0);
      Locale locale0 = Locale.forLanguageTag("Ftyqdx!|x");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
      mockGregorianCalendar0.setTimeInMillis((-1852));
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-60), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3571, 344, 3571, 3571, 3571, 2260);
      mockDate0.setTime(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2260, "");
      Locale locale0 = new Locale("");
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      week0.getFirstMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "&A.b2I;UF6jHM");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.peg(mockGregorianCalendar0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 3, (-3625), 1236, 0);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-837518400000L), long0);
      assertEquals(25, week0.getWeek());
      assertEquals((-837518400001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week(0, 0);
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.CANADA_FRENCH;
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, locale0);
      int int0 = week0.compareTo(week1);
      assertEquals(7, week1.getWeek());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-2014), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week(0, 0);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week((-2082), 0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (0) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1158, 1158, 853);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week((-1530), (-1530));
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-1530) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week(9999, (-2128));
      Week week1 = null;
      try {
        week1 = new Week((Date) null, week0.DEFAULT_TIME_ZONE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((-2794), (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week(654, 3674);
      int int0 = week0.getWeek();
      assertEquals(194608L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-114), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("(t=C-Yx:;QX[-9I9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Th{;}w9=Fj~KSx/G9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2723, (-1002), (-1557), 23, 365);
      Week week0 = new Week(mockDate0);
      int int0 = week0.compareTo("Week 7, 2014");
      assertEquals(1, int0);
      assertEquals(80950943099999L, week0.getLastMillisecond());
      assertEquals(14, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2723, (-1002), (-1557), 23, 365);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week();
      int int0 = week0.compareTo(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2521, int0);
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      int int0 = week0.compareTo(fixedMillisecond0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 3, (-3625), 1259, (-319));
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week1.equals(week0);
      assertTrue(boolean0);
      assertEquals((-837454740001L), week1.getLastMillisecond());
      assertEquals(25, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      boolean boolean0 = week0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals(123322901939999L, week0.getLastMillisecond());
      assertEquals(50, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 53, (-3625), (-3625), 53);
      Week week0 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week0);
      assertEquals((-723514020001L), week0.getLastMillisecond());
      assertEquals(103196L, week0.getSerialIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, (-84));
      boolean boolean0 = week0.equals(week1);
      assertEquals((-4451L), week1.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week(584, 10036);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(72, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week((-653), (-653));
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(115, week0.getWeek());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertNull(regularTimePeriod1);
      assertEquals((-34555L), regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1404, 1404, 1404, 1404, 1404);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.TimePeriodFormatException");
      Locale locale0 = Locale.UK;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals(53, week0.getWeek());
      assertEquals(45915506639999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(319L);
      Week week0 = new Week();
      Week week1 = new Week(1, (-84));
      boolean boolean0 = week0.equals(week1);
      assertEquals(318L, week1.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertEquals((-4451L), week1.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1765, 3, (-3625), 1236, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1236, "`V~JA%>0la>G5");
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, simpleTimeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(45, 45, 45);
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      Class<Week> class0 = Week.class;
      RegularTimePeriod.createInstance(class0, (Date) null, week0.DEFAULT_TIME_ZONE);
      Week week1 = new Week();
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(1, year0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106741L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1091), 192, 14, (-580), (-624));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(43725L, regularTimePeriod0.getSerialIndex());
      assertEquals((-36133309440001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      String string0 = week0.toString();
      assertEquals("Week 50, 5877", string0);
      assertEquals(123322901939999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      int int0 = week0.getYearValue();
      assertEquals(50, week0.getWeek());
      assertEquals(5877, int0);
      assertEquals(123322901939999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 50, 5877");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1852), year0);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-60), week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3674, 3674, (-978), 3999, 3999);
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals(123322901939999L, week0.getLastMillisecond());
      assertEquals(311531L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(mockDate0, zoneInfo0);
      long long0 = week0.getSerialIndex();
      assertEquals(100701L, long0);
      assertEquals((-2209075200001L), week0.getLastMillisecond());
  }
}
