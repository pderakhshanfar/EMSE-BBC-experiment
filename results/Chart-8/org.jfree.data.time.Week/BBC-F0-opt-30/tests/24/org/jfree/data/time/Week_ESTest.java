/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 22:28:12 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      Year year0 = week0.getYear();
      MockDate mockDate0 = new MockDate(3565, 1, (-3071), (-985), 2200);
      Week week1 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      int int0 = week1.compareTo(week0);
      assertEquals(110025430799999L, week1.getLastMillisecond());
      assertEquals(3442, int0);
      assertEquals(289198L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(4, 2958465);
      MockDate mockDate0 = new MockDate(1068, 3637, 6, (-439), 2, 1545);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(41057170064999L, week1.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertEquals(495289L, week0.getSerialIndex());
      assertEquals(173367L, week1.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(53, 53, 3421);
      mockDate0.setTime(1);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(53, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(530000L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(2635, 1285);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(68159L, regularTimePeriod0.getSerialIndex());
      assertNull(regularTimePeriod1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week((-3022), (-3022));
      int int0 = week0.getYearValue();
      assertEquals((-160116L), week0.getSerialIndex());
      assertEquals((-3022), int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-4826L));
      Year year0 = new Year();
      Week week0 = new Week(11, year0);
      week0.getYear();
      assertEquals(104368L, week0.getSerialIndex());
      assertEquals((-4827L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week(0, 4);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(212L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week((-1144), 46);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2318L, week0.getSerialIndex());
      assertEquals((-120), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(106749L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(53, (-744));
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-39379L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis(1);
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(14, (-816));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 13, 1, 9999, 14, 53);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-1L), long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=9999,HOUR_OF_DAY=9999,MINUTE=14,SECOND=53,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-43234L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(1L);
      Locale locale0 = new Locale("*TU[M", "*TU[M", "");
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, locale0);
      long long0 = week0.getLastMillisecond();
      assertEquals(0L, long0);
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 0, 0, 0, 0);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-704937600001L), long0);
      assertEquals(103227L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 53, 53, 53, 1);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=53,HOUR_OF_DAY=53,MINUTE=53,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Year year0 = new Year(2045);
      Week week0 = new Week(2045, year0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(year0.DEFAULT_TIME_ZONE, locale0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-3), week0.getWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(305);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(date0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1900, 3, 1, 3);
      mockGregorianCalendar0.roll(1, true);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=4,WEEK_OF_YEAR=20,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=133,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=1,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(212, 212, 212, 212, 212, 212);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(date0, timeZone0);
      week0.peg(mockGregorianCalendar0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Year year0 = new Year(1925);
      Week week0 = new Week(1251, year0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(101996L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 0, 0, 0, 37);
      Week week0 = new Week(mockDate0);
      week0.getFirstMillisecond();
      assertEquals(103227L, week0.getSerialIndex());
      assertEquals((-704937563001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(212, 212, 212, 212, 212, 212);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(date0, timeZone0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1582) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(31);
      Date date0 = serialDate0.toDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("\"lL4Nbn");
      Week week0 = new Week(date0, timeZone0);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(30, "Null 'zone' argument.");
      Week week0 = null;
      try {
        week0 = new Week((Date) null, simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(3722, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals(1392409281319L, long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("syj^Z7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(0, int0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(1248, 3);
      Date date0 = week0.getStart();
      Week week1 = new Week(date0);
      int int0 = week0.compareTo(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-2011), int0);
      assertEquals((-32), week0.getWeek());
      assertEquals(106749L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week(1248, 3);
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (3) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = new Week();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
      int int0 = week0.compareTo(mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week(3637, 3637);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      Week week1 = (Week)week0.next();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(192815L, week1.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
      assertTrue(boolean0);
      assertEquals(1, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week(3637, 3637);
      Week week1 = new Week(1, 1);
      Week week2 = (Week)week0.next();
      assertNotNull(week2);
      
      boolean boolean0 = week1.equals(week2);
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertFalse(boolean0);
      assertFalse(week2.equals((Object)week1));
      assertEquals(1, week2.getWeek());
      assertEquals(192815L, week2.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = new Week(3637, 3637);
      Week week1 = new Week(1, 1);
      week1.equals(week0);
      assertEquals(192814L, week0.getSerialIndex());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week(3637, 3637);
      week0.equals(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(192814L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(305);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(date0, timeZone0, locale0);
      Minute minute0 = new Minute(date0, week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(minute0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week(53, 10007);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(530424L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(305);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(date0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106750L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-2), 2, 4, (-1273));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1, year0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 31, (-1672), 31, 31);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals(53, week0.getWeek());
      assertEquals((-1924878540001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      week0.getYear();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1925, 1, 779, (-3624), 1251, 33);
      mockDate0.setTime((-2725L));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 0, 0, 0, 37);
      Week week0 = new Week(mockDate0);
      Week week1 = null;
      try {
        week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Locale locale0 = Locale.ENGLISH;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-123), (-123), 14, (-123), (-28), (-96));
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Year year0 = new Year(mockDate0, zoneInfo0);
      Week week0 = new Week((-123), year0);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Year year0 = new Year(1925);
      Week week0 = new Week(1, year0);
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      
      Week week2 = (Week)week1.next();
      assertEquals(102026L, week2.getSerialIndex());
      assertEquals(52, week1.getWeek());
      assertNotNull(week2);
      assertEquals(1392409281319L, week2.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals((-1), int0);
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(305);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(date0, timeZone0, locale0);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(305);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(date0, timeZone0, locale0);
      String string0 = week0.toString();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("Week 7, 2014", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week(3637, 3637);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(3637, int0);
      assertEquals(192814L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 0, 0, 0, 37);
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals((-704937563001L), week0.getLastMillisecond());
      assertEquals(103227L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(31);
      Date date0 = serialDate0.toDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("\"lL4Nbn");
      Week week0 = new Week(date0, timeZone0);
      Year year0 = week0.getYear();
      int int0 = week0.compareTo(year0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(106749L, week0.getSerialIndex());
  }
}
