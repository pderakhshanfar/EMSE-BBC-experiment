/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:55:22 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      assertEquals(100701L, week0.getSerialIndex());
      
      Week week1 = new Week(2389, 9999);
      int int0 = week1.compareTo(week0);
      assertEquals(8099, int0);
      assertEquals(85, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Week week1 = new Week(0, 181);
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(9593L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1251L);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
      assertEquals(104411L, week0.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1111, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530034L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(1, 53);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(2810L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.peg(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week((-3895), (-3895));
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-3895), int0);
      assertEquals((-206490L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(90, year0);
      System.setCurrentTimeMillis(0L);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(90, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1251L);
      Week week0 = new Week(mockDate0);
      System.setCurrentTimeMillis((-1L));
      week0.getYear();
      assertEquals(1250L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getWeek();
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week((-3895), (-3895));
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-206490L), week0.getSerialIndex());
      assertEquals((-55), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-3895), (-3895));
      long long0 = week0.getSerialIndex();
      assertEquals((-206490L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis(1L);
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("SerialDate.monthCodeToQuarter: invalid month code.");
      Week week0 = new Week(date0, timeZone0);
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2889), 73, (-2889), 73, 73, 182);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2889,MONTH=73,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2889,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=73,HOUR_OF_DAY=73,MINUTE=73,SECOND=182,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1L), long0);
      assertEquals(83886L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(2389, 9999);
      long long0 = week0.getLastMillisecond();
      assertEquals(530032L, week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2805), 71, 1900, 1900, 71, 1);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2805,MONTH=71,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1900,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1900,HOUR_OF_DAY=1900,MINUTE=71,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getFirstMillisecond(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis((-2604L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-2604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=57,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1251L);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(1251L, long0);
      assertEquals(1250L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals((-12219292800000L), long0);
      assertEquals(83886L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week(0, 0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (0) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 3640);
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week((-3895), (-3895));
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-3895) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((-509), (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("*y_-%%qtpL2 78%fvc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.compareTo((Object) null);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = new Week(3695, 2012);
      Instant instant0 = MockInstant.ofEpochSecond((long) 53, 4505L);
      Date date0 = Date.from(instant0);
      Week week1 = new Week(date0);
      int int0 = week1.compareTo(week0);
      assertEquals((-42), int0);
      assertEquals(52999L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(106747L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      int int0 = week0.compareTo(week0);
      assertEquals(0, int0);
      assertEquals((-2846L), week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      Minute minute0 = new Minute(mockDate0, week0.DEFAULT_TIME_ZONE);
      Day day0 = minute0.getDay();
      int int0 = week0.compareTo(day0);
      assertEquals(0, int0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2846L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1644L));
      Week week0 = new Week(mockDate0);
      Year year0 = new Year(mockDate0);
      Week week1 = new Week(1, year0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1251L);
      Week week0 = new Week(mockDate0);
      Year year0 = week0.getYear();
      boolean boolean0 = week0.equals(year0);
      assertFalse(boolean0);
      assertEquals(1250L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(104409L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, (-105), (-105), 31, 9999, (-105));
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-105), "rGgjw%#k8I^nh");
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(313044327434999L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(630169L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      Week week1 = (Week)week0.next();
      int int0 = week0.compareTo(week1);
      assertEquals((-1), int0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 3, 3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "First");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals((-2209064220001L), week0.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, 0, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      assertEquals(630646L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
      assertEquals(630647L, regularTimePeriod1.getSerialIndex());
      assertNotNull(regularTimePeriod1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.jfree.data.time.Minute");
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, simpleTimeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(133, 1969, 1969, 57, 133);
      Locale locale0 = Locale.TAIWAN;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      Week week0 = new Week((-3099), year0);
      week0.hashCode();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-27), week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      
      Week week2 = (Week)week1.next();
      boolean boolean0 = week0.equals(week2);
      assertEquals(104411L, week2.getSerialIndex());
      assertEquals(52, week1.getWeek());
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = new Week();
      week0.equals(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week(mockDate0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1251L);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getSerialIndex();
      assertEquals(1250L, week0.getLastMillisecond());
      assertEquals(104411L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      int int0 = week0.getWeek();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2846L), week0.getLastMillisecond());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1459), 0, (-1459));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1459), "a;9LIE");
      Locale locale0 = Locale.GERMAN;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      String string0 = week0.toString();
      assertEquals("Week 53, 436", string0);
      assertEquals((-48376569600001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 1, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2845));
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-2846L), long0);
      assertEquals(104411L, week0.getSerialIndex());
  }
}
