/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:34:00 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, 1226, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = week0.compareTo(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(171095L, regularTimePeriod0.getSerialIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(week1);
      assertEquals(44, int0);
      assertEquals(1, week1.getWeek());
      assertEquals(0L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(1, (-294));
      boolean boolean0 = week0.equals(week1);
      assertEquals((-15581L), week1.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(54L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week((-1699), 10002);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(530199L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(1, (-1));
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-52L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(53, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      int int0 = week0.getYearValue();
      assertEquals((-1), int0);
      assertEquals((-54L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      Week week0 = new Week();
      week0.getYear();
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(21, 6, 21, 3000, 6);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(6, year0);
      System.setCurrentTimeMillis((-793L));
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(101819L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      Week week1 = (Week)week0.next();
      int int0 = week1.getWeek();
      assertEquals((-1), week0.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-53L), week1.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(mockDate0, timeZone0);
      int int0 = week0.getWeek();
      assertEquals(7, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      long long0 = week0.getSerialIndex();
      assertEquals((-54L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(181, 181, 243, 53, 44);
      mockGregorianCalendar0.setTimeInMillis(1);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2175), 1900, 7, (-1876), 53);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-1L), long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2175,MONTH=1900,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1876,HOUR_OF_DAY=-1876,MINUTE=53,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      long long0 = week1.getLastMillisecond();
      assertEquals(7, week0.getWeek());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      long long0 = week0.getLastMillisecond();
      assertEquals((-54L), week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 46, (-1), (-4554), 1900);
      Week week0 = new Week((-2718), (-1922));
      week0.peg(mockGregorianCalendar0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1226, 1226);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209000414001L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week((-234), (-234));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-234), 53, (-234), 9999, (-465));
      mockGregorianCalendar0.roll(1, false);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-12380L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=230,MONTH=10,WEEK_OF_YEAR=49,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=333,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 46, (-1), (-4554), 1900);
      Week week0 = new Week((-2718), (-1922));
      week0.peg(mockGregorianCalendar0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      week0.peg(mockGregorianCalendar0);
      week0.getFirstMillisecond();
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1226, 1226);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209000414000L), long0);
      assertEquals((-2209000414001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week(1, 0);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(21, 6, 21, 3000, 6);
      Year year0 = new Year(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, 3000, 3, 6, 2402, 21);
      Week week0 = new Week(6, year0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=3000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=2402,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(6, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(21, 6, 21, 3000, 6);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(6, year0);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(101819L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, long0);
      assertEquals(49, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("d,H->BA]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek(">N,G,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(21, 6, 21, 3000, 6);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(6, year0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2402);
      int int0 = week0.compareTo(fixedMillisecond0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(101819L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week((-2718), (-1922));
      Week week1 = new Week();
      int int0 = week0.compareTo(week1);
      assertEquals((-3936), int0);
      assertEquals((-101768L), week0.getSerialIndex());
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      Object object0 = new Object();
      int int0 = week0.compareTo(object0);
      assertEquals(36477043199999L, week0.getLastMillisecond());
      assertEquals(49, week0.getWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      RegularTimePeriod regularTimePeriod1 = week0.next();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(regularTimePeriod1);
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
      assertTrue(boolean0);
      assertFalse(regularTimePeriod1.equals((Object)week0));
      assertEquals(165675L, regularTimePeriod1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week(1, 1);
      MockDate mockDate0 = new MockDate(1);
      Locale locale0 = Locale.GERMAN;
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, locale0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(54L, week0.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(0L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(mockGregorianCalendar0);
      assertEquals(49, week0.getWeek());
      assertFalse(boolean0);
      assertEquals(36477043199999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week((-1699), 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(530040L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week(52, 0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(53L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 0, 0, (-1), 1226, 0);
      Week week0 = new Week(mockDate0);
      Week week1 = (Week)week0.next();
      assertEquals(1899, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertEquals(100648L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1226, 1226);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-2209000414001L), week0.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      Date date0 = week0.getEnd();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      date0.setTime(880L);
      Week week1 = new Week(date0);
      week1.previous();
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, (-2148), 2, 28, 84);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1722) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      MockDate mockDate0 = new MockDate(2029L);
      Week week1 = null;
      try {
        week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2412L);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week((-1297), (-1297));
      Class<Week> class0 = Week.class;
      RegularTimePeriod.createInstance(class0, (Date) null, week0.DEFAULT_TIME_ZONE);
      assertEquals((-68758L), week0.getSerialIndex());
      
      Week week1 = new Week();
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((-1231), (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(165675L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getSerialIndex();
      assertEquals(36477043199999L, week0.getLastMillisecond());
      assertEquals(165674L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-54L), week0.getSerialIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      String string0 = week0.toString();
      assertEquals(36477043199999L, week0.getLastMillisecond());
      assertEquals("Week 49, 3125", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      int int0 = week0.getYearValue();
      assertEquals(36477043199999L, week0.getLastMillisecond());
      assertEquals(3125, int0);
      assertEquals(49, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 1, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week((-1297), (-1297));
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-1297) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1226, (-1), 0);
      Week week0 = new Week(mockDate0);
      week0.hashCode();
      assertEquals(49, week0.getWeek());
      assertEquals(36477043199999L, week0.getLastMillisecond());
  }
}
