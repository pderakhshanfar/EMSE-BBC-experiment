/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:44:28 GMT 2020
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(8, week1.getWeek());
      assertFalse(week1.equals((Object)week0));
      
      int int0 = week0.compareTo(week1);
      assertEquals((-1), int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(8, week1.getWeek());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      Week week1 = new Week(7, 7);
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(7, week1.getWeek());
      assertEquals(378L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(7, week1.getWeek());
      assertEquals(378L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      Week week0 = new Week(date0, year0.DEFAULT_TIME_ZONE);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = new Week(1970, year0);
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(106664L, week1.getSerialIndex());
      assertEquals((-78), week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(106664L, week1.getSerialIndex());
      assertEquals((-78), week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, 3165, 3165, 135, 679);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Thu Jun 06 02:19:00 GMT 12171", mockDate0.toString());
      assertEquals(12171, year0.getYear());
      assertEquals(12171L, year0.getSerialIndex());
      assertEquals("12171", year0.toString());
      assertEquals(321925976340000L, year0.getLastMillisecond());
      assertEquals(321925976340000L, year0.getFirstMillisecond());
      
      Week week0 = new Week(53, year0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jun 06 02:19:00 GMT 12171", mockDate0.toString());
      assertEquals(12171, year0.getYear());
      assertEquals(12171L, year0.getSerialIndex());
      assertEquals("12171", year0.toString());
      assertEquals(321925976340000L, year0.getLastMillisecond());
      assertEquals(321925976340000L, year0.getFirstMillisecond());
      assertEquals(645116L, week0.getSerialIndex());
      assertEquals(12171, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jun 06 02:19:00 GMT 12171", mockDate0.toString());
      assertEquals(12171, year0.getYear());
      assertEquals(12171L, year0.getSerialIndex());
      assertEquals("12171", year0.toString());
      assertEquals(321925976340000L, year0.getLastMillisecond());
      assertEquals(321925976340000L, year0.getFirstMillisecond());
      assertEquals(645116L, week0.getSerialIndex());
      assertEquals(12171, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(1, 1);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(54L, week0.getSerialIndex());
      assertEquals(1, week0.getYearValue());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(54L, week0.getSerialIndex());
      assertEquals(1, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(37, 37, (-375));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-375), "Can't evaluate the week.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Can't evaluate the week.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Can't evaluate the week.,offset=-375,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-375), simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Sat Jan 21 00:00:00 GMT 1939", mockDate0.toString());
      assertEquals("Can't evaluate the week.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Can't evaluate the week.,offset=-375,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-375), simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals((-976579200000L), week0.getFirstMillisecond());
      assertEquals(1939, week0.getYearValue());
      assertEquals(3, week0.getWeek());
      assertEquals(102770L, week0.getSerialIndex());
      assertEquals((-976579200001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      
      int int0 = week0.getYearValue();
      assertEquals(0, int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(13, (-2803));
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(13, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-148546L), week0.getSerialIndex());
      assertEquals((-2803), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      int int0 = week0.getYearValue();
      assertEquals((-2803), int0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(13, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-148546L), week0.getSerialIndex());
      assertEquals((-2803), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(0L, year0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-2973L));
      Year year0 = new Year(4695);
      assertNotNull(year0);
      assertEquals(4695, year0.getYear());
      assertEquals("4695", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      
      Week week0 = new Week(3150, year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(4695, year0.getYear());
      assertEquals("4695", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      assertEquals((-2974L), week0.getLastMillisecond());
      assertEquals((-2973L), week0.getFirstMillisecond());
      assertEquals(248913L, week0.getSerialIndex());
      assertEquals(78, week0.getWeek());
      assertEquals(4695, week0.getYearValue());
      
      Year year1 = week0.getYear();
      assertNotNull(year1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals(4695, year0.getYear());
      assertEquals("4695", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      assertEquals((-2974L), week0.getLastMillisecond());
      assertEquals((-2973L), week0.getFirstMillisecond());
      assertEquals(248913L, week0.getSerialIndex());
      assertEquals(78, week0.getWeek());
      assertEquals(4695, week0.getYearValue());
      assertEquals((-2973L), year1.getFirstMillisecond());
      assertEquals((-2973L), year1.getLastMillisecond());
      assertEquals(4695, year1.getYear());
      assertEquals("4695", year1.toString());
      assertEquals(4695L, year1.getSerialIndex());
      assertTrue(year1.equals((Object)year0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      
      Week week0 = new Week(0, year0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106742L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      
      int int0 = week0.getWeek();
      assertEquals(0, int0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106742L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      Week week0 = new Week((-2124), year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-76), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106666L, week0.getSerialIndex());
      
      int int0 = week0.getWeek();
      assertEquals((-76), int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-76), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106666L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-3274), (-1156));
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(54, week0.getWeek());
      assertEquals((-61214L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1156), week0.getYearValue());
      
      long long0 = week0.getSerialIndex();
      assertEquals((-61214L), long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(54, week0.getWeek());
      assertEquals((-61214L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1156), week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-703), 0, 6246);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 31 08:06:00 GMT 1898", mockDate0.toString());
      assertEquals(100600L, week0.getSerialIndex());
      assertEquals((-2269439640000L), week0.getFirstMillisecond());
      assertEquals(1898, week0.getYearValue());
      assertEquals((-2269439640001L), week0.getLastMillisecond());
      assertEquals(6, week0.getWeek());
      
      System.setCurrentTimeMillis(1);
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      assertNotNull(calendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 31 08:06:00 GMT 1898", mockDate0.toString());
      assertEquals(100600L, week0.getSerialIndex());
      assertEquals((-2269439640000L), week0.getFirstMillisecond());
      assertEquals(1898, week0.getYearValue());
      assertEquals((-2269439640001L), week0.getLastMillisecond());
      assertEquals(6, week0.getWeek());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals(0L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 31 08:06:00 GMT 1898", mockDate0.toString());
      assertEquals(100600L, week0.getSerialIndex());
      assertEquals((-2269439640000L), week0.getFirstMillisecond());
      assertEquals(1898, week0.getYearValue());
      assertEquals((-2269439640001L), week0.getLastMillisecond());
      assertEquals(6, week0.getWeek());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281319L, long0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, (-1297), 53);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-1L), long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=53,MONTH=-1297,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1894), 2473, 1);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "_PSN=1");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      mockDate0.setTime(1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getLastMillisecond());
      
      long long0 = week0.getLastMillisecond();
      assertEquals(0L, long0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      
      Week week0 = new Week(60, year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106802L, week0.getSerialIndex());
      assertEquals(60, week0.getWeek());
      
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106802L, week0.getSerialIndex());
      assertEquals(60, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, (-1817), 2781);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=53,MONTH=-1817,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2781,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      
      Week week0 = new Week(60, year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106802L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(60, week0.getWeek());
      
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE);
      assertNotNull(calendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106802L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(60, week0.getWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      long long0 = week0.getFirstMillisecond(calendar0);
      assertEquals(1392409281320L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106802L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(60, week0.getWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-2973L));
      Year year0 = new Year(3150);
      assertNotNull(year0);
      assertEquals("3150", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(3150, year0.getYear());
      assertEquals(3150L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      
      Week week0 = new Week(3150, year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("3150", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(3150, year0.getYear());
      assertEquals(3150L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      assertEquals((-2973L), week0.getFirstMillisecond());
      assertEquals(167028L, week0.getSerialIndex());
      assertEquals(3150, week0.getYearValue());
      assertEquals((-2974L), week0.getLastMillisecond());
      assertEquals(78, week0.getWeek());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-2973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=57,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      long long0 = week0.getFirstMillisecond(calendar0);
      assertEquals((-2973L), long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("3150", year0.toString());
      assertEquals((-2973L), year0.getFirstMillisecond());
      assertEquals(3150, year0.getYear());
      assertEquals(3150L, year0.getSerialIndex());
      assertEquals((-2973L), year0.getLastMillisecond());
      assertEquals((-2973L), week0.getFirstMillisecond());
      assertEquals(167028L, week0.getSerialIndex());
      assertEquals(3150, week0.getYearValue());
      assertEquals((-2974L), week0.getLastMillisecond());
      assertEquals(78, week0.getWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-2973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=57,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 11);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(11, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=11,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(11, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=11,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(0L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(11, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=11,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week((-3274), (-1175));
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-1175), week0.getYearValue());
      assertEquals((-62221L), week0.getSerialIndex());
      assertEquals(54, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-1175), week0.getYearValue());
      assertEquals((-62221L), week0.getSerialIndex());
      assertEquals(54, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(1913, week0.getYearValue());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals(15, week0.getWeek());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
      
      MockDate mockDate1 = new MockDate(0, 2473, 53);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Week week1 = new Week(mockDate1);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Mar 25 00:00:00 GMT 2106", mockDate1.toString());
      assertEquals(111631L, week1.getSerialIndex());
      assertEquals(13, week1.getWeek());
      assertEquals(4298918400000L, week1.getFirstMillisecond());
      assertEquals(2106, week1.getYearValue());
      assertEquals(4298918399999L, week1.getLastMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(week1.equals((Object)week0));
      
      int int0 = week0.compareTo(week1);
      assertEquals((-193), int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(week0, week1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(week1, week0);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(1913, week0.getYearValue());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals(15, week0.getWeek());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
      assertEquals("Thu Mar 25 00:00:00 GMT 2106", mockDate1.toString());
      assertEquals(111631L, week1.getSerialIndex());
      assertEquals(13, week1.getWeek());
      assertEquals(4298918400000L, week1.getFirstMillisecond());
      assertEquals(2106, week1.getYearValue());
      assertEquals(4298918399999L, week1.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(week0.equals((Object)week1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week(9999, 305);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(305, week0.getYearValue());
      assertEquals(16180L, week0.getSerialIndex());
      assertEquals(15, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (305) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-703), (-1163), 6246);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6246, "Moc4H{OiNt");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=Moc4H{OiNt,offset=6246,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(6246, simpleTimeZone0.getRawOffset());
      assertEquals("Moc4H{OiNt", simpleTimeZone0.getID());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Dec 13 21:06:00 GMT 1897", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=Moc4H{OiNt,offset=6246,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(6246, simpleTimeZone0.getRawOffset());
      assertEquals("Moc4H{OiNt", simpleTimeZone0.getID());
      assertEquals((-2273626440001L), week0.getLastMillisecond());
      assertEquals(1897, week0.getYearValue());
      assertEquals((-2273626440000L), week0.getFirstMillisecond());
      assertEquals(51, week0.getWeek());
      assertEquals(100592L, week0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1897) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(60, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 1900, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      week0.peg(mockGregorianCalendar0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals((-1L), week0.getLastMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1900,HOUR_OF_DAY=1900,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      
      Week week0 = new Week((-2124), year0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-76), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106666L, week0.getSerialIndex());
      
      Year year1 = week0.getYear();
      assertNotNull(year1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-76), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106666L, week0.getSerialIndex());
      assertEquals(2014, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2014", year1.toString());
      assertEquals(2014L, year1.getSerialIndex());
      assertTrue(year1.equals((Object)year0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1913, week0.getYearValue());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals(15, week0.getWeek());
      
      int int0 = week0.getWeek();
      assertEquals(15, int0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1913, week0.getYearValue());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals(15, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("DEnI=+!-PA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("5698.g0zNvf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      Week week0 = new Week((-2124), year0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106666L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-76), week0.getWeek());
      
      int int0 = week0.compareTo(year0);
      assertEquals(0, int0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106666L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-76), week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      MockDate mockDate0 = new MockDate(53, 1, 1, 53, 53);
      assertNotNull(mockDate0);
      
      Week week1 = new Week(mockDate0);
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Tue Feb 03 05:53:00 GMT 1953", mockDate0.toString());
      assertEquals((-533585220000L), week1.getFirstMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(103515L, week1.getSerialIndex());
      assertEquals((-533585220001L), week1.getLastMillisecond());
      assertEquals(1953, week1.getYearValue());
      assertFalse(week1.equals((Object)week0));
      
      int int0 = week0.compareTo(week1);
      assertEquals(61, int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("Tue Feb 03 05:53:00 GMT 1953", mockDate0.toString());
      assertEquals((-533585220000L), week1.getFirstMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(103515L, week1.getSerialIndex());
      assertEquals((-533585220001L), week1.getLastMillisecond());
      assertEquals(1953, week1.getYearValue());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals(1913, week0.getYearValue());
      assertEquals(15, week0.getWeek());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
      
      int int0 = week0.compareTo((Object) null);
      assertEquals(1, int0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Apr 07 00:00:00 GMT 1913", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("_PSN=1", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=_PSN=1,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(6, simpleTimeZone0.getRawOffset());
      assertEquals(1913, week0.getYearValue());
      assertEquals(15, week0.getWeek());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals((-1790467200000L), week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = new Week();
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals(106749L, week1.getSerialIndex());
      assertTrue(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals(week1);
      assertTrue(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals(106749L, week1.getSerialIndex());
      assertTrue(week0.equals((Object)week1));
      assertTrue(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106750L, week1.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106750L, week1.getSerialIndex());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = week0.equals(object0);
      assertFalse(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = new Week(7, 53);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, week1.getYearValue());
      assertEquals(7, week1.getWeek());
      assertEquals(2816L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week1.equals(week0);
      assertFalse(boolean0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, week1.getYearValue());
      assertEquals(7, week1.getWeek());
      assertEquals(2816L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Year year0 = new Year(4695);
      assertNotNull(year0);
      assertEquals("4695", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(4695, year0.getYear());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      Week week0 = new Week(3150, year0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("4695", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(4695, year0.getYear());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(248913L, week0.getSerialIndex());
      assertEquals(4695, week0.getYearValue());
      assertEquals(78, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("4695", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(4695, year0.getYear());
      assertEquals(4695L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(248913L, week0.getSerialIndex());
      assertEquals(4695, week0.getYearValue());
      assertEquals(78, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(4696, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(248889L, week1.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4707, 2101, 4707);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Wed Dec 21 00:00:00 GMT 6794", mockDate0.toString());
      assertEquals(52, week0.getWeek());
      assertEquals(152261337600000L, week0.getFirstMillisecond());
      assertEquals(152261337599999L, week0.getLastMillisecond());
      assertEquals(360134L, week0.getSerialIndex());
      assertEquals(6794, week0.getYearValue());
      
      Week week1 = (Week)week0.next();
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("Wed Dec 21 00:00:00 GMT 6794", mockDate0.toString());
      assertEquals(52, week0.getWeek());
      assertEquals(152261337600000L, week0.getFirstMillisecond());
      assertEquals(152261337599999L, week0.getLastMillisecond());
      assertEquals(360134L, week0.getSerialIndex());
      assertEquals(6794, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(6794, week1.getYearValue());
      assertEquals(360135L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(53, week1.getWeek());
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 10, 0);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Sun Dec 31 10:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2209039200000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209039200001L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Sun Dec 31 10:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2209039200000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2209039200001L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      mockDate0.setTime(6);
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      assertNotNull(regularTimePeriod1);
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
      assertEquals(104411L, regularTimePeriod1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-831));
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, zoneInfo0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-306), (-306), 1600, 1600, (-306));
      Locale locale0 = Locale.ROOT;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "(uY}vzB");
      Week week0 = null;
      try {
        week0 = new Week((Date) null, simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week((-678), 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530037L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(101403L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      week0.getFirstMillisecond();
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals((-1790467200001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(106749L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      String string0 = week0.toString();
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals("Week 15, 1913", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      int int0 = week0.getYearValue();
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(101404L, week0.getSerialIndex());
      assertEquals(1913, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 1, 1970");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-1790467200001L), long0);
      assertEquals(15, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 6, 2473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "_PSN=1");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      week0.hashCode();
      assertEquals((-1790467200001L), week0.getLastMillisecond());
      assertEquals(15, week0.getWeek());
  }
}
