/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:45:40 GMT 2020
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Week week0 = new Week();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = new Week((-4275), year0);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(77, week1.getWeek());
      assertEquals(106819L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      int int0 = week1.compareTo(week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(77, week1.getWeek());
      assertEquals(106819L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week((-4195), (-4195));
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-4195), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-99), week0.getWeek());
      assertEquals((-222434L), week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = new Week((-4195), 53);
      assertFalse(week1.equals((Object)week0));
      assertEquals(2710L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(53, week1.getYearValue());
      assertEquals((-99), week1.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      boolean boolean0 = week0.equals(week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-4195), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-99), week0.getWeek());
      assertEquals((-222434L), week0.getSerialIndex());
      assertEquals(2710L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(53, week1.getYearValue());
      assertEquals((-99), week1.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week((-4275), (-4275));
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(77, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-4275), week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertFalse(week1.equals((Object)week0));
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(77, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-4275), week0.getYearValue());
      assertEquals((-4275), week1.getYearValue());
      assertEquals((-226499L), week1.getSerialIndex());
      assertEquals(76, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      boolean boolean0 = week0.equals(week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(77, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-4275), week0.getYearValue());
      assertEquals((-4275), week1.getYearValue());
      assertEquals((-226499L), week1.getSerialIndex());
      assertEquals(76, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(590, 9999);
      assertEquals(9999, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530025L, week0.getSerialIndex());
      assertEquals(78, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(9999, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530025L, week0.getSerialIndex());
      assertEquals(78, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(53, 53);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
      assertEquals(2862L, week0.getSerialIndex());
      assertEquals(53, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
      assertEquals(2862L, week0.getSerialIndex());
      assertEquals(53, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(52, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(53, week1.getYearValue());
      assertEquals(2861L, week1.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      Week week2 = (Week)week1.next();
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(week2.equals((Object)week1));
      assertFalse(week2.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
      assertEquals(2862L, week0.getSerialIndex());
      assertEquals(53, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(52, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(53, week1.getYearValue());
      assertEquals(2861L, week1.getSerialIndex());
      assertEquals(54, week2.getYearValue());
      assertEquals(1, week2.getWeek());
      assertEquals(2863L, week2.getSerialIndex());
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertEquals(1392409281320L, week2.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week2);
      assertNotSame(week0, week2);
      assertNotSame(week0, week1);
      assertNotSame(week1, week2);
      assertNotSame(week1, week0);
      assertNotSame(week2, week1);
      assertNotSame(week2, week0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(1, (-2038));
      assertEquals((-108013L), week0.getSerialIndex());
      assertEquals((-2038), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-108013L), week0.getSerialIndex());
      assertEquals((-2038), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-83), (-83), (-498));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-83,MONTH=-83,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-498,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Week week0 = new Week(date0, timeZone0, locale0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-83,MONTH=-83,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-498,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(40, week0.getWeek());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219292800000L), week0.getFirstMillisecond());
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals(1582, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week(32, 0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(32L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals(32, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      int int0 = week0.getYearValue();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(32L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals(32, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Week week0 = new Week((-4290), year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106804L, week0.getSerialIndex());
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      int int0 = week0.getYearValue();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106804L, week0.getSerialIndex());
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Year year0 = new Year();
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week((-2525), year0);
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(35, week0.getWeek());
      assertEquals(104445L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Year year1 = week0.getYear();
      assertTrue(year1.equals((Object)year0));
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(35, week0.getWeek());
      assertEquals(104445L, week0.getSerialIndex());
      assertEquals("1970", year1.toString());
      assertEquals(0L, year1.getLastMillisecond());
      assertEquals(0L, year1.getFirstMillisecond());
      assertEquals(1970L, year1.getSerialIndex());
      assertEquals(1970, year1.getYear());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(year1);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4266));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Wed Dec 31 23:59:55 GMT 1969", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-4266L), week0.getFirstMillisecond());
      assertEquals((-4267L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      System.setCurrentTimeMillis((-1235L));
      Year year0 = week0.getYear();
      assertEquals("Wed Dec 31 23:59:55 GMT 1969", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-4266L), week0.getFirstMillisecond());
      assertEquals((-4267L), week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, year0.getYear());
      assertEquals((-1235L), year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals((-1235L), year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(year0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      int int0 = week0.getWeek();
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(448, (-535));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-535), week0.getYearValue());
      assertEquals((-64), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-28419L), week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      int int0 = week0.getWeek();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-535), week0.getYearValue());
      assertEquals((-64), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-28419L), week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week((-1022), (-1022));
      assertEquals(2, week0.getWeek());
      assertEquals((-1022), week0.getYearValue());
      assertEquals((-54164L), week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getSerialIndex();
      assertEquals(2, week0.getWeek());
      assertEquals((-1022), week0.getYearValue());
      assertEquals((-54164L), week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals((-54164L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week((-187), (-4292));
      assertEquals((-227407L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-4292), week0.getYearValue());
      assertEquals(69, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      System.setCurrentTimeMillis(1);
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-227407L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-4292), week0.getYearValue());
      assertEquals(69, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(62, (-1192));
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63114L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1192), week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE);
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63114L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1192), week0.getYearValue());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(calendar0);
      
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63114L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1192), week0.getYearValue());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MockDate mockDate0 = new MockDate(53, 53, 1);
      assertNotNull(mockDate0);
      
      mockGregorianCalendar0.setTime(mockDate0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-397180800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1957,MONTH=5,WEEK_OF_YEAR=22,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=152,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Sat Jun 01 00:00:00 GMT 1957", mockDate0.toString());
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-397180800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1957,MONTH=5,WEEK_OF_YEAR=22,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=152,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-397180800001L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getLastMillisecond();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, week0.getFirstMillisecond());
      assertEquals(0L, week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week((-4195), (-4195));
      assertEquals((-99), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-4195), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-222434L), week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getLastMillisecond();
      assertEquals((-99), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-4195), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-222434L), week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3539L));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Wed Dec 31 23:59:56 GMT 1969", mockDate0.toString());
      assertEquals((-3540L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3539L), week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getLastMillisecond();
      assertEquals("Wed Dec 31 23:59:56 GMT 1969", mockDate0.toString());
      assertEquals((-3540L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3539L), week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals((-3540L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(0, 0);
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 1, 274, 1, (-4290), (-1420));
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=8,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=274,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-4290,SECOND=-1420,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      long long0 = week0.getFirstMillisecond(calendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 44, 11, 44, 32, 1);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeekYear();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61703522879000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=255,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=32,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(14, int0);
      
      long long0 = week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61703522879000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=255,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=32,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-61703522879000L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(37);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getFirstMillisecond();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week((-4275), (-4275));
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(77, week0.getWeek());
      assertEquals((-4275), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(77, week0.getWeek());
      assertEquals((-4275), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2593L));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals((-2593L), week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2594L), week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      long long0 = week0.getFirstMillisecond();
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals((-2593L), week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-2594L), week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-2593L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      Week week0 = new Week((-4290), year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106804L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockDate mockDate0 = new MockDate(62, (-3385), 53);
      assertNotNull(mockDate0);
      
      Week week1 = new Week(mockDate0);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Mon Jan 22 00:00:00 GMT 1680", mockDate0.toString());
      assertEquals(1680, week1.getYearValue());
      assertEquals(89044L, week1.getSerialIndex());
      assertEquals((-9149673600000L), week1.getFirstMillisecond());
      assertEquals(4, week1.getWeek());
      assertEquals((-9149673600001L), week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      int int0 = week1.compareTo(week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(62, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106804L, week0.getSerialIndex());
      assertEquals("Mon Jan 22 00:00:00 GMT 1680", mockDate0.toString());
      assertEquals(1680, week1.getYearValue());
      assertEquals(89044L, week1.getSerialIndex());
      assertEquals((-9149673600000L), week1.getFirstMillisecond());
      assertEquals(4, week1.getWeek());
      assertEquals((-9149673600001L), week1.getLastMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals((-334), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week(590, 10047);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(532569L, week0.getSerialIndex());
      assertEquals(10047, week0.getYearValue());
      assertEquals(78, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (10047) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      
      Week week0 = new Week((-4290), year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106804L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(62, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week(62, (-1192));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-63114L), week0.getSerialIndex());
      assertEquals(62, week0.getWeek());
      assertEquals((-1192), week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        week0.compareTo(week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-1192) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(2, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      week0.peg(mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Week week0 = new Week(0, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106742L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Week week1 = new Week(mockDate0);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, week1.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1L, week1.getFirstMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      int int0 = week0.compareTo(week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106742L, week0.getSerialIndex());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, week1.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1L, week1.getFirstMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = week0.compareTo(mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week((-4195), (-4195));
      Week week1 = new Week((-4195), (-4195));
      boolean boolean0 = week1.equals(week0);
      assertEquals((-222434L), week1.getSerialIndex());
      assertTrue(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106750L, regularTimePeriod0.getSerialIndex());
      assertFalse(boolean0);
      assertFalse(regularTimePeriod0.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week((-4290), (-4290));
      week0.equals(week0);
      assertEquals((-227308L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week((-4195), (-4195));
      Week week1 = new Week((-4195), 53);
      boolean boolean0 = week1.equals(week0);
      assertEquals((-222434L), week0.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(week0.equals((Object)week1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week(590, 10047);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(532569L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-4290), year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      assertEquals(106794L, regularTimePeriod1.getSerialIndex());
      assertNotNull(regularTimePeriod1);
      assertEquals(1392409281319L, regularTimePeriod1.getLastMillisecond());
      assertEquals(62, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1601, (-5));
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals((-2208979145001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4266));
      Week week0 = new Week(mockDate0);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      int int0 = week0.compareTo(millisecond0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0, int0);
      assertEquals((-4267L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(244, 0, 244, 244, (-715), 666);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(687);
      Date date0 = spreadsheetDate0.toDate();
      Locale locale0 = Locale.ITALIAN;
      Week week0 = null;
      try {
        week0 = new Week(date0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = new Week();
      Class<Week> class0 = Week.class;
      RegularTimePeriod.createInstance(class0, (Date) null, week0.DEFAULT_TIME_ZONE);
      Week week1 = new Week();
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week((-4275), (-4275));
      int int0 = week0.getYearValue();
      assertEquals((-226498L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-4275), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week(53, 53);
      Date date0 = week0.getEnd();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      boolean boolean0 = week0.equals(fixedMillisecond0);
      assertEquals(1392409281319L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2862L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      week0.getYear();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Week week0 = new Week((-3582), 833);
      week0.hashCode();
      assertEquals(44151L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getTime();
      Week week1 = new Week(date0, week0.DEFAULT_TIME_ZONE);
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }
}
