/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:53:58 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockDate mockDate0 = new MockDate(1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, locale0);
      int int0 = week1.compareTo(week0);
      assertEquals((-44), int0);
      assertEquals(0L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Year year0 = new Year();
      Week week1 = new Week(0, year0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(0, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week((-4495), 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(530060L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(628, (-3982), (-3982), 53, (-1673));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(53, year0);
      Week week1 = (Week)week0.next();
      assertEquals(1, week1.getWeek());
      assertEquals(115859L, week1.getSerialIndex());
      assertNotNull(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(115858L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(1, 1);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2883, 2883, 0, 2883);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      int int0 = week0.getYearValue();
      assertEquals(8, week0.getWeek());
      assertEquals(5621702579999L, week0.getLastMillisecond());
      assertEquals(2148, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Year year0 = new Year();
      Week week0 = new Week((-4495), year0);
      week0.getYear();
      assertEquals(113, week0.getWeek());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis((-934L));
      week0.getYear();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week(0, 2011);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106583L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1885), (-691), (-691), 0, 0);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      int int0 = week0.getWeek();
      assertEquals((-63571046400001L), week0.getLastMillisecond());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(9999, (-2065));
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-109430L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(628, year0);
      System.setCurrentTimeMillis(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(106858L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1), 1972);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1972,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1L), long0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1L);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      long long0 = week1.getLastMillisecond();
      assertEquals(7, week0.getWeek());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-41), (-41), (-41));
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-3614371200001L), long0);
      assertEquals(25, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2483, 2483, 0, 2483);
      Locale locale0 = Locale.GERMANY;
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(32, year0);
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      week0.getFirstMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(101103L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis((-1L));
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-47), (-47), 3264, (-508), 3264);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-3535392960000L), long0);
      assertEquals((-3535392960001L), week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(0, 2011);
      Week week1 = (Week)week0.previous();
      int int0 = week1.compareTo(week0);
      assertEquals(2011, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week(0, 2011);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-3982), 415, 1, 415);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(53, year0);
      // Undeclared exception!
      try { 
        week0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1570) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week(0, 2011);
      Week week1 = new Week(2265, 1208);
      // Undeclared exception!
      try { 
        week0.compareTo(week1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1208) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week(0, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1885), (-691), (-691), 0, 0);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-691), 0, 365);
      week0.peg(mockGregorianCalendar0);
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-4495), year0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1306, 9999, 233, 53, (-762), 1146);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(113, week0.getWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1306,MONTH=9999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=233,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=53,HOUR_OF_DAY=53,MINUTE=-762,SECOND=1146,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = new Week(3264, 3264);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(172928L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Week week0 = new Week(246, 2483);
      int int0 = week0.getWeek();
      assertEquals(131589L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week -10, 2483");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("GMT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week((-2984), (-2984));
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      int int0 = week0.compareTo(calendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals((-158064L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(121, (-5), 0, (-2939), (-3338), (-3317));
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      int int0 = week1.compareTo(week0);
      assertEquals(1585369602999L, week1.getLastMillisecond());
      assertEquals(6, int0);
      assertEquals(13, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2883, 2883, 0, 2883);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(day0);
      assertEquals(5621702579999L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(113852L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week();
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertTrue(boolean0);
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week(0, 2011);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = ((Week) regularTimePeriod0).equals(week0);
      assertFalse(boolean0);
      assertFalse(week0.equals((Object)regularTimePeriod0));
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106582L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week(246, 2483);
      Object object0 = new Object();
      boolean boolean0 = week0.equals(object0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(131589L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week(3264, 3264);
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals(172928L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week((-4495), 10018);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(531067L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week(52, 46);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2491L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106750L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106748L, regularTimePeriod0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-2209075200001L), week0.getLastMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2483, 2483, 0, 2483);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "OZ");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      Week week1 = null;
      try {
        week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53L);
      Locale locale0 = Locale.CANADA;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = null;
      try {
        week0 = new Week((Date) null, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1, year0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(106741L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Week week0 = new Week(mockDate0, timeZone0);
      week0.getFirstMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week((-945), (-4954));
      String string0 = week0.toString();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("Week 79, -4954", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week((-2329), (-1338));
      int int0 = week0.getYearValue();
      assertEquals((-1338), int0);
      assertEquals((-70939L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 79, -4954");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.compareTo(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      week0.hashCode();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1440L));
      Week week0 = new Week(mockDate0, (TimeZone) null);
      Week week1 = new Week(1, 53);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
      assertEquals(2810L, week1.getSerialIndex());
      assertFalse(boolean0);
  }
}
