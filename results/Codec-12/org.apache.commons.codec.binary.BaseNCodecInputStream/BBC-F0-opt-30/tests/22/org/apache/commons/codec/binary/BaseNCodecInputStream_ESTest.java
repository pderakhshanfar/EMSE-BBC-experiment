/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:36:44 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)62;
      Base32 base32_0 = new Base32((byte)62);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("hr");
      base32_0.encode(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-1966), 8192);
      byteArrayInputStream0.reset();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      byte[] byteArray2 = new byte[0];
      baseNCodecInputStream0.read(byteArray2);
      Base64 base64_0 = new Base64(83);
      baseNCodecInputStream0.read(byteArray2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hr");
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, true);
      baseNCodecInputStream1.markSupported();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      Base32 base32_0 = new Base32(2332);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("/^='<JoIwXr@@ g");
      byte[] byteArray2 = base32_0.encode(byteArray1);
      byteArrayInputStream0.reset();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, true);
      baseNCodecInputStream0.read(byteArray2);
      Base64 base64_0 = new Base64(2332);
      baseNCodecInputStream0.read(byteArray2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/^='<JoIwXr@@ g");
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      baseNCodecInputStream1.markSupported();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base32_0, true);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      int int0 = baseNCodecInputStream3.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(203, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      Base32 base32_0 = new Base32(8192);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("");
      base32_0.encode(byteArray1);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)121;
      byteArray2[1] = (byte)121;
      baseNCodecInputStream0.read(byteArray2);
      Base64 base64_0 = new Base64((byte)121);
      baseNCodecInputStream0.read(byteArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)0);
      Base32 base32_0 = new Base32(1, byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(baseNCodecInputStream0, byteArrayInputStream0);
      Base64 base64_0 = new Base64();
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, false);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, true);
      baseNCodecInputStream2.read();
      baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 1);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 3005, (-648));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      Base32 base32_0 = new Base32((byte)69);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("");
      byte[] byteArray2 = base32_0.encode(byteArray1);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      baseNCodecInputStream0.read(byteArray2);
      Base64 base64_0 = new Base64(597);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, true);
      baseNCodecInputStream1.close();
      baseNCodecInputStream1.reset();
      baseNCodecInputStream0.read();
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray2, (int) (byte)69, (int) (byte)69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)0);
      Base32 base32_0 = new Base32(1, byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      int int1 = baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals(0, int1);
      
      baseNCodecInputStream0.markSupported();
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Base32 base32_0 = new Base32();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)1;
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      pipedOutputStream0.write(80);
      Base64 base64_0 = new Base64(80);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, true);
      baseNCodecInputStream0.markSupported();
      pipedOutputStream0.write(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-69);
      baseNCodecInputStream0.read(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream1.read(byteArray0, (-288), (-2044));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte byte0 = (byte)0;
      base32_0.containsAlphabetOrPad((byte[]) null);
      byte[] byteArray0 = base32_0.decode("");
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      baseNCodecInputStream0.read(byteArray1);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = null;
      Base32 base32_0 = new Base32(0, (byte[]) null);
      base32_0.encode((byte[]) null, 0, 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      baseNCodecInputStream0.read();
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read((byte[]) null, (-1), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      pipedOutputStream0.write(80);
      Base64 base64_0 = new Base64(80);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, false);
      baseNCodecInputStream0.markSupported();
      byte[] byteArray0 = new byte[1];
      pipedOutputStream0.write(80);
      Base32 base32_0 = new Base32((-1), byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      Base64 base64_1 = new Base64();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(byteArrayInputStream0, base64_1, false);
      baseNCodecInputStream2.read();
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_1, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream3.read(byteArray0, 64, 869);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.containsAlphabetOrPad((byte[]) null);
      byte[] byteArray0 = base32_0.decode("");
      base32_0.encode(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read((byte[]) null, 86, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Base32 base32_0 = new Base32();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, (int) (byte) (-93));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      Base32 base32_0 = new Base32();
      byte[] byteArray1 = base32_0.decode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)95;
      byteArray2[1] = (byte) (-125);
      byteArray2[2] = (byte)95;
      byteArray2[3] = (byte)95;
      byteArray2[4] = (byte) (-125);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-125);
      byteArray2[7] = (byte)95;
      base32_0.buffer = byteArray2;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      baseNCodecInputStream0.read();
      base32_0.encodeAsString(byteArray2);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray1, (int) (byte) (-125), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      Base64 base64_0 = new Base64((-2718));
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base64_0, true);
      baseNCodecInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)23;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (-636), (int) (byte)16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.close();
      byteArrayInputStream0.read();
      Base32 base32_0 = new Base32(597);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      base32_0.ensureBufferSize(8192);
      baseNCodecInputStream0.read();
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 64, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32(103, byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      base32_0.decode(byteArray0);
      baseNCodecInputStream0.markSupported();
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 0, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base32 base32_0 = new Base32((-1747));
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-50), 6);
      Base64 base64_0 = new Base64();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      baseNCodecInputStream0.skip(1663L);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)26, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byte byte0 = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-114);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.decode("");
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)45;
      base32_0.encode(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 716, 716);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, (BaseNCodec) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base64_0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
