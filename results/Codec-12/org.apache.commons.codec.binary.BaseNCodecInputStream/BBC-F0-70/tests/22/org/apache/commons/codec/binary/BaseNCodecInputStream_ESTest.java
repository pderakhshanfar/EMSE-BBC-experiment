/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 00:32:13 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32(76, byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int0);
      
      int int1 = baseNCodecInputStream0.read();
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int1);
      
      int int2 = baseNCodecInputStream0.read();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int2);
      
      int int3 = baseNCodecInputStream0.read();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int3);
      
      int int4 = baseNCodecInputStream0.read();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int4);
      
      int int5 = baseNCodecInputStream0.read();
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(61, int5);
      
      int int6 = baseNCodecInputStream0.read();
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(61, int6);
      
      int int7 = baseNCodecInputStream0.read();
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(61, int7);
      
      int int8 = baseNCodecInputStream0.read();
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, int8);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, (BaseNCodec) null, true);
      assertNotNull(baseNCodecInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32(76, byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int0);
      
      int int1 = baseNCodecInputStream0.read();
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int1);
      
      int int2 = baseNCodecInputStream0.read();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(48, int2);
      
      base32_0.buffer = byteArray0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32((byte)0);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, false);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 8192, (-3389));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte) (-107));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-107), byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals((-107), byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      int int0 = baseNCodecInputStream0.read(byteArray0, 1, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Base64 base64_0 = new Base64((-625), byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, true);
      byte[] byteArray1 = new byte[6];
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray1, (int) (byte)0, 2540);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base32 base32_0 = new Base32();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 2003, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(178, int0);
  }
}
