/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:42:40 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, (BaseNCodec) null, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, boolean0);
      boolean boolean1 = baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, boolean1);
      baseNCodecInputStream0.read();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      baseNCodecInputStream0.available();
      baseNCodecInputStream1.read();
      boolean boolean2 = true;
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, boolean2);
      int int0 = 1;
      baseNCodecInputStream2.read(byteArray0, int0, int0);
      int int1 = (-1102);
      // Undeclared exception!
      try { 
        baseNCodecInputStream2.read(byteArray1, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, boolean0);
      boolean boolean1 = baseNCodecInputStream0.markSupported();
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, boolean1);
      baseNCodecInputStream1.read();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      baseNCodecInputStream0.available();
      baseNCodecInputStream0.read();
      int int0 = 2529;
      // Undeclared exception!
      try { 
        baseNCodecInputStream1.read(byteArray1, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, boolean0);
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-23);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)26;
      byteArray0[2] = byte2;
      byte byte3 = (byte)98;
      byteArray0[3] = byte3;
      byte byte4 = (byte)7;
      byteArray0[4] = byte4;
      int int1 = 0;
      int int2 = 5;
      int int3 = baseNCodecInputStream0.read(byteArray0, int1, int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream2, base32_0, false);
      baseNCodecInputStream2.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(baseNCodecInputStream1, 76);
      BaseNCodecInputStream baseNCodecInputStream4 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      baseNCodecInputStream3.read(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream5 = new BaseNCodecInputStream(baseNCodecInputStream3, base32_0, false);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)68, (byte)69, (byte)84, (byte)50, (byte)85, (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-115);
      byteArray0[0] = byte0;
      byte byte1 = (byte)120;
      byteArray0[1] = byte1;
      byte byte2 = (byte)38;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-43);
      byteArray0[3] = byte3;
      byte byte4 = (byte)54;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-7);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-53);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-106);
      byteArray0[7] = byte7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byteArray0[0], byteArray0[2]);
      boolean boolean1 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, boolean1);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, boolean0);
      boolean boolean2 = true;
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, boolean2);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, boolean0);
      baseNCodecInputStream0.markSupported();
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Base32 base32_0 = new Base32(553);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 553);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-91);
      pipedOutputStream0.write(byteArray0);
      byteArray0[4] = (byte) (-68);
      baseNCodecInputStream0.read(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte) (-91), 2669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean1 = true;
      Base64 base64_0 = new Base64(true);
      byte byte0 = (byte) (-49);
      byte byte1 = (byte) (-96);
      byte byte2 = (byte)0;
      sequenceInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, boolean0);
      int int0 = (-1);
      baseNCodecInputStream0.mark(int0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      baseNCodecInputStream0.read(byteArray0);
      baseNCodecInputStream0.mark(base64_0.MIME_CHUNK_SIZE);
      int int1 = (-53);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) byte2, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Base64 base64_0 = new Base64(true);
      byte byte0 = (byte) (-111);
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      base32_0.encode(byteArray0);
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, boolean0);
      int int0 = 122;
      baseNCodecInputStream0.mark(int0);
      baseNCodecInputStream0.read(byteArray0);
      byte byte1 = (byte)9;
      baseNCodecInputStream0.mark(byte1);
      int int1 = (-1155);
      int int2 = 256;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)16;
      byte byte1 = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-63);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, true);
      baseNCodecInputStream0.mark(917);
      try { 
        baseNCodecInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, boolean0);
      long long0 = (-874L);
      baseNCodecInputStream0.skip(byte0);
      baseNCodecInputStream0.skip(long0);
      baseNCodecInputStream0.read();
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)94;
      base32_0.encode(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)56;
      baseNCodecInputStream0.mark((-1053));
      try { 
        baseNCodecInputStream0.read(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = null;
      Base64 base64_0 = new Base64(0);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(inputStream0, base64_0, boolean0);
      Base64 base64_1 = new Base64(boolean0);
      boolean boolean1 = true;
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(inputStream0, base64_0, boolean1);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, false);
      boolean boolean0 = baseNCodecInputStream1.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base64_0, boolean0);
      baseNCodecInputStream0.read();
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      boolean boolean1 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream inputStream0 = null;
      Base64 base64_0 = new Base64(0);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(inputStream0, base64_0, boolean0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      int int0 = (-1516);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, int0, (int) byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, boolean0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-125);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-17);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      int int0 = 76;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) byteArray0[1], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, boolean0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-107);
      byteArray0[1] = byte1;
      byte byte2 = (byte)72;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-49);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-96);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      int int0 = baseNCodecInputStream0.read(byteArray0, (int) byteArray0[4], (int) byte7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.markSupported();
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base64_0, boolean0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, base64_0.PEM_CHUNK_SIZE, base64_0.MIME_CHUNK_SIZE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-255), byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base64_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, (int) (byte) (-60));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, boolean0);
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(161, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream2, base32_0, false);
      baseNCodecInputStream2.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BaseNCodecInputStream baseNCodecInputStream4 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 97, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, boolean0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-107);
      byteArray0[1] = byte1;
      boolean boolean1 = true;
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(pipedInputStream0, base64_0, boolean1);
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, boolean0);
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)0;
      base32_0.buffer = byteArray0;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, false);
      baseNCodecInputStream0.skip(1921L);
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputStream inputStream0 = null;
      Base64 base64_0 = new Base64(0);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(inputStream0, base64_0, boolean0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte)4;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-5);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-26);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      int int0 = 0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) byteArray0[0], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }
}
