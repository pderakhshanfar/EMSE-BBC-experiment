/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:41:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)3);
      Base64 base64_0 = new Base64(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      baseNCodecInputStream1.read(byteArray0, (int) (byte)3, (int) (byte)3);
      baseNCodecInputStream0.read();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 415, (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base64 base64_0 = new Base64(false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base64_0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(pipedInputStream0, base64_0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)1;
      try { 
        baseNCodecInputStream0.read(byteArray0, 3, (int) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseNCodec baseNCodec0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, (BaseNCodec) null, false);
      byteArrayInputStream0.read(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(dataInputStream0, (BaseNCodec) null, false);
      baseNCodecInputStream1.mark(2631);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 55, (-101));
      Base64 base64_0 = new Base64(true);
      byteArrayInputStream0.markSupported();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, true);
      byte[] byteArray1 = new byte[3];
      baseNCodecInputStream0.close();
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      baseNCodecInputStream1.read(byteArray1, (int) (byte)1, (int) (byte)1);
      baseNCodecInputStream1.read();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, true);
      baseNCodecInputStream0.available();
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, true);
      assertFalse(baseNCodecInputStream3.markSupported());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64((-1));
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.read();
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 75);
      Base64 base64_0 = new Base64(75, byteArray0, false);
      Base64 base64_1 = new Base64(true);
      Base32 base32_0 = new Base32((-256), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_1, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      baseNCodecInputStream1.read();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-113);
      Base64 base64_2 = new Base64(76, byteArray1);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(byteArrayInputStream0, base64_2, false);
      baseNCodecInputStream2.read();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 61, (-1631));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.read();
      Base32 base32_0 = new Base32((-129), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      baseNCodecInputStream0.mark((-1));
      baseNCodecInputStream1.markSupported();
      Base32 base32_1 = new Base32((-1), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      int int0 = (-476);
      baseNCodecInputStream0.mark((-476));
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      Base32 base32_2 = new Base32(1081);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      BaseNCodecInputStream baseNCodecInputStream4 = new BaseNCodecInputStream(baseNCodecInputStream3, base32_1, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream4.read((byte[]) null, 64, 1406);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 75);
      Base64 base64_0 = new Base64(75, byteArray0, false);
      Base64 base64_1 = new Base64(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_1, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_1, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream1.markSupported();
      baseNCodecInputStream1.markSupported();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, false);
      baseNCodecInputStream2.markSupported();
      Base32 base32_0 = new Base32(65);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_1, true);
      BaseNCodecInputStream baseNCodecInputStream4 = new BaseNCodecInputStream(byteArrayInputStream0, base64_1, true);
      baseNCodecInputStream1.read(byteArray0);
      boolean boolean0 = baseNCodecInputStream3.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      Base32 base32_0 = new Base32((-129), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      baseNCodecInputStream0.mark((-1));
      baseNCodecInputStream1.markSupported();
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean0);
      
      Base32 base32_1 = new Base32(64);
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-38);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      int int1 = baseNCodecInputStream1.read(byteArray1, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Base32 base32_0 = new Base32((-129), byteArray0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3135), 97);
      byteArrayInputStream0.markSupported();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      baseNCodecInputStream0.reset();
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      Base64 base64_0 = new Base64((-37), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      baseNCodecInputStream1.read();
      baseNCodecInputStream1.read();
      baseNCodecInputStream1.markSupported();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream1.markSupported();
      baseNCodecInputStream1.markSupported();
      Base32 base32_0 = new Base32((-744));
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = null;
      BaseNCodec baseNCodec0 = null;
      boolean boolean0 = false;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, (BaseNCodec) null, false);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-72);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.read();
      Base32 base32_0 = new Base32((-129), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      baseNCodecInputStream0.read(byteArray0);
      baseNCodecInputStream0.mark((-1));
      baseNCodecInputStream0.reset();
      baseNCodecInputStream1.read();
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      boolean boolean0 = baseNCodecInputStream1.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-82);
      Base32 base32_0 = new Base32((byte) (-77), byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream1.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 75);
      Base64 base64_0 = new Base64(75, byteArray0, false);
      Base64 base64_1 = new Base64(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_1, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_1, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream1.markSupported();
      baseNCodecInputStream1.markSupported();
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream1, base64_0, false);
      baseNCodecInputStream2.markSupported();
      Base32 base32_0 = new Base32(65);
      BaseNCodecInputStream baseNCodecInputStream3 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_1, true);
      // Undeclared exception!
      try { 
        baseNCodecInputStream3.read(byteArray0, (-4499), 477);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, true);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean0);
      
      baseNCodecInputStream0.read();
      Base32 base32_0 = new Base32((-129), byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, false);
      baseNCodecInputStream0.read(byteArray0);
      baseNCodecInputStream0.mark((-1));
      baseNCodecInputStream0.reset();
      baseNCodecInputStream1.read();
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), int0);
      
      BaseNCodecInputStream baseNCodecInputStream2 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-45);
      byteArray0[0] = (byte) (-45);
      byte byte1 = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byte byte2 = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      Base32 base32_0 = new Base32(118, byteArray0);
      base32_0.isInAlphabet("xa>7erKm");
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, true);
      baseNCodecInputStream0.close();
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)45;
      Base32 base32_0 = new Base32(4096, byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pushbackInputStream0, base32_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (-1205), (int) (byte)21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-129));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.close();
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.markSupported();
      baseNCodecInputStream0.read();
      base64_0.isInAlphabet("5\"%k>Q=");
      baseNCodecInputStream0.markSupported();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-1), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base64_0, true);
      byte[] byteArray0 = new byte[9];
      base64_0.modulus = 0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)53;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)68;
      Base32 base32_0 = new Base32((-3383), byteArray0, false);
      base32_0.eof = true;
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base64_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(20);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, false);
      baseNCodecInputStream0.markSupported();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.read(byteArray0, 0, (int) (byte) (-37));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64((-1));
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean0);
  }
}
