/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:49:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setDescPadding((-874));
      helpFormatter0.setNewLine("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-874), (-2879), "oE%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 44, options0, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2143, "q$D&f:JM rFuOf[", "VBF uPJ%EW_i:7>", options0, "VBF uPJ%EW_i:7>", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[", "[", options1, (-2), (-1), "   ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", " ", "--", "org.apache.commons.cli.Options", "Z?)s |]wig.8s+V").when(comparator0).toString();
      doReturn(3, 1, (-1083), 74, (-1083)).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "vX7Vx-/BI@NscK'6", false, "usage: ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "GT*Z }", options1, "", true);
      option1.setValueSeparator('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GT*Z }");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2722), "vX7Vx-/BI@NscK'6", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", true, "");
      optionGroup0.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      Option option1 = new Option("arg", "usage: ");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", " ", "--", (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "vX7Vx-/BI@NscK'6", false, "usage: ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "GT*Z }", options1, "", true);
      option1.setValueSeparator('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GT*Z }");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2395), "GT*Z }", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "GT*Z }", options1, "", true);
      option0.setValueSeparator('{');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GT*Z }");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options1, 45, 3);
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 908, "\n");
      helpFormatter0.findWrapPos("-", 5408, 3575);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      String string0 = "zK;=X(O(^`{s,";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "y[A $/1>(%LF IcX'@K", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BkiH8{N");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2681, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, 2681, 64, "UBbfvd+A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("je)^RH7&i@!H", options0);
      helpFormatter0.setWidth((-1));
      helpFormatter0.defaultArgName = "je)^RH7&i@!H";
      helpFormatter0.setLeftPadding(7);
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "je)^RH7&i@!H");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1127), options0, 9, 2393);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 161, options0, (-2948), 103);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0E[_~ZPM\"OhJj&xpN1");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "325", false, "-");
      Option option0 = new Option("325", false, "--");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1583, "325", (String) null, options4, 97, (-2168), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-249);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-249), 835);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      Option option0 = new Option("arg", false, "");
      option0.setDescription("usage: ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options3, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-770), options0, 7, (-770));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "[ option: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-158);
      Options options1 = new Options();
      String string0 = "/3VhN>";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "]", "K|1DIo<m/", options0, "/3VhN>", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      mockPrintWriter0.print(0.0);
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      mockPrintWriter0.printf("\n", objectArray0);
      mockPrintWriter0.println((-1.0));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1137, "org.apache.commons.cli.Options");
      helpFormatter0.setNewLine("zeipBWXt@bXO");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1879, " ", "}rTk\"-", options0, "a", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 5871;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1879, options0, 5871, 5871);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=J)]0 ?uTgVpDL<C");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "aOl";
      String string1 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(687, "aOl", "l 3!E2y?lO6eXN ", (Options) null, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      int int0 = 69;
      helpFormatter0.renderOptions((StringBuffer) null, (-2865), options0, 69, 69);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2865), (-2865), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(9, "org.apache.commons.cli.HelpFormatter$1", "", options0, "fjH5$p?%=\"4*8?~", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2285, ":", ":", options0, " ", true);
      StringBuffer stringBuffer0 = new StringBuffer(2285);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format(locale1, "Y", objectArray0);
      helpFormatter0.printOptions(printWriter0, 2942, options0, 6, 2942);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Option option0 = new Option("arg", "dd6788^w_E?}{^xL", true, "lf;_e");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "%2NAt;1", "org.apache.commons.cli.OptionGroup", (Options) null, (-2), 62, "m M>L4}z]^", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Option option0 = new Option("arg", "dd6788^w_E?}{^xL", true, "lf;_e");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.findWrapPos("Cannot add value, list full.", 11, 11);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "A CloneNotSupportedException was thrown: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "\n", "usage: ", options0, (-1616), 1, "sr'`");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = (-3064);
      Options options0 = new Options();
      helpFormatter0.findWrapPos("Sr=-", 3004, 2455);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2285;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "Illegal option name '", false, "-");
      helpFormatter0.printHelp("F@}o", "F@}o", options1, "F@}o", false);
      int int1 = (-288);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-288));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      options0.addOption("arg", "*hD&1VE,(42?HDzU+2", false, "/C_Je>*");
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setSelected(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BPXDEF~");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1072, options0, 2285, 2780);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 2780, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 0, (-2634), "nh~ $");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("CHuzvA*tL\"Cr7ayc19u");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2757), "\n", "", options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockFile mockFile1 = new MockFile(mockFile0, "Lz6_D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 4927, "G<//=", "' was specified but an option from this group ", options0, 1, 3, (String) null, false);
      helpFormatter1.findWrapPos("\n", 4968, 4968);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      options0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "-");
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockFile mockFile1 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "-", "--", options0, 2257, 1, "-", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("4Neuf60ytpqejV", false, "]");
      String string0 = "!^TmxoUpB!QTiJ/VQ\\";
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      boolean boolean0 = false;
      Option option1 = new Option("arg", "u=p@g(BfK/MzTfQ|Hn", true, "");
      options2.addOption(option1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "]", options2, "]", false);
      PrintWriter printWriter0 = null;
      int int0 = (-765);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-765), options2, 2423, 2451);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Option option0 = new Option("arg", "dd6788^w_E?}{^xL", true, "lf;_e");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "dd6788^w_E?}{^xL", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      helpFormatter0.printHelp(printWriter0, 101, " ", "usage: ", options0, 114, 63, " ", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", " ");
      MockFile mockFile1 = new MockFile(mockFile0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Option option0 = new Option("arg", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2257, (String) null, ":x", options1, (-1345), 2253, "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-271);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]/2Is8", (Options) null, "]/2Is8", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('=');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options0, (-2780), 104);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.setLongOptPrefix("=uL}4H)3p");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("hJi;:q5};6BIp", "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "c@~rN}/6J,ln", "Lz6_D", options0, 74, 255, "X'z", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "'");
      Option option0 = new Option("jRS", false, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "", "", options3, (-1), 31, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2455, "Illegal option name '", "", (Options) null, " ]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockFile mockFile1 = new MockFile(mockFile0, "Lz6_D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "--", options0, 2257, 1, "-", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2455, "\n", "\n", (Options) null, 2257, 2455, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.appendCodePoint(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 188, 188, "\"QCR'Q%!^&+Y'R");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 188, 10, "\"QCR'Q%!^&+Y'R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      Option option1 = new Option("", "", true, "\n");
      options0.addOption(option1);
      helpFormatter0.printHelp(">", (String) null, options0, "!^TmxoUpB!QTiJ/VQ", false);
      helpFormatter0.rtrim("]");
      helpFormatter0.printHelp("]", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"=A?8Q/y/=*5P^v");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", (Options) null, 55, (-1), "r>sB", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      Option option0 = new Option("arg", false, "e,g9@G6)HP");
      Options options2 = options1.addOption(option0);
      options2.helpOptions();
      helpFormatter0.printHelp(1489, "\"", "\"[o&", options2, "org.apache.commons.cli.HelpFormatter$1", false);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2455, " ]", " ]", (Options) null, 2257, 2455, " ]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayCountry(locale1);
      mockPrintWriter0.print(1507.2324F);
      mockPrintWriter0.format(locale1, "", (Object[]) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "\u30A4\u30AE\u30EA\u30B9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLongOptSeparator(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-893), "[", ">", options0, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2445), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Option option0 = new Option("arg", "dd6788^w_E?}{^xL", true, "lf;_e");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1101, "dd6788^w_E?}{^xL", options0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "MX?8!)gpU:y#;K*J", "#N:ynsQP ", options0, "MX?8!)gpU:y#;K*J", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim(">");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 48, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2275, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", true, "jp#T]}cxoMoF|q+");
      optionGroup0.addOption(option0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      mockPrintWriter0.print(1507.2324F);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 3, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("U");
      Options options0 = new Options();
      helpFormatter0.printHelp(36, "U", "Regno Unito", options0, "Regno Unito", false);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("4Neuf60ytpqejV", false, "]");
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      option0.setType((Object) null);
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!^TmxoUpB!QTiJ/VQ");
      String string0 = "";
      Option option1 = new Option("arg", "u=p@g(BfK/MzTfQ|Hn", true, "");
      options2.addOption(option1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "]", options2, "]", false);
      String string1 = "C)";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "R]e(P", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "gu\"5w%Rv", false, "o83*6E");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "usage: ", " ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ", true, "jp#T]}cxoMoF|q+");
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1177, "jp#T]}cxoMoF|q+", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("4Neuf60ytpqejV", false, "]");
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      Option option1 = new Option("arg", "u=p@g(BfK/MzTfQ|Hn", true, "");
      options2.addOption(option1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "]", options2, "]", false);
      helpFormatter0.rtrim("C)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      mockPrintWriter0.print(1495.8629F);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 3, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("U");
      int int0 = 4265;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "9,U[9(&#NxG6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 32, "usage: ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      helpFormatter0.printHelp(2285, "^eFS9${>OZK0v", "", options0, "", false);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(2285, "--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter0.write(1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter2.getBuffer();
      stringWriter2.append((CharSequence) "2>]I7qAp~yH1T5");
      helpFormatter0.findWrapPos(" ]", 1, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "EK8m", true, "O&w?J>w.Vo2{");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, " | ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[ Options: [ short ", (-1506), (-4036));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "gu\"5w%Rv", false, "o83*6E");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1, "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "-";
      Options options2 = options1.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2455, options2, 2455, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|wq3ov\"vZgcRclJ&L");
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      options0.hasLongOption("--");
      int int0 = 1;
      String string1 = "2>]I7qAp~yH1T5";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1781, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, 1781, 1, "2>]I7qAp~yH1T5");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('3');
      options0.getOptions();
      stringWriter0.write(1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      stringWriter2.append((CharSequence) "2>]I7qAp~yH1T5");
      helpFormatter0.renderOptions(stringBuffer0, 1764, options0, 1, 1781);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "|wq3ov\"vZgcRclJ&L", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 3007;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "Ay";
      boolean boolean0 = false;
      String string3 = "org.apache.commons.cli.HelpFormatter";
      options0.hasLongOption("arg");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, " [ARG]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  [ARG]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "English", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Ay", false, "org.apache.commons.cli.HelpFormatter");
      String string0 = ">";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3007, "", "", options1, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "j";
      int int0 = 0;
      Options options1 = options0.addOption((String) null, "", false, "sO)ZH/2");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "--", options1, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(64);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "]", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.appendCodePoint(4);
      helpFormatter0.renderWrappedText(stringBuffer0, 105, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "P");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Option option0 = new Option("arg", "dd6788^w_E?}{^xL", true, "lf;_e");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "dd6788^w_E?}{^xL", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^eFS9${>OZK0v";
      helpFormatter0.setLongOptSeparator("^eFS9${>OZK0v");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1676;
      helpFormatter1.setLeftPadding(1676);
      String string1 = "";
      helpFormatter0.setArgName("");
      String string2 = "#";
      helpFormatter0.setLongOptSeparator("^eFS9${>OZK0v");
      helpFormatter1.setDescPadding((-618));
      Options options0 = new Options();
      Option option0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("^eFS9${>OZK0v", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^eFS9${>OZK0v' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      String string0 = "tbv  h/={Wed,";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "tbv  h/={Wed,");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setArgName("");
      Locale locale0 = Locale.UK;
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      mockPrintWriter0.print(1495.8629F);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "CE6;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("=mp1{{l>1ZQ1");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "=mp1{{l>1ZQ1", (-3384), (-3384));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      mockPrintWriter0.print(0.0);
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      mockPrintWriter0.printf("\n", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1193), "[", "<Jh", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter$1";
      String string1 = "line.separator";
      int int0 = (-402);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-402));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2285, "^eFS9${>OZK0v", "", options0, "", false);
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      helpFormatter0.getLongOptPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 2094;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2094, "Jd}ui0");
      String string1 = "K;4H";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("cmdLineSyntax not provided", "8m#10-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L*q`E09J\"^+Y0");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-737), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "y&CI+5k:7n-ZD;C");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.clearValues();
      helpFormatter0.printHelp("-", options1, false);
      helpFormatter0.getLeftPadding();
      String string0 = null;
      options1.hasLongOption((String) null);
      helpFormatter0.getLongOptPrefix();
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = "y'Luq\"BbqKiv'8FD@s";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "y'Luq\"BbqKiv'8FD@s");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1538);
      String string0 = "";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1538), 2853, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(44);
      String string0 = "-i:ZziVh-T&_@b$)\"Q";
      helpFormatter0.setOptPrefix("-i:ZziVh-T&_@b$)\"Q");
      String string1 = null;
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      mockPrintWriter0.print(0.0);
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      mockPrintWriter0.println((-1.0));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1137, "org.apache.commons.cli.Options");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-917), "' was specified but an option from this group ", ")[l_4W`.)wU4", options0, (-917), (-917), ")[l_4W`.)wU4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 36;
      helpFormatter0.renderWrappedText(stringBuffer0, 36, 3, "5bxYLB:m$@NK`:k");
      helpFormatter0.setOptionComparator((Comparator) null);
      File file0 = MockFile.createTempFile("{J@e`4", "cmdLineSyntax not provided");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 3007;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "Ay";
      boolean boolean0 = false;
      String string3 = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, " [ARG]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  [ARG]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("4Neuf60ytpqejV", false, "]");
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1489, "4Neuf60ytpqejV", "4Neuf60ytpqejV", options3, 1794, (-309), "-Gt?9}h#Z^OuQN}", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 664, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("4Neuf60ytpqejV", false, "]");
      Option option0 = new Option("i", "!^TmxoUpB!QTiJ/VQ");
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3505, 328, "");
      assertEquals(0, stringBuffer1.length());
      
      String string0 = helpFormatter0.getArgName();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultSyntaxPrefix = "KzXNM s73WdvxWrF";
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "arg", options0, "/ZLq:uZWV{5e!C");
      int int0 = (-3154);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-3154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.UK;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) locale1;
      objectArray0[5] = (Object) locale0;
      mockPrintWriter0.printf(locale1, "\n", objectArray0);
      stringWriter1.append((CharSequence) "\n", 0, 1);
      // Undeclared exception!
      try { 
        stringWriter1.write((char[]) null, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "line.separator", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.close();
      int int0 = (-1);
      String string0 = "[";
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%b<<= _#7D";
      helpFormatter0.defaultNewLine = "%b<<= _#7D";
      helpFormatter0.setLongOptSeparator("%b<<= _#7D");
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "arg", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1177, "jp#T]}cxoMoF|q+", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "g", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim((String) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(44);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("                                            ", string0);
  }
}
