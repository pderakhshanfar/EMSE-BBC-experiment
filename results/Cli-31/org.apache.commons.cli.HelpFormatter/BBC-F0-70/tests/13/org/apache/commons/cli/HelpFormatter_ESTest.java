/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:38:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 823, "\n", "usage: ", options0, 3, 74, " ", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "--";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", "fU8rQ/b", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", " ", true, "#0d\u0005d35Rupy^Q");
      option0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, "arg", true, "\n");
      option0.setArgName("");
      options1.addOption(option0);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.printHelp("x.snf'BQSCKQ&", "", options0, "Dzl^CRRR3*,U2b", true);
      helpFormatter0.rtrim("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("T=uPORE;$=Qg{9n", 1, (-2294));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("m", "usage: ", true, "/+&y}QTN5mw");
      Option option0 = new Option("m", "usage: ", false, "}'@k`+!S-[WMr}]p");
      Options options2 = options1.addOption(option0);
      helpFormatter0.setDescPadding((-5597));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "m c&,", "m c&,", options2, ";Yc&Z)jDLjC3%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "usage: ");
      Options options3 = options2.addOption(option0);
      option0.setArgName("-");
      Options options4 = options2.addOption("", "--", true, "");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.printHelp(40, "usage: ", "6mMQS Ojy-", options1, "6mMQS Ojy-");
      helpFormatter0.printHelp(2983, "usage: ", "", options3, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 2983, options4, 2844, 2983);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 10, (-1), "5m.,");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      int int0 = 31;
      String string0 = "i#\\\"J;9`o";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string1 = "O|Cx%#4Fi|}*h";
      Option option0 = null;
      try {
        option0 = new Option("EL dB3EyR1LHo", false, "O|Cx%#4Fi|}*h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'EL dB3EyR1LHo' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "--", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(463);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 39, 39);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]4S", "]4S", (Options) null, "C#{9{?'?)|)v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "6ea]z~[fx4[Y$}K&C";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("U`4c|*_=0p\"tp");
      Option option0 = new Option("", true, "hOLRQj7hI;Q");
      optionGroup0.setSelected(option0);
      helpFormatter0.setArgName("");
      Option option1 = new Option("arg", true, "arg");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "arg", "--", options0, "arg", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("oC", false, "oC");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("/T", options1, false);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ", " ");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "h", options0, "NO_ARGS_ALLOWED", true);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Xh");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "nUT");
      Option option0 = new Option((String) null, false, " ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("sI", "\n", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1267, "Xh", "Xh", options3, 7, (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("-");
      Option option0 = new Option("arg", "usage: ", true, "arg");
      option0.setArgName("arg");
      option0.setArgs(1);
      String string0 = "";
      helpFormatter0.setDescPadding((-1400));
      options0.addOption(option0);
      option0.setArgName("-");
      options0.addOption("", "--", true, "");
      String string1 = helpFormatter0.defaultSyntaxPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "arg", "--", options0, "arg", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1434));
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(2104, "a21eUZ{,iuT:", "{", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 64, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('<');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 93, (Options) null, 93, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 13, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1, (Options) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "7W\"7W:yT!Y.\"j?&s!";
      helpFormatter0.defaultSyntaxPrefix = "7W\"7W:yT!Y.\"j?&s!";
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      options0.addOption("", "7W\"7W:yT!Y.\"j?&s!", true, "--");
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(2586, "Q~~)W5&HoJJfc6^%", "--", (Options) null, "0!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 89, options0, 115, 89);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, (-1264), 5154, "!:=v6,ya");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1687), (Options) null, (-1), (-1687));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?J-*i/'ef}*", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "_E", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("2'T$Ye663y3U", options1, false);
      Options options2 = new Options();
      Options options3 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("--");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 19;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 19, (-3218), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2863;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[5] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) pipedInputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.printf((Locale) null, " ", objectArray0);
      helpFormatter0.printUsage(printWriter1, 2863, "'i_Tnfit4");
      helpFormatter0.setDescPadding(2863);
      helpFormatter0.setLongOptSeparator("T~u7]FTL:FbRs");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.createPadding(2863);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, 0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-1655), "' contains an illegal character : '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "\n", "--", options0, 32, 1, " ", false);
      helpFormatter1.setLongOptSeparator("\n");
      helpFormatter1.setArgName("\n");
      helpFormatter0.printHelp(124, "}X}&Q1\")i@hwu|", "", options0, "}X}&Q1\")i@hwu|", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultDescPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "arg", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&L:");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 459, " ");
      mockPrintWriter0.write("\n");
      helpFormatter0.createPadding(29);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-617), "$~I5XIi_jD", "kk#\"4-'Css@", options0, (-617), 1630, "Ec2SF=+[q`o1m", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 817, "-", (String) null, options0, 1524, 32, (String) null, false);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter1.setArgName("HG? ;~>A!}Tvx");
      helpFormatter1.printHelp(78, "{6C%>4gvG}2", "", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-3284);
      options0.getMatchingOptions("--");
      options0.hasLongOption(" :: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("qnnNb1wIDp+o\"1x7kD", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "Bhh7'bFF2C,'@2Lkf";
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 's';
      charArray0[2] = 'H';
      charArray0[3] = ' ';
      charArray0[4] = '/';
      charArray0[5] = '#';
      charArray0[6] = 'f';
      mockPrintWriter0.println(charArray0);
      Options options1 = options0.addOption((String) null, "Bhh7'bFF2C,'@2Lkf", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = (-1968);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, (String) null, "", options2, (-1981), (-1968), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 596, 596, "");
      Options options0 = new Options();
      String string1 = "K";
      int int0 = helpFormatter0.defaultDescPad;
      Options options1 = null;
      boolean boolean0 = false;
      String string2 = "cX1bV+x&_xZS3P6";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultDescPad;
      String string0 = "0!";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "0!", "", options0, "K");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('d');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.getMatchingOptions("b;YU-8\"8s@j");
      helpFormatter0.printHelp(printWriter0, 29, " ] [ long ", (String) null, options0, 1170, 1170, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 29, options0, 9, 9);
      helpFormatter0.renderWrappedText(stringBuffer1, 29, 29, "b;YU-8\"8s@j");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultDescPad;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1720, " | ", "", options0, " | ", false);
      helpFormatter0.renderOptions(stringBuffer0, 1720, options0, 1720, 3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("oC", true, "oC");
      helpFormatter0.setArgName((String) null);
      Options options1 = options0.addOption((String) null, true, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(368, "[ARG...]", "j*C`MjR>}~(lEJ>>n", options2, " ");
      Option option1 = null;
      try {
        option1 = new Option("209u@d8<[nY", "qi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '209u@d8<[nY' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "xQr6.6{J");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", "&L:", options0, "arg", false);
      helpFormatter1.findWrapPos("--", 459, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "arg");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "arg", "--", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "1Z7mR`*GY&`oe}e/~^<");
      Option option0 = new Option((String) null, "~Yl hu");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h{1x,/#Irg|18;zf~,s", "h{1x,/#Irg|18;zf~,s", options3, "@X:IQ0qm1v8xF3ZMg<", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "usage: ");
      option0.setArgName("-");
      Options options3 = options2.addOption("", "--", true, ",mB(XwjsIxYq");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "6mMQS Ojy-", "6mMQS Ojy-", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"!t=.`BI7=$rlP");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "usage: ");
      Options options3 = options2.addOption("", "--", false, "_Q>rNVf");
      helpFormatter0.printHelp(11, "6mMQS Ojy-", "6mMQS Ojy-", options3, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 309, " ] [ long ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(",@-@Z,");
      Options options0 = new Options();
      options0.hasOption("-");
      Options options1 = options0.addOption((String) null, true, "]");
      helpFormatter0.printHelp("PjQY-", options1, true);
      Options options2 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      options0.getMatchingOptions("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 32, 32, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      String string0 = "";
      helpFormatter1.setArgName("--");
      helpFormatter1.printHelp(74, "0!", "\n", options0, "--");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      String string0 = "n`u3{K";
      boolean boolean0 = true;
      helpFormatter0.printHelp("n`u3{K", options0, true);
      PrintWriter printWriter0 = null;
      int int0 = 53;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 53, "n`u3{K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      String string0 = "xQr6.6{J";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 990, "", "", options0, 1, 990, "|u.u`6Y$Ymq[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-260), "\n", "", options1, "JRRY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      Options options1 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "-", options0);
      Options options2 = new Options();
      helpFormatter0.setLongOptPrefix("j1-e_e:HF)rp4m");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      helpFormatter0.setArgName((String) null);
      String string0 = "0!";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(380, "--", "", options0, "");
      helpFormatter0.setDescPadding(1354);
      Option option1 = new Option("", false, "-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("\n");
      String string1 = "$T#YV.rdGZNFT!";
      Options options1 = options0.addOption("", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 3, 380);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("woC_S/Y0ki,G");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 459, "has already been selected: '");
      mockPrintWriter0.write("\n");
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      helpFormatter0.renderWrappedText(stringBuffer0, 1633, 9, "KEn");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "Vam$ upXVg{),tl", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-638));
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      helpFormatter0.getWidth();
      Options options1 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "cX1bV+x&_xZS3P6", "", (Options) null, "cX1bV+x&_xZS3P6", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptions();
      helpFormatter1.setArgName("arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "line.separator", "usage: ", options0, 22, 3, "<", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator(" ");
      helpFormatter1.setArgName("--");
      Options options1 = new Options();
      helpFormatter2.createPadding(1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "qp;9sq}x$RlBgU?";
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      mockPrintWriter0.write("--");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "qp;9sq}x$RlBgU?");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      helpFormatter0.setArgName((String) null);
      String string0 = "0!";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(380, "--", "", options0, "");
      Option option1 = new Option("", false, "-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("\n");
      // Undeclared exception!
      try { 
        options0.addOption("$T#YV.rdGZNFT!", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$T#YV.rdGZNFT!' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 32, 32, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      helpFormatter1.getWidth();
      helpFormatter0.printHelp(993, "", "nB8VJ;K_qN", options0, "p[y}&y<~(BLuXqWl", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "The option '", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 32, 32, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      helpFormatter1.setArgName("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "aeJ!H", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1162);
      Options options1 = options0.addOption("oC", false, "oC");
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/T", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasShortOption((String) null);
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 44, options0, 13, 1164);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "qp;9sq}x$RlBgU?";
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", true, "xQr6.6{J");
      helpFormatter0.printHelp("qp;9sq}x$RlBgU?", options1, true);
      Options options2 = new Options();
      helpFormatter0.printHelp(33, "xQr6.6{J", "", options1, "xQr6.6{J");
      Option option0 = null;
      try {
        option0 = new Option("xQr6.6{J", "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xQr6.6{J' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "xQr6.6{J");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "'%(/^76E", options0, "-");
      helpFormatter0.setDescPadding(1);
      helpFormatter1.setDescPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter1.setNewLine("M(PF8l((P7B_3MHvY");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("M(PF8l((P7B_3MHvY");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2360), "-", "arg", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultDescPad;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionGroup", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      Option option0 = new Option((String) null, "]", true, "~@l*NDz,}vmF6%e\";");
      options0.addOption(option0);
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setArgName("Cannot add value, list full.");
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '^';
      charArray0[2] = 'y';
      stringWriter0.write(charArray0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 2, 2, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      helpFormatter1.setArgName("--");
      Options options1 = new Options();
      Option option1 = null;
      try {
        option1 = new Option("[ARG...]", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.printHelp("ni(Of", "bL4:", options0, "arg");
      helpFormatter0.setDescPadding(44);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("bL4:");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 982, 982, "ni(Of");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      options0.hasLongOption("usage: ");
      helpFormatter1.printHelp("-", options0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.createPadding(993);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("Illegal option name '", 1, 3);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "Illegal option name '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      int int0 = (-844);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", (-844), (-844));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "qp;9sq}x$RlBgU?";
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      helpFormatter0.setOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "qp;9sq}x$RlBgU?", true, "arg");
      helpFormatter0.printHelp("qp;9sq}x$RlBgU?", options1, true);
      Options options2 = new Options();
      options0.getMatchingOptions("qp;9sq}x$RlBgU?");
      Option option0 = null;
      try {
        option0 = new Option("xQr6.6{J", "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xQr6.6{J' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      helpFormatter0.setOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      String string0 = "xQr6.6{J";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2958), "qp;9sq}x$RlBgU?", "+glpQgp`\"]{P>N+nA", options0, 0, 0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "<";
      StringBuffer stringBuffer0 = new StringBuffer("<");
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "";
      Options options1 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6-59GWuW((C>t#C");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "+glpQgp`\"]{P>N+nA", (Options) null, (-812), 0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasLongOption("");
      Options options1 = options0.addOption("arg", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1444), "[\".sO!oP", "/T", options0, (-1444), (-1444), "[\".sO!oP", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("jJ_df0", "0j* ljZ<G<5C", false, "--");
      options1.hasShortOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3189);
      helpFormatter1.printHelp("NO_ARGS_ALLOWED", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 39, "X'T");
      helpFormatter0.rtrim("l/T!+0`P:C");
      helpFormatter1.getArgName();
      helpFormatter1.setWidth(74);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 2, 2, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      String string0 = "";
      helpFormatter1.setArgName("--");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "0!", "\n", options1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "has already been selected: '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("woC_S/Y0ki,G");
      Options options0 = new Options();
      helpFormatter0.printHelp("woC_S/Y0ki,G", options0, true);
      helpFormatter0.printHelp("=yQuhyc/", "has already been selected: '", options0, "");
      helpFormatter0.setDescPadding(459);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("<3@\"~%", "}VD 8hko%MKl1GHh", options0, "xEqZfG3m");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      options0.getMatchingOptions("");
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.println((Object) "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("n`u3{K", options0, true);
      helpFormatter0.printHelp("ni(Of", "", options0, "");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("/CV]p,8J>eo");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "/CV]p,8J>eo", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      options0.getMatchingOptions("");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 459, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      mockPrintWriter1.write("\"");
      Options options0 = null;
      String string0 = null;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 459, "M)3{w7/wFI+29go=&M}", (String) null, options1, 804, (-2326), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 31;
      String string0 = "]";
      String string1 = "";
      Options options0 = new Options();
      options0.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 993, "\"", " ", options0, 2, 2, "", false);
      helpFormatter1.setLongOptSeparator("Cannot add value, list full.");
      helpFormatter1.setArgName("--");
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "has already been selected: '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+glpQgp`\"]{P>N+nA", "Vam$ upXVg{),tl", (Options) null, "+glpQgp`\"]{P>N+nA", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("oC", false, "oC");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("/T", options1, false);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ", " ");
      helpFormatter0.printHelp("DP;ZH", (String) null, options0, (String) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("t", false, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "z>", "z>", options3, 3, (-1), "z>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("oC", false, "oC");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("/T", options1, false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      helpFormatter1.printHelp(0, " [ARG]", "usage: ", options1, "2:;O~m #O", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("To`");
      helpFormatter0.setLeftPadding((-2127));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 1, "' contains an illegal character : '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "@z+I,TX@,W");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 10, "");
      options0.getOptionGroups();
      options0.getOptions();
      options0.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "usage: ");
      options0.getOptionGroups();
      options0.getOptions();
      helpFormatter0.setArgName("Cannot add value, list full.");
      options0.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("<");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "fcX1bV+x&_xZS3P6", "", (Options) null, "fcX1bV+x&_xZS3P6", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("usage: ", 459, (-1));
      String string0 = "qp;9sq}x$RlBgU?";
      helpFormatter0.setLongOptPrefix("qp;9sq}x$RlBgU?");
      helpFormatter0.setOptPrefix("qp;9sq}x$RlBgU?");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "xQr6.6{J");
      helpFormatter0.printHelp("qp;9sq}x$RlBgU?", options1, true);
      Options options2 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("xQr6.6{J", "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xQr6.6{J' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter0.write("rwSHU7cAs;:y-6d2", 3, 3);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "@z+I,TX@,W";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "]";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "]", "&5y{Q", (Options) null, (-1444), (-1444), "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = " | ";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" | ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-138), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(674);
      helpFormatter0.setSyntaxPrefix("3[");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-530);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-530));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("oC", options0, false);
      helpFormatter0.printHelp("Illegal option name '", "]", options0, "+'^g-GPq,A");
      helpFormatter0.setDescPadding((-152));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "/CV]p,8J>eo", "ni(Of", options0, "]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("n`u3{K", options0, true);
      String string0 = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1144), "", (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "woC_S/Y0ki,G";
      String string1 = "has already been selected: '";
      helpFormatter0.defaultSyntaxPrefix = "has already been selected: '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("woC_S/Y0ki,G");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 459, "has already been selected: '");
      mockPrintWriter0.write("\n");
      String string2 = "+glpQgp`\"]{P>N+nA";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 459, "+glpQgp`\"]{P>N+nA", "+glpQgp`\"]{P>N+nA", (Options) null, 0, 0, "woC_S/Y0ki,G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp("n`u3{K", options0, true);
      helpFormatter0.printHelp("ni(Of", "", options0, "");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("/CV]p,8J>eo");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.createPadding(74);
      helpFormatter0.setLeftPadding((-1352));
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", " ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("To`");
      helpFormatter0.setLeftPadding((-2127));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "To`", "To`", (Options) null, "To`", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("oC", false, "oC");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("/T", options1, false);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ", " ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", " ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultLeftPad = (-2);
          helpFormatter0.defaultSyntaxPrefix = "bD:!ey`|K";
          helpFormatter0.getSyntaxPrefix();
          helpFormatter0.setArgName("bD:!ey`|K");
          helpFormatter0.setOptPrefix("I!HS4*Z?");
          helpFormatter0.getOptPrefix();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor73.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1046;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "arg", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "woC_S/Y0ki,G";
      String string1 = "has already been selected: '";
      helpFormatter0.defaultSyntaxPrefix = "has already been selected: '";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("woC_S/Y0ki,G");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 459, "has already been selected: '");
      mockPrintWriter0.write("\n");
      String string2 = "+glpQgp`\"]{P>N+nA";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "+glpQgp`\"]{P>N+nA", "+glpQgp`\"]{P>N+nA", (Options) null, 0, 0, "woC_S/Y0ki,G");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      Options options0 = new Options();
      options0.addOption("arg", false, (String) null);
      Option option0 = null;
      try {
        option0 = new Option("qD):q(ov", "]XdKdio)p$mb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'qD):q(ov' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = null;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">UW?)>%Dk`im)Q";
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-5292), options0, (-5292), (-5292));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-1419), (-1419), "mq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4410));
      helpFormatter0.setArgName("2)i}!bL0");
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("2)i}!bL0", "L@[JU F", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '2)i}!bL0' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      helpFormatter0.setDescPadding(32);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("--");
      int int0 = 1528;
      helpFormatter0.createPadding(1528);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("#(agl,.VY-*MgLPsIB");
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      try { 
        options0.addOption("[&g45$-F<:uHVS{\"!", "*,,GQH#", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[&g45$-F<:uHVS{\"!' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.print("6k");
      mockPrintWriter0.println((Object) "6k");
      mockPrintWriter0.println((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "181W}cv$:3Q%J");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      String string0 = "`Y^]r)+Q";
      String string1 = "jtyf(lCfJ";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "`Y^]r)+Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "`Y^]r)+Q", "jtyf(lCfJ", (Options) null, "[ARG...]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*ISjhK7].q/9qJmxpz~";
      helpFormatter0.defaultLongOptPrefix = "*ISjhK7].q/9qJmxpz~";
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("d=84Qm,Vl[_", (String) null, true, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'd=84Qm,Vl[_' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 1628;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
