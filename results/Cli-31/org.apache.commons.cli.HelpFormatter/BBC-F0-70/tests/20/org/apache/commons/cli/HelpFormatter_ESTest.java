/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:42:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("W&Yo\"xSw:oKexq,v[e)", "pax1LO]KL(f+", options1, "x", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setNewLine("   ");
      helpFormatter0.findWrapPos("   ", 0, 0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1734, 0, "1_tqJshR 4G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.rtrim("");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 13, options2, 13, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "");
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, (-1), "@:{-cq 5nP<8");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x6()kw8I$p5dy_Rw", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "x6()kw8I$5dyw_Rw";
      String string1 = "j";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      String string2 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "j", "j", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 5182;
      String string0 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      String string1 = " :: ";
      options0.hasOption("");
      String string2 = "' contains an illegal character : '";
      String string3 = "7";
      MockFile mockFile0 = new MockFile("7");
      mockFile0.setExecutable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.close();
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 5182, options0, 5182, 5182);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string1 = "v;";
      helpFormatter0.setLongOptPrefix("v;");
      int int0 = (-432);
      Options options0 = new Options();
      boolean boolean0 = false;
      stringBuffer0.append((double) 1);
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "U", "#;Gp", options0, 161, 161, ",Q8aMuk;+q,oD*F7@~>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      OptionGroup optionGroup3 = optionGroup2.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "", true, "line.separator");
      options3.addOptionGroup(optionGroup3);
      options1.addOption(option0);
      MockFile mockFile0 = new MockFile("EQ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "&%bw@t", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "C]F)4%FR<|6S", "z3.C@R0=D7'|Ux8?-/", (Options) null, "vOO(s1.BU\n2WFj7K>D", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.createPadding(13);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = 120;
      helpFormatter0.defaultLeftPad = 120;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-875));
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = (-875);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("VJz|]H5eYTS?Z)i7$H)");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("a~^'vMp#}06Jn", "NO_ARGS_ALLOWED");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "", true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options0 = new Options();
      options0.getOptions();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\"", "\"", options0, "", true);
      helpFormatter0.findWrapPos("[f.2!_K^ax", 11, (-1));
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mVR2eQgJFh");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "4^5Oc:Uf*l{>M-LV&t", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("mVR2eQgJFh", true, "");
      Option option0 = new Option("", "", false, "U|H@?1UDE~AMJ");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "Q", "", options4, 64, (-1), "Q", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      String string0 = "'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "--";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-40);
      helpFormatter0.defaultLongOptPrefix = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.rtrim("usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(15);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "9x%`\"uNen)<S3H\"])<");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "7z'^}v`1L(2e@/vS>6Z");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", " ", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y(*X?}G\"9%\"", options3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-795));
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "'";
      Object object0 = new Object();
      objectArray0[3] = object0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cmdLineSyntax not provided");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp("\n", "--", options0, "/Rjkix66d/D", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5jul>:*eh<Nmz";
      helpFormatter0.defaultNewLine = "5jul>:*eh<Nmz";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1186, "]cd", "5jul>:*eh<Nmz", (Options) null, "]cd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 26, "xlP@b}|f'~_V[9}#W+", options0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("arg", "-");
      File file0 = MockFile.createTempFile(" &%*&I=Ab)L)kPM2H", "3[(T{$`v%+IX[B:G", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 81, "3[(T{$`v%+IX[B:G", "iN>@G]R'", options0, 11, (-1809), "3[(T{$`v%+IX[B:G");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 34, 1593, "' contains an illegal character : '");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 7, (-2392), "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-766);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Options options1 = options0.addOption("", true, "arg");
      helpFormatter0.printHelp("\n", "--", options0, "/Rjkix66d/D", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultLongOptPrefix = " ";
      Options options0 = new Options();
      String string0 = ">_c3$_=ZBI5czNv:i?N";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption((String) null, ">_c3$_=ZBI5czNv:i?N", true, ">_c3$_=ZBI5czNv:i?N");
      options0.helpOptions();
      options1.getOptionGroups();
      int int0 = 2321;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options1, 2321, 2321);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption((String) null, "arg", false, "arg");
      Option option0 = new Option("arg", "-", true, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("ZELtE\"(9#ju:F#", options2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1329;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1329, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.printHelp("($xPz^o|0!RU", options0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "($xPz^o|0!RU", "($xPz^o|0!RU", options0, 1774, 74, "--");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2747);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("<");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1039), 2612, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@Ea", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 1732, 1406, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOption("", false, "&kb.P");
      // Undeclared exception!
      helpFormatter0.printHelp("&kb.P", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "%", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "($[dz^o|0!RU");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("F=uzl%JKQ9", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      Options options2 = options1.addOption((String) null, "", true, "`Hi=H:}R|#");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2147, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printOptions(mockPrintWriter0, 8, options0, 586, 2837);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      MockFile mockFile0 = new MockFile("yd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      mockPrintWriter2.printf("&q!", (Object[]) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "usage: ");
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1105, "org.apache.commons.cli.Options", options0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      int int0 = (-267);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-267), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "4%Q*5JoQa&<7iMfp8y";
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 13, 489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 103, "[", "[", options0, 103, 103, "V3G>(jk&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("}PiA-kFL~wbINu!jd", "FoW!@ s^0&{I");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("s,b+';t:om", "<", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 302, "R ]Qu[$Yyz ~\"lH", "}PiA-kFL~wbINu!jd", options0, 4, 302, (String) null, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.printf("-!UC(w7)hg;&>[", (Object[]) null);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOption("", true, "arg");
      helpFormatter0.printHelp("\n", "St/+c", options0, "/Rjkix66d/D", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-1352), (-1352));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("E/mM{dL('K'=[Om6");
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("ktV", "/[IbDpR[6Ba(J}266", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2416), 61, "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "-", options0, "-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1607));
      StringBuffer stringBuffer0 = new StringBuffer("=a%-P[en)#w)T*f(ls5");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("=a%-P[en)#w)T*f(ls5", "lY2 udDo*/lwS<xxM@", options0, "lY2 udDo*/lwS<xxM@", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding(61);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("lY2 udDo*/lwS<xxM@", "lY2 udDo*/lwS<xxM@", options0, "lY2 udDo*/lwS<xxM@", false);
      MockFile.createTempFile("5K>S+wjW7", "UR$S\"We_d^,h8");
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2122), "UR$S\"We_d^,h8", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" [ARG]", options0);
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) options2;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "l5@;]f~k7Cm}rc", objectArray0);
      helpFormatter0.printHelp(printWriter0, 101, "xa<>M=A", "xa<>M=A", options1, 1336, 2325, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1170), "l5@;]f~k7Cm}rc", "", options1, " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      File file0 = mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-345), "?lu(v($>[", "R ]Qu[$Yyz ~\"lH", options0, 0, 1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "u\\zl%JKQh9";
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      String string1 = "($[dz^o|0!RU";
      StringWriter stringWriter0 = new StringWriter(74);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('?');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 9, options1, 9, (-2248));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, false, "");
      helpFormatter0.printHelp("|N=*h8k", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "WllA;xsrH]4.(]\"F:&", false, ",]Ujt");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "", false, ",]Ujt");
      Options options4 = options3.addOption("arg", true, "--");
      helpFormatter0.printHelp("WllA;xsrH]4.(]\"F:&", "WllA;xsrH]4.(]\"F:&", options4, ",]Ujt", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-!UC(w7)hg;&>[", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 101, "-!UC(w7)hg;&>[", options0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding(61);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("lY2 udDo*/lwS<xxM@", "lY2 udDo*/lwS<xxM@", options0, "lY2 udDo*/lwS<xxM@", false);
      MockFile.createTempFile("5K>S+wjW7", "UR$S\"We_d^,h8");
      MockFile mockFile0 = new MockFile("arg", "");
      File file0 = mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "R ]Qu[$Yyz ~\"lH", (String) null, options0, 13, 302, "5K>S+wjW7", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.setSyntaxPrefix("                                                                          ");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp(44, "OuuU+^n:", "                                                                          ", options0, "wv]Jl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("                                                                          ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(", ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 44, "                                                                          ", (String) null, options1, 4880, 4581, "", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("`)w,i<6za,t=h9C{q2Y", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "iqfZMAwf/-h;fsf", (String) null, options0, (-2), (-898), "UWz5q= TRwj_A1Pu,a", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 89, 74, "-");
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-3632), "usage: ");
      helpFormatter1.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r;3Jsv`UWMC\"iRk6O");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "-");
      helpFormatter0.printHelp("3wX2k", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2922), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) evoSuiteFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "K", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 516, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4886, 36, ":rbK+_`|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = "[";
      Options options1 = options0.addOption("n", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" C!dc/EQsP +A|h", "line.separator", options0, " ", false);
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      options1.hasOption(" C!dc/EQsP +A|h");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "line.separator", "", options1, 13, 31, "\"'cv)$|$}T", true);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 100, "", "\"'cv)$|$}T", options0, 100, 100, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.setSyntaxPrefix("usage:");
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", false, "");
      helpFormatter0.printHelp(44, "OuuU+^n:", "usage:", options0, "wv]Jl");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "KAdD");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 3, options1, 3, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('u');
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 121, "6D<Sv=y&npg im|U~]", "", options0, 15, 1374, (String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.setSyntaxPrefix("usage:");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "'l4'p:Tk).#5.XR#P");
      helpFormatter0.printHelp("[ARG...]", (String) null, options1, ", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("' was specified but an option from this group ", options0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding(61);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("]");
      helpFormatter0.renderWrappedText(stringBuffer0, 786, (-660), "&uQ}s9");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ":|:kN$#==k:EdMmA`}", true, "arg");
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "rTKlh^>U.%", true, "5SU}a>c]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter2.renderOptions(stringBuffer1, 786, options4, 61, 0);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("fz", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("]Mz,GSK>l5mj_x|95T", (String) null, options1, (String) null);
      helpFormatter0.getLeftPadding();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer2 = stringWriter0.getBuffer();
      stringBuffer2.append("-");
      helpFormatter1.renderWrappedText(stringBuffer2, 1, (-3634), "-");
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 44, 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = "[";
      Options options1 = options0.addOption("n", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" C!dc/EQsP +A|h", "line.separator", options0, " ", false);
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "line.separator", "", options1, 13, 31, "\"'cv)$|$}T", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2581), "d'k@{MPFOqwY{E", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      Options options2 = options1.addOption((String) null, "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("");
      Option option0 = new Option("", false, "-R]OARaEl6P(R-hNGp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/={ sk!g5\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(74, "Ejs/?o'){83/gt}", "Ejs/?o'){83/gt}", options4, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("S^H?JT|f']u$", options1, false);
      helpFormatter0.defaultNewLine = "&sz}";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2416));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      Options options2 = options1.addOption((String) null, "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("");
      Option option0 = new Option("", false, "-R]OARaEl6P(R-hNGp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/={ sk!g5\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(74, "Ejs/?o'){83/gt}", "Ejs/?o'){83/gt}", options4, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("S^H?JT|f']u$", options1, false);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 13, options3, 162, 1937);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, (String) null);
      Options options2 = options1.addOption((String) null, "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("");
      Option option0 = new Option("", false, "-R]OARaEl6P(R-hNGp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/={ sk!g5\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(74, "Ejs/?o'){83/gt}", "Ejs/?o'){83/gt}", options4, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 99;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(99, "", (String) null, options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.setSyntaxPrefix("usage:");
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      options0.getOptionGroups();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ux%4<RFAI");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "--", "org.apache.commons.cli.Options", options0, "/30_U", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "w\"AZu#a|3Zf[", options0, "(2;gAYXE8");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-816), "");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("`|a@T8!}G8%O<Ov%&-", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.HelpFormatter$1", " ", options0, 9, 9, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      String string0 = "/={ sk!g5\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      int int0 = (-673);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-673), "", "", options3, "GnK", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "u\\zl%JKQh9";
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("v:G6sIY+BdA3", "uzl%JKQh9", options2, "uzl%JKQh9", false);
      int int0 = 499;
      helpFormatter0.findWrapPos(string0, int0, int0);
      helpFormatter0.getOptionComparator();
      boolean boolean0 = false;
      String string1 = "-";
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option(string1, boolean0, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, (String) null);
      String string1 = "";
      Options options2 = options1.addOption((String) null, "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("");
      Option option0 = new Option("", false, "-R]OARaEl6P(R-hNGp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/={ sk!g5\"");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(74, "Ejs/?o'){83/gt}", "Ejs/?o'){83/gt}", options4, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("S^H?JT|f']u$", options1, false);
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "", options2, 1966, (-2056), "S^H?JT|f']u$", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2011;
      helpFormatter0.createPadding(2011);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2011, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("I@/", ")sy0GMx7}", options0, "LkSt^^Y*)l_jMSL", false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2433), (-2272), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultWidth = (-3477);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      options0.addOption(option0);
      helpFormatter0.printHelp("`)w,i<6za,t=h9C{q2Y", "", options0, (String) null);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "arg");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 0, options0, 1, 44);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "", options0, "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "usage: ", options0, 1, 1, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "u\\zl%JKQh9";
      Options options0 = new Options();
      String string1 = "sv:G6sIY+BdA3";
      Options options1 = new Options();
      boolean boolean0 = true;
      Options options2 = options1.addOption("arg", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("sv:G6sIY+BdA3", "uzl%JKQh9", options2, "uzl%JKQh9", false);
      String string2 = "e?=A]Trq~k(/bgYj";
      boolean boolean1 = false;
      String string3 = "s(D-|j<`jVe'@";
      Option option0 = null;
      try {
        option0 = new Option(string2, helpFormatter0.defaultSyntaxPrefix, boolean1, string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'e?=A]Trq~k(/bgYj' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.setSyntaxPrefix("usage:");
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(44, "OuuU+^n:", "usage:", options0, "wv]Jl");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = null;
      int int0 = (-2433);
      helpFormatter0.defaultNewLine = "";
      int int1 = (-2272);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "   ", options0, "I@/", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-2433), options0, 14, 14);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 60, 60, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 498, (-491), "");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      options2.addOption("", "bOyWV[3!uhll`)Iz3K%", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3893), options2, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V#YU";
      helpFormatter0.setLongOptPrefix("V#YU");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "V#YU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("`)w,i<6za,t=h9C{q2Y", "", options0, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("`)w,i<6za,t=h9C{q2Y", options1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = (-192);
      Options options0 = new Options();
      int int1 = (-1110);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-192), options0, (-1110), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      stringWriter1.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter0.flush();
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 2521, "");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "f");
      helpFormatter0.printHelp(" ] [ long ", (String) null, options0, "--");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "", true, "");
      Option option0 = new Option("", true, "25O ");
      Option option1 = new Option((String) null, true, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 4, 63);
      int int0 = 311;
      StringWriter stringWriter0 = new StringWriter(311);
      StringWriter stringWriter1 = stringWriter0.append('F');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "-", (-2), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      stringWriter0.append((CharSequence) "usage: ", 0, 3);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      stringWriter0.flush();
      String string0 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-795);
      String string0 = "The option '";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-795));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "YR+fdmCd<m3\"", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("arg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-252), (-252));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim(" ");
      int int0 = 61;
      helpFormatter0.setDescPadding(61);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      options0.addOption("arg", " ", false, "lY2 udDo*/lwS<xxM@");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "lY2 udDo*/lwS<xxM@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("' was specified but an option from this group ", "", (Options) null, "AwQ5WE;4'%/M1R(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "a&hp@oN";
      helpFormatter0.setArgName("a&hp@oN");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getNewLine();
      URI uRI0 = MockURI.aFileURI;
      String string1 = null;
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.getNewLine();
      int int0 = (-798);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\n", (-798), (-798));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Do", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", " ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2433), (-2272), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string0 = "]";
      helpFormatter0.setArgName("]");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "u\\zl%JKQh9";
      Options options0 = new Options();
      String string1 = "sv:G6sIY+BdA3";
      Options options1 = options0.addOption("arg", false, "sv:G6sIY+BdA3");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption(":1V>^)mlvJ+=v~GLa6", "arg", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':1V>^)mlvJ+=v~GLa6' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("V#YU");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 44;
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "V#YU");
      helpFormatter0.rtrim("V#YU");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("V#YU", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'V#YU' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("DK.iZ5xNG{aOf'");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("DK.iZ5xNG{aOf'", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'DK.iZ5xNG{aOf'' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" | ");
      helpFormatter0.setSyntaxPrefix(" |");
      helpFormatter0.setArgName("--");
      assertEquals(" |", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`bo(1!.R,e7";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("`bo(1!.R,e7");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, 52);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 378;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      String string0 = "GuAcqtBFv";
      String string1 = "$O]DjU'>{ok{){";
      Options options2 = options1.addOption("GuAcqtBFv", "$O]DjU'>{ok{){", true, "usage: ");
      options2.hasLongOption("\n");
      Options options3 = options2.addOption("arg", true, "z0;>iE!qgj.I'");
      options3.hasShortOption((String) null);
      options3.hasLongOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = "rlL|<R?cd8uz";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "=?)#=G.-";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 108, "=?)#=G.-");
      String string1 = "";
      helpFormatter0.setNewLine("");
      int int0 = 133;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Uf";
      helpFormatter0.setSyntaxPrefix("Uf");
      int int0 = 0;
      String string1 = ")*|";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, ")*|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
