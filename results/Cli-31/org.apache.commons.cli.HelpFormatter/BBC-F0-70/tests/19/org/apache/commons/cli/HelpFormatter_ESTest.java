/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:42:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(7);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "\n");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      option0.setArgName("");
      helpFormatter0.renderOptions(stringBuffer0, 34, options1, 117, 183);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("3Y`PG'v]M");
      helpFormatter0.setWidth(0);
      assertEquals("3Y`PG'v]M", helpFormatter0.getOptPrefix());
      
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "", (Options) null, 0, 0, "-", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "\n");
      Options options0 = new Options();
      int int0 = (-1);
      Options options1 = options0.addOption("arg", true, "4U&@U? Q~$");
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.defaultOptPrefix = "arg";
      helpFormatter0.rtrim("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      String string0 = "]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 1826;
      String string1 = "m/n\"p=GKIc";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", (String) null, true, "\"S@iQ(jDbsh#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = 3;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultLeftPad = 3;
      helpFormatter0.getLongOptPrefix();
      String string0 = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Ix||2J@", "A CloneNotSupportedException was thrown: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ix||2J@' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("E#r", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(13, "-", "-", options1, "-");
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      options0.addOption((String) null, " ", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter2, (-2181), options0, 13, 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("hm(<9Lt", 361, 361);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      Locale locale0 = Locale.JAPAN;
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", "\n", options0, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "U;FgQ4ITbt{Fwi8@", "[", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1668));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      PipedInputStream pipedInputStream0 = new PipedInputStream(34);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2139, "org.apache.commons.cli.HelpFormatter", (String) null, options0, 878, 1801, " :: ", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      String string0 = ", ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", "", (Options) null, ", ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('C');
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.defaultLeftPad = 1640;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "--", "9$kAB9,c,'q>\"?p2h", options0, 32, 32, (String) null, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 89, "Vp_cF");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-2182);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%FN", "%FN", options0, "%FN");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 75, (-2196), "");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "{gzAA|~<@7z\"X(&0";
      helpFormatter0.getLongOptSeparator();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2031, "ti", "{gzAA|~<@7z\"X(&0", (Options) null, "{gzAA|~<@7z\"X(&0", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      helpFormatter0.setSyntaxPrefix(", ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options0, 64, 64, ", ");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('C');
      helpFormatter0.setArgName("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "6wN", "--", options0, 1, 1, "--", false);
      helpFormatter0.rtrim("--");
      helpFormatter0.printHelp(59, "[ Options: [ short ", "6wN", options0, (String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      helpFormatter0.setSyntaxPrefix(", ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 34, "E,", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "3PkVpi*?");
      helpFormatter0.renderOptions((StringBuffer) null, (-2800), options0, 182, 182);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options1 = new Options();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "dGJZ1Yw\"", "-", options1, 10, 2721, "", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options1 = new Options();
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter0.append('v');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "");
      helpFormatter0.rtrim("");
      helpFormatter0.printOptions(mockPrintWriter0, 34, options1, 1942, 74);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "|F-_dU#x~/BY[[(QW*", "<", options1, 19, 0, "");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      helpFormatter0.setSyntaxPrefix(", ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options0, 64, 64, ", ");
      helpFormatter0.createPadding(64);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options1 = new Options();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, "l5q+IZ", "", options0, (-2), (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "");
      optionGroup1.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter1.rtrim("usage: ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("pmzj6{[?X*_LZ]KV");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "pmzj6{[?X*_LZ]KV");
      StringWriter stringWriter1 = stringWriter0.append('F');
      stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 33;
      StringBuffer stringBuffer0 = new StringBuffer(33);
      int int1 = (-701);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-701), (Options) null, 33, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      mockPrintWriter0.printf(locale1, "'", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-818), "r", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) dataOutputStream0;
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp(", ", ", ", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1013;
      int int1 = (-2831);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "--";
      helpFormatter0.setArgName("--");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 103, "\n", "\n", (Options) null, 1, 0, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      String string0 = "--";
      helpFormatter0.setArgName("--");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 103, "5ZIzr!dJ~", "5ZIzr!dJ~", (Options) null, 1, 0, "5ZIzr!dJ~", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.printHelp(", ", (String) null, options0, "");
      options0.addOption((String) null, " ", true, "-");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options1 = options0.addOption("arg", true, "/");
      helpFormatter0.renderOptions(stringBuffer0, 32, options1, 9, 1);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "line.separator", true, "S/yC<o.~+ZD,T");
      options1.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printHelp("hj3:)rgHZ_g<|D=)x", options1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      Options options0 = new Options();
      options0.addOption("", "*>_tR0", true, "");
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException", true, "   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "   ", "org.apache.commons.cli.AlreadySelectedException", options0, "<V!#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "-");
      Option option0 = new Option("", " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption(option0);
      Options options1 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "-";
      objectArray0[1] = (Object) printWriter0;
      objectArray0[6] = (Object) options0;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.findWrapPos("--", (-1283), 2274);
      helpFormatter0.printHelp(2274, "-", "org.apache.commons.cli.OptionValidator", options0, "", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 97, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "line.separator", true, "S/yC<o.~+ZD,T");
      options1.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "~vGy#2T#Tv&=", options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.append('z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "s", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", "tI8)\"b0>'D6}xw", options0, (String) null);
      Options options1 = options0.addOption("arg", "--", true, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("A79N[", "", options2, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", 31, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9\"NtGX^]Cy.WZj4t", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options2, 13, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(44, "   ", "   ", options0, "   ", false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('E');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = 13;
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 74, (-842));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("1g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 1);
      helpFormatter1.rtrim("\n");
      helpFormatter1.findWrapPos("arg", 1093, 3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("3MZ 0/9{St}Ic,", "3MZ 0/9{St}Ic,", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.getOptPrefix();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 2755, 9, "3MZ 0/9{St}Ic,");
      helpFormatter0.defaultArgName = " ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2893, " ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2893, "--", "", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", "", options0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setArgName("mW7BWv|N`");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append('3');
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      Options options1 = new Options();
      helpFormatter0.printHelp("1g", "", options0, "--");
      Options options2 = options0.addOption((String) null, true, "-");
      options2.addOption("1g", "", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "pmzj6{[?X*_LZ]KV";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "' contains an illegal character : '");
      Option option0 = null;
      try {
        option0 = new Option("-", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintWriter0.format(locale0, "-", (Object[]) null);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("pmzj6{[?X*_LZ]KV");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options0 = new Options();
      helpFormatter1.createPadding(1);
      helpFormatter0.findWrapPos("\n", 104, (-1302));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(63);
      StringWriter stringWriter1 = stringWriter0.append('F');
      stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter1.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print(true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 31, "The option '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, ", ", "#{|I<lV^=", (Options) null, 116, 31, "0:[84U`+m(x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      Options options1 = options0.addOption("arg", "cmdLineSyntax not provided", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2492), "~vGy#2T#Tv&=", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("1g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      helpFormatter1.findWrapPos("arg", 1093, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2566), "[ Options: [ short ", "-", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      Locale locale1 = Locale.JAPAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "arg", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      Locale locale1 = Locale.JAPAN;
      locale1.getUnicodeLocaleAttributes();
      mockPrintWriter0.format(locale1, "arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IgH{$P|\nP%cG", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      mockFileOutputStream0.close();
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options0 = new Options();
      int int0 = (-37);
      int int1 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, ", ", "h", options0, (-4271), 9, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "pmzj6{[?X*_LZ]KV";
      helpFormatter0.setArgName("pmzj6{[?X*_LZ]KV");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(1);
      char char0 = '8';
      StringWriter stringWriter2 = stringWriter1.append('8');
      StringBuffer stringBuffer0 = new StringBuffer("pmzj6{[?X*_LZ]KV");
      int int0 = (-2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "mW7BWv|N`";
      helpFormatter0.setArgName("mW7BWv|N`");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("mW7BWv|N`");
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter1 = stringWriter0.append(';');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 13, 1, "mW7BWv|N`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 1539, 62);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", " ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      Options options1 = options0.addOption("arg", "cmdLineSyntax not provided", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "(Z9GMPBc0p[TOk7[>:", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2492), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = "sP|t%";
      Options options0 = null;
      helpFormatter0.defaultNewLine = "o'bYKA~&~_:";
      Object object0 = new Object();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("o'bYKA~&~_:", "n(:a^x's%HC3 ", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, 10, 894, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      String string1 = "1g";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      options1.addOption("", false, (String) null);
      helpFormatter0.printHelp("^)/z'ajMFm,h*c>", " :: ", options1, "1g");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      Options options1 = options0.addOption("arg", "--", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption(option0);
      helpFormatter0.printHelp("usage: ", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.rtrim((String) null);
      int int0 = helpFormatter0.defaultDescPad;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = "sP|t%";
      helpFormatter0.defaultNewLine = "o'bYKA~&~_:";
      helpFormatter0.setArgName("o'bYKA~&~_:");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("mW7BWv|N`", options0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("1g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.setArgName("arg");
      helpFormatter1.findWrapPos("arg", 1093, 3);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1g";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setOptPrefix("[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = "sP|t%";
      int int0 = 818;
      String string0 = "o'bYKA~&~_:";
      helpFormatter0.defaultNewLine = "o'bYKA~&~_:";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 36, "sP|t%", "o'bYKA~&~_:", (Options) null, 36, 36, "o'bYKA~&~_:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintWriter printWriter0 = null;
      int int0 = (-839);
      helpFormatter0.defaultOptPrefix = "sP|t%";
      Options options0 = null;
      int int1 = 818;
      String string0 = "o'bYKA~&~_:";
      helpFormatter0.defaultNewLine = "o'bYKA~&~_:";
      int int2 = 366;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 36, "sP|t%", "o'bYKA~&~_:", (Options) null, 36, 36, "o'bYKA~&~_:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1118, " | ");
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "org.apache.commons.cli.Option";
      objectArray0[4] = (Object) byteArrayOutputStream0;
      mockPrintWriter1.format(locale0, "org.apache.commons.cli.Option", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1118, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      String string1 = "";
      Options options0 = new Options();
      int int0 = (-1516);
      options0.getOptionGroups();
      int int1 = (-1560);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1072), ", ", "   ", options0, (-1516), (-1560), ", ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      mockFileOutputStream0.close();
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("pmzj6{[?X*_LZ]KV");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "pmzj6{[?X*_LZ]KV");
      StringWriter stringWriter2 = stringWriter0.append('F');
      stringWriter2.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-2), "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "The option '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1, false);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) "arg", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1839);
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("1g");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      helpFormatter1.findWrapPos("arg", 1093, 3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = new Option("", "-");
      Options options0 = new Options();
      options0.addOption(option0);
      boolean boolean0 = false;
      String string0 = "t',FDSX^m!LAP+Cs";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "^)/z'ajMFm,h*c>", options0, "t',FDSX^m!LAP+Cs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0guE1_V");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1g";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "0guE1_V", objectArray0);
      Options options1 = new Options();
      String string0 = null;
      int int0 = 988;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1516), (String) null, "Fl!", options1, 988, 63, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1118, " | ");
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[5] = (Object) printWriter0;
      objectArray0[6] = (Object) options2;
      PrintWriter printWriter1 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter1.printUsage(printWriter1, 10, "\n");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp(", ", (String) null, options0, "");
      options0.addOption((String) null, " ", true, "-");
      helpFormatter0.printHelp(" ", "arg", options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(")Od$/0jf!}R.cG00", 9, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1118, " | ");
      Option option0 = new Option("", " ");
      options0.addOption(option0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, (-120), 10, "m");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      String string1 = "@jXVqXJhGjN25(";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "!cvQI7", "!cvQI7", (Options) null, "@jXVqXJhGjN25(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "cmdLineSyntax not provided", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption(option0);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      File file0 = MockFile.createTempFile("E@g,[8$", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append('y');
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 36, " | ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1g";
      Options options0 = new Options();
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1987, "", "", options0, "|E`5", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}kAPE$h~Voh9");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "N0lLvh_;";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "N0lLvh_;", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 7455, "N0lLvh_;");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("}kAPE$h~Voh9", false, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}kAPE$h~Voh9' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "mW7BWv|N`";
      helpFormatter0.setArgName("mW7BWv|N`");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      StringWriter stringWriter3 = stringWriter2.append('3');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      int int0 = (-2);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, (-2), "usage: ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string1 = "<<G";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter3;
      objectArray0[1] = (Object) stringBuffer1;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) stringWriter1;
      mockPrintWriter0.format("<<G", objectArray0);
      String string2 = "' was specified but an option from this group ";
      Options options0 = new Options();
      String string3 = null;
      Option option0 = null;
      try {
        option0 = new Option(">Jr<z},z", "(*@", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>Jr<z},z' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("-;/u[wxH/,[}2~q");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("usage: ", 31, 31);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1486));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("org.apache.commons.cli.Util", objectArray0);
      mockPrintWriter0.print("b-`#WI\"DahdrJ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = null;
      helpFormatter0.getSyntaxPrefix();
      String string1 = " [ARG]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", (String) null, (Options) null, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      String string1 = "1g";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      option0.setArgs(64);
      helpFormatter0.printHelp("^)/z'ajMFm,h*c>", " :: ", options1, "1g");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = (-1072);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1072), "", "   ", options0, (-1516), (-1072), "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println((-131.9));
      char[] charArray0 = new char[3];
      charArray0[1] = '}';
      charArray0[2] = ']';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setDescPadding((-1821));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine(" [ARG]");
      helpFormatter0.setArgName("6hHFY3");
      String string0 = ";ep";
      helpFormatter0.setLongOptSeparator(";ep");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "|~:%Rn @k!6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "mW7BWv|N`", "-", (Options) null, "uPO_&T");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      String string1 = ";~";
      helpFormatter0.setLongOptPrefix(";~");
      String string2 = "arg";
      int int1 = (-335);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", (-1), (-335));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println((-131.9));
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '}';
      charArray0[2] = ']';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2332), (Options) null, (-2332), (-2332));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("*2]fX(jF");
      helpFormatter0.getOptPrefix();
      String string0 = "line.separator";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      String string1 = "1g";
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("^)/z'ajMFm,h*c>", " :: ", options1, "1g");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "", false, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setDescPadding(31);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("-;/u[wxH/,[}2~q");
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ", ";
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) dataOutputStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 10;
      Options options0 = new Options();
      options0.getMatchingOptions("");
      boolean boolean0 = false;
      stringBuffer0.reverse();
      Option option0 = new Option("oHhQ", "arg", false, "_rLs$;Y!l(z;k?<");
      Options options1 = options0.addOption(option0);
      int int1 = 3306;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 2771, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A$%=E]sh", options0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("@S*c=>I#C0p,ZZo+'", options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      options1.hasShortOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--", false, "");
      options1.addOption(option0);
      Options options3 = options2.addOption("", "Y>w9LPBda#L@y", false, "usage: ");
      helpFormatter0.setDescPadding((-2));
      options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, (String) null, (String) null, options3, "Y>w9LPBda#L@y", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      options0.addOption(option0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", (String) null, (Options) null, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'E';
      charArray0[2] = 'Z';
      charArray0[3] = '&';
      charArray0[4] = 'o';
      charArray0[5] = 'C';
      charArray0[6] = 'a';
      charArray0[7] = 'w';
      charArray0[8] = '*';
      mockPrintWriter1.print(charArray0);
      int int0 = 0;
      int int1 = (-4236);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-4236), "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "mW7BWv|N`";
      helpFormatter0.setArgName("mW7BWv|N`");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      StringWriter stringWriter3 = stringWriter2.append('3');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "HL*}6FGr*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1112;
      StringWriter stringWriter0 = new StringWriter(1112);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int1 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1112, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.setNewLine(")Oq<p!i");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-55));
      helpFormatter0.rtrim("arg");
      Options options0 = new Options();
      options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "^";
          helpFormatter0.setLongOptPrefix("^");
          helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor66.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("]", "org.apache.commons.cli.AlreadySelectedException", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
