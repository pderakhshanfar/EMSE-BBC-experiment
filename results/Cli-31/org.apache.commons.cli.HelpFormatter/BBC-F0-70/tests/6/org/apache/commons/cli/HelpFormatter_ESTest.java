/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:37:16 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(10, ",XC<kxOYMKotep)", "", options0, "");
      helpFormatter0.findWrapPos("has already been selected: '", 10, 10);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "$L#vU3Zu/c";
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.printHelp(63, "$L#vU3Zu/c", "yuTE2l5", options0, "yuTE2l5");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option1 = new Option("", "");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(13);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLeftPadding();
      try { 
        MockFile.createTempFile("usage: ", "--");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 34;
      String string1 = "<EJc:T0";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("k0v9K:v", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k0v9K:v' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      String string0 = null;
      helpFormatter0.optionComparator = null;
      Options options2 = options1.addOption((String) null, (String) null, true, "%[wq$!Gg`.bC");
      String string1 = "Ez52Qa[5#%gy9 dUgj";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%[wq$!Gg`.bC", "%[wq$!Gg`.bC", options2, "Ez52Qa[5#%gy9 dUgj");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-499));
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      String string0 = "J,K}z&Ijz{1y\"X[E=8s";
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("J,K}z&Ijz{1y\"X[E=8s", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 117, 117, "org.apache.commons.cli.Option");
      helpFormatter0.setWidth(2117);
      helpFormatter0.renderWrappedText(stringBuffer1, 2117, (-481), "H-;[s Er}{8[");
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "H-;[s Er}{8[");
      stringBuffer2.append((Object) null);
      helpFormatter0.renderWrappedText(stringBuffer2, 1503, (-193), "org.apache.commons.cli.Option");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "z]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "R<RO:Q~~C`H3wx.&6.D";
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp("\n", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 11, options0, 3, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 3, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 34;
      String string1 = "<EJc:T0";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("k0v9K:v", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k0v9K:v' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      int int0 = 32;
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "[";
      Options options0 = null;
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "[";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) file0;
      PrintWriter printWriter1 = mockPrintWriter0.format((Locale) null, "[", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 32, "5G+yk(sV", "[", (Options) null, 2, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setSyntaxPrefix("f");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp(29, "jIu*W9%.[d:Bc", (String) null, options0, "%|.");
      // Undeclared exception!
      helpFormatter0.printHelp("918h.L+P)lil vo'L", "918h.L+P)lil vo'L", options0, "%|.", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2718));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 12;
      String string0 = "p ssipmFoSvuM";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 12, (-923), "p ssipmFoSvuM");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      int int0 = 3465;
      String string0 = "CSw>z]ul}C<o|";
      String string1 = "$qDO-uu@Q=UYe}s&e";
      Options options0 = new Options();
      String string2 = "n&MPud[E?'DSXT0:r};";
      // Undeclared exception!
      try { 
        options0.addOption("4.?-_[L&", "n&MPud[E?'DSXT0:r};", true, "Jw|3P*OCy~wo~p(zZz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4.?-_[L&' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "\n", "~0<?V,T;8Tsp", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1610);
      options0.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      helpFormatter0.defaultWidth = (-2);
      optionGroup0.addOption(option0);
      helpFormatter0.rtrim("BC\"c~l1I,h");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 932, 932, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Locale locale1 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "-", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[", true, "\n");
      Option option0 = new Option("", " ");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      options2.getMatchingOptions("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 24, (String) null, options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2371), "]", "]", options2, 1929, (-2371), "]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 34, options0, 34, 34);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 857, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)117;
      optionGroup0.setRequired(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options1, true);
      String string0 = helpFormatter0.defaultOptPrefix;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = "[";
      options2.getOption("[");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options2, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 18, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[", true, "\n");
      Option option0 = new Option("", " ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2371), "]", "]", options3, 1929, (-2371), "]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("22PgU", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 257, "kRjf>1", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("arg", "usage: ", false, "arg");
      options0.addOption("k", true, "\n");
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "arg";
      String string1 = "hGcwy_tnG2);";
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "hGcwy_tnG2);", false, "\n");
      Options options2 = options1.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "hGcwy_tnG2);");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "-6}#MO%Fb5+1=5r", "", options4, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-777));
      Options options1 = options0.addOption("arg", "arg", true, "org.apache.commons.cli.OptionValidator");
      options1.getOption("4/jMSh3Q=kLe{.p");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "-", options1, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 33, "usage: ", "", (Options) null, 31, 31, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("EMq", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("b");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ITALIAN;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Collection collection0 = options0.getOptionGroups();
      options0.hasOption("-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) collection0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "3nyF%";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 385, "3nyF%", "cN}SbOV", options0, 385, 385, ">", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 4048, 385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "[ option: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("EMq", options1, true);
      // Undeclared exception!
      try { 
        options0.addOption("--", "EMq", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TK5M'M&p");
      mockPrintWriter0.write(3);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "&Vv!i9R4U3=ZH9z/y[", options1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=%%nGb'9g;XP");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      File file0 = MockFile.createTempFile("arg", "9kC<6VNkh{<Lt5k");
      file0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.rtrim("^-Oq_8-,Z@=@U");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("k", true, "^-Oq_8-,Z@=@U");
      MockFile mockFile0 = new MockFile("arg", "k");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options1);
      helpFormatter0.rtrim("^-Oq_8-,Z@=@U");
      options0.addOption("", "$;RB'i VB>H!?", true, "");
      helpFormatter0.printHelp("<", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "3nyF%", "3nyF%", options0, 8, 3, " ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setDescPadding((-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, ":0VtRC/'!b", "|1H=Ga", options0, "|1H=Ga", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "--", options0, "-", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      int int0 = (-3507);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1699), "arg", "arg", options0, (-3507), 1188, "s[X(Lf\"c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(123);
      helpFormatter0.setDescPadding(123);
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption("arg", false, " ");
      Options options3 = options2.addOption("", false, "usage: ");
      options3.getOptionGroups();
      helpFormatter0.printHelp(123, "#RTT|58q>WI9\"8Jg#!E", (String) null, options3, "--");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(";~wyN)=cR}GOi");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 169, (String) null, "3nyF%", options0, 8, 3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.setSyntaxPrefix("7j}U");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("]");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 8, "3nyF%", "", options0, 914, 8, (String) null, true);
      helpFormatter0.printHelp(8, "[", (String) null, options0, "TK5M'M&p", true);
      StringBuffer stringBuffer0 = new StringBuffer("z2}6C8X@(-Pu");
      Option option0 = new Option((String) null, "GG94<8Q%*6bg_el");
      options0.addOption(option0);
      helpFormatter0.findWrapPos("*tQ.<+jlQFff_A`Tn", 1503, 2203);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("", 384, 384);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-487), "", "-", options0, (-487), 1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = " | ";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" | ");
      String string1 = "d(tOW";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 8, "--", (String) null, options0, 2, 1598, "3nyF%", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1913), "--", (String) null, options0, "d(tOW", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setSyntaxPrefix("--");
      String string0 = "TK5M'M&p";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("TK5M'M&p");
      String string1 = "d(tOW";
      String string2 = "--";
      int int0 = 8;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d(tOW", "^0<.", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding((byte)63);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("TK5M'M&p");
      FileSystemHandling.createFolder(evoSuiteFile0);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printWrapped(printWriter0, 8, "D");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("Ui#5ZYQ6M~7");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("", "[ option: ");
      Options options1 = options0.addOption(option0);
      options1.addOption("", false, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "9kC<6VNkh{<Lt5k", options0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      int int0 = 321;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 321, " ", " ", options0, 74, 326, "[ Options: [ short ", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options: [ short ", " ", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 32, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", false, "usage: ");
      helpFormatter0.printHelp(156, "#RTT|58q>WI9\"8Jg#!E", (String) null, options3, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(85, (String) null, "", options2, "CY)Gw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      String string1 = ":0VtRC/'!b";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", ":0VtRC/'!b", options0, "|1H=Ga", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption((String) null, true, "R8*");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1805, "--", "`+cc5?", options2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 33;
      String string0 = "R]`23'5TK9W";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(828, "[", "", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*&mU$_9G!Y>Z$iVod";
      helpFormatter0.setDescPadding(3479);
      helpFormatter0.setLongOptSeparator("*&mU$_9G!Y>Z$iVod");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*&mU$_9G!Y>Z$iVod", "*&mU$_9G!Y>Z$iVod", (Options) null, "*&mU$_9G!Y>Z$iVod", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      String string1 = "px@Q)WOr";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      mockPrintWriter0.write("-");
      mockPrintWriter0.println(2031L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.println((float) 1);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "d(tOW", "Illegal option name '", options0, 914, 3, "O7?|ujr2", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("I|x.X>OLv@G", "\n", options1, "onwKu=z@1Au&1W:8+");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("arg", objectArray0);
      Options options2 = new Options();
      Options options3 = options0.addOption("", false, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "]", options3);
      helpFormatter0.rtrim("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.findWrapPos("cX7*9:1rWk!\"M5", 66, 20);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      mockPrintWriter0.write("-");
      mockPrintWriter0.println(2031L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.println("");
      options0.addOption("arg", false, "G2dZ6,!v8S#|DK");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-80), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      String string0 = "^-Oq_8-,Z@=@U";
      Options options1 = options0.addOption("k", true, "^-Oq_8-,Z@=@U");
      File file0 = MockFile.createTempFile("arg", "9kC<6VNkh{<Lt5k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-630), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 156, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.Options");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/org.apache.commons.cli.Options");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("TK5M'M&p");
      int int0 = 8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 914, (-1419), " ");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", ">OA~", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setSyntaxPrefix("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("TK5M'M&p");
      int int0 = 914;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "3nyF%", "3nyF%", options0, 8, 3, "d(tOW", true);
      helpFormatter0.printHelp(8, "TK5M'M&p", "--", options0, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Option option0 = null;
      try {
        option0 = new Option("#BPX", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#BPX' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      int int1 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int2 = 44;
      int int3 = 4;
      helpFormatter0.renderOptions(stringBuffer0, 44, options1, 13, 4);
      MockPrintWriter mockPrintWriter2 = null;
      try {
        mockPrintWriter2 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      Options options1 = new Options();
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "arg", "kF)svG|0E", options0, "arg", false);
      StringBuffer stringBuffer0 = new StringBuffer("kF)svG|0E");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 3, options1, 1, 3);
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "g", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "--", options0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      String string1 = "px@Q)WOr";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      mockPrintWriter0.write("-");
      mockPrintWriter0.println(2031L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "d(tOW", "Illegal option name '", options0, 914, 3, "O7?|ujr2", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setSyntaxPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("oTUfp_");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.println("--");
      Options options1 = options0.addOption("oTUfp_", "arg", true, "--");
      Option option0 = new Option("", "--", true, "px@Q)WOr");
      options1.addOption(option0);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption("", (String) null, true, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 57, 914);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      String string1 = "px@Q)WOr";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      mockPrintWriter0.write("-");
      mockPrintWriter0.println(2031L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "d(tOW", "Illegal option name '", options0, 914, 3, "O7?|ujr2", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("b=E", options0);
      Options options1 = new Options();
      Options options2 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "O+-8iF PJ72yT", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "<";
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "uT=~pIX~MY", objectArray0);
      helpFormatter0.printHelp(printWriter0, 926, "w1 v)eK*x`=y?", "<", options0, 926, 926, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, ", ", "w1 v)eK*x`=y?", options1, (-451), 1, "wiH@h'BC?+|:$4-lKo");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("7_j'9tbMRo^=dEhd", "UXnYG`m:OuQ5f'L8r", options1, "org.apache.commons.cli.AlreadySelectedException", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Options options2 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile("arg", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = (-504);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, ";?b", options1, 605, (-504), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 2013;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2013, "-", "org.apache.commons.cli.HelpFormatter", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "[";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 156, "d6f1pg$U)e S{*yf");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1), (Options) null, 3, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.setSyntaxPrefix("--");
      String string0 = "TK5M'M&p";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("TK5M'M&p");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      int int0 = 914;
      String string1 = "--";
      int int1 = 8;
      Options options0 = new Options();
      int int2 = (-2087);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "3nyF%", "3nyF%", options0, 8, (-2087), "d(tOW", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      int int0 = (-2991);
      String string1 = "px@Q)WOr";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      String string3 = "' was specified but an option from this group ";
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      mockPrintWriter0.println(true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string4 = "d(tOW";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2991), "d(tOW", "Illegal option name '", options0, 914, (-2991), "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      options0.getMatchingOptions("-");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.OptionGroup", " | ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, " | ", " | ", options0, 47, 47, "UB ~}Ze4!");
      helpFormatter0.rtrim(",;{T$,a%[c{");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      helpFormatter0.printOptions(mockPrintWriter1, 3, options0, 115, 1098);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "uT=~pIX~MY", objectArray0);
      helpFormatter0.printHelp(printWriter0, 926, "w1 v)eK*x`=y?", "<", options0, 926, 926, "");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("", 384, 384);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      int int0 = 0;
      String string1 = "px@Q)WOr";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O7?|ujr2");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "d(tOW", "Illegal option name '", options0, 914, 0, "--", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      stringWriter0.write("-");
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3335, "OSm-EOnCh(RGZ|@");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "<", "", options1, 0, 926, "OSm-EOnCh(RGZ|@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 3, 615);
      helpFormatter1.renderOptions(stringBuffer1, 0, options0, 74, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1163), options0, (-4368), 1223);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 3, 615);
      helpFormatter0.renderWrappedText(stringBuffer0, 1167, (-30), "usage: ");
      helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 824);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2375);
      options0.hasShortOption((String) null);
      Options options1 = options0.addOption("", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(156, "#RTT|58q>WI9\"8Jg#!E", (String) null, options3, "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("\n", "", options1, "", false);
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.Options");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, "\n", "", options1, 47, 0, ";?b");
      helpFormatter0.rtrim(" | ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 47, options0, (-930), (-533));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "OSm-EOnCh(RGZ|@", "}n kj32$}9EL\"=k-P", options1, 64, 64, "NlMTGuA:[yzO ,xn");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Option option0 = new Option("", "usage: ", false, "-");
      String string0 = "HHk9";
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.setLeftPadding((-2));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1619), " ] [ long ", "dP7", options0, 31, 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setDescPadding(156);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "usage: ");
      helpFormatter0.printHelp(156, "#RTT|58q>WI9\"8Jg#!E", (String) null, options3, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2130), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      String string0 = "";
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      String string1 = "=8'&>uh,I^g";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "=8'&>uh,I^g", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)72;
      mockPrintStream0.write(byteArray0, 3, 74);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "AN!K:Nk7]wkd";
      PrintStream printStream0 = mockPrintStream0.format("s|N&`LGi',^{N)7;", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 44, (-3845), "I{Tb@t;Cs.VIG,X");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("\n", "", options1, "", false);
      String string0 = null;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1356, "OSm-EOnCh(RGZ|@", "", options0, 0, 1356, "3p4n}0CE\"{#[");
      helpFormatter0.rtrim(";@|:(Y>d.T)IY`<:");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "t^~T'Y{.0??] 2r&Q>";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setArgName("<");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      String string1 = "--";
      // Undeclared exception!
      try { 
        options0.addOption(" ", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[ option: ";
      String string0 = "   ";
      helpFormatter0.setArgName("   ");
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      int int0 = (-1);
      String string2 = "c-n^Ep.Z&w |Wr";
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 71, "Zf7d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options1 = new Options();
      String string0 = "T'1L}JS";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "T'1L}JS", (String) null, options0, 0, 1857, "T'1L}JS");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setLongOptSeparator("^i%qsIRPAMg.d6");
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      int int0 = 0;
      stringWriter0.write(" [ARG]", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      String string0 = "";
      int int1 = 0;
      mockPrintWriter0.checkError();
      stringWriter1.write("", 0, 0);
      int int2 = 1167;
      Options options0 = new Options();
      stringWriter2.flush();
      options0.helpOptions();
      String string1 = "/W";
      boolean boolean0 = true;
      String string2 = "}.~W~qM4";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " sT~@bk8", "", options0, (-1099), (-1967), "/W");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "H;?";
      helpFormatter0.setLongOptPrefix("H;?");
      int int0 = 203;
      String string1 = "w\"HfaiQ7F\\'@cWMajM";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      options1.addOption((String) null, "w\"HfaiQ7F'@cWMajM", true, "Tk}bk~!Sleu|");
      // Undeclared exception!
      try { 
        options1.addOption("H;?", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'H;?' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      int int0 = 0;
      helpFormatter0.defaultOptPrefix = "--";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "px@Q)WOr", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("-");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-4491), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-2);
      String string0 = "A CloneNotSupportedException was thrown: ";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "");
      Options options1 = options0.addOption(option0);
      String string2 = "";
      Options options2 = options1.addOption("", "\n", false, "usage: ");
      // Undeclared exception!
      try { 
        options2.addOption("[", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 31, "");
      assertEquals(8L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L+J/FU}a\"JF1i8");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(156);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 156, (-795), "AN!K:Nk7]wkd");
      assertEquals("AN!K:Nk7]wkd\n", stringWriter0.toString());
      
      helpFormatter0.getOptionComparator();
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 3, 615);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 3, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Option");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.codePoints();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-239), (-1008), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rP5Qxt\\%Cq";
      helpFormatter0.setOptPrefix("rP5Qxt%Cq");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", "--", true, "rP5Qxt%Cq");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      String string2 = null;
      optionGroup0.setRequired(false);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3642);
      String string0 = "{z9x|2d{ ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3642), "{z9x|2d{ ", "{z9x|2d{ ", options0, "{z9x|2d{ ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1089));
      Comparator<Integer> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      String string0 = "479(m}QS=nCi'h15";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "6yM+Ad-7z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ">";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", ">", (Options) null, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 46, "J(/HBbuz \"*9Hel_q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1356, "OSm-EOnCh(RGZ|@", "", options0, 0, 1356, "3p4n}0CE\"{#[");
      assertEquals("usage: OSm-EOnCh(RGZ|@\n\n3p4n}0CE\"{#[\n", stringWriter0.toString());
      
      helpFormatter0.rtrim("");
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("iPm$POX^k{[?4");
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "-");
      char[] charArray0 = new char[0];
      stringBuffer0.append(charArray0);
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "iPm$POX^k{[?4", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.setLongOptSeparator("' was specified but an option from this group ");
      int int0 = 1019;
      String string1 = "Zg\\q6k";
      String string2 = "oIDPZ}";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1019, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("UB ~}Ze4!", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "--", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
