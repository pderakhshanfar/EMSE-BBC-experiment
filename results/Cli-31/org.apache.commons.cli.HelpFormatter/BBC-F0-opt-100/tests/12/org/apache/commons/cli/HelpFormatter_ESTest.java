/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:52:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getArgName();
      helpFormatter0.defaultArgName = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setWidth((-490));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(42);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultDescPad = 33;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(",%", "--", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',%' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", "[", options0, "[", false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "[", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3699);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~n", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      options1.hasOption("");
      helpFormatter0.printHelp("-", "-", options1, "-", true);
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 74;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 74);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "69'lFW{N@U;{KFwIe>");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("69'lFW{N@U;{KFwIe>");
      helpFormatter0.printHelp(")", "69'lFW{N@U;{KFwIe>", options1, ")", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-1), ")");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2864));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^ zeUbngT`C?`[zeY", "", options0, "^ zeUbngT`C?`[zeY", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding(67);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1327, "\n", "\"", options0, 577, 577, (String) null, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer0, 0, 32, "\n");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "69'lFW{N@U;{KFwIe>");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.comms.cli.AlreadySelectedException");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) optionGroup1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = (Object) "org.apache.comms.cli.AlreadySelectedException";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "69'lFW{N@U;{KFwIe>";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "'PM!ilt\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "t#_m{+\"R(t3cT~$sK", " ", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      options0.addOption("", "arg", true, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")\">kN@92J_a%|]");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2237, "arg", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "waKg'tO})-ll7", "2#1rdb'vI#623=", options0, 36, 34, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "", ")\">kN@92J_a%|]", options0, 36, (-910), "~e$Yeb;GS)6hyMmU1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("(", options2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 34, "\"", "--", options0, 1322, 3, "--", true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1101, "\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(37, "--", "usage: ", options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 49;
      String string0 = "AQ(<t";
      String string1 = ":`_JVZ Xx";
      Options options0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 49, "\"", "AQ(<t", (Options) null, (-1289), 49, ":`_JVZ Xx");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\"F_CY7");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "--", (String) null, options0, (-3967), (-1), "gAee~`eC", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[%9[\"amY?.<DY0*", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "Y?D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".w:");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("[}<oT5z0uvX'B+i");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ", "-", options0, 34, 74, "h26_4m", true);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "zO}", "", options0, 2509, (-1158), "l<[FDfnC|[?", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "$]F8/]F}P6j6IM/+Mb", true, "Y?D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".w:");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options2 = options1.addOption("arg", true, "$]F8/]F}P6j6IM/+Mb");
      helpFormatter0.printHelp(99, "Y?D", "arg", options2, "*|=;gC9[H)4|]6dI", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ", ";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) ", ";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 656, (String) null, "", options0, 31, 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 5, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 5, (Options) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "]";
      int int0 = 29;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (-463), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "$]F8/]F}P6j6IM/+Mb", true, "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".w:");
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-503), "]m>1[@h7wTjDAcb@u", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1186, "usage: ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(378);
      StringBuffer stringBuffer0 = new StringBuffer(378);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultArgName = "--";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "--", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "", options0, ":<37.~U&Q", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.append('>');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "'", "--", options0, 0, 39, "`GX\"8}2k1nD+%V", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(378);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Option option0 = new Option("", " ", true, " ] [ long ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\\t-m#I~+Cb}]Zp]*~", "[ARG...]", options1, " ] [ long ", true);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 0, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(378);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", " ] [ long ", false, "usage: ");
      Option option1 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option1);
      String string0 = "\"T?;Ba8t+oNbM5rM\\uo";
      helpFormatter0.printHelp(string0, "[ Options: [ short ", options1, "[ Options: [ short ", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(378);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "a");
      options0.addOption(option0);
      Option option1 = new Option("", " ", true, " ] [ long ");
      Options options1 = options0.addOption(option1);
      helpFormatter0.printHelp("\\t-m#I~+Cb}]Zp]*~", "[ARG...]", options1, " ] [ long ", true);
      helpFormatter0.getArgName();
      helpFormatter0.renderWrappedText(stringBuffer0, 378, 31, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option((String) null, "[J$E;.8eD3W i7'm#aY", false, "YEnCPsX2huJJLY&u>54");
      options0.addOption(option1);
      helpFormatter0.printHelp("The option '", "The option '", options1, "", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " | ", false);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.createPadding(881);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence
      StringWriter stringWriter2 = stringWriter1.append('\"');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) nulloptions0, 1, 31, "RN6$@H'8$&4u(kIz4", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('\"');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 48, "empBw%5;,q+RAy", "empBw%5;,q+RAy", options0, 48, (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter3 = stringWriter0.append('Z');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 3, 5, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 35, "", "9?lBwyIj", options0, 5, 4283, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "2(ErM)vubjn<C", "2(ErM)vubjn<C", options0, "RJ,!%}$EiYWs0[");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      Options options1 = new Options();
      options1.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options2 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options2, "", true);
      Options options3 = new Options();
      helpFormatter0.printHelp("\n", "", options3, "", true);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1, false);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-of-", "", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, 44, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "0P&tOXVY");
      option0.setArgName(" ");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "--", options0, "", true);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1945, options1, 1945, 1945);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, 3, "1cdj=0O!L.Dwdll&q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "69'lFW{N@U;{KFwIe>");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-870), "org.apache.commons.cli.AlreadySelectedException", "9?lBwyIj", options0, (-1528), (-1528), "r.i:WY-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter0.append('Z');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 3, 5, "\n");
      Options options0 = new Options();
      helpFormatter2.printHelp("<", "arg", options0, "", false);
      helpFormatter1.getArgName();
      PrintWriter printWriter0 = null;
      String string0 = "{&_%oza(nO}XE93sh";
      Options options1 = options0.addOption("arg", "", true, "{&_%oza(nO}XE93sh");
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 3, ",i", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(1313);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("--", " ", options0, "usage: ", true);
      helpFormatter1.getArgName();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 3212, "TY9!nbFw", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter3 = stringWriter0.append('Z');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 3, 5, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "I");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 44, "-", "org.apache.commons.cli.HelpFormatter", options1, (-1), (-167), "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(215);
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 1, "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "usage: ", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(1313);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.createPadding(1);
      helpFormatter0.setLongOptSeparator("\n");
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "\"I]-\"xY>U<b=?y3N";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter4.printUsage(printWriter0, 19, "!EN'", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "8J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", "%4#nVe;&*t", true, "u4=>kA60(");
      helpFormatter0.setLongOptSeparator("Sts+Bg4RB2rWj.g(o");
      helpFormatter0.printHelp("tg", "", options0, "tg", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", "%4#nVe;&*t", true, "u4=>kA60(");
      helpFormatter0.setLongOptSeparator("=^<-fTb");
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "tg", options0, "The option '", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-2391));
      helpFormatter0.getArgName();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, (-828), options0, 3, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, (-2), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("arg");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.renderWrappedText(stringBuffer0, 101, (-1012), "");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1012), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "0P&tOXVY");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("\\t-m#I~+Cb}]Zp]*~", "", options2, " ] [ long ", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options2 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options2, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~\u0003Ch*", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "wZ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 14, "wZ", "Q{1#:2t", options0, 2, 14, "]");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "");
      helpFormatter0.findWrapPos("wZ", 14, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(134, (String) null, " | ", options1, "zmuKLtu458OcAEJ)E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-954));
      helpFormatter0.createPadding(600);
      helpFormatter0.setLongOptSeparator
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("", 600, 10);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(46, " ", "--", options0, "`6nM:8O^Z1P6U^4J%,");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write(569);
      helpFormatter0.setDescPadding((-1919));
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("L{@e>|ri)(.", "L{@e>|ri)(.", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-954));
      StringBuffer stringBuffer0 = new StringBuffer("p&@_`W");
      helpFormatter0.renderWrappedText(stringBuffer0, 1877, 1877, "");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 116, (-1462), "");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 438, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-929), 116, "p&@_`W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("RvZ}YT", "09", options1, "]Wl2:J3]", false);
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("]Wl2:J3]", 32, 33);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "09", "09", options3, "]Wl2:J3]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "E5n-7", true, "--");
      helpFormatter0.printHelp("RvZ}YT", "09", options1, "]Wl2:J3]", false);
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("]Wl2:J3]", 32, 33);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "09", "09", options3, "]Wl2:J3]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = null;
      helpFormatter0.defaultDescPad = 34;
      Options options1 = options0.addOption((String) null, "E5n-7", true, "--");
      String string1 = "]Wl2:J3]";
      helpFormatter0.printHelp("RvZ}YT", "09", options1, "]Wl2:J3]", true);
      Options options2 = new Options();
      Options options3 = null;
      helpFormatter0.defaultNewLine = null;
      String string2 = "";
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter1.createPadding(1);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setLeftPadding(93);
      StringBuffer stringBuffer0 = new StringBuffer("The option '");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer0, 3, 3, "\n");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("j_", false, "-");
      helpFormatter2.printHelp(" ", options2, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "\n", true, "E5n-7");
      options1.getOptionGroups();
      helpFormatter0.printHelp("\n", "];^]o", options1, "", true);
      Options options2 = new Options();
      Options options3 = new Options();
      options2.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1481), "", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "E5n-7", true, "--");
      helpFormatter0.printHelp("RvZ}YT", "09", options1, "]Wl2:J3]", false);
      Options options2 = new Options();
      helpFormatter0.defaultNewLine = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "]Wl2:J3]", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1877);
      StringBuffer stringBuffer0 = new StringBuffer("   ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1877, (-1683), "(x^cC=3#C#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")A%AO=");
      helpFormatter0.printOptions(mockPrintWriter0, (-1683), options0, 3, 2293);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options1, "", true);
      Options options2 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8e{6JN`");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "];^]o", options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1910);
      StringBuffer stringBuffer0 = new StringBuffer("   ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1910, (-1683), "(x^cC=3#C#");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 7, "   ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1683), "   ", (String) null, options0, "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(4021);
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1402;
      helpFormatter1.renderWrappedText(stringBuffer0, 1402, (-5261), "arg");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter1.renderWrappedText(stringBuffer1, 12, 1402, "--");
      helpFormatter1.getArgName();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.findWrapPos("AfNf#H3+Qv", 4021, 34);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = (-837);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-837), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, 2, (-837), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-7236), "(5KR{f&1G$'-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 4021;
      String string0 = "09";
      Options options0 = new Options();
      int int1 = (-2725);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-710), "", "", options0, (-2725), (-690), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "\\t-m#I~+Cb}]Zp]*~", options0, "\\t-m#I~+Cb}]Zp]*~", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setSyntaxPrefix("");
      helpFormatter0.createPadding(18);
      helpFormatter0.setLongOptSeparator("LD,!Yn:?]a?,");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter2.renderWrappedText(stringBuffer0, 20, 13, "usage: ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "-", "--", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-3117);
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[", (-3117), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('Y');
      stringWriter2.write(2516);
      stringWriter0.flush();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.renderWrappedText(stringBuffer0, 1835, 2, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.Option", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 115;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 115, "tKw!SZx}$1vqt[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "gWMuxM", false);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 4021;
      String string0 = "";
      String string1 = "09";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 14, "09", "", options0, 14, 4021, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('Y');
      stringWriter2.write(2516);
      stringWriter0.flush();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.renderWrappedText(stringBuffer0, 1835, 2, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("=");
      Options options0 = new Options();
      helpFormatter0.printHelp("=", options0);
      helpFormatter0.createPadding(13);
      String string0 = "' contains an illegal character : '";
      Option option0 = new Option("", "' contains an illegal character : '", false, "-");
      String string1 = "F<R6e=LO,v/@.";
      helpFormatter0.optionComparator = comparator0;
      option0.setArgName(":[:");
      Options options1 = options0.addOption(option0);
      options1.toString();
      String string2 = "";
      // Undeclared exception!
      try { 
        options1.addOption("' contains an illegal character : '", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options2 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options2, "", true);
      Options options3 = new Options();
      helpFormatter0.printHelp("\n", "", options3, "", true);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1, false);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 0;
      helpFormatter0.createPadding(2440);
      helpFormatter1.setLongOptSeparator("--");
      int int1 = 716;
      helpFormatter1.setLeftPadding(716);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 2, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(1368);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(1368);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      int int0 = 1531;
      int int1 = 9;
      helpFormatter0.createPadding(9);
      helpFormatter0.setWidth(1531);
      helpFormatter0.setNewLine(" [ARG]");
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile((File) null, " [ARG]");
      File file0 = MockFile.createTempFile(" [ARG]", "*y5Er", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1531, "");
      Options options0 = new Options();
      options0.addOption("", "-", true, "");
      Option option0 = null;
      try {
        option0 = new Option("]Z.*", "-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ']Z.*' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 366;
      StringWriter stringWriter0 = new StringWriter(366);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      int int1 = 32;
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 32, 366, "");
      stringWriter0.close();
      helpFormatter0.renderWrappedText(stringBuffer2, 2446, 7, "");
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 366, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "];^]o";
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      options0.addOption("arg", "\n", true, "];^]o");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 29, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 391, options0, 391, (-540));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.setLeftPadding(438);
      helpFormatter0.setSyntaxPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.createPadding(438);
      helpFormatter0.setLongOptSeparator("%_g^e");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "NO_ARGS_ALLOWED", 3, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 438;
      helpFormatter0.setLeftPadding(438);
      helpFormatter0.setSyntaxPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.createPadding(438);
      helpFormatter0.setLongOptSeparator("%_g^e");
      int int1 = 3;
      helpFormatter0.setLeftPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 2874, "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      options0.hasOption("usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options1, "", true);
      Options options2 = new Options();
      helpFormatter0.printHelp("\n", "", options2, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-97));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append(':');
      stringWriter1.write((-97));
      helpFormatter0.setDescPadding((-97));
      stringWriter1.flush();
      stringWriter2.append((CharSequence) "\n");
      stringWriter0.write("t?e&'l");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.setNewLine("t?e&'l");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-97), "]");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setWidth(45);
      helpFormatter0.getLongOptPrefix();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Option option0 = new Option("", false, "");
      option0.setArgName("9XO'{");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(1744);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, 604, (-3768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasOption("usage: ");
      helpFormatter0.setDescPadding(625);
      options0.hasShortOption("");
      helpFormatter0.printHelp("KYwFAftZR)q(ByS", "KYwFAftZR)q(ByS", options0, (String) null);
      helpFormatter0.setLongOptSeparator("");
      int int0 = 3;
      helpFormatter0.setLeftPadding(179);
      StringBuffer stringBuffer0 = new StringBuffer("bt^#^:{i6~6!z-l;ip");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gBZU";
      String string1 = "";
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "aX%, C/vTPt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "(5KR{f&1G$'-");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("arg");
      helpFormatter0.createPadding(0);
      helpFormatter1.setLongOptSeparator("");
      helpFormatter2.setLeftPadding((-2842));
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter2.renderWrappedText(stringBuffer0, 18, 0, "--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderWrappedText(stringBuffer0, 3, 3, "usage: ");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gBZU";
      PrintWriter printWriter0 = null;
      String string1 = "(5KR{f&1G$'-";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "(5KR{f&1G$'-");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      options0.hasOption("usage: ");
      Options options1 = options0.addOption(option0);
      options0.hasOption("Ku6MA9");
      option0.setArgName("9XO'{");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "b2", options1, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = (-2156);
      String string1 = "=FSlJ#8.!%";
      String string2 = "yTcdLMhb#r";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      int int1 = helpFormatter0.getWidth();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, int1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "mfD|nA 6F+@M9 A(";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "v";
      // Undeclared exception!
      try { 
        options0.addOption("mfD|nA 6F+@M9 A(", "-", true, "v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'mfD|nA 6F+@M9 A(' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1368);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setDescPadding(1368);
      String string0 = helpFormatter1.defaultOptPrefix;
      helpFormatter1.setWidth(1368);
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 424, (-2858), "6%Avf}A");
      assertEquals("-", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-97));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append(':');
      stringWriter1.write((-97));
      helpFormatter0.setDescPadding((-97));
      stringWriter1.flush();
      stringWriter2.append((CharSequence) "\n");
      stringWriter0.write("t?e&'l");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.setNewLine("t?e&'l");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-97), "]");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      options1.getOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-97), "", "t?e&'l", options1, "]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setWidth(1368);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(1368);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      helpFormatter0.createPadding(9);
      helpFormatter0.setWidth(1531);
      helpFormatter0.setNewLine(" [ARG]");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1368, helpFormatter0.defaultDescPad);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLeftPadding(74);
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.createPadding(74);
      helpFormatter0.setLeftPadding(1107);
      helpFormatter1.setLongOptSeparator((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "arg");
      helpFormatter1.getArgName();
      assertEquals(74, helpFormatter1.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("vk5");
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      assertEquals("vk5", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = "[qt;0*nY/&uc]S.";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 242, 242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?i<Ix]$f>_\"7WfO9~4";
      helpFormatter0.rtrim("?i<Ix]$f>_\"7WfO9~4");
      helpFormatter0.getLeftPadding();
      String string1 = "|'?%hcdf";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption(" ", true, "JSBf>qJ80?m)bi6z/nS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("cbVRzx7]KP");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(0);
      assertEquals("cbVRzx7]KP", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-4574);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-4574), options0, 2288, (-4574));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      String string1 = ",p*;2hZ<R";
      String string2 = "";
      boolean boolean0 = false;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, options0, 31, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-799), (-799), "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "];^]o";
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "\n", true, "E5n-7");
      helpFormatter0.printHelp("\n", "];^]o", options1, "", true);
      helpFormatter0.setLongOptPrefix("p-rQcCAgIVHw6X!kic");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      MockFile mockFile0 = new MockFile((File) null, "\n");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, ">");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(438);
      helpFormatter0.setSyntaxPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.createPadding(438);
      helpFormatter0.setLongOptSeparator("%_g^e");
      helpFormatter0.setLeftPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1683), "                                                                                                                                                                                                                                                                                                                                                                                                                                                      ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(2665);
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.createPadding(2106);
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.setLeftPadding(2665);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1683), 2106, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "KYwFAftZR)q(ByS";
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasOption("usage: ");
      options0.hasShortOption("");
      helpFormatter0.printHelp("KYwFAftZR)q(ByS", "KYwFAftZR)q(ByS", options0, (String) null);
      int int0 = (-1248);
      Options options1 = options0.addOption((String) null, (String) null, true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1248), "", "", options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "arg");
      options0.addOption(option0);
      String string2 = "z6Tv";
      MockFile mockFile0 = new MockFile("z6Tv");
      String string3 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2999);
      helpFormatter0.setWidth((-2999));
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2999), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
